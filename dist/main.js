(function webpackUniversalModuleDefinition(root, factory) {
	if(typeof exports === 'object' && typeof module === 'object')
		module.exports = factory((function webpackLoadOptionalExternalModule() { try { return require("sharp"); } catch(e) {} }()), (function webpackLoadOptionalExternalModule() { try { return require("canvas"); } catch(e) {} }()), (function webpackLoadOptionalExternalModule() { try { return require("electron/common"); } catch(e) {} }()));
	else if(typeof define === 'function' && define.amd)
		define(["sharp", "canvas", "electron/common"], factory);
	else if(typeof exports === 'object')
		exports["NyusNecroJobGauge"] = factory((function webpackLoadOptionalExternalModule() { try { return require("sharp"); } catch(e) {} }()), (function webpackLoadOptionalExternalModule() { try { return require("canvas"); } catch(e) {} }()), (function webpackLoadOptionalExternalModule() { try { return require("electron/common"); } catch(e) {} }()));
	else
		root["NyusNecroJobGauge"] = factory(root["sharp"], root["canvas"], root["electron/common"]);
})(self, (__WEBPACK_EXTERNAL_MODULE_sharp__, __WEBPACK_EXTERNAL_MODULE_canvas__, __WEBPACK_EXTERNAL_MODULE_electron_common__) => {
return /******/ (() => { // webpackBootstrap
/******/ 	var __webpack_modules__ = ({

/***/ "./asset/data/Adrenaline_Potion-noborder.data.png":
/*!********************************************************!*\
  !*** ./asset/data/Adrenaline_Potion-noborder.data.png ***!
  \********************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

module.exports=(__webpack_require__(/*! alt1/base */ "../node_modules/alt1/dist/base/index.js").ImageDetect.imageDataFromBase64)("iVBORw0KGgoAAAANSUhEUgAAABsAAAAbCAIAAAACtmMCAAAAAW5vUEUAYtdMlAAAAAlub1BFAAAAAAAAAAAAoYpy1QAAAkRJREFUeJyd1s+K00AcB/CoiNX+EV28iEVowVssKou6jWBrQVpc2NatUJa2dikeCgUPFcEeRFSKoAfx4EH0EQQfwrMv4St497t8s9/+Mpld65YvZZhkPpnJTDIJ6lcyW9dPMIPopDKun5o0/MEhxJ4sAVpgLSmz5ulVogtYNxBnrfnmGeR1J4cEwTEb1PAoI1doLFqLkLi3zzeUJ72rRBmhdGNRHXS4d48K73sFtP+6aCBWRD2CE+RS5PCDNEcL+dQ/R/Hjm4SI+oNQjyiL3Lb5tZoP7ty7jxCla9GlKI6949lfxhfQcjgcMUKv3dxAPY4KdUUM/hBxNJ4iQlEOwwpFohyTBg4tIVqOQePZ5+/IZPFtMP9QbXXF2W5y7LHIm5ju4NFEaEtRfVSDf4pC/aL6aDlAiMR6dzfdx1VFTQtRibeiu7lsVqfZGed0e0bNoNm0XEaIgus/e4XVw8oXtYtEbR9d0c4MuV/r6wjR9tOXWD22kuh/iMPyZbT8E0X4RxmDdWrSYnwfuR7tqHEHMca9hZ0kbJlPjvPYJET7UGuKW4+nD4vFn5XK7/2gjBr0l8vImZZ4hTvPNTuoyUVjEBJRrt6OMOP1zg5RLe+EaN896iD7WFu79KNUkogyavD6ASrR8+7xipYjZMscOFHP+5EblkXB3SjlRYRr50Hg39bwJeR5h6f3GSSfOc72bIwxYnnj3tlKnOPfZ7x7IUKULbUR2kpe3nJLMb1fM+3wLKKOszEreW3/fn3INwXj/aBwPivsN8VfiutS2pOiT88AAAAASUVORK5CYII=")

/***/ }),

/***/ "./asset/data/Affliction-noborder.data.png":
/*!*************************************************!*\
  !*** ./asset/data/Affliction-noborder.data.png ***!
  \*************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

module.exports=(__webpack_require__(/*! alt1/base */ "../node_modules/alt1/dist/base/index.js").ImageDetect.imageDataFromBase64)("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")

/***/ }),

/***/ "./asset/data/Ancient_Elven_Ritual_Shard-noborder.data.png":
/*!*****************************************************************!*\
  !*** ./asset/data/Ancient_Elven_Ritual_Shard-noborder.data.png ***!
  \*****************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

module.exports=(__webpack_require__(/*! alt1/base */ "../node_modules/alt1/dist/base/index.js").ImageDetect.imageDataFromBase64)("iVBORw0KGgoAAAANSUhEUgAAABsAAAAbCAYAAACN1PRVAAAAAW5vUEUAYtdMlAAAAAlub1BFAAAAAAAAAAAAoYpy1QAAA0ZJREFUeJzt1clPE2EYx/F3OoOBukCMB6MGiSIpIUS0UJClLKWspQItewCD7FAqUITSAkVAKwgUEY1FXDAat8Ql8a8wHj14MB5MPOjB+Bf8fOclM1JtdIrRk0/y7a359Hn7TkvI//mnE7a75Ehs8oW/DwnqQ9byFpjN7UhNMT3TxBvXExML7x9LKn70Y2k60/MtGRqSyhv1ubBYemC19iqqs9MLQlRvQoIieRJBtu2ZSUrKhE6Xj9oaG+rrzsg11PcH1NR4Fi0tHtjtvhAxfnsZ4SPtG1Au9JmF6Gjpx6B9Sm6of0bO417CJe9d9PbOw+lcCwET1MYTOj0YlJIDQ24JigpO4nRTF0XOBSBiE6M+rPgeYGLMzzASlfZSxZEGBVJ4THZ6DoO0x/XIyylGfl4pjAYTrOV16LdNBEDOoVksL9zHtcuPGcQwYdcnRUvpkrMYJCZuJEJSIthQ3SxD05N+utFDBt32P2eQw3GVYlEffwvxJOxAQoKOQfqswgBIqsbSwI7SO+1niNQd/4vQMDpvwsPV8mbBsLLSWgz2udh3JEHXrzzB+uoWMEEIQ2xsIsMyM4wBkKm0Bn09Hsx4ljF33o+rSxtHuHbtKbuJNtsiRkZWlWM07N0bvXFBtNkyVFpkwUDfJMadC/T2LWLS7cO894aMDTmW2fNVWdkNwgk9ijGeFxAfr2VgRno+w5wOL0M253H54Ju7yY5QwvT6cnAqkqAYE4uLO0qxLJhMTXANX/oJkpoav4wJ9wr7vlyuW8jWmyFwJP7XDKc6SF/fS5hYTrYZHW3jdKu5oNC5sSX6QeZRaRn40NY2DWtlBzhCTv12JRUhns1QTPRh+kx1oLvdDXvPFEYcs3Bv2nB48CJtlkEZmVXvkpPz6fu4USXHJ2MREWrotFmwmBtRZ21FY203bF0eBg70zWBsZIEdXXXN8FsRqqjoordv5zrHkVZF0GZM/ISGvKqACgvqUXZy4JWYiDQ3j34RITH6g/06jCf7FUMSptXm0dtUETSDoRYS8B3a8VlD9gkhQfJsPzwvbhYsESwpOYWq6sGvhlwL+wvheBK7NUge7l7Q1DHLGk0KUlOL6ENLZv8Q+fXQH+k9hOOGWf8nyHwDJtdr0diYB40AAAAASUVORK5CYII=")

/***/ }),

/***/ "./asset/data/Anguish-noborder.data.png":
/*!**********************************************!*\
  !*** ./asset/data/Anguish-noborder.data.png ***!
  \**********************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

module.exports=(__webpack_require__(/*! alt1/base */ "../node_modules/alt1/dist/base/index.js").ImageDetect.imageDataFromBase64)("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")

/***/ }),

/***/ "./asset/data/Animate_Dead-noborder.data.png":
/*!***************************************************!*\
  !*** ./asset/data/Animate_Dead-noborder.data.png ***!
  \***************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

module.exports=(__webpack_require__(/*! alt1/base */ "../node_modules/alt1/dist/base/index.js").ImageDetect.imageDataFromBase64)("iVBORw0KGgoAAAANSUhEUgAAABkAAAAZCAYAAADE6YVjAAAAAW5vUEUAYtdMlAAAAAlub1BFAAAAAAAAAAAAoYpy1QAABQVJREFUeJytVntMk1ccLeiyZEu2mSnooJbSjz4ofUApIj4qUsroAyulUKSo81VwoEPGhOHSISpvLFREcDqKxmp9bBo3TaaiMybu4R9uTp2b0bk5p/5hlmyJoY+z+7V0MhFK4k5y87U39/7OOb9HvzIYw+ByGSfAag1nhATCjC7XBKvVOjH02TEwMGCdSJOSj2H0dxIwnA7qIsGfOhpuXlHGNhqNT+//B/4gs2dTU5o2qCqP9i0WhxKgVBpframzZdY19rQ2dey5rF2w6jbZfml4vBEYUhxeXZr+6ZUL7+Pq1/UXz594r27/xytSyb5fobGohFdWUW/5oN5+eFPLR/da7fvQ238c6zfYweOr/ubz50wbk4QmGHoyG2r0f/35Wxce3enCrcsNOHWs7rvaD20XNzZ2D27dfgD23kNo3+5Em32vt3Grw52aVuDh8VQ+rjBDHggxRtoUCoW/iFmpokaH7S08vNX5+O7VNjy8uQ3O/Q5sbOlHS4fD3WRzeEhwX8eOAzCZ3wVFZXjEkgWIEyjVfooQtaHdhBXr9a8v1SkeHN9bjgc3O72//tDsvX1lq6e7d7evvtWBJlsf2rucJE0diBdmIz4+2y2W6METqJYNFzsqXEMqVhtyKioXq/Hl8fWe+zc7cPdaM659a0ervQ9b2h0kVXswV1GEOK4SwgS1m3bC5advHhcJI1C0MIlk7WslBtOjWosOl85affdu2HDvxxZ8dW4bWrY5UWCuBoczDyJxNu3GLRLngM/P3D1OksAgslh6wSz5osG1hQWoW7PQd/2bLbh7vR33f2rHyaNtSFdo6Y4Cm5OFWErlEYp0EIpUnwGMMGuoYQ4WbaZkiUackI85qTpPpdmI5pp8/PJ9M36/Yce5w0txpFuNHQ0LsM6ihUaV7RVL1OBy5131ywyQjNrG/1qVi4vXyRNNiKHS3Zr5eagy56KneQkuna7EiT41Tu3LxRlnHlkGnOzPRb9N722u1fo2lKVU0PcHrGOkLEiSIinemSTNB1+Q6ebEKVGozcf6ZWUo1i9HdelC9DTk4OguPb7YZ8App5GQ5vnOuozeQ906X3VJck7A0ahE8NuUS4vPSCS5EMSrPHyBCgmibKTJTJiVVAJl2lpo01fBrC9A9Wqtp6dB6z22S+857cwbvPBJ4eCRXt2jmmXJCYH0M0bMjJ/gTar8RZm06I5IlENIsrwJIi041Gy8MomFyVMoMJkyiPh6b1qSxZuRtgZZc4tQqMshDtXo3qwlKSzEwS7Nw87aOeyAI8bwRgh0RYrYzJZJCx+T/iczoPERIkRE8hARwSVPoW9qZKqbGWUAh1UOAafqYPqMCvVceVF+kiCzaoY0pVOvkvdvqpx/vqZ0xk6ZTPYC3XEjOitZWqxMTlpET7JXJNYhKlridzA1MtHDjMpCHNsCLnvdzzx2lXHU4voR+fKIdAWLLktcbKFJSJrcsZw0TJ7M9b0xbaYnllUAKqbEzY15p3X69NJJQfe0OPpucFnJAvDsFg6SJIlNdhkpMpef4Y6MSCDqVaDYy4mDsoG46LKUJzfG/iFkPGtWgpMqE5s+T0w0eKOjZw3GMPOI+pV/UKy3S4bJmfjMAOOA/5KCBJBJ86/x+QbEME3EgaWPiiqPfnJmPO//ECSpEk2URGgGe3rRlVjWyuyn1D8vAgrj4zQpVKxp0zSGduh9Ted9lCI+B4YFDFnY58GTv0H/F/4Bkgwx6iKY3RcAAAAASUVORK5CYII=")

/***/ }),

/***/ "./asset/data/Anti-poison_Active-noborder.data.png":
/*!*********************************************************!*\
  !*** ./asset/data/Anti-poison_Active-noborder.data.png ***!
  \*********************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

module.exports=(__webpack_require__(/*! alt1/base */ "../node_modules/alt1/dist/base/index.js").ImageDetect.imageDataFromBase64)("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")

/***/ }),

/***/ "./asset/data/Anticipation.data.png":
/*!******************************************!*\
  !*** ./asset/data/Anticipation.data.png ***!
  \******************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

module.exports=(__webpack_require__(/*! alt1/base */ "../node_modules/alt1/dist/base/index.js").ImageDetect.imageDataFromBase64)("iVBORw0KGgoAAAANSUhEUgAAABkAAAAZCAIAAABLixI0AAAAAW5vUEUAYtdMlAAAAAlub1BFAAAAAAAAAAAAoYpy1QAAByBJREFUeJwVlXlsFOcZxuf4ZnZndnd2Zw/vYYPPxRvb2BjjI+EIly0jyg1qm4grgZQIVIlEtCVS0qgqVIJyRGn+oKpEgqqoJQ00wZASQgmnMYcd49vra23sPbzX7Ozu3DOdfv9/j9730fP8XoATpJkw8jzPcZyFshoIUpEETVVJkvBXLV65fHnlAlf7hjaHu0iRBSU/i0hBNjw3xyjf/nfy2p2fUDm3oLhs//59a9esASikKaoCQ7DZrGsaDQYA4ZjTSRtIS4XX9vOtrdV1LZrCc/FpKTkKUk81TTPiZHUxEdhbqaCWzifP/RVlweBYOBwFoigiCIyggCAICNIEXvB43IULihuW1n907AhsgLl4H6QS+lAIF9IU/btTyIrZScZekPV5C2qaV6q5+Gw4Egs/A7qMougbGXQhWVYwDNc0SBX5Q2/t6ZuMe2iDU4tm0gnATkAiC+gFMiI86eqvqSlCQQHHzvtLKkvddadOnzKZLMBkIpl0GoIgC0WZTCaAoSoE53J5Wc50dz74w5/O3/r+P+X+xvxMJ5wZxVCl4/JdQNidXrcYD7eU07/+9B9uk+p0eXp/6gEIBFM2KsfmdO8NOCZLapbNoihy9Hd/vPDJic5HT1uaGj85d3bHG/vguOnWxTN9I/Hdb1YiqpRW7TNi0a6drtBgT//gYCw2DwCGOWzOmBpFEESSZFiXUQRF5FmW+1fH/Qufng4O9r65Z7/RgLU2L7r3cCBQVeW2U8nwaKL4HTYRe/Dtmfp1m11M1huJAAiBJVGgrFY9FCazOZ/LSrIYTyrVNQTDZNnYi7X1/jtdL25/17F90zkzbR16mfY/f+GpX/vD47ELp4/3D00QamJxw2uPHkJA4DgMBRRl0V3DMYxwOFOplNfrQwF49rTLZFBrqgMUrF3555Ujh/Y2t278/Oz5gXIf7Gg9dXITyCQ7/vZB6859nITHkiLQXzqdpGkbRVGiwNfWLckwmYnJyRe9XKC6Ki0bvSS+rJTuG0/dvn5lx6ZXYwm+pP3wx8d/65VCHd/8nvS9MnXvsqV48dlzfwZuj0cSpVAotKyxkc0wBGHs6ekBAG1raw3HGYuZnJvqs1gNVaVOKwF9dfHz9Uc+uvfoeeT5nbsPb+Un7z6/cslIkMPdN1fuNoCZmZml9UstFrPul8dXlMnlGpYucXu8peWVxQvlnZvWP77ciwj5Cn8plhqR6ABV1vz3A63//vEqarCFZiI4ZRcxE2zhQ90PAQrDweDIli3bUslkMp16taUJJy1mit61ZZ3bDqmZYWZmRIDNr9X6/A1No/HyR+ePfvbZh1h6vPvxNc2IKaKm1yY8NbtkxRaAYhibYTtu3Hj3V+9YKQox0e4CzzK/xZp7yoz0aCj2oj9UWURvXLdoaE6iJr45eeK9strmvu++4BUIyqkG0jQ7OlBcVSfTZaDA5bI7XIrEDQfHt+/YVUZLVX4rAEyss1sUczBFr1xeW724gqpYVUZOLFvVEg5N3//iJE67EAjBCENodNhXuDCw4fCatu3A6XSVlBRV19Q5vAtrXXFtfuDLEz94y+tf/8UhgZO45MvNb7VxPDwbGqGsVGhkaCb4zEBQHJuTFHl0YCxQE6hatat9224onwCapnIcz2v40iKlrLYxr25sMDWc+fD46OT0ux+cZOahgfvXcZOLyzLRqbQBGCDMIslKLJVFNGh922qWcLdvOzjaN7jnwD4wPjaezeVtLp9ntSk9NSwLY9VrfnbwN7PHDr63dUebAuGZeFRlWYqkFUFKZbPpLA9BSqC6GIYdX98c+MtfP87l+BWLXwFmGqQYxmqj5uMZjmFIcS6jWtgHkaoCdUGh7+urdw+/vXkOJwVZTqXmeUWOZ1if24Ph2I2bfV9ee8YwmabaRZMjU85FlbOzEUCSRspidjhsP07juyrnARNPJETIQR17f+veoxdLC23NSxb29kdEVZZg1Ulbu7oGv7o5oEOlpals4/r6J09Gh4Y1l9fzsKsb4MAAo/hQb9fU1BS0eXVToSbbtJfhYGUpVVpWsvn9S3va6365YQmMYckoc/N2V9/I9IqGQF1zuRFHe/pnrl7vthNGTieCpgALZRkfC6IoGggYO4dmEqK/ZcXqNDL0fTTX1s75nEhaQadfMkPB6Nh0uMhrPXSgTQd6PJFheelp1xSsKiKK5mQYkhUwNzerd9BIGNlsLtjT5TLjwe77ZmdRJB31oNG333g9wXKxGFNSYS8st5M4wQtCIpPWV0YgqKbKnZiNIRCqqko+n9fnsmmqrJcxk0k7HeX6ObHbaB1kieic1+Ec6JtUSaMGIw7anMqKTJZLsKwgS4iGsPHsxMsky/E+j1tP1f+5yvM5/VgYjASMAJbNFBtLGxqbL1265PSUQBCJm7BIQohFUjlOgTE1lUwn4qKUl0VZYgRBFWWb1eKtCITjCT2n/wMF2aoa2B+6UQAAAABJRU5ErkJggg==")

/***/ }),

/***/ "./asset/data/Aura-noborder.data.png":
/*!*******************************************!*\
  !*** ./asset/data/Aura-noborder.data.png ***!
  \*******************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

module.exports=(__webpack_require__(/*! alt1/base */ "../node_modules/alt1/dist/base/index.js").ImageDetect.imageDataFromBase64)("iVBORw0KGgoAAAANSUhEUgAAABkAAAAZCAIAAABLixI0AAAAAW5vUEUAYtdMlAAAAAlub1BFAAAAAAAAAAAAoYpy1QAAAZhJREFUeJyllb1KQ0EQhddGrFREiFYKISCKifhvEbGwD4hvYCNYCL6CldhY+wi2PoIv5gmfnJ1MbmKicLjc3Tv73Z3ZmdkyOFmR7vbXpMf+5hSVsiClSRYCKYDSgqSX21U9356OpTifiCWBvt4vpIebLVZ6vZ6aZF7Pj9czKeEqSx/0WXawjOM9DjHTU5bGDVkRJGnqfmnRuPXWiMz97GxjRgR+IBH0vLwDS+/tTm9cwvE/zCRxvbUSvZMFONCHe/2jy9Mo4fxXCTft6ZDFMcVAADq/uk7SpHGAcLmyABFdeaEFjaCIi7HjoCvLZyQj+TIJZNxGu2tcM4t9/cqSgVmAOMoar7lY0c0GFicyI6vXPSDjYopVHzX7h33lnIgOzsvK8YqlS078i+VkmZKoMScw86qc93wbtHapR+NSGQGiGGk7eV+AXNv0gMbyBpQs676Mo2JlRHI0ij6BWcM5RjdpEuOtNYq/OlK157ivGuegcrju7gxTj3YjzP0enBVLJA7jnTLS79M9BBF5QeNw/GYrs9+Pk+Qr8ht148cTuYW+6gAAAABJRU5ErkJggg==")

/***/ }),

/***/ "./asset/data/Barricade.data.png":
/*!***************************************!*\
  !*** ./asset/data/Barricade.data.png ***!
  \***************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

module.exports=(__webpack_require__(/*! alt1/base */ "../node_modules/alt1/dist/base/index.js").ImageDetect.imageDataFromBase64)("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")

/***/ }),

/***/ "./asset/data/Berserk-noborder.data.png":
/*!**********************************************!*\
  !*** ./asset/data/Berserk-noborder.data.png ***!
  \**********************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

module.exports=(__webpack_require__(/*! alt1/base */ "../node_modules/alt1/dist/base/index.js").ImageDetect.imageDataFromBase64)("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")

/***/ }),

/***/ "./asset/data/Black_virus.data.png":
/*!*****************************************!*\
  !*** ./asset/data/Black_virus.data.png ***!
  \*****************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

module.exports=(__webpack_require__(/*! alt1/base */ "../node_modules/alt1/dist/base/index.js").ImageDetect.imageDataFromBase64)("iVBORw0KGgoAAAANSUhEUgAAABkAAAAZCAMAAADzN3VRAAAAAW5vUEUAYtdMlAAAAAlub1BFAAAAAAAAAAAAoYpy1QAAAIFQTFRFFBcfFhotGCMuGS09FS0wCyspBxkzGT9AMz42TEI3GEAxJj1LaF43qJV+xbmhrrCFZGRc19HC3eTK8OjXi3Vg9uzp3tWrjIuErrKfvNG9Ly4wDw4M7uvFMCIvIyUvAAABSFdbY3Bu5bigOEBEQEdNEi0GEAYeY0o1sZNXjohYDwIQMjK1NAAAAVZJREFUeJxNkYtWgzAMhkPJ7EUbCuUmnWVujune/wFNAOdS0hPy9Q//oQBQqFICEZWk1KqA5z4eDrKXG3qBYq0099FY4w4PJOS1RIf45omoCrizAniYZoXxVEuQNxtSQkrtBDQxxqapK7OJVoLYCug4Yt23qw0l38GdxNixqPf/05j4YWyYcZKnzTuIAYdteO8a9ha7OjxpGE1DPTbN+gwTup0wYNGUpvE4fqSJDTi9EiyzczYkmNuunWEOJ+e0Fm+FUqhayinQJ4WkyItG/k4hzJ5pjGEOcaSjdfqiswIRsUvberJgyQ8nfstlxj+iIFfsmiaQ4TwH5IYyS41XturpS3mDDFcAMhIyDTMYmIcqIw/aLnXFV9t7oy7j2e5HOZaFN65v/ZHX7cplLqS7SIoI7Hf4sQCP82lZVhUjSLz29pLgnh4MdsAkJSb3e1rShvigTGfA3V+dFRvMEHQ3wQAAAABJRU5ErkJggg==")

/***/ }),

/***/ "./asset/data/Blue_virus.data.png":
/*!****************************************!*\
  !*** ./asset/data/Blue_virus.data.png ***!
  \****************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

module.exports=(__webpack_require__(/*! alt1/base */ "../node_modules/alt1/dist/base/index.js").ImageDetect.imageDataFromBase64)("iVBORw0KGgoAAAANSUhEUgAAABkAAAAZCAMAAADzN3VRAAAAAW5vUEUAYtdMlAAAAAlub1BFAAAAAAAAAAAAoYpy1QAAAKJQTFRFCQWTBDSUBkydCE2EDlxpDDhkFjVQFENPCltaBj85GT9AOEBES2A3ZGRcqJV+xbmhrrCFC2uKMz4219HC3eTK8OjXi3Vg9uzp3tWrjohYASk1DCo7jIuErrKfB3WivNG9GEAxLy4wDw4MIyUv7uvFSFdbFBcfAAABQmtVY3BuGCMu5bigDG1QEYaoTEI3CyspCx1WFS0wY0o1BxkzsZNXEAYeNCqVTgAAAZJJREFUeJw1kot2mzAMho0vAkNtc4fO0DUkIWvagTPW93+1SZAJW8dH3/nl30cwFmFwXEJEkcDEOacSI4BnLqRUAHEihfiP9joXSuk0e8lSHcsnYrtESJ0a65zLTaoVIX5oChmX1lUUzpY7empEQqBumqauqzwDcWgi6tUS6DCaqn/9sYt2og7SNB2KeuvRBHXDNyhvh7FGhttZl+7WGedvhUxb87Or0VvTVcamz25kLXkfqrGu9zWUCT1JMMELJLo9TefxMp6mstWJLAQ/7pHJ1Uzzre3a23wzv5C8oUZFkSJv58m4D2emu7NaFlxETFFA+enGxtxMM7rL9av4XRxE4j1La90yL84OV00OhCCCE9B6Pefo2p1WjYT6sICkkD6zjyXv3fVhswQUDiUgETSzdzfMa7nOQ/44JIq6oQz00tvsno2fi/dSBiwxoAyxXv/0F/wWHQNIFUJgWwCFC/T68te8LmgAgPpsbNuQ08+h9WO9r94jCAF2ggwC+ERrTwGAZQz2jclvHny81/FIadu+/wGjZCeJFvgi6AAAAABJRU5ErkJggg==")

/***/ }),

/***/ "./asset/data/Bonfire_Boost-noborder.data.png":
/*!****************************************************!*\
  !*** ./asset/data/Bonfire_Boost-noborder.data.png ***!
  \****************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

module.exports=(__webpack_require__(/*! alt1/base */ "../node_modules/alt1/dist/base/index.js").ImageDetect.imageDataFromBase64)("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")

/***/ }),

/***/ "./asset/data/Chronicle_Attraction-noborder.data.png":
/*!***********************************************************!*\
  !*** ./asset/data/Chronicle_Attraction-noborder.data.png ***!
  \***********************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

module.exports=(__webpack_require__(/*! alt1/base */ "../node_modules/alt1/dist/base/index.js").ImageDetect.imageDataFromBase64)("iVBORw0KGgoAAAANSUhEUgAAABkAAAAZCAYAAADE6YVjAAAAAW5vUEUAYtdMlAAAAAlub1BFAAAAAAAAAAAAoYpy1QAAB31JREFUeJxNVlmPXEcZPVW36m699/QyE9sz43jBeJkggUNk8oACSWwJoVhRBh6SV94dBBIggfIYIWQpkfgBKCgQ4zzwZGEgkYJEzCbZchyGjMfL7O7t9nT3XetW8bXtCFpd6tv31v3q+84536kS+N/HoqFpmCNHFr4497WnlrsuP9+29CIzRjpQokSD04TYcAxhq1wwBaXVOMZ9rtNL2x+tvru5tvbZ43j8cTyIxzcYjfws4KhXzr2clr0LBZl85bBNK6o9ZEyiPglwAAMM/QoUTR8w3+aK231uIy3Kk0HunMyfX/pWJXr64vyvfvP+FSB5nHguPl+x2URx9esvXqjX5etP2aNqrjK007FxtYUStlGVMXOEwVHTQU4JriuJCEXToKr2jIcUNeaL/PSOz3+59epLi0vv/PWtG2YnBGNc4GfA996A/88Xzl1wiuzHZZ65UoX6EALu64jNS+BISWDGLcJQ8YZpqoPjVJpjlEVsM4qxFQowA0RSaLi6ul7zf4rXvmpogYtUQCrwBvS15bPn7Yr3+mEeu4fYnnbCAZ9VAU7PlTDnSSRKQ8UxojhBmruoOgrCLWCecFist7AbTFDp7ODfosWb2UgXZOZ+Wqn+4NlXv333o3d+/1vx3PH546pi/VDqpJpNJrrudPkswXl6voESS9HtdTHINNrWBLYxKBMHKskwivYQ5TkKro92tY7nFiXkRh87OeMZmnrDLtd7Ln50cmHhutBfWvquLeVSIw/MUtrh9XSCM8dmwLnB9voOSjLDiSJlTv/5lD1aGMRDQ6WIiddxnGJ9J8Zso4UzCxVc/WQbs6LAa3FoLGYvZWdOvSJSKc4f5TBlE6NZTfFMrQSPqO1sbWDGy1DxFDgRzio2TIUI0gQ+wYe9DE6o4fEcbhZjl+BqzO0nBAq4GuQ4HAbo+jXzSa3xsqh4er6su2xRD80+i4IWiuj3eijKFA1aJPct8H1lJO1DgOeAW7QQSRr9Xcjt28i7KYpxjlwnmPR7aNUbmBuNkRQc9C3FCkgWRW4pMdEeLD3EYo2yJYI7kwTHyxo5Z2AtmjZ3jKpYhPCb4G79oeozZxUZdYIU69B3Avi2QTAixZIETxYsrAxCFGQRvp4IUUEmK5M9wjthNYdITTPMOSHklIMaBWstgrVPwSlTJVYJxmTEiQVROYb8kIT6LAcvTyCHGVUJDJIcdVLkYhCz3jCC79tCRLBEyQ9BgJD+HYzTFBb1v7QIgnIDeaUF2y1T3ALxEcPIfVQJBeQa3DSRzc7AGt0D31PkDIA9dRLGqSIGn3iTTi6ETJVJxgWW1xLK0kDQRPIquqYL4phZlB73HkKk7YWH1ZDXEPl7ZBgZCY0gptCGjVDVAklE77k03dYozFqECHnXmNnI4wx2TC8y56GROVTF1M4YCynjqWTZI4PLhxTUpd8RPcspOEXIycnIgqbzNU3LiBOX7udUVrwTkXCKEKU8U5uqbB+lF6e+4XkFRIGkAARfShX1u8jc+3DsIsXJ6Js9WlCHyOIOrOEuMCQUFAWlNiySeHRukA44IoolqzwXibFU0Sj7bs8y/VrOmmUOKgxhasHbSSBxF+lUiJSp9BpgZPhTZ06jLrC9AmtrkyYrMkiCk9TmCYHNEbVp0TMyMWyc80xMmK2USuAUJFaHIVo1D0L6JIAxSVAh3x3DcT5FqibIajXiiDDRZJIkV7n+H5jNEQHA0Z+QkTk+EWAhCFPceCChZywUWEWJKM/Wh63qiWTSxx0ywINBivlmA1ubETwpyKvI2NdHEJ1bQJ1Id0g5KaU8IU760/oYOqHEOJdoN+rYDhJcH5XRbLkIqJpgz9wXaS+9HB7wT2zyCtLYwq1OFzMlB7X2PnTJKkIKWHIMiqmCGQdEuHmkNMI9owqG9M445ai0WmQ/Lq7vDKiZa+hGGe4xj22l2e/EZGX33e360ZeS1F9io4le9QvcXx/j9MEqZlqzGA762Kb91bLth70U0+7geFQdSemBKqLkeqgRxIpM809rA2zFdK18PaoXeTBhN47euHlZrKzcXHnm3MGfW3X1dqdWrrqpo/8RGN652cOzTxYw034CaRLRnmIQjcdIHZI5NaJwLewnhyjR2AxCXLuf4F7oYDN39ajV4L2h3UsH3Tff+85rt6j3DPbfZJfLX/jGwX7L/0k/s5wj41j7LucfrkzwZGWCZlGgVvbg1CvwqVE1ZS1I7oMox7U7IR5wH7tEU1cLPXBLPOxHSSdJ3vrb2tr7+OADI7C8zNfXTdxirYsnvnmCWZ73/W57tjymZmv3A7MzpMbrJjjgxUx4lBI1bYl4SXIbW7lj7icCll9CV/oMxSInpQajSP2i3LnyNu7RlkMtJXDpUs7Y1Lsx3vjjh2+2Xjh7O4n0Bd50vzxgbbb/gU1WpOnQoDFDG1RKBhlSJYoIj5jLuuRTtuNRq1gg4/1XtBdd/MvVP1/Co9PK9KCiPj8STduYr9KD1T9c+fWx0hN/Lz3/9DLtJcu3q7WFkk6sbj+SxYYnHRlh2KWDA9MZc70sLc+kXaU2etn4vbWPP77U29pa+b9jlppe/BdgtavJRrnXSQAAAABJRU5ErkJggg==")

/***/ }),

/***/ "./asset/data/Crystal_Rain-minimal-noborder.data.png":
/*!***********************************************************!*\
  !*** ./asset/data/Crystal_Rain-minimal-noborder.data.png ***!
  \***********************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

module.exports=(__webpack_require__(/*! alt1/base */ "../node_modules/alt1/dist/base/index.js").ImageDetect.imageDataFromBase64)("iVBORw0KGgoAAAANSUhEUgAAABkAAAAZCAYAAADE6YVjAAAAAW5vUEUAYtdMlAAAAAlub1BFAAAAAAAAAAAAoYpy1QAAAZhJREFUeJzVk0tLAlEYhl1EkaBpGoJXiigkJcrMa2pWGtk0CZamDmpJaBdMjdDK0nLRxgKpVdCuRduIdq7a95feQMjNWJAzE/juv+c553vP4fG6MYlMGawCVVPzNOCI3omN9GVnIl/iFA4yBYXeivGVBDxUEWqtmQYzz/kgHBiEeEj+N5HBtw+7O4QevhBKoxe9fAHM/ihsm1kQR/UWzOEmma0qvOltAXSeDZDJInQmDyQyBUQiPjs98PvpIM3oFKyLDE5PhPPN4dlSBWSlhuPcBbuvZiZYxLRttQlNnR/AdHaFRuMTKqWQPZFlmWrBpBIpbFsU3t8+IBD0sScxWX002AQVR+DyhR1JIFmFcomiwYa1ejhqD1h/bTAXqb1xTBK7bUH261uE7p8QjEeYibTL2/CGsyDz9bYgy2oUhZtHZhKxRAxXMA9/7u5H0FqsCCKy15lIMjrZHDwplaE1uH+F7KQ6lHwnU6iw+/HaxWBf4V7CWWLVZ7iIABaih9zdgkyX4YwUIJJpuF2VVD7GfRd6o7OLC/+PfAG29J5C7Z8hCwAAAABJRU5ErkJggg==")

/***/ }),

/***/ "./asset/data/Darkness-noborder.data.png":
/*!***********************************************!*\
  !*** ./asset/data/Darkness-noborder.data.png ***!
  \***********************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

module.exports=(__webpack_require__(/*! alt1/base */ "../node_modules/alt1/dist/base/index.js").ImageDetect.imageDataFromBase64)("iVBORw0KGgoAAAANSUhEUgAAABkAAAAZCAIAAABLixI0AAAAAW5vUEUAYtdMlAAAAAlub1BFAAAAAAAAAAAAoYpy1QAABe1JREFUeJwlVEuMHNUVfb96r15VT1f/u6fbng9jDGaMrWBgLAVwCIkFUaIgrEiJCMqC7NiSBUlEssgmSnYhrJNNWLBiFwlsS3YUYSUkDCEDDsYfmHFPj92eru6qrt/75NZQVbp6unXPeffde+4jnfr6YvPRQfN0v3Vq0H5sqf3kaufs8cFLJ5ZefGTpJ0+svv7M2h+fXvvDmft+//X7Xt9YeeXk0ktH+99bap9Zbj+93H5m0Drdba53Gsda9SMEE0QwpcTluE6QEE697T/oEtdThzvoXNOeC8zZpv1uCz3fMi/UzXOu6vuk3quc8FkXo/Kl2KXYIVgQjBxwEETB1XCPNsXqJPxcZkeXxYstcTxgAdJ7SbZl1Shwai3x0Ir4sZ8/HIY3a+5hX3QIcgBIsHSwTxC2GKgwCuTAp/Xt0ZUj7g/WGz+qiQrW46vhGx+lr13FvwH76eQN8ID/eOOHa/LcrdEliG/INYqAaIFgThj2LcI+73AsP7v911ONl9frz0qSz7P/XYl+Pq6e5zVkjAUL6yvRa+CXpFivPfto46c3hhc90qi5SwgRiw1xUMVnvRrvXx+ef6D6ra81vs9xkmS3Lk9/baoTQevheDbc+xKsoIGqjC+Hv4K/EAORD1S/fX34XsVpO0wgZOB0uClXx5NrzLIz3ZcZShaY3Az/kjp3dW6SKJ7FEyboNN7P5zkxLOPjj6ZvQQxEQjy17M5kC1KjSBDOpNVqGH58svmdRXmo4ojd+b8/Ly45lENDoijSWGFLDNbTaQhNg/gb5u/D+b8gclEOTjaf2w3/Sw11nQaRTjCNtzGyx5tPMUd7QnwyO1+QhBE3nal5PgPVWGTBzvNoPslAQAWOP51dhEjmmIcbT2GEZvGwwnvEJcE0uR3w7iBYowIZmm7nW8J19ZzA+TCGXdBXD3Q7SiIdEyHETr6laQrx/doaYKfJDoX6I4OTPAxkp+oHrstndjSx27hwwmivoPesPWCy5QfrgtwL47tYiQnamZmRKzmgAAsM1hqiTapM7jIPiKTnjvMv4SxZFlfM6cPqF66tAQ2IBqxrauCp6NNZFqVFPC6+kNItUY4HDJATMbaAPQ1SXBDq2E4wcMmCQdriWcO80tO/pJARwmBhDR7ww19BKt2gzxwEKG0VOkifYMwoYVG+r2jGJe03liTzjGEzsnmDnQ3JOxi5CGmwsAbPjG4aSyGm31h2JAEUYCnIFLgoEdDmcbw7USPsmDfff/VePnKssNiZk5sTelHhHMYMLKzBY2EAFZ8Uozff/xl2NKAACwyEOKX2QRZRMbk23hwnu//YfpdzBmBkYXLKKgnkeawisCwrBtML+saEu/yD2+/dnY8ABVhgwISRwsbSbXLML3zydjPo3N85keYJKetjgVESSVxjeE5dJKkHHugXI06u8iPtk+1678LW25xwz+0om5O42K/IRV/UPhttXrr6Tm9hBeIsNcL6Hl2wXClbWI2gU1joilOVuIKYzYu85S2++/Fb1/b+4/OaJ1tRPiJFkWHqBP6yoPxPl3/7wfYFl/kFSqF2BUuUUdBjyMUaXOhCsZS6ODdzTsSHw0t//tvvQPuARZTMiz1iUH4vvV6rrkhet1YxI0pZGuAotNElScl08BirgM7kpc8gx3gOgTGs14P7w3S7nAttk0SNw2Kn334MeoqMdXUVwyFBx4Yd8NqvRA+WaFbSaChYxSgN9T7U3kjUfqYjixTRKDMoi7M7hc2Xu2c4q2iVu3qBGw+4dNlNUz4HC2wY05IXvlapcBaWu09Ednc/uXnQE9jJpuUtjdgk/SIye4PuRrN6BH7QghBDuHGp5ZAmNQ4DtWsMagOltIJjK71vpiYO02GG9gsbgp4JtgwUa2yubBSmt+4kVxeCpdXFb7RqD3q8Ad0UWgq4iuCzvuTNdu3Yoe7jfrW3n96K8t3yLrUms5PCRAQ20aZQdqZsDDlmenI3vjZVu8KvtVrHDvU2lrtPHu5s9DuPDHqPL7ZPeZVWqIa3o39GxY4xhS7HmUApCzT7PwycMJJR5LqrAAAAAElFTkSuQmCC")

/***/ }),

/***/ "./asset/data/Death_Guard_Special-top-noborder.data.png":
/*!**************************************************************!*\
  !*** ./asset/data/Death_Guard_Special-top-noborder.data.png ***!
  \**************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

module.exports=(__webpack_require__(/*! alt1/base */ "../node_modules/alt1/dist/base/index.js").ImageDetect.imageDataFromBase64)("iVBORw0KGgoAAAANSUhEUgAAABkAAAAOCAYAAADaOrdAAAAAAW5vUEUAYtdMlAAAAAlub1BFAAAAAAAAAAAAoYpy1QAAAXxJREFUeJzV1FtP2gAYxnFvXZaY7H4mGmOHUkAOrZSTHEppGSis6AQVtB4gDMKY0czIotG4TaPbxfZ5/6vd1e4Wyy72foDnlyd533di4n8YyVfkn4WHRQ3ZBqKBEoHI6/FCXu8KS54sEbHgIPIj4lXHjMzFCDqIhuQzbOQ3NFbEJ6QILqh/IFlFY7eaGQ8kzEik5AKKp0F0voWubJGIlDmxljE1nRdTz91BajqGOJ+kvmbS3xyyZ3ykGrymt9PmoitTVQ2eTU65Q8RXcWLhAqOBxZfzNnejHrvqFbXgHRu6SiktuAP0FRm/J82nD3vcnB1xf9Hl5+ch3y8HvBG/UUyWMJLTLlsICZaX8oyGFl/POw7wcNnjx80xDekWs7BGJu6iiWc2arfIUK9Uebta4+qkw/XpIWf9Du9a+5weKDQqgacDml7EJ9jHt5gjZK9sa71OOb9O09wmp9RsuEw89PLpwKbVxNqIOzfx+EIkv+G8kFioQiJs8r6Z+uvwX8FEvcLkX4igAAAAAElFTkSuQmCC")

/***/ }),

/***/ "./asset/data/Death_Mark.data.png":
/*!****************************************!*\
  !*** ./asset/data/Death_Mark.data.png ***!
  \****************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

module.exports=(__webpack_require__(/*! alt1/base */ "../node_modules/alt1/dist/base/index.js").ImageDetect.imageDataFromBase64)("iVBORw0KGgoAAAANSUhEUgAAABQAAAAUCAMAAAC6V+0/AAAAAW5vUEUAYtdMlAAAAAlub1BFAAAAAAAAAAAAoYpy1QAAAiVQTFRFzAAAGBMyHBQ7HRQ7HxVBIxdJKBlVIxxGSniHHRc/Jx5UIhhGIhhHIxVIHRU7GBMtFhIoGhQyJBdNJBhLNEdmSXqGSXeIGhA4GA41NUdpJhhSHhU9HBQ5GhQ2GhQ0IBZEKBlWR3aDSniINiDKGxE9GQ83JBhOIhZJHhVBIBVFR3aER3SKMxjQIBRSGxI7GxE7HBE7JhlTHxY/JhdPNUZpSHWHMxnQMBfJHhQ+HhU/NEZlIhdIJBhMR3eGNiDJMxjRIBdBHRY7IBg7HRU+HhZCJRhOJB1LSXyOLRixHhc5GRQnkYZwubKdKiQxJR1PSoWTSXSdMxjSIBk7GRUtGxQ3QJqyZV1TzMa0TZKeQFa3MRjOHRgyGBQxTUlNVtfjULbJzMi2T52qQV66KxioGxc4Hxk9vLWecGlfMStC0Mu5cGlgUau4U6HBHxk0HRdDzMWx0sq1xr+lwrqj19LAJSJRW8PRIBk6HhdMKCI/eG9aoph9tqyX0cq3KSI/JyNWIxhMYNjjKCdyHRY4GBQyKCI8saeQkIVqjIFmJhhRJRdORXydaNPrGxY2GxY0q6OKXlVKGRUxRXyeHxU/arvoZ53iGRU0T0dTQTlGJxlUHhZAKBlXb5LjcXvfIBpCGRQxIxhGIxZLGRMyHxVDIhdKSkWTdGXfdlfda0fOSy6TTUaZKRlZGRUzGRIzHBU6IxdMJxlTJxpRe07dfEreKhxXHxdBGRQzFBIkdEcPrwAAAXRJREFUeJxjYMAKGJmYWVjZ2Dk4OTm4uHl4+fgFgIKCLELCIqJi4hIS4mKiklLSMrJAQTl5BUUlZRVVIFBRVlJUU9cACmryaGnr6OrpGxjo6+nqaGsZGgEFjU1MzcwtLCyBwMLC3MzUyhooaGNrZ+/g6OTs4uLs5Ohgb2frChR0czfz8PTy9vH19fH28vQwc/cDCvoHBAYFh4SGhYeHhYYEBwUG+AMFIyKjomNi4+ITEuLjYmOioyIjgIKJSckpqWnpGZmZGVlpqSnJSYlAweyc3Lz8gsKi4uKiwoL8vNycbKBgSWlZeUVlVXVNTXVVZW15WWkdULC+obGpuaW1rb29rbWluamxoQMo2NnV3RPT29c/YUJ/X29MT/dEkOMn2UyeMjVm2vSYmOnTYqZOmTyDBSgYMnPW7Dlz581rbp43b+6c2fMXgAQXLlpcv2TpsuUrVixftnTlKuvVIUDBNTIya9et37Bx06aNm4W3dLJs3YY9MgAPmnKQat/wMAAAAABJRU5ErkJggg==")

/***/ }),

/***/ "./asset/data/Death_Spark.data.png":
/*!*****************************************!*\
  !*** ./asset/data/Death_Spark.data.png ***!
  \*****************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

module.exports=(__webpack_require__(/*! alt1/base */ "../node_modules/alt1/dist/base/index.js").ImageDetect.imageDataFromBase64)("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")

/***/ }),

/***/ "./asset/data/Deaths_Swiftness-top.data.png":
/*!**************************************************!*\
  !*** ./asset/data/Deaths_Swiftness-top.data.png ***!
  \**************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

module.exports=(__webpack_require__(/*! alt1/base */ "../node_modules/alt1/dist/base/index.js").ImageDetect.imageDataFromBase64)("iVBORw0KGgoAAAANSUhEUgAAABkAAAALCAYAAACK9ybzAAAAAW5vUEUAYtdMlAAAAARub1BFAAAAAEEgjiIAAAAJbm9QRQAAAAAAAAAAAKGKctUAAANXSURBVDhPLZNLbxtlGIW95uLESeyx537z2DP2+BKP40vsEOQ4Ta3UdRIoLSEQtWqBUNIqaoUKi6pBQmLTDd1UqtghhMSWTcWCBRKwQeovenidsvg0i+/ynHPeM6lsVSNXM8h3ltCGixjjBfT9DPqtDMa9LHY1wI8b1HYOqY1v4EcJdinCDH3MMxPjtobxnoq2bVAY2Chth1zTIp8skV9dJN9Ik8oKIFt3KPSz6NtzwJIAZD1axprauLUYv9om3vqQaLCP6zaw3SpWMcQIAsw7DsaJiXldR9uZgxzyPZVCN0MhkbU6hwggt+pSGGroexk0AWgCMG8ZBElC0FonaPSp9g/wyh0su4ZlVbCcijhsiYg6xoYrMEtABtolC33rdSqFjqxkQSAND6XjoY5k81g2v1qRwybFZp1Kf0SxMaTSmRC2r2D7TUyrimlGAqoSVERAvY9VKqOFDtYdG+MDHX0mcW8toA0EspYhpSQe+aGLPjXRTxXMqYUTR1S7G5SbG5RWR8SDmUB2JaImhrgw/od4QZuwsYVTqmH4PqrMwriroh8JZFeifzeN1lskle+7kqUo+Fhy/czBjkqErR6RAIqVPtHahHi4T9S7ihdvYDixgARix7jBGmFzQhCJGz+k4NjoT/JodwXy/iL6Thp9Q2aijgRwTZcmOZhbRdwoJpKIoto7FMO+OJgQrU8pdy9TjNeJwrYMvo7lNSWqTaLWDmF9G9uLUX0R/CCP+vh1O/WZuBm/TcqYaTI0qeIjDysq45flcrlLqTLED9fxa5uU18by2CbPru3yy9GU+5MxbtgVQX0Bi5hocFEG3S1SmGioz5bRHoqTI5nLlTnkWHr+jY15HBA0E/ySNMZuyLcjwB6ePOTXhzw9nPHb40NefnfMy28/4ouruwIYiJAujt9CVTx0y6fg26jnOdTvpamnEteNOeRLA2PkSRVrRIko91dRV2T4dv2isqVKj/t7u/z+9Jg/n5/wz4+n/PXihD9+uMn5JwckEpmes8ilV8gu5NAsB8U1yd/Moj4RJ58LRI+KWNXqxQ8XhGuYWpmsXFDeWuFsvEfPinlwacTfLz7l35/PePXrQ179dI/ntw+YFjucXz/AzCgsvZlm6Y1FlGVpl19Ck3eViUC/TvMfseWzcYRihlAAAAAASUVORK5CYII=")

/***/ }),

/***/ "./asset/data/Deflect_Magic-noborder.data.png":
/*!****************************************************!*\
  !*** ./asset/data/Deflect_Magic-noborder.data.png ***!
  \****************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

module.exports=(__webpack_require__(/*! alt1/base */ "../node_modules/alt1/dist/base/index.js").ImageDetect.imageDataFromBase64)("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")

/***/ }),

/***/ "./asset/data/Deflect_Melee-noborder.data.png":
/*!****************************************************!*\
  !*** ./asset/data/Deflect_Melee-noborder.data.png ***!
  \****************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

module.exports=(__webpack_require__(/*! alt1/base */ "../node_modules/alt1/dist/base/index.js").ImageDetect.imageDataFromBase64)("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")

/***/ }),

/***/ "./asset/data/Deflect_Necromancy-noborder.data.png":
/*!*********************************************************!*\
  !*** ./asset/data/Deflect_Necromancy-noborder.data.png ***!
  \*********************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

module.exports=(__webpack_require__(/*! alt1/base */ "../node_modules/alt1/dist/base/index.js").ImageDetect.imageDataFromBase64)("iVBORw0KGgoAAAANSUhEUgAAABkAAAAZCAYAAADE6YVjAAAAAW5vUEUAYtdMlAAAAAlub1BFAAAAAAAAAAAAoYpy1QAAB/5JREFUeJxdVmlsXFcZPfe9+5aZeZ7tjccez+LYcZzVzl6SorRqEkIKLWotQv8AVYGqSKAioSIhVSIEfqBCf1QgtVWEoP0BSoIaBKILTZo2LSpq2qRZmtiJ63G9e8azeZY3M2+5lztRgcKVnuZpdO937ne+853vUXxmHT16VDp27BjrvH/+C4fvHxha/wjA76aSHHVtG3owCAYC1/FgOw6ITEE1f9mqr56fn5549r3XXz0rjnLtG7/6Lt108PHWmee+5507/ib9f4Dt2/f2r9u2+SnO5IdAVNSrq6gW8txzHB6NdaMrHuONeoMwzkGo0vmNBILBB9asG33A1PUXz5HN1+iOsV9KZkryPfDD0046+VX6PwB7996VGdzwguuGBhr1VW76HBZPRaXuAZPYImY+V4G9akFutwBZHHRcASTzRm6Z2blZeUlLPizt/To4NcDqJUcaXB9W5IdeoJxzIhYb2b39wJq1oyepvdY0I5LbNxyhkYhPVhUJgiF4mozKljQmGxZmLmbhy1vQwzrUUIxYCx/IH1san9n1GFeUACRmE0R7KSuUPDY3/nMqAPjWrVvXJNdu/p1a32X2h6lnmtM0EjUQ7PLB59dBJAmu58BgHoykCdofxMSJf8KemYdWWETW6cL0nkcJ9YUI99rwIgkm14qS8/bxJ+0//uR4hy4pMTz0tNoeyZheyA37b9DemAEa8EEBFym48Dyxy7PhJwTMdtFjSCjdN4rc8TeRXXIwtfsxSHoYzG2Ch/rA8vPYePlZ9NWnNr4CKPTuQ4cOaWpiTMllWDA9TYNdAUQjEdRIQ1Duwa8oUARlDS5UJdDaLRuruYagpA136xCmPtkOYkTEJSywrgR4YQEbrjwnDZuES+amh/ccYCdo72Dq27w6TCTmML+viq5APzpF8MkKWswWBSaQxMM8gqaodkdVfo+hNJmHo0Whd3f2WYC/WwCIDMZ/j5GEDpfqLKipcnpw+FEq4hzMFzVEZUitpgVJBLGbjshR5ClRtOw2Gq6EuqCs2aGPcEgWR2HWhRu04ZPKaLlpAbCIzPu/RjroCqp3ol3MS1WrDkKk/dRts3BDMrgihcjcUh7BiI7h7jQo1UTBgZa4daMTXCXwyxw1QdnFgit6xxZJepBFoYk1h8zcSazxtdBmGuorS2jX6yQQjnKf3x+mEMrxJJUvt6qEMR3rhIJypQIUV4URNOAPheEKCdcaVdj1Oi529yGbVMWZWXilJjx/FdHcRcR6VHDLEOlacG0HkqrBajS47vMJ1QUMsbkGy2ohntqEzICgQ7PRdmzcHL8Bq0OfpqPZtuAkolgQoBschkt7NsNeqMDITkLt80O2hBs5Dbgia7vdhKL7IQlqOWe43fHMy3MjEMHa/mVcv7mE8alphLQQgoaK8flbICIjxeNY7otjtU2RufoJukMmVmYrUMQe4W2Q6lXha1zEYmg3xYXTA4KyGmRZBpUF75JqIRhPYOL6h7j6YQNJsg8X7L8infEQ7wuiJbKauTmPolBc8wefQ/nMRxhYXEFX71qUhLzj5SVIQu6e6CkmyqfrKmqiLh0DVVQF1BG6J3KZeJEQShMyfF43dsTGMFU8LyhbxqH9B7BcLuLU9UUoqV6EahUUG23oqQjcaBRluhHKzEvocsogXTEBVkXDk5FvqvCVskhv2CwyoQqqskE2D0axEUM4+ZczOFF8WKirhQ0DA4JbBYYvgORQEpPnPkD5wsdQ1W6s3zmC2aqHW3UFi7seB959GqlKDpYt/hv9PjIsh5GwQ0RaoI3V1SozeoJZ1eRf2rWfPGLqWCmUEU+G0NvTjT+cfhl+v4avPHgYBaH7RquJoU1b4EbSmJqYhF6uwjFHsbj/SbT+/jNYo/fCHrkf9bPHuK24RDRChcJnvLGlMfng5ewb7BfKiNyzNIpetYU7Ml1YrlzHxPgCjICKfffeg2SqD2++cwnLF25iNVXB1VsmmvU4ZG0FXiKB0tgzkIQNoVWDHjCYoXfJbc7eoosL2ee37LjzweHpq2Q6TnCLFPFROQTlrI3+TBmaJomuJVhcWsF7/xjHtflVUOFj2kcCvOSgtfE7kMrCVuQ8eF8CxOvMGArHYaRu1/l8rfAcvXDmtTfiycE/mUHfETLzjtuulWgusgM8fg9SSQl7D6wIg9QRS/bBXVhFSNhMTGHwHApGi2hf+Q2qu38MWqjAE+pDX4/wI8ULRsJy65Pi6Xdffu31Tp94H7z1yo/2HLjvDiMa65d8hheTmCw5s7j8/g1s2LETNndw+cY46rkV6FxIVWQC3katJXoieZcwjc6YdCHn8h1D9ciWFBe9mZ04+9oTnT6kn47emZtXL35z274vnkYhb64W8i7t1uit7BWEeyQYYR90OSg8agWhSFCoS0XDZpiNjsFO7QNpV0UbCluR4dHliqwkLMz715wWtjaNU1ymndn+KdDb4jJj67dtfzGdTqyZnMlxEuxjVluMjqpD6jUXsdQguBhMTr0MrpvoJQW0Jp7nwZDJZEWSdD0gFyq1bO71ay9pIfWk1ZkZ13/Kb9vKZ4FKxYX9dx4eeyrRHzvSbBjy5fkSKrk5nhhazw1DE2yomC+vIKrUsDbIyEpriQxm/IIvjkp+8lT80qkn5hcx5/z7M+jYMU7/+/4foOk/H3/mazv3HfxycmjoW2ZP6G4zZpiux4iua+g8kagJVdPANB/MTKBYd8j56Vsf//a9c3979XYwQRGOdD7RhEOK9S9LXb+yW0r0IgAAAABJRU5ErkJggg==")

/***/ }),

/***/ "./asset/data/Deflect_Ranged-noborder.data.png":
/*!*****************************************************!*\
  !*** ./asset/data/Deflect_Ranged-noborder.data.png ***!
  \*****************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

module.exports=(__webpack_require__(/*! alt1/base */ "../node_modules/alt1/dist/base/index.js").ImageDetect.imageDataFromBase64)("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")

/***/ }),

/***/ "./asset/data/Demon_Slayer-noborder.data.png":
/*!***************************************************!*\
  !*** ./asset/data/Demon_Slayer-noborder.data.png ***!
  \***************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

module.exports=(__webpack_require__(/*! alt1/base */ "../node_modules/alt1/dist/base/index.js").ImageDetect.imageDataFromBase64)("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")

/***/ }),

/***/ "./asset/data/Desolation-noborder.data.png":
/*!*************************************************!*\
  !*** ./asset/data/Desolation-noborder.data.png ***!
  \*************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

module.exports=(__webpack_require__(/*! alt1/base */ "../node_modules/alt1/dist/base/index.js").ImageDetect.imageDataFromBase64)("iVBORw0KGgoAAAANSUhEUgAAABkAAAAZCAYAAADE6YVjAAAAAW5vUEUAYtdMlAAAAAlub1BFAAAAAAAAAAAAoYpy1QAACDdJREFUeJxlVntQVPcVvoZSX+iygss+79372gfsLrCwD5Zdnsuyu7jLAiIgChFf1YoKmoBSiCikMT5qmqjRZLRJE9vUjpMm1jYxpm3SNpOO02il1v6TyaPNtGPNg3aiCN6vZ2ntdNqd+e3dnbn3fOd85zvfuQzDMAuY//+4dJnzxzy67GsdheYv2otMt2sE092ASZiOS5bpIp12uoL13f3deOTOR8fb7uTrbdcZJmPUtiiv4fxDvSNvjRw63l0Z9qcDAZjDnO+xrI5rGW6TI9O1L6Sq+f5KedfLGwquXvxGGSbGPHhvrATXxktwZZ8HF/rd8BuzUWR04oMjPcCTOnz6eAk2V6WwMRq89+HpLXcuDn99otjGlaUBftDamjGb8sEDic/OjFa88+ODscvPD8duPjHWiP0HlmP97lYkV9cpFZ0RJbQqgtYNVTi5twjvPrYSH594GC9ui2I4GcefxwLKh4MmZebcWjyxdjm0X1V9ol+k2vHLnsCidPzW/BIv44pVfyeaCt0QC+VbrnIvRFGCXmtSJK0OYq4GQUlCoZHF3AXZGF7djyunD+KtQynUi0aos9346HgLJk96sCtcD4ZZrKScRpzuKLyzdIF60G+TKn81fPgYY2OYHE9R2eFKh+NWSJOntNsllBs1qOJMaHPYEJc4+LRL0OuvwUg4gSyNBkN9tfj5dgdy52Xh5b4B9EVaCGAeNgZkvDvqUDrdMnLmqW++Mbjm+oWh3hEmKyvLFjTmXd7UnkI84FP8JgPCjnwkHQUoNZlRZ7EgLFlQ55BRyhtgWaiC2+/E5aMp9BQ7kKfiMPcBNR6pt+AfLxRjWy1HgOp7R7pX4P2jm6ZL1Oo44zPqx+OyhKBRr7QmImgu96BKr0WdbEGVQCAyj0qRQ1jg0FRUiAabBeoFajw6lMBPt3qRm6nCqTYb8Lof+6JWAliIgXBSmXqpW+kN+6YZZs4oU8XzE10+N4JmXqkw6dGzIoHGUAAlS9SopX5U0QkJPMpMHDx6I2IFVhTlqDFfkHB6JIk/Dubjy9dKcaydhzojCw/FE7hzuhJ/2atTtta0Qs6z/oGpl6XJmEVChcgrzfkyPAYNmpMxNAW9KMzOQk26EqqiQhBQLwtwG0xwGKkqrQZNjUG8/VwCNwYELH1gCfIW6HB+ex/eP7YcHzwWJHl78KeTq6YYCn67hrKtptOQb0OAelKk0aK7uRnJslL4SWVRq0wAPJw6AaUci29X8/j74y68PmJCIFaDw8NJ/HqXGztCMkyLc5G9uBSDsQbgGR0m9kVvMw1Wy93qf9NSJYqIUMAq3oyQicXK5kaizocmC48CDY+4m8fZDjPe22rGZxfduLXXhtVsHr5itWNzfwo/eyqJ3w47kCww4aX+JK4fWwe/qfQu0+Z0zFTwAmVrQQMB+FkWdXRNg9WJJnQ3plBQUIytAS1e7eJxqU/Cx2fduEIUnYyyKKXeuHKWIGu+CkvdLvTujOPNAx1E004U62wo0eXOME12+0wFqShhtyBk5lBOJ2yREbXLcOtYlBH/39ywAsc6g7iwhsMn57z4xRYRP2yje3kJZXTCpLh6sxlS1kJkEF1vnziC34yuRoDLJnVaZxhq+kxlmiaScT0JoFaWCYynLMxYRg+foWBHE2bs70pi4vkw3tjO4tUOHp1eO4r0EiJp0VBidRY7SvQGDFXHcWh9L07tLMH31jrh0bEzTMIm3/WRYuopeHoGyjkz/AYz1pXxONMpYLiaI5sgmZ4rxNiDjThBFW3z6+HSSYhZxVnB1MgiwqIZEZtIz4WRPS8He9YEcWkgSPbDTzGU/e0o3VRMWRQaWARZAet8LJ5qp374jDjeJmHqR8V4oVPG4RiLR9Yl4HO4EWF1iFNStcRAmE5duiJBhFevIZfmMNDmwWsDFUha5dsMKWqyWhKo4Wal2SGiNyhiOMGi00NALRJAAE8TwL6oGadaaCgNejRHGrGiKgj/0lyqgiqZrSbdHyP1QIKf2NjdUqT8ZLCWVGuZZMpYdqKGehK1m5WNQTO2VAhoKOCxp96M6WcK8HQbUeA34dlWHlU2GU6NHiGjAatSy5AqL0VApyeAtGjMCJAy0z0ScnU40u5WzvbXwqLVTTBWjf7RLreNHFRQust5JF0c9pAHffmkE/uTVqws5Yk6O7pLBJSYRMpaIEpZmiMjumhg087gWaIiCxLR6nDMCkjO1eK7WwL41uZKqDLmjjOahZmutmL+92tKC8gE+Xv9YTv+etCJgw02LLPzGEtZ0V9bCB9rRg1ZSw0JpGbWPAWqIgermqJI0cBWEY0xkr2XHKFIa1Qu7a3Hjo6yifQqTy+vB+x5qp6Y1fL5WKQA13a77g3Vkr3TIA7E89FHFlLOUS9IppXkBJU0U2lFVZOPhchQQ5wBD7Y3Ier1wrtUDaeeVaJWFm/uCaMr7N1N8TPuvzjMLxfzRq/u8kyNRywoNmjurSUJbwmIpB4C4NIDKs7KPK2kWRsS085ADRd51NFi61yWQNLnVYTF2egsL8ArQ/V/CxRy1fcB5qS/VComu5LLGa0VzV+sL7NhjS8f8XxWCXKiUkkB02DkcxScnx3atHOnwSp4XqF+KGGew9c6WlBeVPx5ymm4+crDDZetguC8H5/5rx/z7TrV2qRdpFehfAomzzrArEzpVJLH1YnUC6osaDb9qyqij/yPqhThM+gvu1zlh3c2e2+c3xx4h1ay6X/ftf6DmJnJuAq12vEQx16NSOJk1CJNpbNupFXQ7LDTOhZnd0tYkqbiFmmSNuhVlzZvnB6108lpWFb27It7Yp8+1+nspv9Z/wS7Tv9uvUNE3wAAAABJRU5ErkJggg==")

/***/ }),

/***/ "./asset/data/Devotion.data.png":
/*!**************************************!*\
  !*** ./asset/data/Devotion.data.png ***!
  \**************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

module.exports=(__webpack_require__(/*! alt1/base */ "../node_modules/alt1/dist/base/index.js").ImageDetect.imageDataFromBase64)("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")

/***/ }),

/***/ "./asset/data/Divert.data.png":
/*!************************************!*\
  !*** ./asset/data/Divert.data.png ***!
  \************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

module.exports=(__webpack_require__(/*! alt1/base */ "../node_modules/alt1/dist/base/index.js").ImageDetect.imageDataFromBase64)("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")

/***/ }),

/***/ "./asset/data/Dragon_Slayer-noborder.data.png":
/*!****************************************************!*\
  !*** ./asset/data/Dragon_Slayer-noborder.data.png ***!
  \****************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

module.exports=(__webpack_require__(/*! alt1/base */ "../node_modules/alt1/dist/base/index.js").ImageDetect.imageDataFromBase64)("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")

/***/ }),

/***/ "./asset/data/Dwarf_Weed.data.png":
/*!****************************************!*\
  !*** ./asset/data/Dwarf_Weed.data.png ***!
  \****************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

module.exports=(__webpack_require__(/*! alt1/base */ "../node_modules/alt1/dist/base/index.js").ImageDetect.imageDataFromBase64)("iVBORw0KGgoAAAANSUhEUgAAABkAAAAZCAYAAADE6YVjAAAAAW5vUEUAYtdMlAAAAAlub1BFAAAAAAAAAAAAoYpy1QAAApRJREFUeJzNVk1v00AQ9e56Gydxtmkc20mdD+rQNCUfrdokKIKqlRBCiCMCqRy4cOBAL/z/w8M7zrpW1SZu4MBc5u2H39uZHY9tWf+rTa6nMFjWJTbtfZbV2rWMrBbXIMsS3isPXPLdRcZXUxzHIxisSTNclWidtaC6Kplju4sEpwGEFESgThIym6HzugM1SLBgCM9DWI5F63m80ZAzIo4U+WgZodpyKRJNJlyB1nkLVtWC2LMJey89wlsFDDR6ru/en7KUnHwWQh0paHF9F/tug9a9Y4+eofkUbxTBY+NKvwKnXsbh5SFEVSAYB5D7yaU3fFrXEQppQ3UUuM2z+W3RZCIXN3NYklFklV6F/MHoACwhCyYBDuIE8xSn6WXr+cZmody9wOk5hKNFRD6YBeu1NH2MMYosnLUyUjP/pEheS3udCoMf+uaoCS4E/FM/S+3y3QrS3tteZSpQGZEo2U+KMMHRSKpKH8TgteB2y59+Mes+KaL3aVJup+9SHm+07rBDlXL7aUFEv25XaPvUThA0qKQR9gPy+nJt6gJp/u1ywR729jKmh+4S8tVZH1cXMZF/vDqB4AI/Pi/JN0c+Xbzee48LmE5D21d0em3vVyPyv7+/gV+v4O7bCo1acheMU0VZ6xcwmkfgrECT1GSa3MpVscaL8YTwzSLGzy/LpHJsvOiEkFLS+6FTJoumyZBqsumwnYmYqOjUbpnI9B6dJj9ooj1qF+/A+Taiqg7y46xk1ynpNdPGORwM4JSc3UQejg3++mGKo64Lvq6mUqn0vO9IEZF0heF6HiP03Od/qIqI9KIKBt3h7l/Bh6S5CsvWOE+iuDz9u58GQ2qGRs+MV+d93MzH/+TP5DGStMNOJ+iE/Z1E/gBvqgGVW8NuTwAAAABJRU5ErkJggg==")

/***/ }),

/***/ "./asset/data/EE_scuffed-top-noborder.data.png":
/*!*****************************************************!*\
  !*** ./asset/data/EE_scuffed-top-noborder.data.png ***!
  \*****************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

module.exports=(__webpack_require__(/*! alt1/base */ "../node_modules/alt1/dist/base/index.js").ImageDetect.imageDataFromBase64)("iVBORw0KGgoAAAANSUhEUgAAABkAAAANCAYAAABcrsXuAAAAAW5vUEUAYtdMlAAAAAlub1BFAAAAAAAAAAAAoYpy1QAAAIFJREFUeJxjYBiKIDI56b+7n+9/mlkQkZr63zc0hIYWpKf/D0+I+6+oa0AbSyKTk/+Hxcf+FxARoZ0vQmKj/xtY29DOgvCE+P8mdnY0jIfE+P96Rka0tcDMxpqWFiSAU5K2AY1SUkRSItgCRy9PGiVVqAUO7m408gE0szl6uJNsAQAEsjnLO9U7SwAAAABJRU5ErkJggg==")

/***/ }),

/***/ "./asset/data/Elder_Overload-noborder.data.png":
/*!*****************************************************!*\
  !*** ./asset/data/Elder_Overload-noborder.data.png ***!
  \*****************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

module.exports=(__webpack_require__(/*! alt1/base */ "../node_modules/alt1/dist/base/index.js").ImageDetect.imageDataFromBase64)("iVBORw0KGgoAAAANSUhEUgAAABkAAAAZCAYAAADE6YVjAAAAAW5vUEUAYtdMlAAAAAlub1BFAAAAAAAAAAAAoYpy1QAAAlxJREFUeJy11Nlu2kAUBmDUUMjSwgCOzeZAWcSOY8zqJBAgQCgmIQtJKC1JQEmlVrRVlYtKrfoE7WVfo6/4d8Bc9iIBPNKRxyP5fDNzZqzTPbL9/bWLg493iOeqeOw3T25KIYU/P9MQs0HtkIDUROX6HKaIqCHS/QR35xamsEZIQKgh8PU33CdDuE/fa4MEhTocnXuwJQWO5hsK3S0f8uZp8tcD6FeMYMM5uI5vsbFmWS7kHX6Du30D40sbPKUuHK23y0f80iHcSh/8+R08/c9Yc/mWv10hoQnv6Dv89z9gjqS0KXwoewS+92V6usyxzPKRaKIB/uIDuNolnptttOg3GpyswQOcnSEY+RAGKwtPbwyu0VseFNg9hffdA/izEaziHgxbPniuxnApA1i2dxeH+NYA9s4I9tY17PUuLEIe+ldhOC/GsB+NwBZqMC1aH44m4pRrcPU+uMoZ9IkcuPZQHaue0dt/BCIWsRJKzg/Zim1sVq/ANi4p1MVaVIJduaEXsT+tCbd/Alu+DpLMY5Xlnw6RTAVEKoFsF2GRKmD22mAqp2BKx7SvgNlpgcnVYBWKWA8I0G2ycyBSGSRNgyYhKRqCTJ8UjeXozGX1PZ4FiaSx4vRDx7nm2zKSKU9XQtIlNTHdf5Io0DFZjTgFIxJFvNAx9jmR1D4FaEye4s4MkVVImEU4pSI2bj6EFcozhCYXZbUfy88QebpVJDRDFmnm4La6gknSzL46+0ld4gWYQyLWg0k8s85R9P81I+uG0bEFEk1P60DCEgy+KHQmqzZ/ZP2GCZNYfcE8GvgHCssWq5Vz5VAAAAAASUVORK5CYII=")

/***/ }),

/***/ "./asset/data/Erethdor's_grimoire-noborder.data.png":
/*!**********************************************************!*\
  !*** ./asset/data/Erethdor's_grimoire-noborder.data.png ***!
  \**********************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

module.exports=(__webpack_require__(/*! alt1/base */ "../node_modules/alt1/dist/base/index.js").ImageDetect.imageDataFromBase64)("iVBORw0KGgoAAAANSUhEUgAAABsAAAAbCAYAAACN1PRVAAAAAW5vUEUAYtdMlAAAAAlub1BFAAAAAAAAAAAAoYpy1QAABMBJREFUeJzNlUtvG1UUx69fyfj9Httjj+3xzHjGj/H4MfbYjuOx0zSWkyYkBKsNKSmEEqpUqkqR2kWp2NAVrBCsEAsoq34HNrDie/AdWP65TiWoAJfQNhJHupvRvfd3zzn/8x9C/q/hixLTHybjJS8RLxxkXLoGc2MCzSRfMcskdiEgu4uk+1vk28nhIdZmMxidJnSB/HAhMLeblKtyCvlsCJuHB2hKCaxWONRy5Mlrh8nxCDQ+gFYhhlI6gp6cpJlFMNIyZ8vjIrVXI/jWfF4/Sc2z6hQTyIft+OS9Fj671cXjky6uWioG1RQGZQ4WBXoZ0oqzpD4/9584QS/Zmw7I3ZUG+aaUr8GgZRvrHEZ1AZvdIj7caeDRjR72RmX6PYtLjTyMagE7BzPkVHJ6fhLjmUq8gJ2dDqRKGQVRQFEWMaxk0K7wuP/OEA/fHdEsx5i2FWz1VKzQ70Z/gO5odLYSHLnzrxyXjeRDWfJzqxSDMbqM9vgyivUGpFoT24MK9qwKqkYbb037uL3fxb2rA+yulFGjvRSlEtYmE5iDAUpaBzbivvlCmMNByrKSgd/tRF3msTK5gqSkollMY/36EbzaFhi+D63dw/WtNk73TeyPdWhCFAofQYHurbfbuKxEcGdbQjxG1IUwG/EqTmcExWQAtWwEDdorvZBCrdWGU+wg98EDiLcewi+2sFaTsdct481xDSO9gKGWA8eGoBoGDC0P/eAaiI1vLC4jSQb5MPmumglhpcRhzShi3NFQOv4IsSu34bv3JVJv3IQ2vIRpq4j1moh1Q4apJlGnpYyzYQRCIfSoeoMxEy4Syi2ECTx53JVYmHTtW1Wqtjp2R1Xs3j+F7+gBuM4msu0NSOMpxvUCSjxL5Z9FQ4yjkAjC7/WAsdtRiKVhs5HRYpBIHvVHFqbrPawqWUxoidbbKgwxjZMbFvZPZvj4eBNquYzesPsMlg2jLsRRopWYDzytzVPi8M2ILT5dCEqmyPvt/oheYqHabFA7ymDdLGOjo2LaKUJJRCBEAqjwSdx7exVSKkJ7JMCQ46hQCysmQ/C4VVA1hxZC5mG3kxJN+beKrqNHZ2S0aqJLFdlQ0mewSUvGzNJwumtCivjAeRis6iKdLQ4dCpNSQSy7gngh5I/wab6Aj3zt8XigllSoqQC0XAxagYWl53GwoVPpZ6glCbDqeRxvGzSrLFoiC5nzI8CQF6vu+bDZSYr+m37iOA4+vx+JFIt01ActE0YtH8eWKVO74qCkWTQLaQx1AXUxAZUPIxdnwLjIL/M7zpfZM2DT4xWREmXEJQXeGAs2wFCnD6MlxDCs5tFo6pAlkfZQhpaPQmAZuF3k1/nZc4P+JPKN0sY2ooKMUCaPmM8G95IDCh1wWZHRGg6hVCrQyjKkpAeeJdv5y/fXkK07aM6OkO8O4XAtw+UgZ/2wEYKsTEtJlapQ2ZsUmsnlKIh5OdCSh5z4E7QX+4eIiT0KCCvz5XezSPgJXAwDsabDpGqdG20mm3v5rOZhI87PC31rPvmfPvcMOqDMU380CsbrRZFm1rYsRJLkR2pti63oPLEcJHfpLAz/9hA7+cLpciFEfY/lm/inPa8tXKQXpL373ul0XizoeSCxOZKvcsfvSOnMIGLqleEAAAAASUVORK5CYII=")

/***/ }),

/***/ "./asset/data/Fellstalk.data.png":
/*!***************************************!*\
  !*** ./asset/data/Fellstalk.data.png ***!
  \***************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

module.exports=(__webpack_require__(/*! alt1/base */ "../node_modules/alt1/dist/base/index.js").ImageDetect.imageDataFromBase64)("iVBORw0KGgoAAAANSUhEUgAAABkAAAAZCAYAAADE6YVjAAAAAW5vUEUAYtdMlAAAAAlub1BFAAAAAAAAAAAAoYpy1QAAAm1JREFUeJzNVllvm0AQHjAYfJA4tgE3wQfGB3HTqlV9xE6jVnnv8dhKiZRUav//P5juzLIGWbGNnT50XubbXfi+nWMXAP5XW8x9VPjkFHDXswdZw03JgjagZWvYHwAahna8yGLm4jgcosJEqnCprOFgDOi1SPgFIu0+YCHZZbsjcEHDyRtAhYcxoG3L6KIh+/1imDEau5586fIKsN6U6SHiSgU4CvKGKSMKOhLvFVBQ6dXqUmQoSExBQLs9DwBJnGpxWq3zOgnQOzSf4J0i+NzYF3mvOhqOJ4DlMmAYAToOYPOsweuWLYvv+pTGdH5fNGuRj9ch55/s/EJG2OtL0nAgI9N1iWV60/mdQpm6oO/rjKkuZOEIkjWRPoE1TUZGWHGo+a0iWS3yVGyFN303lF1GkanUfr4ZomkU93dZzU2JisXtIrouC001oZQRJuG9AmTZ3bvv320Voed6mbMkcQ6RMHS4qJPv35gofnrEsu8xtptN9kFwwp6Ka1npiZc4h72az/il+NcjetMP2FpMmfzi7g61goHxzx9Y0AucFnnKtQzOYZSGiu/z7sk6t5/YT/78xlK9IYSfEBxHdI7ObQrJAYxfi5qIuVwCRA6ZLiY8vpozbq1WOHq4R90w0Wu3xQ1gcrE5ZfYBUZAjstplvBZRURE2Ha4FtFZLTpPnnmHYL+W/gbPXiFl1MDte4yQlpSBgP4oicQvbx4lsjhXuff2CdreLoOtJN1mHfUfyiMgVDf3lEkuue/iHKo+IJdIUBuPjv4KbpJkOS9fofCxuXvbToEjVUOmpsTebYnR9+0/+TJ4jkd30doGB1ztK5C+/3vthReW1AgAAAABJRU5ErkJggg==")

/***/ }),

/***/ "./asset/data/Freedom.data.png":
/*!*************************************!*\
  !*** ./asset/data/Freedom.data.png ***!
  \*************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

module.exports=(__webpack_require__(/*! alt1/base */ "../node_modules/alt1/dist/base/index.js").ImageDetect.imageDataFromBase64)("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")

/***/ }),

/***/ "./asset/data/Gladiators_Rage-noborder.data.png":
/*!******************************************************!*\
  !*** ./asset/data/Gladiators_Rage-noborder.data.png ***!
  \******************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

module.exports=(__webpack_require__(/*! alt1/base */ "../node_modules/alt1/dist/base/index.js").ImageDetect.imageDataFromBase64)("iVBORw0KGgoAAAANSUhEUgAAABkAAAAZCAYAAADE6YVjAAAAAW5vUEUAYtdMlAAAAAlub1BFAAAAAAAAAAAAoYpy1QAAAudJREFUeJy9lWtPE1EQhk+7bbeU7fYG7ba7paXcChZjtERupbQUClUUCLHKRYgSYsTEBIwY4y1KTEgwMRqNkcSv/szXOdttQfjAFqqTTE57up3nzMw7ZxkzYR+LK/j6KI0tXxN28+sw85+6bcsrYk3yIMvi6GfKv4EUhYgOGCfn6xj525insbAMa6PgMR2SJy+QL4oMrxJB7KfSF4fxUx+HcJ80QDkjK+733T58CcvnA2YoOIeMnyhXVodUwPz7m/kRvNscwF7yan2gBS2HEQKMUbDssVNXnO9rtF/5fV4MYi8kYpp14slAHQqcki5jkEWx4lTx0hvCtNBWWzngyGM6eMOl4QZBBmnPNGSEADzAjqzgt+bFnD2qr68Dgb8gPMu1pggWhHbMEiTJWsxBsvYODFMAXvMqpGSLYlNS8C0UwOdgBcT7khdUPA5Y8CkoY4K1mwOcVBSHHJJyqplw56CqEEbp2QJL4L0viGeK3ywkpje2qigOuWlvxpYU1gEHrS16b3IGJM1CmGEduM260dOWOhtSlK8Y0300F0uihqI1hl8RH7YJyD9PGIOZ0bPgveiiKyd4NmA7YMeUoNWCH3dewnuiVpNwwciCH6ZEWaRZ5GzAg74kfq6mMGNTDUlGa9mcnpG4ngnPYpJ6UZeiNvwW/FDdtUBcwlmLegpSvU74AXgWObOK4jYsSNjwOJCxaii5FMw6FLygEg4RbFTPLlaDlGwKFh0RzFk6MSQmzEPu9F3HoNWDAYcPy4pM2rdihyBjhkxH9cGrgNab3fjQ6sRzWUXSjKJOmsQExJkbebsfZdmPmUCw0gerioeyRAprRcmSwJozgoKr+WJXfW+oB91WF4YdXr2Mu10+HMwm8D3i1u+oWyRbNxMb8/K6xCSUaeCG7Az7ihNlW1xXVK9ZRZmxVerFEgtj3WtH2elGt8BIDGrjAE+v3aV5oN7QsAVcXsx39CNkZQi7GvyO57bsTaEneg4V/S/7A9S5kSfZ3xTvAAAAAElFTkSuQmCC")

/***/ }),

/***/ "./asset/data/Greater_Death's_Swiftness-noborder.data.png":
/*!****************************************************************!*\
  !*** ./asset/data/Greater_Death's_Swiftness-noborder.data.png ***!
  \****************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

module.exports=(__webpack_require__(/*! alt1/base */ "../node_modules/alt1/dist/base/index.js").ImageDetect.imageDataFromBase64)("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")

/***/ }),

/***/ "./asset/data/Greater_Sunshine-noborder.data.png":
/*!*******************************************************!*\
  !*** ./asset/data/Greater_Sunshine-noborder.data.png ***!
  \*******************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

module.exports=(__webpack_require__(/*! alt1/base */ "../node_modules/alt1/dist/base/index.js").ImageDetect.imageDataFromBase64)("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")

/***/ }),

/***/ "./asset/data/Green_virus.data.png":
/*!*****************************************!*\
  !*** ./asset/data/Green_virus.data.png ***!
  \*****************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

module.exports=(__webpack_require__(/*! alt1/base */ "../node_modules/alt1/dist/base/index.js").ImageDetect.imageDataFromBase64)("iVBORw0KGgoAAAANSUhEUgAAABkAAAAZCAMAAADzN3VRAAAAAW5vUEUAYtdMlAAAAAlub1BFAAAAAAAAAAAAoYpy1QAAAGBQTFRFEi0GFkEIJUYLMFYOQGUKMGgOSnYMS2A3Z3E6qJV+rrKfxbmhZGRcWYQM19HC3eTK8OjXi3Vg9uzpjohYjIuEvNG9NEoKMz42aF43KCQPAAABHV4O7uvFrrCFY0o15big11FaswAAATpJREFUeJxV0oFygyAMAFAghAihoOLsWtft//9yCdi1i3pn8hIRT2OsAwnvPQKg7wHgrFHwPmiO+BQxIQUfgtaJSMZC7wNnQMqSIEwxMcesc1LwKj5cAlLkosGRsD8dxkzwAnWe51pLIgynSAcuCuu6znPhBkpjBmEZI6sORQhdsEvcuJYq5coxdUHTl8Fl+lgrM89ryRH6Lgz2F9hbSbXqWTbvw0sC5KtxqSRnrg3+CX2a231Z2/1m8uQvF9mhAZSARbpzypzNjTfUrYM5VJCY05zv+evBhcKYUZEOapHpRhzbBH0BkTEEbn/IF+Xd9cfjcXQJeFB09GD+3OWLvolcwM04cmaLTvJTJORGliAdo9EqYk+y3z+FqwAOssYOOg5HLS/0zOybiFn3l1j9ed7sVRfodJrVQ0+FX5zpGkBLTnXQAAAAAElFTkSuQmCC")

/***/ }),

/***/ "./asset/data/Immortality.data.png":
/*!*****************************************!*\
  !*** ./asset/data/Immortality.data.png ***!
  \*****************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

module.exports=(__webpack_require__(/*! alt1/base */ "../node_modules/alt1/dist/base/index.js").ImageDetect.imageDataFromBase64)("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")

/***/ }),

/***/ "./asset/data/Ingenuity_of_the_Humans-noborder.data.png":
/*!**************************************************************!*\
  !*** ./asset/data/Ingenuity_of_the_Humans-noborder.data.png ***!
  \**************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

module.exports=(__webpack_require__(/*! alt1/base */ "../node_modules/alt1/dist/base/index.js").ImageDetect.imageDataFromBase64)("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")

/***/ }),

/***/ "./asset/data/Kwuarm.data.png":
/*!************************************!*\
  !*** ./asset/data/Kwuarm.data.png ***!
  \************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

module.exports=(__webpack_require__(/*! alt1/base */ "../node_modules/alt1/dist/base/index.js").ImageDetect.imageDataFromBase64)("iVBORw0KGgoAAAANSUhEUgAAABkAAAAZCAYAAADE6YVjAAAAAW5vUEUAYtdMlAAAAAlub1BFAAAAAAAAAAAAoYpy1QAAArhJREFUeJzNVktT2lAUzlsICQnvIBQQ1KIQlRIe8lBEiwtHLXY67XTTme66KZv+/6+5JyQyjpVIu+jZnO/cm5zvntdNOO5/lfuPLfg4ayl46dlXSWXPCJzZjgEtrqB3lsXWlrg5yd3DMRp7B/Axc+pjI6FgNCti79AEz/Obk7QHFmTFO2Wr72JZxGxewVHXdNd5jGfbiMU42h/PCohEuPVkWBFm1+om6av7Mso1Lz3j6wLMlOQSFGEYHLYiHm71M4TXEvjQ5ytWdO+U10VEVQWDywIaLROM3HFrYWhJ2ndGWYqC1l28jgTP2fvNFNI5FRc3JRimhN4kj0RWQS6dof1ESqEo6rYJTReD9XXRBCQf5n0oikSR1W2NdGuYdmsioD/ZdtPkYtnDfhMw3HiXfplopS7Yb2QIX92VSQ8u88s9nuqjqjxFNrwqBE4ZFoT1HReQsGL7+KnujHOQ3I5zzixw2mOqZSnEcJaqRuAoGpP/SKLHBRx1MtByCiRJJOyMrHAzo+mPpz9tlP5IwqJ0xhaU5cSv4hdlelOnTll8m5Cjn/NT5JNxwm8smhv0z6ukm+00YrpM9WHvejiETJ1d6pDFwymGdgVju4qsqeGm9xaiIGLxeeCmSUZ7kKO5YQTtoY9DCEvDtntqdnom106d9K9PQ2RMFQt3PalzEEWR2pS9wgbw8rYEgRfCXSnMObfSxQx3DmzC05Mqftx2IUsSup0adCvqkgk0D6yGoaNgatqq4WgnH5As5oMAG7EoOWOELE2t7g7O3lfD38Cr10hcjWDV9jG/TEk5RY3Aff1+jlQmvhnJU9vHXyY2dtwmEJbdlEhqr/uOhCHxdnhMjquwEq8kCEtSyqvYLe5v/hV86nSlw4I9dumdHx/+3U+D79Q3fT7fHjUruDhp/pM/k+ec0FrvsIlitrwRyW8mKRLdD1IO4QAAAABJRU5ErkJggg==")

/***/ }),

/***/ "./asset/data/Lantadyme.data.png":
/*!***************************************!*\
  !*** ./asset/data/Lantadyme.data.png ***!
  \***************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

module.exports=(__webpack_require__(/*! alt1/base */ "../node_modules/alt1/dist/base/index.js").ImageDetect.imageDataFromBase64)("iVBORw0KGgoAAAANSUhEUgAAABkAAAAZCAYAAADE6YVjAAAAAW5vUEUAYtdMlAAAAAlub1BFAAAAAAAAAAAAoYpy1QAAAspJREFUeJzNVUlv2lAQ9gpmFSFsTgDbBAOxCYtZAiEhPVVESlVVTROp6qWHXtJD///p67xn7KAogIl66Fzmm2c03+wIwv8q7vwOAc7l89j124OkXK+Fzkz3HFoqhbbXhxqLvZ/Ena+QyHQRYOY0wKlsFu58gpOGRW8ibO/hfUTN/gUUVYWPHY69D0tYrgNZjaF7OYGmafy7czWFsMY7BRvCbN0yICkOhrc3KFWrPJPubIpULgP3kjTZaixOGU1h9bpQ4/HdJIFjBgO+gq775SHHakKDMxnD6NjQTQPtQR+idIRy/Q4NwoKWAAuq4TnbidYkeMvWqe7Z/DF6iysks2lq9hDZ3BFFXuHfNYYpI71lQEmrULXKXiLBHjwEJUNreE/1V7lda1lc2z2/V52RB4OwtMb6mQFBFNGZ0Pt5ezfRRl9QNnzHw+U116xk/jcRzuwSYjLJM3Om49CpMxtTKaW9QxCSsGYH+LVuUi9kRYU96IWlbY2+kI6wN8XT09BRPJHYSiJnMrAcfyllWeHY7vf4RO4l2Yx+elHbSsJ+x7JQ1Ni6ly94p9gUDZv3x5XHHT0/TlAppDkuHvGNR80yuTY6bWjUE9YfHhzHEWQxJAeiRM6nmPVruPaqKObTWC1syNTMn59HpGU0aarYEDCCFxxBWBn0QpZHz2Q5bnH958cMhVwSv5+myGcEiBREZzTk2bDFHNwsCO+fJk7AnAsbU8xwpehyfDs28evrCKqioH5Sgkq7IcmyX7L14YxEwhRz1m2WQpLnp0mIsyn/AN6OTF6mYqkEu+tGv76bZySTimPTDrAk+iWpFzJcn5kmtHiEy/sWyWs7wA8fXVjVFCTKYnVzj/ihf1ZRSL5/+sbLtPRMlI/TtHTn/56kdpKga9vkbwcTvOV0Y8JeeiKJGO66rgcQhWbAF9hzWs5eO8JdisK17e204tJu1N9F8hf7tRtiTWY0fAAAAABJRU5ErkJggg==")

/***/ }),

/***/ "./asset/data/Limitless-noborder.data.png":
/*!************************************************!*\
  !*** ./asset/data/Limitless-noborder.data.png ***!
  \************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

module.exports=(__webpack_require__(/*! alt1/base */ "../node_modules/alt1/dist/base/index.js").ImageDetect.imageDataFromBase64)("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")

/***/ }),

/***/ "./asset/data/Living_Death-noborder.data.png":
/*!***************************************************!*\
  !*** ./asset/data/Living_Death-noborder.data.png ***!
  \***************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

module.exports=(__webpack_require__(/*! alt1/base */ "../node_modules/alt1/dist/base/index.js").ImageDetect.imageDataFromBase64)("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")

/***/ }),

/***/ "./asset/data/Malevolence-noborder.data.png":
/*!**************************************************!*\
  !*** ./asset/data/Malevolence-noborder.data.png ***!
  \**************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

module.exports=(__webpack_require__(/*! alt1/base */ "../node_modules/alt1/dist/base/index.js").ImageDetect.imageDataFromBase64)("iVBORw0KGgoAAAANSUhEUgAAABkAAAAZCAYAAADE6YVjAAAAAW5vUEUAYtdMlAAAAAlub1BFAAAAAAAAAAAAoYpy1QAACFNJREFUeJxtVntQVOcdvYggr2VZll12gX3ffdy9u8sbFvYBi8vDBeQVQYRWwIJSCyiCSsTHZIyvGqsxY01TNWhqSiAa4qQqpuk4jaaZUVOzmElapTGNzhQ1KKLIY+/pB2lTJ9P712++e+d37jm/853vo6j/PX7P1aYspXQ7LzDKW2Olxw7Wx0+kyVRT1Qmm6RKDfrrEzExXsoapZUnxExlaZiycCvZmq/kH46VS23M9olhtImO1WoN/DBCg4vFqC/Tqz/RRSiw1yfGsLx/eAzbEBYciNS4OHr0Obo0GJrkSEQtikCsX4PIrLpztcEMVzrtBevxMoU0tO9l7on992753IiPpuOcBwtQC/oZCVn9fL1bgp3YVxk/YuadvpHJjh9JRYYoDI9XCrtYiIkSOHIkKbzUaOFxs4A62ebiIefNB8yRoaeocv3Hr1sNTZz6BVpL+K9J3AYXvQYISxOGbPQzzVBQkR2ep0jdzOhVPj1kwuo8Feh1Y71aQT/l4wSzFW/VyTL7jBK52o7OykKxTKMqrxMBZLzf6ZAK7d++ARlf67XwqyvGDVOkx/DqrWjeqj1DjzTq1DwNmTPSX4UlfOx4eLcXM78y41KHH8SY9uB498Ici3B/YhmWJtjmA9l904fzQv3D70ThaO1p8roIWLt+6dDRyHtVAXvtRtugAViOUew3hIlzYIvfhxhKMn16Nszs64bGkwrs9D74TSZg+kQIctWDqVDm8hzYiW2OaA1jTvgeDV67ii2++QWvXJmTnF6Gq9nUuTSqFIiTkS1YkmDWD306XKgYjvS7u2aW1eK+rHiVpqZCFhZEm89DbZgf3fj6+20tjenA5LrzcDDY6jvwehbUrt+CDv3rh/XoYG7dsRbrTiuWt/bDSNsSGBHN9q5ORxwheoxoKYm49uOhB3y+XcHY6E7LAIKgFESg2ahDDE6PdzcJ3Jgu+wRXo6VoBcZgAgQTg5/XbMOi9M8dgffdWWO2JWLmxH+7MVXMMDzYncVf3FnKiIOEQ9efdGc/KbQwEfmFcljoWHqMBDpUCubQKdKQIdpUYTy63Ym9jBQQBIQglDRprGvHxl3fxtzv/RNfWrbA7ktC86TSyM5vhT95vytcAg4u5TKUSVpniEWUWy54ZBRLiGgNKjEZkqZUERIksjQpOtRoL9Vo0ZqVAxReATxpUly7HtZu3cPPut2jfvA2ZjnSs3vwusjOa5xjUsNHAR7k42eJE1IJIVMazE1RVimVqEWnkVKtIYzXytBq4tTSyaRouWkPWtHAotZAF+aMgZymueYcxfO8e1m3uht1uxaqOATitKyD0p5CjiMO9HgfGz1XBo5SDEUtRZWanqHILO20jtPJ0WngMDBxa8ve0GvkGsrMZHZakJUEWEgibswKffnEL/7g/gs7uTXA60rB6bS9SzWWImk+BFsbg5q5E4JwbPS0lECzgEUXkKDToZqhFiaYZh0ZB5DIiRSpGvCSKyKaDi7AqMRlAhwbCZSvClaFhfP1gBBs2EZu6ktG47hQshmKY+X4QhQgxuJUG+tMxdnIlqhIZZMjlWGykUaTTzlAeVjedQ7LIrpShPDkV6QoLLOJwVMQnQivgw6iNx8ef/R3DIyNof/FFZGRkoq6tH4mGQqREh4G/IA7H15gIAxt8b2fhN62LyGx4YCQ0MhQqLGb0M1SZhZlykCFLgnloq/Bg+PRLiI81Q8/jIZLyx+tH+/BwcgotG9bAluVE3eo+aFU5cMbwiftU2F4WB5yx4P4uAyaPJOPyRhYdbjVK42XQCiVwKFRT1BKTcSJXr0FCbDT8/ULw0eFqXH7Vg8yUOrz59ge4P/4QHV3tyCmoRk3LABhFBpxSHhJj9ajPlMP3x1pMnWkALpRh6qQdOE5YDdjw6LdJ8O5PwuFV1gmqmDE8ztHIUWo0cCp+GGipEfd6GQwPrsWnd6cIQAdcC2thd++CVmRAkigUpSaWuJBGjk4FtzkJ6xYX42RnA64dWI/Hx9wYe5XF+OEs7sH7bahMM49RVoVyqFBHw03ruLQ4Efz9o7FnaSZ8R/g4t9MNJnsNPLld0ISGwiaLIpmlmdtHOcTqLlJbFbFQ8vlzEeQ2xGLyWDomepIx0tfGVaSngT8/bIhS8/k7apMTiGWNnEMphiAsEXWpCfjLBhmhzsf5I8vAKktgEoSTb2hiEPkcUDaxuWvW6rPWN+ohDhbhfDdxWC+Lp++1oNpl4wxCEZIlwh1UAEVZPEbmeh6Zizw8nmvKcGH/EjVWFhTiJzml+KonC1ePlSNBbkG6JBIeRk+aE6m0OjJUJRYS++slRG5WAe4EOXsGm9Fd6fHJI0Rw6+ghQUCAae5AiQyg6hR8/XhTipN7rUbmaypZjqgQmthTAj6Pxbuv1GFo4AiMUgapsWIsnE0Eso+ySUosZhnIwpX40xo58HklDjUU+xThAlQksKMx/JD6/568psD5GRurLamjv29IRGtBHYShMs6pEBJ5lNALeSTWg/GCy4Py+GTY5LEkdohUhMEigxYWKU0iSQpcycOHe+p9siABCkyGCToiYgvp/f0l4uKv2z450JT0XaOVnqzIKr8dLWQeVjLE56yBnOcqrtTIEENIQBPnFeqUyCUzmHVWHgEqNmsRRAm5My/pubuDjVxiZDwylYpHSWLxLADvh0tKa1XZyOMPc/HG+oo7FKWvjwulajIVmuulRIYixkD0V87J4yG1W6slNQlNpQo5ZJ2OVMKTIMHEpSrkGFlEB/M+T4mJnJUo6MfXrP21nobbA/t2DRBuMf9ZsxhEwpez1fR1AjRWYWYn8wlQiZFBpZlFLqnLSdYZo5VTl/dmTjQXGb+iKP+d5rhQ8/+7x/0bSDpFmpKVTP8AAAAASUVORK5CYII=")

/***/ }),

/***/ "./asset/data/Necrosis-noborder.data.png":
/*!***********************************************!*\
  !*** ./asset/data/Necrosis-noborder.data.png ***!
  \***********************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

module.exports=(__webpack_require__(/*! alt1/base */ "../node_modules/alt1/dist/base/index.js").ImageDetect.imageDataFromBase64)("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")

/***/ }),

/***/ "./asset/data/Omni_Guard_Special-top-noborder.data.png":
/*!*************************************************************!*\
  !*** ./asset/data/Omni_Guard_Special-top-noborder.data.png ***!
  \*************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

module.exports=(__webpack_require__(/*! alt1/base */ "../node_modules/alt1/dist/base/index.js").ImageDetect.imageDataFromBase64)("iVBORw0KGgoAAAANSUhEUgAAABkAAAANCAYAAABcrsXuAAAAAW5vUEUAYtdMlAAAAAlub1BFAAAAAAAAAAAAoYpy1QAAAU1JREFUeJzt01tLwnAYBnAhoo9QV0F1lyRElEKFWKKxDlrGPPXfmi6dmzNdy9FyeWJmB0UpE7oLIgr6jk+jD9DN9K7nA7w/eB5eh+M/VhrqEbz7NMYGEBJGsxyBJu2NB/EF/chzfgxMBncVGg9GFN1aHP3GyejAAOWDUQzB1I5xq9NoX9N4vImhV0/CteoZDeReXsDHIIeXuoAyQ6DzBPeVKDrVOAyNtY/shA7g33Ti+1WGzp6BWZPArYswBGLVFoMm7tpHqC0XahdhfA0lNJU4stsyTt3n4L0STDUBVaDsI/GwB+9PAj6HojV0EmJAxuTEFFZmN9BSCNScTSToXYKS3cFbL2MBBP0aCzlYxMy88/dwQSvZA9LcIfJsAF2dw3OLQecqhWpKRIlSMT3ntF9RxvrqQoTgMsGjraQwbLPoV3jU03mYOdFCFv9EfgBBma3JGnoMBAAAAABJRU5ErkJggg==")

/***/ }),

/***/ "./asset/data/Overloaded-noborder.data.png":
/*!*************************************************!*\
  !*** ./asset/data/Overloaded-noborder.data.png ***!
  \*************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

module.exports=(__webpack_require__(/*! alt1/base */ "../node_modules/alt1/dist/base/index.js").ImageDetect.imageDataFromBase64)("iVBORw0KGgoAAAANSUhEUgAAABkAAAAZCAYAAADE6YVjAAAAAW5vUEUAYtdMlAAAAARub1BFAAAAAEEgjiIAAAAJbm9QRQAAAAAAAAAAAKGKctUAAAEvSURBVEhL3da9agJBGIXhtReFNKZJYaNdEpsYtogiopVpLSKIIGIlgoVXYJFiG8ll5B6VM3CWb76Z2V1/ULB4m3XmPCyIGDXGtUN78ezU2b6cnG8H+5F+qC9+7+qmKCo54fmi/+Tc0ZspIg9xWAL7TWy1nMYpxOQGCiLyEpr+Nc3Yf9I1Jb8TC8HnSN7xIhrgRUaEgA9BISgXwdBg/GPVGY5Mo95nLmSQLABhZD6fWBFqfX04CMpE9GGEkdl6ZdLI2+u7F0HY4zcvF0EYqlbKTiEAybcxCB/4DqPHQEIAykJQISQLYHlvc3+kCMBC0P2RUwCmIW6mCKFrI9x2kHMAJiEL0b/ClyLYYNj0/tRfgiBC3EyRa0E+wIucC2kAOQiTh3CxaPIekps3+N9VOxwBgFEP7QxMBnUAAAAASUVORK5CYII=")

/***/ }),

/***/ "./asset/data/Perfect_Equilibrium-noborder.data.png":
/*!**********************************************************!*\
  !*** ./asset/data/Perfect_Equilibrium-noborder.data.png ***!
  \**********************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

module.exports=(__webpack_require__(/*! alt1/base */ "../node_modules/alt1/dist/base/index.js").ImageDetect.imageDataFromBase64)("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")

/***/ }),

/***/ "./asset/data/Poisonous-top-noborder.data.png":
/*!****************************************************!*\
  !*** ./asset/data/Poisonous-top-noborder.data.png ***!
  \****************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

module.exports=(__webpack_require__(/*! alt1/base */ "../node_modules/alt1/dist/base/index.js").ImageDetect.imageDataFromBase64)("iVBORw0KGgoAAAANSUhEUgAAABkAAAAOCAIAAABVWCAXAAAAAW5vUEUAYtdMlAAAAAlub1BFAAAAAAAAAAAAoYpy1QAAA0VJREFUeJxtktlPE1EUxufVuGNTsdDptMy001k7S2dYRJFolLqBIZaEUipQZDXUqlGjD2rcHiSiApqIRCNCjQSICJiIQUUlwQUkVVKMhBpNQHngP/CUCUSDycmdO+fc88v3nXsRRlRYSeUkldxloLITmVyUc5sczhQteDl5PlRts5iPlRaq0AsE4CAaCFLEjvjSOengnAQ4QUnVQJzktPEUzhGwwl7DxarzBxaJGg7RQJBN2qovnhGLfwmgDn6hM4kjAoHc4Z7rI30NY/23Lp8rhgzkNZwWi/KBg8RLqxPUNejGOGyzzhflfVGHZpbNRXm3aezZnYk3bZPv2qc+dkTfP5oYvI3HcIqg/AeH6PmVngjnibBLA8yOD7ZOvu/48enxdLh35vOTn6PtX1832nnWIauikiqqaYu4GEtHL88bpReC+XsD6iJvQ9GRrplwz+9I7+xE73S4Y2r4Ls4SnCgvlYbEkcsAp+dXgNncITsElqGD2cFVgNnxVy3RD52gaDbSM/ule7j72vhAg4WxMA7R4UwW/pWGzA8yRgWz2QO2nAESZodTuGdvWlfjiVDd0XB/8/cP7d+GWl48uDjSV1ftzYQqwwu8pAoLvdqKwNuBWcKVg7rdT60QCepagrQqqlWkklgCTRfJsd5bGTIl2EwpvHVbJkvYrDTH8/BEJEV7NEAADsKK8sataVUVNWvBLANmV8ZLqyykpbn2UDJrE+zmmsI9W2T6eMk+hcHTJar/4RmoUgzHChI4TclUqysPA4ERJITk2aKisp02fY5shKHaWc5GUWYrtj1Lbr0a7Kw/0Xy+SqYtbbWBl6GLz9vOlpe6zARmpex2loXzBU7jblLv91faeBqhHQLO4apZvx1fl+9MtNBmj9fr9rgTsQ2JRHzeDrX75qmu+pP9984dOeCCjBEz7Pe4PQU+OOlzGqFLwjcAATgxj3aOg8GkoDpvnrey7NiVuiYTiULPjbMlrs3ipUB+qDZYe6xwV4Zw/1rAaDGYSOPpM5fK/EGvu1A2r8dZKxCAE5s9fEiGSeLwitKjNcHrrS2DmB1FTYaKkqymC1WudMe2VMa1SQhdDQarslHMgFHo/ZaX1YeulPuD0EWyDBCA8wdLhUEsNEb8JwAAAABJRU5ErkJggg==")

/***/ }),

/***/ "./asset/data/Powerburst_prevention.data.png":
/*!***************************************************!*\
  !*** ./asset/data/Powerburst_prevention.data.png ***!
  \***************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

module.exports=(__webpack_require__(/*! alt1/base */ "../node_modules/alt1/dist/base/index.js").ImageDetect.imageDataFromBase64)("iVBORw0KGgoAAAANSUhEUgAAABkAAAAZCAMAAADzN3VRAAAAAW5vUEUAYtdMlAAAAAlub1BFAAAAAAAAAAAAoYpy1QAAAd1QTFRFAAAAb0UtcUcuOiQXUzMjVDUjKRkQPEVURk5NP0pKMkBAUV5UVmpqWW9xW3FzVW1vUWlrM0hHRmJmSGZqSGZrQmJlMU5PKkpNK1BVLFJWKE1QBw0OLEpMLU5RL1BTLU1PN09SOFFUOlFUO1JUO1JSOU9RM0ZQPE9QPVFTPlNUPlNVQFRXQFZXQFRWPlFSNkZSM0ZJO05QPlFTP1NUP1RVP1RWQ1ZZRFdZPlRXPVFUPFFSNkpMKUBEMElMN1BUNlBUNlFVOFRXOlZaPllcPVdaOlRYN1JWNVBUNU9TMUlKFB8hJTxBKENHK0lPLUtQLkxRME9TMFFWMlJWLk9TLUxRKktPLUtPMUxQJ0FEEBweHTU6JD9DJD9EJEBEJkJHKENJKERJJUJHIz9FIj5DIj1CIjk+CxQWEikxEi40Eyw0GC41GTE4GTM7GDI4GC82FSoxBgwOECgwFiwyFCoyFyo0Fy01FyozESoyECguCA8ZFyszFy42FzA4FCw1EiszDSAnCBIkFzA3FzE6FzU9CBIkBQcsFy40FzA5FzU+AgQqAgQqFisvES43FjA6AgQqFiUpECcwECoyBAkvESw3ESoxDSNAFD1JED1LFkVSAAAABxshBxwjFD9NBxshDRfz/LB5hAAAAJ90Uk5TAP///////+v////////////9////////////+P/////9/////////v/////////6///////////////////////////////////l9//////////////////j+f//////////////8f3///////////H+//////////H//////////////v/////8//////7/////////////z/////wBFvVU9wAAAPpJREFUeJxjYCACMDIx45BhYWXDLsHOwcmFVYKbh5ePXwCbjKCQsIioGFZN4hKSUtJYZWRk5eSxSigoKimrqGIIq6lraGpp6+hqaurpo0gYGBoZm5iametYaFlaWSPL2Nja2Ts4Ojm7uLq5e3h6Icl4+/j6+QcEBgWHhIaFR0Qia4qKjomNi09ITEpOSU1DdUJ6RmZWdk5uXl5+AbrrCouKS0rLyisqMf1TWlVdU1tXj8WnDY1NzU2NLVhkWtvaO9rbOrHIdHX39PZ092GT6Z8wcUJ/FxaZSZMnTJkweRIWmanTps+YPm0qFpmZs2bPmT0XVWzePCwKGRgA3pA9N6LdRVkAAAAASUVORK5CYII=")

/***/ }),

/***/ "./asset/data/Prayer_Renew_Active-noborder.data.png":
/*!**********************************************************!*\
  !*** ./asset/data/Prayer_Renew_Active-noborder.data.png ***!
  \**********************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

module.exports=(__webpack_require__(/*! alt1/base */ "../node_modules/alt1/dist/base/index.js").ImageDetect.imageDataFromBase64)("iVBORw0KGgoAAAANSUhEUgAAABkAAAAZCAYAAADE6YVjAAAAAW5vUEUAYtdMlAAAAAlub1BFAAAAAAAAAAAAoYpy1QAAAsJJREFUeJy1lv1LU3EUxv0zgiB/ECKjBWmaP2TktMgZSo5Rpg5Nw5UvjF6sZVuNzUEzW7VZyylFKLqyJFPUWJksoQlbFln4EpgppZGBWZixPe0cERLai5teuD/sfu/9fu5zznOeu4iIlR+gM19pQrbKgqXfIezjH5Cnrkdd3yfon4zi8ImqVQcx4Lp9Al/ngfE5D6rtk5DItWsDIcCHWQ8qvWpyFaYVQ/zJ5+s55VcZpF8OCBrCN2eXaQKCqPH5F8yhATJkSlzpGEBMyqGAoJAAwuzTONnQB0vvKLJ0VuwU5a2ac3iTJKkCRtswavun0TE8xzU/Y25H3H7pqoCQWaplBQQgx5A9HZ8XoOsZR5mli9fDAlGTr3l7QMPVNTqHH38AtwcMaxr4BrNtCOrb3UjalxNWf5AoluHIzU7ccEzB+WWBAU8/zuN823uIVWZEx+/1tQlfO66tQ7KkyC9osemSYigs3bhkG2MFBDhlbMWm7al+AbHJYq5EiaEZkdEJgUFbdklQYmpnA2SW10CQIAoIyNXcZTcqrS+xp1CFKIEwOEW6e30BAYVnDZzC8qZXaHBNQ9P2Fkdv9XBg/tM/36D0nFK/AFJMCprfzLDVX0z8ZtAdxyT0D/t5HOIyDgYG+QLEpxVAevk+yqxONsrgjBtTvxYT+dnYT5xrH+G1tJJK7E4W+YT4OthFxsdO7gG9OSkgAFmeTgLSINM63VdR07JUleAh1C+5oQWaBy5OYOu7WVawBCEolY/6c7HRzmm9LS515Z8AmhmxyoTiRgeree4t0dB3NwNotqhcVM4dWcewbsPmkFKCHxIIxfyWVY9cvCklBSnQdo5w46lv66Niw4oifjAlvYBdVFxv50hSt75mBVTSVG+ChANYBqLBIxfV2gZR0dCLxANFYSv4L2hjjJCHl76UkVFb1+4vkqyimiPGF+AvwxybWYF/sQwAAAAASUVORK5CYII=")

/***/ }),

/***/ "./asset/data/Prayer_active-noborder.data.png":
/*!****************************************************!*\
  !*** ./asset/data/Prayer_active-noborder.data.png ***!
  \****************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

module.exports=(__webpack_require__(/*! alt1/base */ "../node_modules/alt1/dist/base/index.js").ImageDetect.imageDataFromBase64)("iVBORw0KGgoAAAANSUhEUgAAABkAAAAZCAMAAADzN3VRAAAAAW5vUEUAYtdMlAAAAAlub1BFAAAAAAAAAAAAoYpy1QAAAQtQTFRFAAAAfrj/frj/frj/frj/frj/frj/frj/frj/g7r+carlb6Heb6Heb6HecarlebPzfrj/g7r+frj/frj/biMicarlg7r+j7/7g7r+frj/frj/frj/XR4d9T09b6Heg7r+j7/7frj/frj/frj/RxkW6DExb6Hej7/7j7/7j7/7g7r+frj/frj/LhMTcarlncb6rdD7frj/frj/frj/b6Heb6Heb6Heb6Heb6Heb6Hecarlncb6rdD7v9r8ncb6g7r+frj/frj/g7r+ncb6rdD7v9r8zuT8zuT83e37ncb66fT9g7r+6fT9j7/7g7r+j7/7g7r+3e37frj/g7r+g7r+frj/g7r+frj/g7r+iYtqCgAAAFl0Uk5TAAIDBQgEBgoOFxggIiYlHBs+FQf/OztoPCcaAf//WXKSQS0M//9+s76ybEkX/7ra4m4qFiQqNEVfgbXo9vjnrW9Iqen3+vv8/eb+c/+TPbFr/m2rpyyqCRhcPm5hAAABZUlEQVR4nGWSe1eCQBDFgQ1ZywqhUrBSwEIehWDvMMFnpKmhRt//k7TLq3Po/rm/Mzsz9w5BpCIpAPYAoEiiKLrEwDJkSnT+sn8Qq3J4dMxWWQ7yedFJrtOzWl0QIWik5Pwi1flls9WUZFHJ/mtfpWpfqx1NN2STSdFNrlura6m24fQYupFMULm7f3h8en55dfvu28DzHVMBeAyS5qEoG95wNJ5MJ+PR0DNkEfI0SVAxsAcIzN5nCA3sGFEEYDhB0tUAgw+MAlWXBI4BRAmy9blmuRgsMHItbV5nISD4crX22en2pwgsEJr2u51WbVnmcc2yULOaL3FN3Get4T5fSZ/VOukTz+aHm3y2Tegns2X7bNN9tra/S/ZBuwLFdHxvEyAPgm879wCpQUc9xwhV7FuIfIvoLAgUaGTKvq4hr/2dGf3FipEiylIhn/RDAEWhkGl2OjzkCneQ/8cz8AcyPF0E/+/tF2uERsEKuQV1AAAAAElFTkSuQmCC")

/***/ }),

/***/ "./asset/data/Protect_from_Magic-noborder.data.png":
/*!*********************************************************!*\
  !*** ./asset/data/Protect_from_Magic-noborder.data.png ***!
  \*********************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

module.exports=(__webpack_require__(/*! alt1/base */ "../node_modules/alt1/dist/base/index.js").ImageDetect.imageDataFromBase64)("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")

/***/ }),

/***/ "./asset/data/Protect_from_Melee-noborder.data.png":
/*!*********************************************************!*\
  !*** ./asset/data/Protect_from_Melee-noborder.data.png ***!
  \*********************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

module.exports=(__webpack_require__(/*! alt1/base */ "../node_modules/alt1/dist/base/index.js").ImageDetect.imageDataFromBase64)("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")

/***/ }),

/***/ "./asset/data/Protect_from_Necromancy-noborder.data.png":
/*!**************************************************************!*\
  !*** ./asset/data/Protect_from_Necromancy-noborder.data.png ***!
  \**************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

module.exports=(__webpack_require__(/*! alt1/base */ "../node_modules/alt1/dist/base/index.js").ImageDetect.imageDataFromBase64)("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")

/***/ }),

/***/ "./asset/data/Protect_from_Ranged-noborder.data.png":
/*!**********************************************************!*\
  !*** ./asset/data/Protect_from_Ranged-noborder.data.png ***!
  \**********************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

module.exports=(__webpack_require__(/*! alt1/base */ "../node_modules/alt1/dist/base/index.js").ImageDetect.imageDataFromBase64)("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")

/***/ }),

/***/ "./asset/data/Red_virus.data.png":
/*!***************************************!*\
  !*** ./asset/data/Red_virus.data.png ***!
  \***************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

module.exports=(__webpack_require__(/*! alt1/base */ "../node_modules/alt1/dist/base/index.js").ImageDetect.imageDataFromBase64)("iVBORw0KGgoAAAANSUhEUgAAABkAAAAZCAMAAADzN3VRAAAAAW5vUEUAYtdMlAAAAAlub1BFAAAAAAAAAAAAoYpy1QAAAHJQTFRFLAISPwclTggnYAsqbwwugw4onAgptAgmghM6fy1BaF43rrCFxbmhvdShkHI03tWr3eTK7uvFi3Vg8OjXjohYqJV+d0c7i1tdsZNX1RkiQRYoDwIQLAsn9uzpbSEvXi03jElCw+99aAgGY0o1TEI3ZGRcKrFlCwAAAV5JREFUeJxFUttWwzAMy8W5dElx07WUrUDHBv//i8jODqQvTRRJjmxjrHXeewrPRUTeOWuNsc7pcYwpppRijEC9QNYT6XmKecgKhiyQcV4IKYVTqeNYXvSKKAIhuRgK84TFJYAUgiDQUmBqujoEkoEN1GcBzlht4qUXYbz6L0oBIKQoJEXwV9baulxda0zKESCl5ZXPjZnbedr+OFJAorepTq2A0lZKWkLnXNJ83a+F6/t+XbD797kMp93u88e8WzMPFyXJS1HbXM2+1Y233fAqCYGDoOH0yVzbtm8NLx40O985KQ5z4cMcXN5u2MlTn4jQv2rlkSRF+EtuCBtNyYWGwuONSpZEyTntAuIO43oPOdxXCZR874J3onfwmkMu4xFDDBASNTgRPB884fvGH4mY1QHRHoXH8rM84Bm8127LiDwrh3Ho8+GcIlYwCSL2qfIyOQBMx5AEPWetT5v5BfxeFImxA7pVAAAAAElFTkSuQmCC")

/***/ }),

/***/ "./asset/data/Reflect.data.png":
/*!*************************************!*\
  !*** ./asset/data/Reflect.data.png ***!
  \*************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

module.exports=(__webpack_require__(/*! alt1/base */ "../node_modules/alt1/dist/base/index.js").ImageDetect.imageDataFromBase64)("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")

/***/ }),

/***/ "./asset/data/Resonance.data.png":
/*!***************************************!*\
  !*** ./asset/data/Resonance.data.png ***!
  \***************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

module.exports=(__webpack_require__(/*! alt1/base */ "../node_modules/alt1/dist/base/index.js").ImageDetect.imageDataFromBase64)("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")

/***/ }),

/***/ "./asset/data/Ruination-noborder.data.png":
/*!************************************************!*\
  !*** ./asset/data/Ruination-noborder.data.png ***!
  \************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

module.exports=(__webpack_require__(/*! alt1/base */ "../node_modules/alt1/dist/base/index.js").ImageDetect.imageDataFromBase64)("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")

/***/ }),

/***/ "./asset/data/Sign_of_Life-top.data.png":
/*!**********************************************!*\
  !*** ./asset/data/Sign_of_Life-top.data.png ***!
  \**********************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

module.exports=(__webpack_require__(/*! alt1/base */ "../node_modules/alt1/dist/base/index.js").ImageDetect.imageDataFromBase64)("iVBORw0KGgoAAAANSUhEUgAAABkAAAAMCAMAAACgLOZ5AAAAAW5vUEUAYtdMlAAAAAlub1BFAAAAAAAAAAAAoYpy1QAAAQJQTFRFAAAALFZeDhkgNE9fL3F0Ezk6ICU0Nk1gLm5xO42QL3R3EDIzIyc3N01gKmVoOoyPKWRnMnp9LnF0Bx8fJSk5REtoJ19iPJCTLnByIFBSLXBzARISKWNmOYmMM3t9HUlLFxslHSIuMmlxK2xvBRsbKGFkNoGEM3x+HkxOHyk0Mm5zI1pcAxcXKlhfNH6BIlVXFSQrMHV4IFRWCBYZNH2AOIiLI1lbDB4fMHZ5H1NVDhogKVtfMXZ5IVRWESssRVFsMXh7Mnl8GEJDBhMWL1ljPZKWIVZYGTw/QztZOVhpM32ADzAxFiQsOH6DQZufRKOnHVNVFBcgLGxuNoOGJVlcQkdhxBczNgAAAFZ0Uk5TAP////////////////////////////////////////////////////////////////////////////////////////////////////////////////+hc9syAAAAj0lEQVR4nGNggANGJgbsgJmFlQ2rBDsHJxc3DxYJXj5+AUEhYREMCVExcQlJKUFBaQwZGVk5eQVFJUFlFTQJVTV1DU0grSWorYMioaunp28AZhkKGhkjSTCamJqZQ9kWgpZWcAlrG3FbOxjH3sHRyRnKduFwdXP3gKvztPDy9oEwff38AwKRzA4SDw4JBdIAZVEPSxuGX0EAAAAASUVORK5CYII=")

/***/ }),

/***/ "./asset/data/Sorrow-noborder.data.png":
/*!*********************************************!*\
  !*** ./asset/data/Sorrow-noborder.data.png ***!
  \*********************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

module.exports=(__webpack_require__(/*! alt1/base */ "../node_modules/alt1/dist/base/index.js").ImageDetect.imageDataFromBase64)("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")

/***/ }),

/***/ "./asset/data/Soul_Split-noborder.data.png":
/*!*************************************************!*\
  !*** ./asset/data/Soul_Split-noborder.data.png ***!
  \*************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

module.exports=(__webpack_require__(/*! alt1/base */ "../node_modules/alt1/dist/base/index.js").ImageDetect.imageDataFromBase64)("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")

/***/ }),

/***/ "./asset/data/Split_Soul.data.png":
/*!****************************************!*\
  !*** ./asset/data/Split_Soul.data.png ***!
  \****************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

module.exports=(__webpack_require__(/*! alt1/base */ "../node_modules/alt1/dist/base/index.js").ImageDetect.imageDataFromBase64)("iVBORw0KGgoAAAANSUhEUgAAABkAAAAZCAIAAABLixI0AAAAAW5vUEUAYtdMlAAAAAlub1BFAAAAAAAAAAAAoYpy1QAABk5JREFUeJwdVVtsHGcVPv9lrrs79q7tje0kvpI4TVOnSZXQkDb0QtVSxEUqJEFqnirEA9AGoaaQPqA8tK8IFBFUwVPUKkigIOAltKRFcimNhaM6KDc78SWuL3HW692d3bn9/38429HMaGY0/3/O953vfEeWiw8L7nGQyDLGuGSe+OLUGAGgYL7F/QxDgylnjgBbYSs1TQbAUCAgvWZYB0SDmWQcOBOCOQxyyDRntuCuRVuAS79mptFM1wrOLlojmMvBpkU2/Q6MGZZhhKgtVjAQA1AeYFEQyoviAyhglmQ+5cW5Q6Fb0Vwzm+/wHnZZiTEHMZbgC/AYCANpauqe3Lat89Ri9e0kW5K0AJhgnJeDVzK11EonEZQUOSkKBqNM1xnYqa4U3XEELsRAK5lC0EAfsUrLunLfEryHsDNuS8qCgSQ0sZrNNHPtg4I1lF50ZVctuV7g5SHv6HTyl978U5wVkB+0xUOJ+iTKZhnXeTnOWGc9mmB0AEGDQHCLWG8lk779lZX6H7cUjgXuczavzNdnxqz9h3LHrzTPA4tyzldvrp/L9Opo1xkGBa0vB+5Ta+GlwNlroAXtujEmuSd5AdrEN7YUjs5Vft4T/KQ3/3QrXdvZ+cSoN9zJRsN0Me/4teS/qZq+tja3p/vXfrCvntwMk8mS/ySiIgGQFDTVi4OwZBlgI3D29AQ/dpKJxWRaqdyYv7/Xgx3OkenmlCOXMrWSQf4R70Baf2fDfiROPhY8x8BwRqxbkkSEYKi+DJQrt3ui3pd/diG9dqz7yP24VLRyJT/eYT2+DMVacquhars7jh8tv/2bpZeXN163md2dPwGYSOaSStrcWywnuE9q3IivzjUWomRN6dyDqOvNkZdrvNLhq9d2jndUd/9q9mddzjdf3X4m0mtdpTf8+PmV+lnBCwgpABhIJClQmXozupPqzQLr2WXv21l8cszbV7LzVayUHavA8WP0Liy962Dwg6HTX87Z52ob/X6YWPsC5yyCH2XvI5URqXVARWq5lc0zcIdy3z1UOD7sDve6WPAb5cDKKbxbt3858+l6eOd7gydPlHsvrfzrvc/fGgn25OVWyYqGFQFbBM4wlNR3eWcs8HZnan06vXhl7d0SGy6Lp1/bdnTEL/27qX67snS78tHXeo+9VN7imfB+2Puo+Pri5ofz+A9H5jvsEUf2CmIJUtKETTJzeG9X4YVt0ECoLcU3BuRyV0fh1OLmzQRm1/62p/OxF3tG9wcqQv6doa1HWidXo5/eieb+E16Yav6B+PKtYc8alNSuhFXyomYDBmPPsp7veGy3O3x6cWqpedtjXtm2vt1/5JmSsm25XE+vV3hVr95uXb0VTdxLp2zRYcmizXtID4QxBpMyXqiEf3rQ/Htf8CMfDt1N+Vrzw2Z0BeXISwNnDrpIfTtXTUqy+3Lt/MXKOSlDz+7p9Hf2iycQk0RVE1OVJIW2FwFVk9pwfqH6+nK4ty9/QulrLXXt0dKLs/HMxSr/4Zf23qggbbTFqxSdvoGuVz220MwqkVqn/jeYABqqo+HgCBbE2Wyn/0Kn942FjdOLm29K3udbnuMemKyd3zRDG/HjG3rzz5VzJacvgPpq8/K2/OFEX9eYUfUybKq2YrHd2AigsdWffyVwdzny/GL1rWb2mSvHhd3f49kLmxMLzVO3WlctGQ52n1xpfHC/djZvbXfEQKw+w/ahySzbfHHIpXoj7xywZcd6+E7gPDNW/t1c5YwUfRwbRWt0Af95N567HU24Vsnji4Mdz+bt7av19/qC7wMIjU2DCpBJhaFAj7yt6D3XjCfRWLX4sitnRrreQMiFyUc273St4JPwwr30aqe/o5bcA5zx5da+4FiqI9caT9X7lBjZbDsvDSrwDreST1vp/zgvEOQ4+9zgXy0xlKp5tHqL9o6p8Pe2LPbLw0R22+z1DaUT23pIiP7MpLQVo7yIOZKYNtXN1qWMBoShUliC24l6EGXzgueZolFQpLAWL6HRSjeVCcnv6DlqfZBilLaRcRIDadXL9IP5yi+QphaXGjKb5xU2jDbk63RRSAOZbw06okjGr02UmVpmQgvyABaQo6JKsMXxC//SJtUsJmjGCM4sbVzEECEzoC1Ok4lqFFPTGcYTvUFzUGGqMNKQ0Ig0oOhOJpFB4/89KFf+CGTW9QAAAABJRU5ErkJggg==")

/***/ }),

/***/ "./asset/data/Stunned.data.png":
/*!*************************************!*\
  !*** ./asset/data/Stunned.data.png ***!
  \*************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

module.exports=(__webpack_require__(/*! alt1/base */ "../node_modules/alt1/dist/base/index.js").ImageDetect.imageDataFromBase64)("iVBORw0KGgoAAAANSUhEUgAAABkAAAAZCAMAAADzN3VRAAAAAW5vUEUAYtdMlAAAAAlub1BFAAAAAAAAAAAAoYpy1QAAAg1QTFRF58hblWoV5M0R4LAU5M0RlWoVlWoVAAAAOy4ROy4Rqos34+6F9s9O/sYh0aQLrpAROy4R+98MOy4RDw4MOy4RaF43sZNXa1IfAAABDw4MDw4MkHI0TzUPJxgROy4ROy4Ra1Ifbz0ZZEMHDw4MOy4RJxgRJxgRDw4MOy4RwLNaaZMSa1IfTzUPDw4MOy4RDw4MDw4MDw4MDw4MJxgRjohY/rkNDw4MDw4MAAABDw4MJxgROy4RDw4MDw4MOy4Rbz0ZJxgRKCQPJxgRlWoVZEMHKCQPOy4RTzUPTzUPKCQPTzUPOy4RJxgRTEI3TzUPOy4RTzUPJxgROy4RDw4MKCQPTzUPTzUPdkwJOy4RZEMHDw4MDw4MOy4ROy4RZEMHOy4RaZMSKCQPDw4MAAABKCQPZEMHKCQPKCQPOy4RZEMHTzUPDw4MDw4MDw4MrpAROy4Rw5o5Oy4RkHI0aF430aQLTzUPOy4RTzUPTEI3TEI358hbjohYDw4MKCQPY0o1aF43Dw4MKCQPKCQP8MM2TEI3rpAROy4ROy4ROy4RrpARbz0ZJxgR5rRiKCQPOy4RTzUPbz0ZOy4RDw4MJxgRKCQPTEI3Oy4RDw4Mbz0Za1IfOy4RDw4MDw4MDw4MZEMHDw4MTzUPKCQPZEMHOy4RAAABDw4MJxgRZ3E6KCQPKCQPOy4RTzUPTEI3JxgROy4R5gnrkQAAAK90Uk5T/7Jm////LQAEVP///////5f//y0c////uEgc//8xD62W8P92lv+rFwL/fezAMqTjYwsRxv//dA0tCVhIj4Bb/4Qu55ABYflar/n5ogz6iQEPAgak5gYE/23JawYSAy0Q/9MCHEhIOA2BrQJPBG10Gv+p3IaSCFOS/0/jnhrC/zZYEdH/ywsKEdzaFRv/7ffn5+cb8h/n+2XP1TV8B6Bu78ce30uRDJb/GSD0SLgGJRvm80IAAAHySURBVHicXZHnc9QwEMUF1rLENlIk8Ali0456lJBATAtgegn9AoTOAQm9HP1oJnD03nvv/W9kdYRkhvdBo53fvHn7JMa6dXc49MCeVS7z/F6cCymrkcR8zpXUvbGPDjKe7xqpFPTtV0MklBJk1B8HDAzIYwYNlkpm9RAiQ40ZpoePQBwZZnK+HDVaKEeOGUsEa8fV1dUjjp8Q6QZfCa5i0BNtDk6abPNwytTGaWEOaAFHRNMrpEszgiCR0gAkMy2ZNXvO3A4yb/6ChcYsampavMSSpUYuW76iQlbmsTlaVb96TWViLKda1q5bv6HD17wRcdPmLZZ4TImC3LqN7ttb29p2IO7cBbsJsUwguSrs2bsPcb8GgANVB7VbPFSD7PARTa2PZo8hHjcgYwdOlELfPYns1OmsbR3l8czZ1CQQx9IterlzNofTG0bteP4CCCFFHJd93/MuXmINjEsuspevXBVObFUBfvkaS92iMWCu30ggCK2DuaF7s6wUuxWY23fu3rv/wKRp4JIjNCT6Jfbw0eMn1CWvnz4DhwBLk4SQUAyfv7DdX77C104lI3hT+zZJLPmnd0aEYc7z2PsPHzXwLvLpswmC9AttxWVLgZp0kq86KZXSkNFWf9VJvn3/0dr40yWH+I/8+k1HtYnBUIYEEH8AMDRhPRTxPJgAAAAASUVORK5CYII=")

/***/ }),

/***/ "./asset/data/Sunshine-noborder.data.png":
/*!***********************************************!*\
  !*** ./asset/data/Sunshine-noborder.data.png ***!
  \***********************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

module.exports=(__webpack_require__(/*! alt1/base */ "../node_modules/alt1/dist/base/index.js").ImageDetect.imageDataFromBase64)("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")

/***/ }),

/***/ "./asset/data/Super_Anti-Fire_Active-noborder.data.png":
/*!*************************************************************!*\
  !*** ./asset/data/Super_Anti-Fire_Active-noborder.data.png ***!
  \*************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

module.exports=(__webpack_require__(/*! alt1/base */ "../node_modules/alt1/dist/base/index.js").ImageDetect.imageDataFromBase64)("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")

/***/ }),

/***/ "./asset/data/Supreme_Overload_Potion_Active-noborder.data.png":
/*!*********************************************************************!*\
  !*** ./asset/data/Supreme_Overload_Potion_Active-noborder.data.png ***!
  \*********************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

module.exports=(__webpack_require__(/*! alt1/base */ "../node_modules/alt1/dist/base/index.js").ImageDetect.imageDataFromBase64)("iVBORw0KGgoAAAANSUhEUgAAABsAAAAbCAYAAACN1PRVAAAAAW5vUEUAYtdMlAAAAAlub1BFAAAAAAAAAAAAoYpy1QAAA0JJREFUeJzN1tlPU0EUBvBTaC9EJVpbESpUWjZbi5QiIosmRnEBE5eI4kag7hsWggooEAwYWYQmipAoCMriAlVEEky0Gg2rDShFWdrUJTH+Cfr2OYXog0+mchNP8r3Myy8zZ+65Q/Q/lkJBCpma4sThFM471nKHUutMOciqKgERt4pXTKsjVXd9KtLO6iEQUCGv2KK9tCmhqAxBqZn8YmJfEoReoK1h+VcRmH7GiRXwhs0KoJCYhg5o8oxQ51yDXE968jwxlx/Ml0LCCq9DlrgPflvSoc6uBCelTF6wFS20JzTjMjzm+4ATU67KUAZOQl95weLumKDKLIOHxAfK9HoEHy+GSEzfeME4OWlDDJegrWiCrqYdkpj1IKF3PC+YO+uZ7noXImu7EbDfwO/V99lOmzXFtxCgz0Hg4fMQzqNsXiBpAiVpr9yF8lABuxze0BTdgMJAWSIvWjDjWOCR21Dn10CecgpCLzG0RhOCT5ZAkkgXZwxxm0+ByoPVyDZZcLKxi/UqA0JlKMLL2xCaWQ7/5EOY7Ud1M4IllDagc+QzOt860PqsH9VNJhjO5UFd0oTIdhtUpQ+waNsBePpTFhtnbv+EdY9+Qec7hg078KhvBDfuPcau2vuINn9ExMP30DT0YgkD/VLPwm0e7XIZYsezZXD8E8yjLFYHOt6MoaKxHUm9o4jttSPKPAldhxVhjYNQ5tZCpIli/zjBPpcwWQpVWiY+wTLmmIr5nQ3lDe3YOGBF7LAdK3oY9nQM4a0jCLrYDK+IWIYJP7iG7aAqy+RnWMansT7rBKpuNiNx4C1iRuyIHmS7e2mDtu0DgsseQrJ8tesYa7jwNzbxkWHjMP7CrAx7w7DXdta7aYzTxbuOOetxzxCDHFPpH52Esb4Vm/7AtG3vEVTcCtHS5SAB98RlTJNCuW0v+qd25zzGiptNWNs3hBjWv+gBO3TPJ7CseRhyQwXc2cfuMuQs4RySrttJRceKjThWWo3NGXmIezWIlUM2RPXYENE1DnWNGdINu0HuVPpPmLNEtFjFZuAaTiqDxwJf+KfosfiAAbK00/BNPorZSyLZCKMa8lw5g08ET63cGc6dFgqE9J3lhzPT638P/QTmMrbDBwtjvAAAAABJRU5ErkJggg==")

/***/ }),

/***/ "./asset/data/Threads_Of_Fate.data.png":
/*!*********************************************!*\
  !*** ./asset/data/Threads_Of_Fate.data.png ***!
  \*********************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

module.exports=(__webpack_require__(/*! alt1/base */ "../node_modules/alt1/dist/base/index.js").ImageDetect.imageDataFromBase64)("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")

/***/ }),

/***/ "./asset/data/Time_Rift-noborder.data.png":
/*!************************************************!*\
  !*** ./asset/data/Time_Rift-noborder.data.png ***!
  \************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

module.exports=(__webpack_require__(/*! alt1/base */ "../node_modules/alt1/dist/base/index.js").ImageDetect.imageDataFromBase64)("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")

/***/ }),

/***/ "./asset/data/Torment-noborder.data.png":
/*!**********************************************!*\
  !*** ./asset/data/Torment-noborder.data.png ***!
  \**********************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

module.exports=(__webpack_require__(/*! alt1/base */ "../node_modules/alt1/dist/base/index.js").ImageDetect.imageDataFromBase64)("iVBORw0KGgoAAAANSUhEUgAAABkAAAAZCAYAAADE6YVjAAAAAW5vUEUAYtdMlAAAAAlub1BFAAAAAAAAAAAAoYpy1QAACDNJREFUeJxNVmlsVNcV/t42+z4ez9jGNnjBgF0oS1lFSJQKDBECokY1oiRpf7S0VUUamrQJiFYqKQU1ojQgUNWUKCFsDYGQtDZQCqQEEwKkYLxhD9738Xj292becntMg5r3dKUZ6d7vO/ec73zn8VVLVyyYt/SZ5XA4AgDstCy05hV6S95YUbXm7ub5P0ysra7Lrah8hq2Z+RxbUrySbV69kTUcfY8tKX9Cra1+Lrm8Yk1TibdsF52rwf8f7vEP3mv15S1YumqZJZWqqpz/7Iqp39iwc8ncDe/Wzlj/eo2/ZnZak53tY+3SD7YsxLPfqUBj3wUsWLUYq+rWIeiMiIquOIo902pWzFyz/ekZa47aLfbvEa5Eiz0m4sPhAaPsm4tnK3O2vbB5x46dW1/57WvuvIXV41oUXfFullVkZnYCm3+0BeWlvkennAKg9nQiOqFgIptg0cwAGxrvQ7GvYs7aWXV/DLqDL9M2x2Mifqx7XM3Z7N7v/+7VTcu+Vb2ofG4+Ogye6XYbRLOJ0wSeMws8sqPDCLcOPjolRwfBmSQYFLBPdHMKFE4yi+iL9hk5XfM/Xb721yFH6OeTqWeMgQdGjHDPoOPAmnxrjY+xmjI/9HmLOL1sOaY8uRIRToVmaDCYikCB9X9Jlqh0Zg9MooE0y8AiuMBzAty2fD6lKbSbsy4vq33ZaXbWPUoXoPv0VKwiS1erb8uiyMrBMrUYtT9dhaolTwKCEzYC1VUdXqv5EYdqtUHQFJhMxEfLMFSInBsqvRJdO6ElDIvF7plbsnQbx3HVvGQLPjE9Fg/tOdbGvX0ryvEch80zXXiq0A5/uQuKxY5cLot4Xy98boqeSPRkHEyTAU1HXMkhgyRUIzbJBkVJQ4SZH0kPsWL3lJpC95SN/IKiqpWx2/347NA7TG3rQHvKwE8WuVDsN2FOvgWG3QLZkMD0LMSsghCFHwjmg6c6+U0CBZADchw0JiOlRBC0FkAUaD8lzSzYMa944Tp+uqus+GG0C8FcBGLPCD7vTMNp4fHOzQQmBBMsdg4cp4GZbbD7vPDbRIg2G6VRwuhEFOPZYcSMOCLjafCijoyahJUTqV5ORHMT8FnzSviUoUhZU4KKJ3JsuBOpcAQqL+IPJ7/E53f7URHMQ1pWKQ0TyM8LQlRU5HgOfXeaYFhdaLh8GudP74e3gFRHwagkhpSanhQKpxuTGeUk3mNxk0h5yFoOjswwIuEuHD//EMF7N9DUcBshP0VNygmHBzEynoQgSpBGB3G3oR6H/3oIlUjBM9CMMhJeL9UNLAtGeJJkg0op5jiJEqsbfC6dw/BgH8K9t3Dm7Tdwdv9fMM2RRLbjFpKJNB3S4EMWA73deO3F78LS1oTg/Dlg0RF037iD997/EP9qvgtfiQe9Y4OkNAaOaUga45BZludTagajiQHULCrFhk3LUFFmx81PTyDaex9qZgCDTQ/hd7ugyjrceQEYJguisQScdgfkSAKXj59Bd38cF25ew6kjv8eUAENPrAcCZ4ZHKoRdsIBPZGT4PSa8ubMOe7duxMk3X8X+g9sxSMRXb17HwMNmqkkUSkzGYHuYbtOJ1b/aAavThRufnKFINWw/chheKnhxfBiFDhFUNtjspDwuTilTwXtsDmMsqqJ2/et45YUf42H9R6itDFBUu7DrN8/DEwLybA6UTK+AQbXxB/IQ7upB650v0H7vAVa++Dz6b32GlpOncWD3YVzvGCUPy0eCAnOY7HQbh86TH+hBdwnGcio+bGfY/FY9rn5wmgywDd+ursTf/vRLvLWtDt2tYWp16gmzA0OX/oEv6i+h9mdbMH/9WnRcv4n/NH2JPllGxrDDyltgY34osoacLhuTJKooMMwITGezglXQEcD2U1cQ7+lCb0s7+pu6wCkMgsUGhVwoa8jwOj1YtGgx5OQELhw8iMbbbQj5PAgVBqCkNbgkF7rSD5h1sh6Ez/fHunrtgheKJiBLJhh0eiFK07HtSD2sSgw6I+ugPrH7/fAECuAlouG+VqQ0kvNEDAJFu3rdWlSWT8PY0AQEK+HwaeSZQyiyFaA33tvLd4zeO+exeGCVrLBSl+qkilJ/PnV0CbYe+hjqyDAEliODzMEucuAlsvgs9YKqwhUspZoVklHyGI1EcH84hwpPKWQ9R+4cp+6X8SDSco4fjg8eC088aLYKEqfpKYMCga6JqPCWIinkY8fJixBSGWQyKSTlDHLUxQJNLo8rAMnhIO8iKRk6xkjW9wdjcFktyORko9JRxXXEOpq7xzuP8QysubHr8ptMV2M2s5s3BPJS6tQUuens0BzSvBmHL15Dtc+ObCxKzTmBjC0Aqz8EM40wXtchpaI4c7sdXlcQCT1hFJmL+KSeiDX2Ei5jzeRCHMuqmRMXO8/tc8CiCJrIjylDhkm0QVaiqPQV4NKDCA580gCV/udbeRTlhaBBQCJGlk8ELa0duN4twut2GAGzj2aUojS0fbRPzWZP0Dxh/FfDXo6mIvvOtp/czZmMREX+XBorInJMYVaTm1UFK9nxxiR2n2nFvk/DMJNLlzt5IjSDV1Nsz79bWam7gM1xz+DtcCQudPx9dywR2TeJ+2jGf+2rIhlLRfdeuPfxS12jzU1ekw0+cyGNMJ2zWCzcrJJyiGIAD4ck/OLkFex6/wO8e+kqth2/xgXMs7jZhWVcW7St6ejdP780nBjeO4n3Fe6jm+BrREommzzS2PnPTRc6zu4einXdd4mORD4fkt0mvzrVU6Y/Vb5YD0oz9DtdTvViq6ZIXHkKgtpyquXUnisd5zfRcDwyifOYYBL8v1Cu0asw3uMfAAAAAElFTkSuQmCC")

/***/ }),

/***/ "./asset/data/Turmoil-noborder.data.png":
/*!**********************************************!*\
  !*** ./asset/data/Turmoil-noborder.data.png ***!
  \**********************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

module.exports=(__webpack_require__(/*! alt1/base */ "../node_modules/alt1/dist/base/index.js").ImageDetect.imageDataFromBase64)("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")

/***/ }),

/***/ "./asset/data/Undead_Slayer-noborder.data.png":
/*!****************************************************!*\
  !*** ./asset/data/Undead_Slayer-noborder.data.png ***!
  \****************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

module.exports=(__webpack_require__(/*! alt1/base */ "../node_modules/alt1/dist/base/index.js").ImageDetect.imageDataFromBase64)("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")

/***/ }),

/***/ "./asset/data/Vulnerability_bordered.data.png":
/*!****************************************************!*\
  !*** ./asset/data/Vulnerability_bordered.data.png ***!
  \****************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

module.exports=(__webpack_require__(/*! alt1/base */ "../node_modules/alt1/dist/base/index.js").ImageDetect.imageDataFromBase64)("iVBORw0KGgoAAAANSUhEUgAAABQAAAAUCAMAAAC6V+0/AAAAAW5vUEUAYtdMlAAAAAlub1BFAAAAAAAAAAAAoYpy1QAAAE5QTFRFzAAAAAAAkJTGV1OCOCxYMSJALTA/rrzaz9fnz9v48u/83t/2wMbT+/397u7w3+Dmur7Bem2odmOXqKnZXmaHaU6AgYexYmmW8u/8kYu4HMUzxwAAABp0Uk5T/wD/////////////////////////////n/9AuCgXAAAAfUlEQVR4nI2Q2Q6EMAhFbXFtS3HsuP3/j7oQlHGM8b7QntycBLLsNuYvj9BCXpQ5VCesda1h+MOMa7jpNfTiDIgYqXbraMX50c2OYUoa2sRNu76/PQDsUJzOB64FcuIctj9GxG2ODKdZO2dzOo8kcaqdSF/JEyLFF6e7wpssKXkEBFTLeDMAAAAASUVORK5CYII=")

/***/ }),

/***/ "./asset/data/antifire_top.data.png":
/*!******************************************!*\
  !*** ./asset/data/antifire_top.data.png ***!
  \******************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

module.exports=(__webpack_require__(/*! alt1/base */ "../node_modules/alt1/dist/base/index.js").ImageDetect.imageDataFromBase64)("iVBORw0KGgoAAAANSUhEUgAAABkAAAANCAYAAABcrsXuAAAAAW5vUEUAYtdMlAAAAARub1BFAAAAAEEgjiIAAAAJbm9QRQAAAAAAAAAAAKGKctUAAANMSURBVDhPdZJLbBtVFIZnU1SJKoXQpI5bx67tiT3vx52x0xBoFBKPXZxWaUMxIVIDjt1A1AViAxKiG4LEgocQO6QuK3XXUgmxA9QFrZCQ2KGCeCRO41ejYNT1z7m3sWsp6uKbc+655/7/PTMj6W4GBsvCJA5FD+BQjBDxKdj+STh+FtOejBk/gZyXwFwmjlmKMwSvu35G9HEsjjcu4Hpcl+tLXQO+8UzyIKr/MlQ7DIflgySWxKyfxE/WBTTNMhrWG9g5Y6JhXxRrXs+TEe+Z8K19Zl0jqWvAN49oT6PcclBuOniO8oZBwn08KDp4cC6NdjC+b6/EdLqUDCcz8dhsz0gKsQGE2GGCxwEsb9hY3rR76y5Fmur70xH8+HIEX8+MIsdkfG5PoTU9heYLBdTNN/GzWaJXut9Iijw/iKV7JmH00V3zaCIyOYg/5uOoL5wQLE7YcFgGL7oa5kj0bpBC61QO23oZWzRVjo31jIRJ/KVhlH7VnoAuYnxmGPfPx1AntgnPdlDIWlg9pcFnDN8Gx9GYpGmcJTJawV2jhICletNIqWIY/SzcUQhV5Om+en0hisYek7aB94M05sd1FJ0k7msV1LPzFFcEW7SuOh5OeuyRCX8EroIttQL9fATzP6QE+sIo7swlYJo2LN1AszSK9usRtJciuEf5x2fHEJhx1NQVoiKE804KFZuhRjmH6woTh95Z3lFRUyqwF2OY+25MYC+eQO2VKD6alsF0BTvVMHbXRrB7maZ6K4wbZ8PiTJeiJcNzGQJbwSaZ8lreUZD1PEg5W8Nt9TVspKtgFxPw+nAMA9tc/N2j6HwwhP/Wh9BafxY3l0awQSIbSlVQ0BP45VwUU76LSdfGZ8asqHNdri8VLA3/kAEnb6nir6m9GsXm8nGoqg4tnUbnkyE8/OoI2p8O4pvVkV4/Z302AlfX0C4fw+8XYrDpfIF0epqPTHT8naoKCqYGl5paZHAlkKEoGtKpFB5eHUb7y0HcrISo71KPW2shMEWmb6Zi950QmnTOYT6ZaHs9pEn6UsHU8efYJfxF8JxR087bI/jwTBLMUvDbF0exe52+weox0dPl1nsxdK4N0BQyDDLpXBnCzlqYLunjtKGLHq5bMHX8D+vtgvAM88gBAAAAAElFTkSuQmCC")

/***/ }),

/***/ "./asset/data/fsoaSpecBuff-noborder.data.png":
/*!***************************************************!*\
  !*** ./asset/data/fsoaSpecBuff-noborder.data.png ***!
  \***************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

module.exports=(__webpack_require__(/*! alt1/base */ "../node_modules/alt1/dist/base/index.js").ImageDetect.imageDataFromBase64)("iVBORw0KGgoAAAANSUhEUgAAABkAAAAZCAYAAADE6YVjAAAAAW5vUEUAYtdMlAAAAAlub1BFAAAAAAAAAAAAoYpy1QAAAiZJREFUeJzFlUtvEmEYhYdiDF6gtCihGehQGDrDMHcKTGeAluvQUi4SAWPTGqORmmCt1zRu0V9jdO3S/2L8BS5dHAeMJk3cUGbiSb7le57vPe93IYgF5BvpSH09BffpISJfnsLdFLCI3wUNzDau5qKoHqdwMuJwOhZgPFHh8l+3D2JIOjIyjeEgjsePGDDSbQSMEIg1YgZJ1muo5u8sDuTVTWiHPKjXBRDXlkBkroAwCMhJHrkzDcTqjfkh/IZ0oaiaF3FvSGO5z4Lo+EFUPTg+SeDduYrGpAz/pI1vH3/Sc4Pumvt/QYWCBNbqxJ2z5tALwNPy4cGIwds3MurvK/B+6ICJ8PN3Q0fD6JeHs0JZoHGwx0E9ouDRg9gbpfDiTJxBzEkJ7p5y+ZnEKBIKz0BL8xh0s5axgkqZROM+h5fnaYxfqVgfG3AFbi42+IyYRGNHQ6uexfNninWEZUQTYZARL9bCXhBB32KANM+iVsyAS1CoGFto1/IoaqJ994ONU4hbcYVDq1BFKzIlhWJOBkWS9kH4zQ1oKo/StgKJS0CXt+0z/6PprrekJJJ01H7zqcyCDp7mnDH/DTAQWFl2BvD98w9FZGJg4zHnOuiU6ijpaecAU7Uqu8gKkrOQxk4BLHWJR+5fGvWOZkbdUguH+300y3n0TBOhYMDeLowMie5BDCt+D1yupdmyFTCVYKzjlplwLv/mroa09T+UixvOQYSUzdn/D/0CmevcrDFmoj8AAAAASUVORK5CYII=")

/***/ }),

/***/ "../node_modules/css-loader/dist/cjs.js!./css/betterbuffsbar.css":
/*!***********************************************************************!*\
  !*** ../node_modules/css-loader/dist/cjs.js!./css/betterbuffsbar.css ***!
  \***********************************************************************/
/***/ ((module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _node_modules_css_loader_dist_runtime_noSourceMaps_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../node_modules/css-loader/dist/runtime/noSourceMaps.js */ "../node_modules/css-loader/dist/runtime/noSourceMaps.js");
/* harmony import */ var _node_modules_css_loader_dist_runtime_noSourceMaps_js__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_node_modules_css_loader_dist_runtime_noSourceMaps_js__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _node_modules_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../node_modules/css-loader/dist/runtime/api.js */ "../node_modules/css-loader/dist/runtime/api.js");
/* harmony import */ var _node_modules_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(_node_modules_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1__);
/* harmony import */ var _node_modules_css_loader_dist_runtime_getUrl_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../node_modules/css-loader/dist/runtime/getUrl.js */ "../node_modules/css-loader/dist/runtime/getUrl.js");
/* harmony import */ var _node_modules_css_loader_dist_runtime_getUrl_js__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(_node_modules_css_loader_dist_runtime_getUrl_js__WEBPACK_IMPORTED_MODULE_2__);
// Imports



var ___CSS_LOADER_URL_IMPORT_0___ = new URL(/* asset import */ __webpack_require__(/*! ../../../asset/nis/bg.png */ "./asset/nis/bg.png"), __webpack_require__.b);
var ___CSS_LOADER_URL_IMPORT_1___ = new URL(/* asset import */ __webpack_require__(/*! ../../../asset/buffs/overload.png */ "./asset/buffs/overload.png"), __webpack_require__.b);
var ___CSS_LOADER_URL_IMPORT_2___ = new URL(/* asset import */ __webpack_require__(/*! ../../../asset/buffs/desat/overload-desat.png */ "./asset/buffs/desat/overload-desat.png"), __webpack_require__.b);
var ___CSS_LOADER_URL_IMPORT_3___ = new URL(/* asset import */ __webpack_require__(/*! ../../../asset/buffs/elder_overload.png */ "./asset/buffs/elder_overload.png"), __webpack_require__.b);
var ___CSS_LOADER_URL_IMPORT_4___ = new URL(/* asset import */ __webpack_require__(/*! ../../../asset/buffs/desat/elder_overload-desat.png */ "./asset/buffs/desat/elder_overload-desat.png"), __webpack_require__.b);
var ___CSS_LOADER_URL_IMPORT_5___ = new URL(/* asset import */ __webpack_require__(/*! ../../../asset/buffs/weapon_poison.png */ "./asset/buffs/weapon_poison.png"), __webpack_require__.b);
var ___CSS_LOADER_URL_IMPORT_6___ = new URL(/* asset import */ __webpack_require__(/*! ../../../asset/buffs/desat/weapon_poison-desat.png */ "./asset/buffs/desat/weapon_poison-desat.png"), __webpack_require__.b);
var ___CSS_LOADER_URL_IMPORT_7___ = new URL(/* asset import */ __webpack_require__(/*! ../../../asset/buffs/darkness.png */ "./asset/buffs/darkness.png"), __webpack_require__.b);
var ___CSS_LOADER_URL_IMPORT_8___ = new URL(/* asset import */ __webpack_require__(/*! ../../../asset/buffs/desat/darkness-desat.png */ "./asset/buffs/desat/darkness-desat.png"), __webpack_require__.b);
var ___CSS_LOADER_URL_IMPORT_9___ = new URL(/* asset import */ __webpack_require__(/*! ../../../asset/buffs/animate_dead.png */ "./asset/buffs/animate_dead.png"), __webpack_require__.b);
var ___CSS_LOADER_URL_IMPORT_10___ = new URL(/* asset import */ __webpack_require__(/*! ../../../asset/buffs/desat/animate_dead-desat.png */ "./asset/buffs/desat/animate_dead-desat.png"), __webpack_require__.b);
var ___CSS_LOADER_URL_IMPORT_11___ = new URL(/* asset import */ __webpack_require__(/*! ../../../asset/buffs/perfect_eqilibrium.png */ "./asset/buffs/perfect_eqilibrium.png"), __webpack_require__.b);
var ___CSS_LOADER_URL_IMPORT_12___ = new URL(/* asset import */ __webpack_require__(/*! ../../../asset/buffs/desat/perfect_eqilibrium-desat.png */ "./asset/buffs/desat/perfect_eqilibrium-desat.png"), __webpack_require__.b);
var ___CSS_LOADER_URL_IMPORT_13___ = new URL(/* asset import */ __webpack_require__(/*! ../../../asset/buffs/balance_by_force.png */ "./asset/buffs/balance_by_force.png"), __webpack_require__.b);
var ___CSS_LOADER_URL_IMPORT_14___ = new URL(/* asset import */ __webpack_require__(/*! ../../../asset/buffs/desat/balance_by_force-desat.png */ "./asset/buffs/desat/balance_by_force-desat.png"), __webpack_require__.b);
var ___CSS_LOADER_URL_IMPORT_15___ = new URL(/* asset import */ __webpack_require__(/*! ../../../asset/buffs/time_rift.png */ "./asset/buffs/time_rift.png"), __webpack_require__.b);
var ___CSS_LOADER_URL_IMPORT_16___ = new URL(/* asset import */ __webpack_require__(/*! ../../../asset/buffs/desat/time_rift-desat.png */ "./asset/buffs/desat/time_rift-desat.png"), __webpack_require__.b);
var ___CSS_LOADER_URL_IMPORT_17___ = new URL(/* asset import */ __webpack_require__(/*! ../../../asset/buffs/instability.png */ "./asset/buffs/instability.png"), __webpack_require__.b);
var ___CSS_LOADER_URL_IMPORT_18___ = new URL(/* asset import */ __webpack_require__(/*! ../../../asset/buffs/desat/instability-desat.png */ "./asset/buffs/desat/instability-desat.png"), __webpack_require__.b);
var ___CSS_LOADER_URL_IMPORT_19___ = new URL(/* asset import */ __webpack_require__(/*! ../../../asset/buffs/gladiators_rage.png */ "./asset/buffs/gladiators_rage.png"), __webpack_require__.b);
var ___CSS_LOADER_URL_IMPORT_20___ = new URL(/* asset import */ __webpack_require__(/*! ../../../asset/buffs/desat/gladiators_rage-desat.png */ "./asset/buffs/desat/gladiators_rage-desat.png"), __webpack_require__.b);
var ___CSS_LOADER_URL_IMPORT_21___ = new URL(/* asset import */ __webpack_require__(/*! ../../../asset/buffs/necrosis.png */ "./asset/buffs/necrosis.png"), __webpack_require__.b);
var ___CSS_LOADER_URL_IMPORT_22___ = new URL(/* asset import */ __webpack_require__(/*! ../../../asset/buffs/desat/necrosis-desat.png */ "./asset/buffs/desat/necrosis-desat.png"), __webpack_require__.b);
var ___CSS_LOADER_URL_IMPORT_23___ = new URL(/* asset import */ __webpack_require__(/*! ../../../asset/buffs/aura.png */ "./asset/buffs/aura.png"), __webpack_require__.b);
var ___CSS_LOADER_URL_IMPORT_24___ = new URL(/* asset import */ __webpack_require__(/*! ../../../asset/buffs/desat/aura-desat.png */ "./asset/buffs/desat/aura-desat.png"), __webpack_require__.b);
var ___CSS_LOADER_URL_IMPORT_25___ = new URL(/* asset import */ __webpack_require__(/*! ../../../asset/buffs/bonfire.png */ "./asset/buffs/bonfire.png"), __webpack_require__.b);
var ___CSS_LOADER_URL_IMPORT_26___ = new URL(/* asset import */ __webpack_require__(/*! ../../../asset/buffs/desat/bonfire-desat.png */ "./asset/buffs/desat/bonfire-desat.png"), __webpack_require__.b);
var ___CSS_LOADER_URL_IMPORT_27___ = new URL(/* asset import */ __webpack_require__(/*! ../../../asset/buffs/erethdors_grimoire.png */ "./asset/buffs/erethdors_grimoire.png"), __webpack_require__.b);
var ___CSS_LOADER_URL_IMPORT_28___ = new URL(/* asset import */ __webpack_require__(/*! ../../../asset/buffs/desat/erethdors_grimoire-desat.png */ "./asset/buffs/desat/erethdors_grimoire-desat.png"), __webpack_require__.b);
var ___CSS_LOADER_URL_IMPORT_29___ = new URL(/* asset import */ __webpack_require__(/*! ../../../asset/buffs/lantadyme_incense.png */ "./asset/buffs/lantadyme_incense.png"), __webpack_require__.b);
var ___CSS_LOADER_URL_IMPORT_30___ = new URL(/* asset import */ __webpack_require__(/*! ../../../asset/buffs/desat/lantadyme_incense-desat.png */ "./asset/buffs/desat/lantadyme_incense-desat.png"), __webpack_require__.b);
var ___CSS_LOADER_URL_IMPORT_31___ = new URL(/* asset import */ __webpack_require__(/*! ../../../asset/buffs/dwarf_weed_incense.png */ "./asset/buffs/dwarf_weed_incense.png"), __webpack_require__.b);
var ___CSS_LOADER_URL_IMPORT_32___ = new URL(/* asset import */ __webpack_require__(/*! ../../../asset/buffs/desat/dwarf_weed_incense-desat.png */ "./asset/buffs/desat/dwarf_weed_incense-desat.png"), __webpack_require__.b);
var ___CSS_LOADER_URL_IMPORT_33___ = new URL(/* asset import */ __webpack_require__(/*! ../../../asset/buffs/fellstalk_incense.png */ "./asset/buffs/fellstalk_incense.png"), __webpack_require__.b);
var ___CSS_LOADER_URL_IMPORT_34___ = new URL(/* asset import */ __webpack_require__(/*! ../../../asset/buffs/desat/fellstalk_incense-desat.png */ "./asset/buffs/desat/fellstalk_incense-desat.png"), __webpack_require__.b);
var ___CSS_LOADER_URL_IMPORT_35___ = new URL(/* asset import */ __webpack_require__(/*! ../../../asset/buffs/kwuarm_incense.png */ "./asset/buffs/kwuarm_incense.png"), __webpack_require__.b);
var ___CSS_LOADER_URL_IMPORT_36___ = new URL(/* asset import */ __webpack_require__(/*! ../../../asset/buffs/desat/kwuarm_incense-desat.png */ "./asset/buffs/desat/kwuarm_incense-desat.png"), __webpack_require__.b);
var ___CSS_LOADER_URL_IMPORT_37___ = new URL(/* asset import */ __webpack_require__(/*! ../../../asset/buffs/anticipation.png */ "./asset/buffs/anticipation.png"), __webpack_require__.b);
var ___CSS_LOADER_URL_IMPORT_38___ = new URL(/* asset import */ __webpack_require__(/*! ../../../asset/buffs/desat/anticipation-desat.png */ "./asset/buffs/desat/anticipation-desat.png"), __webpack_require__.b);
var ___CSS_LOADER_URL_IMPORT_39___ = new URL(/* asset import */ __webpack_require__(/*! ../../../asset/buffs/barricade.png */ "./asset/buffs/barricade.png"), __webpack_require__.b);
var ___CSS_LOADER_URL_IMPORT_40___ = new URL(/* asset import */ __webpack_require__(/*! ../../../asset/buffs/desat/barricade-desat.png */ "./asset/buffs/desat/barricade-desat.png"), __webpack_require__.b);
var ___CSS_LOADER_URL_IMPORT_41___ = new URL(/* asset import */ __webpack_require__(/*! ../../../asset/buffs/devotion.png */ "./asset/buffs/devotion.png"), __webpack_require__.b);
var ___CSS_LOADER_URL_IMPORT_42___ = new URL(/* asset import */ __webpack_require__(/*! ../../../asset/buffs/desat/devotion-desat.png */ "./asset/buffs/desat/devotion-desat.png"), __webpack_require__.b);
var ___CSS_LOADER_URL_IMPORT_43___ = new URL(/* asset import */ __webpack_require__(/*! ../../../asset/buffs/divert.png */ "./asset/buffs/divert.png"), __webpack_require__.b);
var ___CSS_LOADER_URL_IMPORT_44___ = new URL(/* asset import */ __webpack_require__(/*! ../../../asset/buffs/desat/divert-desat.png */ "./asset/buffs/desat/divert-desat.png"), __webpack_require__.b);
var ___CSS_LOADER_URL_IMPORT_45___ = new URL(/* asset import */ __webpack_require__(/*! ../../../asset/buffs/freedom.png */ "./asset/buffs/freedom.png"), __webpack_require__.b);
var ___CSS_LOADER_URL_IMPORT_46___ = new URL(/* asset import */ __webpack_require__(/*! ../../../asset/buffs/desat/freedom-desat.png */ "./asset/buffs/desat/freedom-desat.png"), __webpack_require__.b);
var ___CSS_LOADER_URL_IMPORT_47___ = new URL(/* asset import */ __webpack_require__(/*! ../../../asset/buffs/immortality.png */ "./asset/buffs/immortality.png"), __webpack_require__.b);
var ___CSS_LOADER_URL_IMPORT_48___ = new URL(/* asset import */ __webpack_require__(/*! ../../../asset/buffs/desat/immortality-desat.png */ "./asset/buffs/desat/immortality-desat.png"), __webpack_require__.b);
var ___CSS_LOADER_URL_IMPORT_49___ = new URL(/* asset import */ __webpack_require__(/*! ../../../asset/buffs/reflect.png */ "./asset/buffs/reflect.png"), __webpack_require__.b);
var ___CSS_LOADER_URL_IMPORT_50___ = new URL(/* asset import */ __webpack_require__(/*! ../../../asset/buffs/desat/reflect-desat.png */ "./asset/buffs/desat/reflect-desat.png"), __webpack_require__.b);
var ___CSS_LOADER_URL_IMPORT_51___ = new URL(/* asset import */ __webpack_require__(/*! ../../../asset/buffs/resonance.png */ "./asset/buffs/resonance.png"), __webpack_require__.b);
var ___CSS_LOADER_URL_IMPORT_52___ = new URL(/* asset import */ __webpack_require__(/*! ../../../asset/buffs/desat/resonance-desat.png */ "./asset/buffs/desat/resonance-desat.png"), __webpack_require__.b);
var ___CSS_LOADER_URL_IMPORT_53___ = new URL(/* asset import */ __webpack_require__(/*! ../../../asset/buffs/split_soul.png */ "./asset/buffs/split_soul.png"), __webpack_require__.b);
var ___CSS_LOADER_URL_IMPORT_54___ = new URL(/* asset import */ __webpack_require__(/*! ../../../asset/buffs/desat/split_soul-desat.png */ "./asset/buffs/desat/split_soul-desat.png"), __webpack_require__.b);
var ___CSS_LOADER_URL_IMPORT_55___ = new URL(/* asset import */ __webpack_require__(/*! ../../../asset/buffs/antifire.png */ "./asset/buffs/antifire.png"), __webpack_require__.b);
var ___CSS_LOADER_URL_IMPORT_56___ = new URL(/* asset import */ __webpack_require__(/*! ../../../asset/buffs/desat/antifire-desat.png */ "./asset/buffs/desat/antifire-desat.png"), __webpack_require__.b);
var ___CSS_LOADER_URL_IMPORT_57___ = new URL(/* asset import */ __webpack_require__(/*! ../../../asset/buffs/prayer_renewal.png */ "./asset/buffs/prayer_renewal.png"), __webpack_require__.b);
var ___CSS_LOADER_URL_IMPORT_58___ = new URL(/* asset import */ __webpack_require__(/*! ../../../asset/buffs/desat/prayer_renewal-desat.png */ "./asset/buffs/desat/prayer_renewal-desat.png"), __webpack_require__.b);
var ___CSS_LOADER_URL_IMPORT_59___ = new URL(/* asset import */ __webpack_require__(/*! ../../../asset/buffs/death_spark.png */ "./asset/buffs/death_spark.png"), __webpack_require__.b);
var ___CSS_LOADER_URL_IMPORT_60___ = new URL(/* asset import */ __webpack_require__(/*! ../../../asset/buffs/desat/death_spark-desat.png */ "./asset/buffs/desat/death_spark-desat.png"), __webpack_require__.b);
var ___CSS_LOADER_URL_IMPORT_61___ = new URL(/* asset import */ __webpack_require__(/*! ../../../asset/buffs/ancient_elven_ritual_shard.png */ "./asset/buffs/ancient_elven_ritual_shard.png"), __webpack_require__.b);
var ___CSS_LOADER_URL_IMPORT_62___ = new URL(/* asset import */ __webpack_require__(/*! ../../../asset/buffs/desat/ancient_elven_ritual_shard-desat.png */ "./asset/buffs/desat/ancient_elven_ritual_shard-desat.png"), __webpack_require__.b);
var ___CSS_LOADER_URL_IMPORT_63___ = new URL(/* asset import */ __webpack_require__(/*! ../../../asset/buffs/enhanced_excalibur.png */ "./asset/buffs/enhanced_excalibur.png"), __webpack_require__.b);
var ___CSS_LOADER_URL_IMPORT_64___ = new URL(/* asset import */ __webpack_require__(/*! ../../../asset/buffs/desat/enhanced_excalibur-desat.png */ "./asset/buffs/desat/enhanced_excalibur-desat.png"), __webpack_require__.b);
var ___CSS_LOADER_URL_IMPORT_65___ = new URL(/* asset import */ __webpack_require__(/*! ../../../asset/buffs/adrenaline_potion.png */ "./asset/buffs/adrenaline_potion.png"), __webpack_require__.b);
var ___CSS_LOADER_URL_IMPORT_66___ = new URL(/* asset import */ __webpack_require__(/*! ../../../asset/buffs/desat/adrenaline_potion-desat.png */ "./asset/buffs/desat/adrenaline_potion-desat.png"), __webpack_require__.b);
var ___CSS_LOADER_URL_IMPORT_67___ = new URL(/* asset import */ __webpack_require__(/*! ../../../asset/buffs/death_guard.png */ "./asset/buffs/death_guard.png"), __webpack_require__.b);
var ___CSS_LOADER_URL_IMPORT_68___ = new URL(/* asset import */ __webpack_require__(/*! ../../../asset/buffs/desat/death_guard-desat.png */ "./asset/buffs/desat/death_guard-desat.png"), __webpack_require__.b);
var ___CSS_LOADER_URL_IMPORT_69___ = new URL(/* asset import */ __webpack_require__(/*! ../../../asset/buffs/omni_guard.png */ "./asset/buffs/omni_guard.png"), __webpack_require__.b);
var ___CSS_LOADER_URL_IMPORT_70___ = new URL(/* asset import */ __webpack_require__(/*! ../../../asset/buffs/desat/omni_guard-desat.png */ "./asset/buffs/desat/omni_guard-desat.png"), __webpack_require__.b);
var ___CSS_LOADER_URL_IMPORT_71___ = new URL(/* asset import */ __webpack_require__(/*! ../../../asset/buffs/crystal_rain.png */ "./asset/buffs/crystal_rain.png"), __webpack_require__.b);
var ___CSS_LOADER_URL_IMPORT_72___ = new URL(/* asset import */ __webpack_require__(/*! ../../../asset/buffs/desat/crystal_rain-desat.png */ "./asset/buffs/desat/crystal_rain-desat.png"), __webpack_require__.b);
var ___CSS_LOADER_URL_IMPORT_73___ = new URL(/* asset import */ __webpack_require__(/*! ../../../asset/buffs/stunned.png */ "./asset/buffs/stunned.png"), __webpack_require__.b);
var ___CSS_LOADER_URL_IMPORT_74___ = new URL(/* asset import */ __webpack_require__(/*! ../../../asset/buffs/desat/stunned-desat.png */ "./asset/buffs/desat/stunned-desat.png"), __webpack_require__.b);
var ___CSS_LOADER_URL_IMPORT_75___ = new URL(/* asset import */ __webpack_require__(/*! ../../../asset/buffs/sign_of_life.png */ "./asset/buffs/sign_of_life.png"), __webpack_require__.b);
var ___CSS_LOADER_URL_IMPORT_76___ = new URL(/* asset import */ __webpack_require__(/*! ../../../asset/buffs/desat/sign_of_life-desat.png */ "./asset/buffs/desat/sign_of_life-desat.png"), __webpack_require__.b);
var ___CSS_LOADER_URL_IMPORT_77___ = new URL(/* asset import */ __webpack_require__(/*! ../../../asset/buffs/powerburst_prevention.png */ "./asset/buffs/powerburst_prevention.png"), __webpack_require__.b);
var ___CSS_LOADER_URL_IMPORT_78___ = new URL(/* asset import */ __webpack_require__(/*! ../../../asset/buffs/desat/powerburst_prevention-desat.png */ "./asset/buffs/desat/powerburst_prevention-desat.png"), __webpack_require__.b);
var ___CSS_LOADER_URL_IMPORT_79___ = new URL(/* asset import */ __webpack_require__(/*! ../../../asset/buffs/desat/virus-desat.png */ "./asset/buffs/desat/virus-desat.png"), __webpack_require__.b);
var ___CSS_LOADER_URL_IMPORT_80___ = new URL(/* asset import */ __webpack_require__(/*! ../../../asset/buffs/virus_black.webp */ "./asset/buffs/virus_black.webp"), __webpack_require__.b);
var ___CSS_LOADER_URL_IMPORT_81___ = new URL(/* asset import */ __webpack_require__(/*! ../../../asset/buffs/virus_blue.webp */ "./asset/buffs/virus_blue.webp"), __webpack_require__.b);
var ___CSS_LOADER_URL_IMPORT_82___ = new URL(/* asset import */ __webpack_require__(/*! ../../../asset/buffs/virus_red.webp */ "./asset/buffs/virus_red.webp"), __webpack_require__.b);
var ___CSS_LOADER_URL_IMPORT_83___ = new URL(/* asset import */ __webpack_require__(/*! ../../../asset/buffs/virus_green.webp */ "./asset/buffs/virus_green.webp"), __webpack_require__.b);
var ___CSS_LOADER_URL_IMPORT_84___ = new URL(/* asset import */ __webpack_require__(/*! ../../../asset/buffs/threads_of_fate.png */ "./asset/buffs/threads_of_fate.png"), __webpack_require__.b);
var ___CSS_LOADER_URL_IMPORT_85___ = new URL(/* asset import */ __webpack_require__(/*! ../../../asset/buffs/desat/threads_of_fate-desat.png */ "./asset/buffs/desat/threads_of_fate-desat.png"), __webpack_require__.b);
var ___CSS_LOADER_URL_IMPORT_86___ = new URL(/* asset import */ __webpack_require__(/*! ../../../asset/buffs/death_mark.png */ "./asset/buffs/death_mark.png"), __webpack_require__.b);
var ___CSS_LOADER_URL_IMPORT_87___ = new URL(/* asset import */ __webpack_require__(/*! ../../../asset/buffs/desat/death_mark-desat.png */ "./asset/buffs/desat/death_mark-desat.png"), __webpack_require__.b);
var ___CSS_LOADER_URL_IMPORT_88___ = new URL(/* asset import */ __webpack_require__(/*! ../../../asset/buffs/vulnerability.png */ "./asset/buffs/vulnerability.png"), __webpack_require__.b);
var ___CSS_LOADER_URL_IMPORT_89___ = new URL(/* asset import */ __webpack_require__(/*! ../../../asset/buffs/desat/vulnerability-desat.png */ "./asset/buffs/desat/vulnerability-desat.png"), __webpack_require__.b);
var ___CSS_LOADER_URL_IMPORT_90___ = new URL(/* asset import */ __webpack_require__(/*! ../../../asset/buffs/berserk.png */ "./asset/buffs/berserk.png"), __webpack_require__.b);
var ___CSS_LOADER_URL_IMPORT_91___ = new URL(/* asset import */ __webpack_require__(/*! ../../../asset/buffs/desat/berserk-desat.png */ "./asset/buffs/desat/berserk-desat.png"), __webpack_require__.b);
var ___CSS_LOADER_URL_IMPORT_92___ = new URL(/* asset import */ __webpack_require__(/*! ../../../asset/buffs/deaths_swiftness.png */ "./asset/buffs/deaths_swiftness.png"), __webpack_require__.b);
var ___CSS_LOADER_URL_IMPORT_93___ = new URL(/* asset import */ __webpack_require__(/*! ../../../asset/buffs/desat/deaths_swiftness-desat.png */ "./asset/buffs/desat/deaths_swiftness-desat.png"), __webpack_require__.b);
var ___CSS_LOADER_URL_IMPORT_94___ = new URL(/* asset import */ __webpack_require__(/*! ../../../asset/buffs/greater_deaths_swiftness.png */ "./asset/buffs/greater_deaths_swiftness.png"), __webpack_require__.b);
var ___CSS_LOADER_URL_IMPORT_95___ = new URL(/* asset import */ __webpack_require__(/*! ../../../asset/buffs/desat/greater_deaths_swiftness-desat.png */ "./asset/buffs/desat/greater_deaths_swiftness-desat.png"), __webpack_require__.b);
var ___CSS_LOADER_URL_IMPORT_96___ = new URL(/* asset import */ __webpack_require__(/*! ../../../asset/buffs/sunshine.png */ "./asset/buffs/sunshine.png"), __webpack_require__.b);
var ___CSS_LOADER_URL_IMPORT_97___ = new URL(/* asset import */ __webpack_require__(/*! ../../../asset/buffs/desat/sunshine-desat.png */ "./asset/buffs/desat/sunshine-desat.png"), __webpack_require__.b);
var ___CSS_LOADER_URL_IMPORT_98___ = new URL(/* asset import */ __webpack_require__(/*! ../../../asset/buffs/greater_sunshine.png */ "./asset/buffs/greater_sunshine.png"), __webpack_require__.b);
var ___CSS_LOADER_URL_IMPORT_99___ = new URL(/* asset import */ __webpack_require__(/*! ../../../asset/buffs/desat/greater_sunshine-desat.png */ "./asset/buffs/desat/greater_sunshine-desat.png"), __webpack_require__.b);
var ___CSS_LOADER_URL_IMPORT_100___ = new URL(/* asset import */ __webpack_require__(/*! ../../../asset/buffs/living_death.png */ "./asset/buffs/living_death.png"), __webpack_require__.b);
var ___CSS_LOADER_URL_IMPORT_101___ = new URL(/* asset import */ __webpack_require__(/*! ../../../asset/buffs/desat/living_death-desat.png */ "./asset/buffs/desat/living_death-desat.png"), __webpack_require__.b);
var ___CSS_LOADER_URL_IMPORT_102___ = new URL(/* asset import */ __webpack_require__(/*! ../../../asset/buffs/limitless.png */ "./asset/buffs/limitless.png"), __webpack_require__.b);
var ___CSS_LOADER_URL_IMPORT_103___ = new URL(/* asset import */ __webpack_require__(/*! ../../../asset/buffs/desat/limitless-desat.png */ "./asset/buffs/desat/limitless-desat.png"), __webpack_require__.b);
var ___CSS_LOADER_URL_IMPORT_104___ = new URL(/* asset import */ __webpack_require__(/*! ../../../asset/buffs/demon_slayer.png */ "./asset/buffs/demon_slayer.png"), __webpack_require__.b);
var ___CSS_LOADER_URL_IMPORT_105___ = new URL(/* asset import */ __webpack_require__(/*! ../../../asset/buffs/desat/demon_slayer-desat.png */ "./asset/buffs/desat/demon_slayer-desat.png"), __webpack_require__.b);
var ___CSS_LOADER_URL_IMPORT_106___ = new URL(/* asset import */ __webpack_require__(/*! ../../../asset/buffs/dragon_slayer.png */ "./asset/buffs/dragon_slayer.png"), __webpack_require__.b);
var ___CSS_LOADER_URL_IMPORT_107___ = new URL(/* asset import */ __webpack_require__(/*! ../../../asset/buffs/desat/dragon_slayer-desat.png */ "./asset/buffs/desat/dragon_slayer-desat.png"), __webpack_require__.b);
var ___CSS_LOADER_URL_IMPORT_108___ = new URL(/* asset import */ __webpack_require__(/*! ../../../asset/buffs/undead_slayer.png */ "./asset/buffs/undead_slayer.png"), __webpack_require__.b);
var ___CSS_LOADER_URL_IMPORT_109___ = new URL(/* asset import */ __webpack_require__(/*! ../../../asset/buffs/desat/undead_slayer-desat.png */ "./asset/buffs/desat/undead_slayer-desat.png"), __webpack_require__.b);
var ___CSS_LOADER_URL_IMPORT_110___ = new URL(/* asset import */ __webpack_require__(/*! ../../../asset/buffs/ingenuity_of_the_humans.png */ "./asset/buffs/ingenuity_of_the_humans.png"), __webpack_require__.b);
var ___CSS_LOADER_URL_IMPORT_111___ = new URL(/* asset import */ __webpack_require__(/*! ../../../asset/buffs/desat/ingenuity_of_the_humans-desat.png */ "./asset/buffs/desat/ingenuity_of_the_humans-desat.png"), __webpack_require__.b);
var ___CSS_LOADER_URL_IMPORT_112___ = new URL(/* asset import */ __webpack_require__(/*! ../../../asset/buffs/affliction.png */ "./asset/buffs/affliction.png"), __webpack_require__.b);
var ___CSS_LOADER_URL_IMPORT_113___ = new URL(/* asset import */ __webpack_require__(/*! ../../../asset/buffs/anguish.png */ "./asset/buffs/anguish.png"), __webpack_require__.b);
var ___CSS_LOADER_URL_IMPORT_114___ = new URL(/* asset import */ __webpack_require__(/*! ../../../asset/buffs/desolation.png */ "./asset/buffs/desolation.png"), __webpack_require__.b);
var ___CSS_LOADER_URL_IMPORT_115___ = new URL(/* asset import */ __webpack_require__(/*! ../../../asset/buffs/malevolence.png */ "./asset/buffs/malevolence.png"), __webpack_require__.b);
var ___CSS_LOADER_URL_IMPORT_116___ = new URL(/* asset import */ __webpack_require__(/*! ../../../asset/buffs/ruination.png */ "./asset/buffs/ruination.png"), __webpack_require__.b);
var ___CSS_LOADER_URL_IMPORT_117___ = new URL(/* asset import */ __webpack_require__(/*! ../../../asset/buffs/sorrow.png */ "./asset/buffs/sorrow.png"), __webpack_require__.b);
var ___CSS_LOADER_URL_IMPORT_118___ = new URL(/* asset import */ __webpack_require__(/*! ../../../asset/buffs/torment.png */ "./asset/buffs/torment.png"), __webpack_require__.b);
var ___CSS_LOADER_URL_IMPORT_119___ = new URL(/* asset import */ __webpack_require__(/*! ../../../asset/buffs/turmoil.png */ "./asset/buffs/turmoil.png"), __webpack_require__.b);
var ___CSS_LOADER_URL_IMPORT_120___ = new URL(/* asset import */ __webpack_require__(/*! data:image/png;base64, */ "data:image/png;base64,"), __webpack_require__.b);
var ___CSS_LOADER_URL_IMPORT_121___ = new URL(/* asset import */ __webpack_require__(/*! ../../../asset/buffs/deflect_magic.png */ "./asset/buffs/deflect_magic.png"), __webpack_require__.b);
var ___CSS_LOADER_URL_IMPORT_122___ = new URL(/* asset import */ __webpack_require__(/*! ../../../asset/buffs/deflect_necromancy.png */ "./asset/buffs/deflect_necromancy.png"), __webpack_require__.b);
var ___CSS_LOADER_URL_IMPORT_123___ = new URL(/* asset import */ __webpack_require__(/*! ../../../asset/buffs/deflect_ranged.png */ "./asset/buffs/deflect_ranged.png"), __webpack_require__.b);
var ___CSS_LOADER_URL_IMPORT_124___ = new URL(/* asset import */ __webpack_require__(/*! ../../../asset/buffs/protect_from_magic.png */ "./asset/buffs/protect_from_magic.png"), __webpack_require__.b);
var ___CSS_LOADER_URL_IMPORT_125___ = new URL(/* asset import */ __webpack_require__(/*! ../../../asset/buffs/protect_from_melee.png */ "./asset/buffs/protect_from_melee.png"), __webpack_require__.b);
var ___CSS_LOADER_URL_IMPORT_126___ = new URL(/* asset import */ __webpack_require__(/*! ../../../asset/buffs/protect_from_necromancy.png */ "./asset/buffs/protect_from_necromancy.png"), __webpack_require__.b);
var ___CSS_LOADER_URL_IMPORT_127___ = new URL(/* asset import */ __webpack_require__(/*! ../../../asset/buffs/protect_from_ranged.png */ "./asset/buffs/protect_from_ranged.png"), __webpack_require__.b);
var ___CSS_LOADER_URL_IMPORT_128___ = new URL(/* asset import */ __webpack_require__(/*! ../../../asset/buffs/soul_split.png */ "./asset/buffs/soul_split.png"), __webpack_require__.b);
var ___CSS_LOADER_URL_IMPORT_129___ = new URL(/* asset import */ __webpack_require__(/*! ../../../asset/buffs/blank.png */ "./asset/buffs/blank.png"), __webpack_require__.b);
var ___CSS_LOADER_URL_IMPORT_130___ = new URL(/* asset import */ __webpack_require__(/*! ../asset/resource/nis-imgbutton.png */ "./asset/resource/nis-imgbutton.png"), __webpack_require__.b);
var ___CSS_LOADER_URL_IMPORT_131___ = new URL(/* asset import */ __webpack_require__(/*! data:font/opentype;base64, */ "data:font/opentype;base64,"), __webpack_require__.b);
var ___CSS_LOADER_URL_IMPORT_132___ = new URL(/* asset import */ __webpack_require__(/*! ../asset/resource/scroll.png */ "./asset/resource/scroll.png"), __webpack_require__.b);
var ___CSS_LOADER_URL_IMPORT_133___ = new URL(/* asset import */ __webpack_require__(/*! ../asset/resource/scrollhor.png */ "./asset/resource/scrollhor.png"), __webpack_require__.b);
var ___CSS_LOADER_URL_IMPORT_134___ = new URL(/* asset import */ __webpack_require__(/*! ../asset/resource/nisbutton.png */ "./asset/resource/nisbutton.png"), __webpack_require__.b);
var ___CSS_LOADER_EXPORT___ = _node_modules_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1___default()((_node_modules_css_loader_dist_runtime_noSourceMaps_js__WEBPACK_IMPORTED_MODULE_0___default()));
var ___CSS_LOADER_URL_REPLACEMENT_0___ = _node_modules_css_loader_dist_runtime_getUrl_js__WEBPACK_IMPORTED_MODULE_2___default()(___CSS_LOADER_URL_IMPORT_0___);
var ___CSS_LOADER_URL_REPLACEMENT_1___ = _node_modules_css_loader_dist_runtime_getUrl_js__WEBPACK_IMPORTED_MODULE_2___default()(___CSS_LOADER_URL_IMPORT_1___);
var ___CSS_LOADER_URL_REPLACEMENT_2___ = _node_modules_css_loader_dist_runtime_getUrl_js__WEBPACK_IMPORTED_MODULE_2___default()(___CSS_LOADER_URL_IMPORT_2___);
var ___CSS_LOADER_URL_REPLACEMENT_3___ = _node_modules_css_loader_dist_runtime_getUrl_js__WEBPACK_IMPORTED_MODULE_2___default()(___CSS_LOADER_URL_IMPORT_3___);
var ___CSS_LOADER_URL_REPLACEMENT_4___ = _node_modules_css_loader_dist_runtime_getUrl_js__WEBPACK_IMPORTED_MODULE_2___default()(___CSS_LOADER_URL_IMPORT_4___);
var ___CSS_LOADER_URL_REPLACEMENT_5___ = _node_modules_css_loader_dist_runtime_getUrl_js__WEBPACK_IMPORTED_MODULE_2___default()(___CSS_LOADER_URL_IMPORT_5___);
var ___CSS_LOADER_URL_REPLACEMENT_6___ = _node_modules_css_loader_dist_runtime_getUrl_js__WEBPACK_IMPORTED_MODULE_2___default()(___CSS_LOADER_URL_IMPORT_6___);
var ___CSS_LOADER_URL_REPLACEMENT_7___ = _node_modules_css_loader_dist_runtime_getUrl_js__WEBPACK_IMPORTED_MODULE_2___default()(___CSS_LOADER_URL_IMPORT_7___);
var ___CSS_LOADER_URL_REPLACEMENT_8___ = _node_modules_css_loader_dist_runtime_getUrl_js__WEBPACK_IMPORTED_MODULE_2___default()(___CSS_LOADER_URL_IMPORT_8___);
var ___CSS_LOADER_URL_REPLACEMENT_9___ = _node_modules_css_loader_dist_runtime_getUrl_js__WEBPACK_IMPORTED_MODULE_2___default()(___CSS_LOADER_URL_IMPORT_9___);
var ___CSS_LOADER_URL_REPLACEMENT_10___ = _node_modules_css_loader_dist_runtime_getUrl_js__WEBPACK_IMPORTED_MODULE_2___default()(___CSS_LOADER_URL_IMPORT_10___);
var ___CSS_LOADER_URL_REPLACEMENT_11___ = _node_modules_css_loader_dist_runtime_getUrl_js__WEBPACK_IMPORTED_MODULE_2___default()(___CSS_LOADER_URL_IMPORT_11___);
var ___CSS_LOADER_URL_REPLACEMENT_12___ = _node_modules_css_loader_dist_runtime_getUrl_js__WEBPACK_IMPORTED_MODULE_2___default()(___CSS_LOADER_URL_IMPORT_12___);
var ___CSS_LOADER_URL_REPLACEMENT_13___ = _node_modules_css_loader_dist_runtime_getUrl_js__WEBPACK_IMPORTED_MODULE_2___default()(___CSS_LOADER_URL_IMPORT_13___);
var ___CSS_LOADER_URL_REPLACEMENT_14___ = _node_modules_css_loader_dist_runtime_getUrl_js__WEBPACK_IMPORTED_MODULE_2___default()(___CSS_LOADER_URL_IMPORT_14___);
var ___CSS_LOADER_URL_REPLACEMENT_15___ = _node_modules_css_loader_dist_runtime_getUrl_js__WEBPACK_IMPORTED_MODULE_2___default()(___CSS_LOADER_URL_IMPORT_15___);
var ___CSS_LOADER_URL_REPLACEMENT_16___ = _node_modules_css_loader_dist_runtime_getUrl_js__WEBPACK_IMPORTED_MODULE_2___default()(___CSS_LOADER_URL_IMPORT_16___);
var ___CSS_LOADER_URL_REPLACEMENT_17___ = _node_modules_css_loader_dist_runtime_getUrl_js__WEBPACK_IMPORTED_MODULE_2___default()(___CSS_LOADER_URL_IMPORT_17___);
var ___CSS_LOADER_URL_REPLACEMENT_18___ = _node_modules_css_loader_dist_runtime_getUrl_js__WEBPACK_IMPORTED_MODULE_2___default()(___CSS_LOADER_URL_IMPORT_18___);
var ___CSS_LOADER_URL_REPLACEMENT_19___ = _node_modules_css_loader_dist_runtime_getUrl_js__WEBPACK_IMPORTED_MODULE_2___default()(___CSS_LOADER_URL_IMPORT_19___);
var ___CSS_LOADER_URL_REPLACEMENT_20___ = _node_modules_css_loader_dist_runtime_getUrl_js__WEBPACK_IMPORTED_MODULE_2___default()(___CSS_LOADER_URL_IMPORT_20___);
var ___CSS_LOADER_URL_REPLACEMENT_21___ = _node_modules_css_loader_dist_runtime_getUrl_js__WEBPACK_IMPORTED_MODULE_2___default()(___CSS_LOADER_URL_IMPORT_21___);
var ___CSS_LOADER_URL_REPLACEMENT_22___ = _node_modules_css_loader_dist_runtime_getUrl_js__WEBPACK_IMPORTED_MODULE_2___default()(___CSS_LOADER_URL_IMPORT_22___);
var ___CSS_LOADER_URL_REPLACEMENT_23___ = _node_modules_css_loader_dist_runtime_getUrl_js__WEBPACK_IMPORTED_MODULE_2___default()(___CSS_LOADER_URL_IMPORT_23___);
var ___CSS_LOADER_URL_REPLACEMENT_24___ = _node_modules_css_loader_dist_runtime_getUrl_js__WEBPACK_IMPORTED_MODULE_2___default()(___CSS_LOADER_URL_IMPORT_24___);
var ___CSS_LOADER_URL_REPLACEMENT_25___ = _node_modules_css_loader_dist_runtime_getUrl_js__WEBPACK_IMPORTED_MODULE_2___default()(___CSS_LOADER_URL_IMPORT_25___);
var ___CSS_LOADER_URL_REPLACEMENT_26___ = _node_modules_css_loader_dist_runtime_getUrl_js__WEBPACK_IMPORTED_MODULE_2___default()(___CSS_LOADER_URL_IMPORT_26___);
var ___CSS_LOADER_URL_REPLACEMENT_27___ = _node_modules_css_loader_dist_runtime_getUrl_js__WEBPACK_IMPORTED_MODULE_2___default()(___CSS_LOADER_URL_IMPORT_27___);
var ___CSS_LOADER_URL_REPLACEMENT_28___ = _node_modules_css_loader_dist_runtime_getUrl_js__WEBPACK_IMPORTED_MODULE_2___default()(___CSS_LOADER_URL_IMPORT_28___);
var ___CSS_LOADER_URL_REPLACEMENT_29___ = _node_modules_css_loader_dist_runtime_getUrl_js__WEBPACK_IMPORTED_MODULE_2___default()(___CSS_LOADER_URL_IMPORT_29___);
var ___CSS_LOADER_URL_REPLACEMENT_30___ = _node_modules_css_loader_dist_runtime_getUrl_js__WEBPACK_IMPORTED_MODULE_2___default()(___CSS_LOADER_URL_IMPORT_30___);
var ___CSS_LOADER_URL_REPLACEMENT_31___ = _node_modules_css_loader_dist_runtime_getUrl_js__WEBPACK_IMPORTED_MODULE_2___default()(___CSS_LOADER_URL_IMPORT_31___);
var ___CSS_LOADER_URL_REPLACEMENT_32___ = _node_modules_css_loader_dist_runtime_getUrl_js__WEBPACK_IMPORTED_MODULE_2___default()(___CSS_LOADER_URL_IMPORT_32___);
var ___CSS_LOADER_URL_REPLACEMENT_33___ = _node_modules_css_loader_dist_runtime_getUrl_js__WEBPACK_IMPORTED_MODULE_2___default()(___CSS_LOADER_URL_IMPORT_33___);
var ___CSS_LOADER_URL_REPLACEMENT_34___ = _node_modules_css_loader_dist_runtime_getUrl_js__WEBPACK_IMPORTED_MODULE_2___default()(___CSS_LOADER_URL_IMPORT_34___);
var ___CSS_LOADER_URL_REPLACEMENT_35___ = _node_modules_css_loader_dist_runtime_getUrl_js__WEBPACK_IMPORTED_MODULE_2___default()(___CSS_LOADER_URL_IMPORT_35___);
var ___CSS_LOADER_URL_REPLACEMENT_36___ = _node_modules_css_loader_dist_runtime_getUrl_js__WEBPACK_IMPORTED_MODULE_2___default()(___CSS_LOADER_URL_IMPORT_36___);
var ___CSS_LOADER_URL_REPLACEMENT_37___ = _node_modules_css_loader_dist_runtime_getUrl_js__WEBPACK_IMPORTED_MODULE_2___default()(___CSS_LOADER_URL_IMPORT_37___);
var ___CSS_LOADER_URL_REPLACEMENT_38___ = _node_modules_css_loader_dist_runtime_getUrl_js__WEBPACK_IMPORTED_MODULE_2___default()(___CSS_LOADER_URL_IMPORT_38___);
var ___CSS_LOADER_URL_REPLACEMENT_39___ = _node_modules_css_loader_dist_runtime_getUrl_js__WEBPACK_IMPORTED_MODULE_2___default()(___CSS_LOADER_URL_IMPORT_39___);
var ___CSS_LOADER_URL_REPLACEMENT_40___ = _node_modules_css_loader_dist_runtime_getUrl_js__WEBPACK_IMPORTED_MODULE_2___default()(___CSS_LOADER_URL_IMPORT_40___);
var ___CSS_LOADER_URL_REPLACEMENT_41___ = _node_modules_css_loader_dist_runtime_getUrl_js__WEBPACK_IMPORTED_MODULE_2___default()(___CSS_LOADER_URL_IMPORT_41___);
var ___CSS_LOADER_URL_REPLACEMENT_42___ = _node_modules_css_loader_dist_runtime_getUrl_js__WEBPACK_IMPORTED_MODULE_2___default()(___CSS_LOADER_URL_IMPORT_42___);
var ___CSS_LOADER_URL_REPLACEMENT_43___ = _node_modules_css_loader_dist_runtime_getUrl_js__WEBPACK_IMPORTED_MODULE_2___default()(___CSS_LOADER_URL_IMPORT_43___);
var ___CSS_LOADER_URL_REPLACEMENT_44___ = _node_modules_css_loader_dist_runtime_getUrl_js__WEBPACK_IMPORTED_MODULE_2___default()(___CSS_LOADER_URL_IMPORT_44___);
var ___CSS_LOADER_URL_REPLACEMENT_45___ = _node_modules_css_loader_dist_runtime_getUrl_js__WEBPACK_IMPORTED_MODULE_2___default()(___CSS_LOADER_URL_IMPORT_45___);
var ___CSS_LOADER_URL_REPLACEMENT_46___ = _node_modules_css_loader_dist_runtime_getUrl_js__WEBPACK_IMPORTED_MODULE_2___default()(___CSS_LOADER_URL_IMPORT_46___);
var ___CSS_LOADER_URL_REPLACEMENT_47___ = _node_modules_css_loader_dist_runtime_getUrl_js__WEBPACK_IMPORTED_MODULE_2___default()(___CSS_LOADER_URL_IMPORT_47___);
var ___CSS_LOADER_URL_REPLACEMENT_48___ = _node_modules_css_loader_dist_runtime_getUrl_js__WEBPACK_IMPORTED_MODULE_2___default()(___CSS_LOADER_URL_IMPORT_48___);
var ___CSS_LOADER_URL_REPLACEMENT_49___ = _node_modules_css_loader_dist_runtime_getUrl_js__WEBPACK_IMPORTED_MODULE_2___default()(___CSS_LOADER_URL_IMPORT_49___);
var ___CSS_LOADER_URL_REPLACEMENT_50___ = _node_modules_css_loader_dist_runtime_getUrl_js__WEBPACK_IMPORTED_MODULE_2___default()(___CSS_LOADER_URL_IMPORT_50___);
var ___CSS_LOADER_URL_REPLACEMENT_51___ = _node_modules_css_loader_dist_runtime_getUrl_js__WEBPACK_IMPORTED_MODULE_2___default()(___CSS_LOADER_URL_IMPORT_51___);
var ___CSS_LOADER_URL_REPLACEMENT_52___ = _node_modules_css_loader_dist_runtime_getUrl_js__WEBPACK_IMPORTED_MODULE_2___default()(___CSS_LOADER_URL_IMPORT_52___);
var ___CSS_LOADER_URL_REPLACEMENT_53___ = _node_modules_css_loader_dist_runtime_getUrl_js__WEBPACK_IMPORTED_MODULE_2___default()(___CSS_LOADER_URL_IMPORT_53___);
var ___CSS_LOADER_URL_REPLACEMENT_54___ = _node_modules_css_loader_dist_runtime_getUrl_js__WEBPACK_IMPORTED_MODULE_2___default()(___CSS_LOADER_URL_IMPORT_54___);
var ___CSS_LOADER_URL_REPLACEMENT_55___ = _node_modules_css_loader_dist_runtime_getUrl_js__WEBPACK_IMPORTED_MODULE_2___default()(___CSS_LOADER_URL_IMPORT_55___);
var ___CSS_LOADER_URL_REPLACEMENT_56___ = _node_modules_css_loader_dist_runtime_getUrl_js__WEBPACK_IMPORTED_MODULE_2___default()(___CSS_LOADER_URL_IMPORT_56___);
var ___CSS_LOADER_URL_REPLACEMENT_57___ = _node_modules_css_loader_dist_runtime_getUrl_js__WEBPACK_IMPORTED_MODULE_2___default()(___CSS_LOADER_URL_IMPORT_57___);
var ___CSS_LOADER_URL_REPLACEMENT_58___ = _node_modules_css_loader_dist_runtime_getUrl_js__WEBPACK_IMPORTED_MODULE_2___default()(___CSS_LOADER_URL_IMPORT_58___);
var ___CSS_LOADER_URL_REPLACEMENT_59___ = _node_modules_css_loader_dist_runtime_getUrl_js__WEBPACK_IMPORTED_MODULE_2___default()(___CSS_LOADER_URL_IMPORT_59___);
var ___CSS_LOADER_URL_REPLACEMENT_60___ = _node_modules_css_loader_dist_runtime_getUrl_js__WEBPACK_IMPORTED_MODULE_2___default()(___CSS_LOADER_URL_IMPORT_60___);
var ___CSS_LOADER_URL_REPLACEMENT_61___ = _node_modules_css_loader_dist_runtime_getUrl_js__WEBPACK_IMPORTED_MODULE_2___default()(___CSS_LOADER_URL_IMPORT_61___);
var ___CSS_LOADER_URL_REPLACEMENT_62___ = _node_modules_css_loader_dist_runtime_getUrl_js__WEBPACK_IMPORTED_MODULE_2___default()(___CSS_LOADER_URL_IMPORT_62___);
var ___CSS_LOADER_URL_REPLACEMENT_63___ = _node_modules_css_loader_dist_runtime_getUrl_js__WEBPACK_IMPORTED_MODULE_2___default()(___CSS_LOADER_URL_IMPORT_63___);
var ___CSS_LOADER_URL_REPLACEMENT_64___ = _node_modules_css_loader_dist_runtime_getUrl_js__WEBPACK_IMPORTED_MODULE_2___default()(___CSS_LOADER_URL_IMPORT_64___);
var ___CSS_LOADER_URL_REPLACEMENT_65___ = _node_modules_css_loader_dist_runtime_getUrl_js__WEBPACK_IMPORTED_MODULE_2___default()(___CSS_LOADER_URL_IMPORT_65___);
var ___CSS_LOADER_URL_REPLACEMENT_66___ = _node_modules_css_loader_dist_runtime_getUrl_js__WEBPACK_IMPORTED_MODULE_2___default()(___CSS_LOADER_URL_IMPORT_66___);
var ___CSS_LOADER_URL_REPLACEMENT_67___ = _node_modules_css_loader_dist_runtime_getUrl_js__WEBPACK_IMPORTED_MODULE_2___default()(___CSS_LOADER_URL_IMPORT_67___);
var ___CSS_LOADER_URL_REPLACEMENT_68___ = _node_modules_css_loader_dist_runtime_getUrl_js__WEBPACK_IMPORTED_MODULE_2___default()(___CSS_LOADER_URL_IMPORT_68___);
var ___CSS_LOADER_URL_REPLACEMENT_69___ = _node_modules_css_loader_dist_runtime_getUrl_js__WEBPACK_IMPORTED_MODULE_2___default()(___CSS_LOADER_URL_IMPORT_69___);
var ___CSS_LOADER_URL_REPLACEMENT_70___ = _node_modules_css_loader_dist_runtime_getUrl_js__WEBPACK_IMPORTED_MODULE_2___default()(___CSS_LOADER_URL_IMPORT_70___);
var ___CSS_LOADER_URL_REPLACEMENT_71___ = _node_modules_css_loader_dist_runtime_getUrl_js__WEBPACK_IMPORTED_MODULE_2___default()(___CSS_LOADER_URL_IMPORT_71___);
var ___CSS_LOADER_URL_REPLACEMENT_72___ = _node_modules_css_loader_dist_runtime_getUrl_js__WEBPACK_IMPORTED_MODULE_2___default()(___CSS_LOADER_URL_IMPORT_72___);
var ___CSS_LOADER_URL_REPLACEMENT_73___ = _node_modules_css_loader_dist_runtime_getUrl_js__WEBPACK_IMPORTED_MODULE_2___default()(___CSS_LOADER_URL_IMPORT_73___);
var ___CSS_LOADER_URL_REPLACEMENT_74___ = _node_modules_css_loader_dist_runtime_getUrl_js__WEBPACK_IMPORTED_MODULE_2___default()(___CSS_LOADER_URL_IMPORT_74___);
var ___CSS_LOADER_URL_REPLACEMENT_75___ = _node_modules_css_loader_dist_runtime_getUrl_js__WEBPACK_IMPORTED_MODULE_2___default()(___CSS_LOADER_URL_IMPORT_75___);
var ___CSS_LOADER_URL_REPLACEMENT_76___ = _node_modules_css_loader_dist_runtime_getUrl_js__WEBPACK_IMPORTED_MODULE_2___default()(___CSS_LOADER_URL_IMPORT_76___);
var ___CSS_LOADER_URL_REPLACEMENT_77___ = _node_modules_css_loader_dist_runtime_getUrl_js__WEBPACK_IMPORTED_MODULE_2___default()(___CSS_LOADER_URL_IMPORT_77___);
var ___CSS_LOADER_URL_REPLACEMENT_78___ = _node_modules_css_loader_dist_runtime_getUrl_js__WEBPACK_IMPORTED_MODULE_2___default()(___CSS_LOADER_URL_IMPORT_78___);
var ___CSS_LOADER_URL_REPLACEMENT_79___ = _node_modules_css_loader_dist_runtime_getUrl_js__WEBPACK_IMPORTED_MODULE_2___default()(___CSS_LOADER_URL_IMPORT_79___);
var ___CSS_LOADER_URL_REPLACEMENT_80___ = _node_modules_css_loader_dist_runtime_getUrl_js__WEBPACK_IMPORTED_MODULE_2___default()(___CSS_LOADER_URL_IMPORT_80___);
var ___CSS_LOADER_URL_REPLACEMENT_81___ = _node_modules_css_loader_dist_runtime_getUrl_js__WEBPACK_IMPORTED_MODULE_2___default()(___CSS_LOADER_URL_IMPORT_81___);
var ___CSS_LOADER_URL_REPLACEMENT_82___ = _node_modules_css_loader_dist_runtime_getUrl_js__WEBPACK_IMPORTED_MODULE_2___default()(___CSS_LOADER_URL_IMPORT_82___);
var ___CSS_LOADER_URL_REPLACEMENT_83___ = _node_modules_css_loader_dist_runtime_getUrl_js__WEBPACK_IMPORTED_MODULE_2___default()(___CSS_LOADER_URL_IMPORT_83___);
var ___CSS_LOADER_URL_REPLACEMENT_84___ = _node_modules_css_loader_dist_runtime_getUrl_js__WEBPACK_IMPORTED_MODULE_2___default()(___CSS_LOADER_URL_IMPORT_84___);
var ___CSS_LOADER_URL_REPLACEMENT_85___ = _node_modules_css_loader_dist_runtime_getUrl_js__WEBPACK_IMPORTED_MODULE_2___default()(___CSS_LOADER_URL_IMPORT_85___);
var ___CSS_LOADER_URL_REPLACEMENT_86___ = _node_modules_css_loader_dist_runtime_getUrl_js__WEBPACK_IMPORTED_MODULE_2___default()(___CSS_LOADER_URL_IMPORT_86___);
var ___CSS_LOADER_URL_REPLACEMENT_87___ = _node_modules_css_loader_dist_runtime_getUrl_js__WEBPACK_IMPORTED_MODULE_2___default()(___CSS_LOADER_URL_IMPORT_87___);
var ___CSS_LOADER_URL_REPLACEMENT_88___ = _node_modules_css_loader_dist_runtime_getUrl_js__WEBPACK_IMPORTED_MODULE_2___default()(___CSS_LOADER_URL_IMPORT_88___);
var ___CSS_LOADER_URL_REPLACEMENT_89___ = _node_modules_css_loader_dist_runtime_getUrl_js__WEBPACK_IMPORTED_MODULE_2___default()(___CSS_LOADER_URL_IMPORT_89___);
var ___CSS_LOADER_URL_REPLACEMENT_90___ = _node_modules_css_loader_dist_runtime_getUrl_js__WEBPACK_IMPORTED_MODULE_2___default()(___CSS_LOADER_URL_IMPORT_90___);
var ___CSS_LOADER_URL_REPLACEMENT_91___ = _node_modules_css_loader_dist_runtime_getUrl_js__WEBPACK_IMPORTED_MODULE_2___default()(___CSS_LOADER_URL_IMPORT_91___);
var ___CSS_LOADER_URL_REPLACEMENT_92___ = _node_modules_css_loader_dist_runtime_getUrl_js__WEBPACK_IMPORTED_MODULE_2___default()(___CSS_LOADER_URL_IMPORT_92___);
var ___CSS_LOADER_URL_REPLACEMENT_93___ = _node_modules_css_loader_dist_runtime_getUrl_js__WEBPACK_IMPORTED_MODULE_2___default()(___CSS_LOADER_URL_IMPORT_93___);
var ___CSS_LOADER_URL_REPLACEMENT_94___ = _node_modules_css_loader_dist_runtime_getUrl_js__WEBPACK_IMPORTED_MODULE_2___default()(___CSS_LOADER_URL_IMPORT_94___);
var ___CSS_LOADER_URL_REPLACEMENT_95___ = _node_modules_css_loader_dist_runtime_getUrl_js__WEBPACK_IMPORTED_MODULE_2___default()(___CSS_LOADER_URL_IMPORT_95___);
var ___CSS_LOADER_URL_REPLACEMENT_96___ = _node_modules_css_loader_dist_runtime_getUrl_js__WEBPACK_IMPORTED_MODULE_2___default()(___CSS_LOADER_URL_IMPORT_96___);
var ___CSS_LOADER_URL_REPLACEMENT_97___ = _node_modules_css_loader_dist_runtime_getUrl_js__WEBPACK_IMPORTED_MODULE_2___default()(___CSS_LOADER_URL_IMPORT_97___);
var ___CSS_LOADER_URL_REPLACEMENT_98___ = _node_modules_css_loader_dist_runtime_getUrl_js__WEBPACK_IMPORTED_MODULE_2___default()(___CSS_LOADER_URL_IMPORT_98___);
var ___CSS_LOADER_URL_REPLACEMENT_99___ = _node_modules_css_loader_dist_runtime_getUrl_js__WEBPACK_IMPORTED_MODULE_2___default()(___CSS_LOADER_URL_IMPORT_99___);
var ___CSS_LOADER_URL_REPLACEMENT_100___ = _node_modules_css_loader_dist_runtime_getUrl_js__WEBPACK_IMPORTED_MODULE_2___default()(___CSS_LOADER_URL_IMPORT_100___);
var ___CSS_LOADER_URL_REPLACEMENT_101___ = _node_modules_css_loader_dist_runtime_getUrl_js__WEBPACK_IMPORTED_MODULE_2___default()(___CSS_LOADER_URL_IMPORT_101___);
var ___CSS_LOADER_URL_REPLACEMENT_102___ = _node_modules_css_loader_dist_runtime_getUrl_js__WEBPACK_IMPORTED_MODULE_2___default()(___CSS_LOADER_URL_IMPORT_102___);
var ___CSS_LOADER_URL_REPLACEMENT_103___ = _node_modules_css_loader_dist_runtime_getUrl_js__WEBPACK_IMPORTED_MODULE_2___default()(___CSS_LOADER_URL_IMPORT_103___);
var ___CSS_LOADER_URL_REPLACEMENT_104___ = _node_modules_css_loader_dist_runtime_getUrl_js__WEBPACK_IMPORTED_MODULE_2___default()(___CSS_LOADER_URL_IMPORT_104___);
var ___CSS_LOADER_URL_REPLACEMENT_105___ = _node_modules_css_loader_dist_runtime_getUrl_js__WEBPACK_IMPORTED_MODULE_2___default()(___CSS_LOADER_URL_IMPORT_105___);
var ___CSS_LOADER_URL_REPLACEMENT_106___ = _node_modules_css_loader_dist_runtime_getUrl_js__WEBPACK_IMPORTED_MODULE_2___default()(___CSS_LOADER_URL_IMPORT_106___);
var ___CSS_LOADER_URL_REPLACEMENT_107___ = _node_modules_css_loader_dist_runtime_getUrl_js__WEBPACK_IMPORTED_MODULE_2___default()(___CSS_LOADER_URL_IMPORT_107___);
var ___CSS_LOADER_URL_REPLACEMENT_108___ = _node_modules_css_loader_dist_runtime_getUrl_js__WEBPACK_IMPORTED_MODULE_2___default()(___CSS_LOADER_URL_IMPORT_108___);
var ___CSS_LOADER_URL_REPLACEMENT_109___ = _node_modules_css_loader_dist_runtime_getUrl_js__WEBPACK_IMPORTED_MODULE_2___default()(___CSS_LOADER_URL_IMPORT_109___);
var ___CSS_LOADER_URL_REPLACEMENT_110___ = _node_modules_css_loader_dist_runtime_getUrl_js__WEBPACK_IMPORTED_MODULE_2___default()(___CSS_LOADER_URL_IMPORT_110___);
var ___CSS_LOADER_URL_REPLACEMENT_111___ = _node_modules_css_loader_dist_runtime_getUrl_js__WEBPACK_IMPORTED_MODULE_2___default()(___CSS_LOADER_URL_IMPORT_111___);
var ___CSS_LOADER_URL_REPLACEMENT_112___ = _node_modules_css_loader_dist_runtime_getUrl_js__WEBPACK_IMPORTED_MODULE_2___default()(___CSS_LOADER_URL_IMPORT_112___);
var ___CSS_LOADER_URL_REPLACEMENT_113___ = _node_modules_css_loader_dist_runtime_getUrl_js__WEBPACK_IMPORTED_MODULE_2___default()(___CSS_LOADER_URL_IMPORT_113___);
var ___CSS_LOADER_URL_REPLACEMENT_114___ = _node_modules_css_loader_dist_runtime_getUrl_js__WEBPACK_IMPORTED_MODULE_2___default()(___CSS_LOADER_URL_IMPORT_114___);
var ___CSS_LOADER_URL_REPLACEMENT_115___ = _node_modules_css_loader_dist_runtime_getUrl_js__WEBPACK_IMPORTED_MODULE_2___default()(___CSS_LOADER_URL_IMPORT_115___);
var ___CSS_LOADER_URL_REPLACEMENT_116___ = _node_modules_css_loader_dist_runtime_getUrl_js__WEBPACK_IMPORTED_MODULE_2___default()(___CSS_LOADER_URL_IMPORT_116___);
var ___CSS_LOADER_URL_REPLACEMENT_117___ = _node_modules_css_loader_dist_runtime_getUrl_js__WEBPACK_IMPORTED_MODULE_2___default()(___CSS_LOADER_URL_IMPORT_117___);
var ___CSS_LOADER_URL_REPLACEMENT_118___ = _node_modules_css_loader_dist_runtime_getUrl_js__WEBPACK_IMPORTED_MODULE_2___default()(___CSS_LOADER_URL_IMPORT_118___);
var ___CSS_LOADER_URL_REPLACEMENT_119___ = _node_modules_css_loader_dist_runtime_getUrl_js__WEBPACK_IMPORTED_MODULE_2___default()(___CSS_LOADER_URL_IMPORT_119___);
var ___CSS_LOADER_URL_REPLACEMENT_120___ = _node_modules_css_loader_dist_runtime_getUrl_js__WEBPACK_IMPORTED_MODULE_2___default()(___CSS_LOADER_URL_IMPORT_120___);
var ___CSS_LOADER_URL_REPLACEMENT_121___ = _node_modules_css_loader_dist_runtime_getUrl_js__WEBPACK_IMPORTED_MODULE_2___default()(___CSS_LOADER_URL_IMPORT_121___);
var ___CSS_LOADER_URL_REPLACEMENT_122___ = _node_modules_css_loader_dist_runtime_getUrl_js__WEBPACK_IMPORTED_MODULE_2___default()(___CSS_LOADER_URL_IMPORT_122___);
var ___CSS_LOADER_URL_REPLACEMENT_123___ = _node_modules_css_loader_dist_runtime_getUrl_js__WEBPACK_IMPORTED_MODULE_2___default()(___CSS_LOADER_URL_IMPORT_123___);
var ___CSS_LOADER_URL_REPLACEMENT_124___ = _node_modules_css_loader_dist_runtime_getUrl_js__WEBPACK_IMPORTED_MODULE_2___default()(___CSS_LOADER_URL_IMPORT_124___);
var ___CSS_LOADER_URL_REPLACEMENT_125___ = _node_modules_css_loader_dist_runtime_getUrl_js__WEBPACK_IMPORTED_MODULE_2___default()(___CSS_LOADER_URL_IMPORT_125___);
var ___CSS_LOADER_URL_REPLACEMENT_126___ = _node_modules_css_loader_dist_runtime_getUrl_js__WEBPACK_IMPORTED_MODULE_2___default()(___CSS_LOADER_URL_IMPORT_126___);
var ___CSS_LOADER_URL_REPLACEMENT_127___ = _node_modules_css_loader_dist_runtime_getUrl_js__WEBPACK_IMPORTED_MODULE_2___default()(___CSS_LOADER_URL_IMPORT_127___);
var ___CSS_LOADER_URL_REPLACEMENT_128___ = _node_modules_css_loader_dist_runtime_getUrl_js__WEBPACK_IMPORTED_MODULE_2___default()(___CSS_LOADER_URL_IMPORT_128___);
var ___CSS_LOADER_URL_REPLACEMENT_129___ = _node_modules_css_loader_dist_runtime_getUrl_js__WEBPACK_IMPORTED_MODULE_2___default()(___CSS_LOADER_URL_IMPORT_129___);
var ___CSS_LOADER_URL_REPLACEMENT_130___ = _node_modules_css_loader_dist_runtime_getUrl_js__WEBPACK_IMPORTED_MODULE_2___default()(___CSS_LOADER_URL_IMPORT_130___);
var ___CSS_LOADER_URL_REPLACEMENT_131___ = _node_modules_css_loader_dist_runtime_getUrl_js__WEBPACK_IMPORTED_MODULE_2___default()(___CSS_LOADER_URL_IMPORT_131___);
var ___CSS_LOADER_URL_REPLACEMENT_132___ = _node_modules_css_loader_dist_runtime_getUrl_js__WEBPACK_IMPORTED_MODULE_2___default()(___CSS_LOADER_URL_IMPORT_132___);
var ___CSS_LOADER_URL_REPLACEMENT_133___ = _node_modules_css_loader_dist_runtime_getUrl_js__WEBPACK_IMPORTED_MODULE_2___default()(___CSS_LOADER_URL_IMPORT_133___);
var ___CSS_LOADER_URL_REPLACEMENT_134___ = _node_modules_css_loader_dist_runtime_getUrl_js__WEBPACK_IMPORTED_MODULE_2___default()(___CSS_LOADER_URL_IMPORT_134___);
// Module
___CSS_LOADER_EXPORT___.push([module.id, `body {
  display: block;
  padding: 0 .5rem;
  background-color: #0F0F0F;
  background-image: url(${___CSS_LOADER_URL_REPLACEMENT_0___});
  color: #FFFFFF;
  overflow-x: hidden;
  overflow-y: auto;
  margin: 0;
}

#Settings {
  display: block;
  color: #F1F1F1;
}

#Settings {
  padding: .5rem;
}

#Settings a {
  color: #CEFC92;
}

#Settings a:visited,
#Settings a:hover {
  color: #57799e;
}

#Settings h2 {
  text-transform: uppercase;
  letter-spacing: 2px;
}

#Settings h3 {
  letter-spacing: 1px;
}

#Settings h2,
#Settings h3 {
  color: #ffcb05;
  text-shadow: 1px 1px #000000;
}

#Settings label {
  font-family: sans-serif;
  font-size: 14px;
  color: #94afbd;
  text-shadow: 1px 1px #000000;
}

#Settings .setting:nth-child(2n+0) {
  background-color: #1c2c34;
  padding: 4px;
}

#Settings .setting:nth-child(2n+0):hover {
  background-color: #1c3b40;
}

#Settings .setting:nth-child(2n+1) {
  background-color: #071820;
  padding: 4px;
}

#Settings .setting:nth-child(2n+1):hover {
  background-color: #03282d;
}

#Settings .reverse-setting {
  flex-direction: row-reverse;
  align-items: center;
  justify-content: space-between;
}

#Settings .reverse-setting u {
  display: block;
  text-decoration: none;
  color: #a4c2d1;
  margin-bottom: 2px;
}

#OverlayCanvasOutput {
  display: none;
}

#BetterBuffsBar {
  width: 100%;
  text-align: center;
}

#BetterBuffsBar.overlay-disabled {
  padding: 5px;
}

#BetterBuffsBar.overlay-disabled p,
#BetterBuffsBar.overlay-disabled h2 {
  display: none;
}

#BetterBuffsBar.overlay-disabled > *:not(.tracked-regions) {
  opacity: 0;
  height: 0;
}

#BetterBuffsBar.overlay-disabled:hover > *:not(.tracked-regions) {
  opacity: 1;
  height: initial;
}

#BetterBuffsBar.overlay-disabled ~ #Settings {
  opacity: 0;
}

#BetterBuffsBar.overlay-disabled:hover ~ #Settings,
#BetterBuffsBar.overlay-disabled ~ #Settings:hover {
  opacity: 1;
}

#BetterBuffsBar.big-head-mode .tracked-region {
  display: grid;
  width: 100%;
  grid-template-areas:
    "first first . . . . . "
    "first first . . . . . "
    ". . . . . . ."
    ". . . . . . ."
    ". . . . . . ."
    ". . . . . . ."
}

#BetterBuffsBar.big-head-mode .tracked-region li:nth-child(1) {
  grid-area: first;
  width: 58px;
  height: 58px;
  background-size: cover;
}

#NameOutput {
  display: block;
  height: 20px;
  margin-top: 1rem;
}

.tracked-region {
  --maxcount: 5;
  --scale: 100;
  --totalitems: 10;
  width: auto;
  min-height: calc(((var(--totalitems) / var(--maxcount)) + 1) * (clamp(1, var(--scale) / 100, 2) * 27px) + (clamp(1, var(--scale) / 100, 2) * 27px));
  display: grid;
  justify-content: flex-start;
  align-items: flex-start;
  list-style: none;
  margin: 0;
  padding:0;
  gap: 2px;
  grid-template-columns: repeat(var(--maxcount),30px);
  grid-template-rows: repeat(8, 30px);
  position: relative;
}

html:not(.beta) .beta-only,
html:not(.beta) #Settings > button:nth-child(16),
html:not(.beta) #Settings > button:nth-child(17) {
  display: none !important;
}

.tracked-region .spacer {
  background-color: transparent !important;
}

.tracked-region:hover .spacer {
  background-color: red !important;
}

.tracked-region::before {
  width: calc(100% + 4px);
  height: calc(100% + 4px);
  content:'';
  display: block;
  position: absolute;
  top: -2px;
  left: -2px;
  border: solid 2px green;
}

#BetterBuffsBar.hide-overlay .tracked-region {
  opacity: 0;
}

#UntrackedBuffs {
  display: flex;
  align-items: flex-start;
  justify-content: flex-start;
  width: 350px;
  max-width: 100%;
  padding: 0;
  margin: 0 auto;
  list-style: none;
  flex-wrap: wrap;
}

.tracked-region li,
#UntrackedBuffs li {
  position: relative;
  display: flex;
  width: 27px;
  height: 27px;
  margin: 1px;
  background-color: #3e3e3e;
  background-repeat: no-repeat;
}

.tracked-region li::after,
#UntrackedBuffs li::after {
  display: block;
  content: attr(data-time);
  z-index: 3;
  font-family: 'trajan-pro-3', sans-serif;
  position: absolute;
  left: 2px;
  bottom: 0;
  font-size: 10px;
  color: #FFFFFF;
  font-weight: 300;
}

.tracked-region li::before,
#UntrackedBuffs li::before {
  display: block;
  content: attr(data-time);
  z-index: 3;
  font-family: 'trajan-pro-3', sans-serif;
  position: absolute;
  left: 3px;
  bottom: -1px;
  font-size: 10px;
  color: #000000;
  font-weight: 300;
}

.tracked-region .spacoer {
  background-color: transparent !important;
}

#OverloadBuff {
  background-image: url(${___CSS_LOADER_URL_REPLACEMENT_1___});
}

#OverloadBuff.inactive {
  background-image: url(${___CSS_LOADER_URL_REPLACEMENT_2___});
}

#ElderOverloadBuff {
  background-image: url(${___CSS_LOADER_URL_REPLACEMENT_3___});
}

#ElderOverloadBuff.inactive {
  background-image: url(${___CSS_LOADER_URL_REPLACEMENT_4___});
}

#WeaponPoisonBuff {
  background-image: url(${___CSS_LOADER_URL_REPLACEMENT_5___});
}

#WeaponPoisonBuff.inactive {
  background-image: url(${___CSS_LOADER_URL_REPLACEMENT_6___});
}

#DarknessBuff {
  background-image: url(${___CSS_LOADER_URL_REPLACEMENT_7___});
}

#DarknessBuff.inactive {
  background-image: url(${___CSS_LOADER_URL_REPLACEMENT_8___});
}

#AnimateDeadBuff {
  background-image: url(${___CSS_LOADER_URL_REPLACEMENT_9___});
}

#AnimateDeadBuff.inactive {
  background-image: url(${___CSS_LOADER_URL_REPLACEMENT_10___});
}

#BolgStacksBuff {
  background-image: url(${___CSS_LOADER_URL_REPLACEMENT_11___});
}

#BolgStacksBuff.inactive {
  background-image: url(${___CSS_LOADER_URL_REPLACEMENT_12___});
}

#BalanceByForceBuff {
  background-image: url(${___CSS_LOADER_URL_REPLACEMENT_13___});
}

#BalanceByForceBuff.inactive {
  background-image: url(${___CSS_LOADER_URL_REPLACEMENT_14___});
}

#TimeRiftBuff {
  background-image: url(${___CSS_LOADER_URL_REPLACEMENT_15___});
}

#TimeRiftBuff.inactive {
  background-image: url(${___CSS_LOADER_URL_REPLACEMENT_16___});
}

#FsoaSpecBuff {
  background-image: url(${___CSS_LOADER_URL_REPLACEMENT_17___});
}

#FsoaSpecBuff.inactive {
  background-image: url(${___CSS_LOADER_URL_REPLACEMENT_18___});
}

#GladiatorsRageBuff {
  background-image: url(${___CSS_LOADER_URL_REPLACEMENT_19___});
}

#GladiatorsRageBuff.inactive {
  background-image: url(${___CSS_LOADER_URL_REPLACEMENT_20___});
}

#NecrosisBuff {
  background-image: url(${___CSS_LOADER_URL_REPLACEMENT_21___});
}

#NecrosisBuff.inactive {
  background-image: url(${___CSS_LOADER_URL_REPLACEMENT_22___});
}

#Aura {
  background-image: url(${___CSS_LOADER_URL_REPLACEMENT_23___});
}

#Aura.inactive {
  background-image: url(${___CSS_LOADER_URL_REPLACEMENT_24___});
}

#BonfireBoost {
  background-image: url(${___CSS_LOADER_URL_REPLACEMENT_25___});
}

#BonfireBoost.inactive {
  background-image: url(${___CSS_LOADER_URL_REPLACEMENT_26___});
}

#ErethdorsGrimoire {
  background-image: url(${___CSS_LOADER_URL_REPLACEMENT_27___});
  background-size: contain;
}

#ErethdorsGrimoire.inactive {
  background-image: url(${___CSS_LOADER_URL_REPLACEMENT_28___});
  background-size: contain;
}

#LantadymeIncense {
  background-image: url(${___CSS_LOADER_URL_REPLACEMENT_29___});
  background-size: contain;
}

#LantadymeIncense.inactive {
  background-image: url(${___CSS_LOADER_URL_REPLACEMENT_30___});
  background-size: contain;
}

#LantadymeIncense.inactive::before,
#LantadymeIncense.inactive::after {
  font-size: 8px;
  content: 'Lant';
}

#DwarfWeedIncense {
  background-image: url(${___CSS_LOADER_URL_REPLACEMENT_31___});
  background-size: contain;
}

#DwarfWeedIncense.inactive {
  background-image: url(${___CSS_LOADER_URL_REPLACEMENT_32___});
  background-size: contain;
}

#DwarfWeedIncense.inactive::before,
#DwarfWeedIncense.inactive::after {
  font-size: 8px;
  content: 'Dwrf'
}

#FellstalkIncense {
  background-image: url(${___CSS_LOADER_URL_REPLACEMENT_33___});
  background-size: contain;
}

#FellstalkIncense.inactive {
  background-image: url(${___CSS_LOADER_URL_REPLACEMENT_34___});
  background-size: contain;
}

#FellstalkIncense.inactive::before,
#FellstalkIncense.inactive::after {
  font-size: 8px;
  content: 'Fell'
}

#KwuarmIncense {
  background-image: url(${___CSS_LOADER_URL_REPLACEMENT_35___});
  background-size: contain;
}

#KwuarmIncense.inactive {
  background-image: url(${___CSS_LOADER_URL_REPLACEMENT_36___});
  background-size: contain;
}

#KwuarmIncense.inactive::before,
#KwuarmIncense.inactive::after {
  font-size: 8px;
  content: 'Kwrm'
}

#Anticipation {
  background-image: url(${___CSS_LOADER_URL_REPLACEMENT_37___});
}

#Anticipation.inactive,
#Anticipation.cooldown {
  background-image: url(${___CSS_LOADER_URL_REPLACEMENT_38___});
}

#Barricade {
  background-image: url(${___CSS_LOADER_URL_REPLACEMENT_39___});
}

#Barricade.inactive,
#Barricade.cooldown {
  background-image: url(${___CSS_LOADER_URL_REPLACEMENT_40___});
}

#Devotion {
  background-image: url(${___CSS_LOADER_URL_REPLACEMENT_41___});
}

#Devotion.inactive,
#Devotion.cooldown {
  background-image: url(${___CSS_LOADER_URL_REPLACEMENT_42___});
}

#Divert {
  background-image: url(${___CSS_LOADER_URL_REPLACEMENT_43___});
}

#Divert.inactive,
#Divert.cooldown {
  background-image: url(${___CSS_LOADER_URL_REPLACEMENT_44___});
}

#Freedom {
  background-image: url(${___CSS_LOADER_URL_REPLACEMENT_45___});
}

#Freedom.inactive,
#Freedom.cooldown {
  background-image: url(${___CSS_LOADER_URL_REPLACEMENT_46___});
}

#Immortality {
  background-image: url(${___CSS_LOADER_URL_REPLACEMENT_47___});
}

#Immortality.inactive,
#Immortality.cooldown {
  background-image: url(${___CSS_LOADER_URL_REPLACEMENT_48___});
}

#Reflect {
  background-image: url(${___CSS_LOADER_URL_REPLACEMENT_49___});
}

#Reflect.inactive,
#Reflect.cooldown {
  background-image: url(${___CSS_LOADER_URL_REPLACEMENT_50___});
}

#Resonance {
  background-image: url(${___CSS_LOADER_URL_REPLACEMENT_51___});
}

#Resonance.inactive,
#Resonance.cooldown {
  background-image: url(${___CSS_LOADER_URL_REPLACEMENT_52___});
}

#SplitSoulBuff {
  background-image: url(${___CSS_LOADER_URL_REPLACEMENT_53___});
}

#SplitSoulBuff.inactive {
  background-image: url(${___CSS_LOADER_URL_REPLACEMENT_54___});
}

#AntifireBuff {
  background-image: url(${___CSS_LOADER_URL_REPLACEMENT_55___});
}

#AntifireBuff.inactive {
  background-image: url(${___CSS_LOADER_URL_REPLACEMENT_56___});
}

#PrayerRenewalBuff {
  background-image: url(${___CSS_LOADER_URL_REPLACEMENT_57___});
}

#PrayerRenewalBuff.inactive {
  background-image: url(${___CSS_LOADER_URL_REPLACEMENT_58___});
}

#DeathSparkBuff {
  background-image: url(${___CSS_LOADER_URL_REPLACEMENT_59___});
}

#DeathSparkBuff.inactive {
  background-image: url(${___CSS_LOADER_URL_REPLACEMENT_60___});
}

#AncientElvenRitualShardDebuff {
  background-image: url(${___CSS_LOADER_URL_REPLACEMENT_61___});
  background-size: contain;
}

#AncientElvenRitualShardDebuff.inactive {
  background-image: url(${___CSS_LOADER_URL_REPLACEMENT_62___});
  background-size: contain;
}

#AncientElvenRitualShardDebuff.inactive::before,
#AncientElvenRitualShardDebuff.inactive::after {
  content: 'use'
}

#EnhancedExcaliburDebuff {
  background-image: url(${___CSS_LOADER_URL_REPLACEMENT_63___});
  background-size: contain;
}

#EnhancedExcaliburDebuff.inactive {
  background-image: url(${___CSS_LOADER_URL_REPLACEMENT_64___});
  background-size: contain;
}

#EnhancedExcaliburDebuff.inactive::before,
#EnhancedExcaliburDebuff.inactive::after {
  content: 'use'
}

#AdrenalinePotionDebuff {
  background-image: url(${___CSS_LOADER_URL_REPLACEMENT_65___});
  background-size: contain;
}

#AdrenalinePotionDebuff.inactive {
  background-image: url(${___CSS_LOADER_URL_REPLACEMENT_66___});
}

#AdrenalinePotionDebuff.inactive::before,
#AdrenalinePotionDebuff.inactive::after {
  content: 'adr'
}

#DeathGuardDebuff {
  background-image: url(${___CSS_LOADER_URL_REPLACEMENT_67___});
  background-size: contain;
}

#DeathGuardDebuff.inactive {
  background-image: url(${___CSS_LOADER_URL_REPLACEMENT_68___});
}

#OmniGuardDebuff {
  background-image: url(${___CSS_LOADER_URL_REPLACEMENT_69___});
  background-size: contain;
}

#OmniGuardDebuff.inactive {
  background-image: url(${___CSS_LOADER_URL_REPLACEMENT_70___});
}

#CrystalRainDebuff {
  background-image: url(${___CSS_LOADER_URL_REPLACEMENT_71___});
  background-size: contain;
}

#CrystalRainDebuff.inactive {
  background-image: url(${___CSS_LOADER_URL_REPLACEMENT_72___});
  background-size: contain;
}

#StunnedDebuff {
  background-image: url(${___CSS_LOADER_URL_REPLACEMENT_73___});
  background-size: contain;
}

#StunnedDebuff.inactive {
  background-image: url(${___CSS_LOADER_URL_REPLACEMENT_74___});
  background-size: contain;
}

#SignOfLifeDebuff {
  background-image: url(${___CSS_LOADER_URL_REPLACEMENT_75___});
  background-size: contain;
}

#SignOfLifeDebuff.inactive {
  background-image: url(${___CSS_LOADER_URL_REPLACEMENT_76___});
  background-size: contain;
}

#PowerburstPreventionDebuff {
  background-image: url(${___CSS_LOADER_URL_REPLACEMENT_77___});
  background-size: contain;
}

#PowerburstPreventionDebuff.inactive {
  background-image: url(${___CSS_LOADER_URL_REPLACEMENT_78___});
  background-size: contain;
}

#VirusDebuff[data-virus=""] {
  background-image: url(${___CSS_LOADER_URL_REPLACEMENT_79___});
}

#VirusDebuff[data-virus="BLK"] {
  background-image: url(${___CSS_LOADER_URL_REPLACEMENT_80___});
}

#VirusDebuff[data-virus="BLK"]::before,
#VirusDebuff[data-virus="BLK"]::after {
  content: 'BLK'
}

#VirusDebuff[data-virus="BLU"] {
  background-image: url(${___CSS_LOADER_URL_REPLACEMENT_81___});
}

#VirusDebuff[data-virus="BLU"]::before,
#VirusDebuff[data-virus="BLU"]::after {
  content: 'BLU'
}

#VirusDebuff[data-virus="RED"] {
  background-image: url(${___CSS_LOADER_URL_REPLACEMENT_82___});
}

#VirusDebuff[data-virus="RED"]::before,
#VirusDebuff[data-virus="RED"]::after {
  content: 'RED'
}

#VirusDebuff[data-virus="GRN"] {
  background-image: url(${___CSS_LOADER_URL_REPLACEMENT_83___});
}

#VirusDebuff[data-virus="GRN"]::before,
#VirusDebuff[data-virus="GRN"]::after {
  content: 'GRN'
}

#ThreadsOfFateBuff {
  background-image: url(${___CSS_LOADER_URL_REPLACEMENT_84___});
  background-size: contain;
}

#ThreadsOfFateBuff.inactive,
#ThreadsOfFateBuff.cooldown {
  background-image: url(${___CSS_LOADER_URL_REPLACEMENT_85___});
}

#DeathMarkDebuff {
  background-image: url(${___CSS_LOADER_URL_REPLACEMENT_86___});
  background-size: contain;
}

#DeathMarkDebuff.inactive {
  background-image: url(${___CSS_LOADER_URL_REPLACEMENT_87___});
}

#VulnerabilityDebuff {
  background-image: url(${___CSS_LOADER_URL_REPLACEMENT_88___});
  background-size: contain;
}

#VulnerabilityDebuff.inactive {
  background-image: url(${___CSS_LOADER_URL_REPLACEMENT_89___});
}

#VulnerabilityDebuff.inactive::before,
#VulnerabilityDebuff.inactive::after {
  content:  'vuln' !important;
  font-size: 8px !important;
  left: 1px !important;
}

#BerserkUltimate {
  background-image: url(${___CSS_LOADER_URL_REPLACEMENT_90___});
}

#BerserkUltimate.inactive,
#BerserkUltimate.cooldown {
  background-image: url(${___CSS_LOADER_URL_REPLACEMENT_91___});
}

#DeathsSwiftnessUltimate {
  background-image: url(${___CSS_LOADER_URL_REPLACEMENT_92___});
}

#DeathsSwiftnessUltimate.inactive,
#DeathsSwiftnessUltimate.cooldown {
  background-image: url(${___CSS_LOADER_URL_REPLACEMENT_93___});
}

#GreaterDeathsSwiftnessUltimate {
background-image: url(${___CSS_LOADER_URL_REPLACEMENT_94___});
}

#GreaterDeathsSwiftnessUltimate.inactive,
#GreaterDeathsSwiftnessUltimate.cooldown {
  background-image: url(${___CSS_LOADER_URL_REPLACEMENT_95___});
}

#SunshineUltimate {
  background-image: url(${___CSS_LOADER_URL_REPLACEMENT_96___});
}

#SunshineUltimate.inactive,
#SunshineUltimate.cooldown {
  background-image: url(${___CSS_LOADER_URL_REPLACEMENT_97___});
}

#GreaterSunshineUltimate {
  background-image: url(${___CSS_LOADER_URL_REPLACEMENT_98___});
}

#GreaterSunshineUltimate.inactive,
#GreaterSunshineUltimate.cooldown {
  background-image: url(${___CSS_LOADER_URL_REPLACEMENT_99___});
}

#LivingDeathUltimate {
  background-image: url(${___CSS_LOADER_URL_REPLACEMENT_100___});
}

#LivingDeathUltimate.inactive,
#LivingDeathUltimate.cooldown {
  background-image: url(${___CSS_LOADER_URL_REPLACEMENT_101___});
}

#LimitlessSigil,
#LimitlessSigil.cooldown {
  background-image: url(${___CSS_LOADER_URL_REPLACEMENT_102___});
}

#LimitlessSigil:not(.cooldown) {
  background-image: url(${___CSS_LOADER_URL_REPLACEMENT_103___});
}

#DemonSlayerSigil,
#DemonSlayerSigil.cooldown {
  background-image: url(${___CSS_LOADER_URL_REPLACEMENT_104___});
}

#DemonSlayerSigil:not(.cooldown) {
  background-image: url(${___CSS_LOADER_URL_REPLACEMENT_105___});
}

#DragonSlayerSigil,
#DragonSlayerSigil.cooldown {
  background-image: url(${___CSS_LOADER_URL_REPLACEMENT_106___});
}

#DragonSlayerSigil:not(.cooldown) {
  background-image: url(${___CSS_LOADER_URL_REPLACEMENT_107___});
}

#UndeadSlayerSigil,
#UndeadSlayerSigil.cooldown {
  background-image: url(${___CSS_LOADER_URL_REPLACEMENT_108___});
}

#UndeadSlayerSigil:not(.cooldown) {
  background-image: url(${___CSS_LOADER_URL_REPLACEMENT_109___});
}

#IngenuityOfTheHumansSigil,
#IngenuityOfTheHumansSigil.cooldown {
  background-image: url(${___CSS_LOADER_URL_REPLACEMENT_110___});
}

#IngenuityOfTheHumansSigil:not(.cooldown) {
  background-image: url(${___CSS_LOADER_URL_REPLACEMENT_111___});
}

#DpsPrayer[data-prayer="affliction"] {
  background-image: url(${___CSS_LOADER_URL_REPLACEMENT_112___});
}

#DpsPrayer[data-prayer="anguish"] {
  background-image: url(${___CSS_LOADER_URL_REPLACEMENT_113___});
}

#DpsPrayer[data-prayer="desolation"] {
  background-image: url(${___CSS_LOADER_URL_REPLACEMENT_114___});
}

#DpsPrayer[data-prayer="malevolence"] {
  background-image: url(${___CSS_LOADER_URL_REPLACEMENT_115___});
}

#DpsPrayer[data-prayer="ruination"] {
  background-image: url(${___CSS_LOADER_URL_REPLACEMENT_116___});
}

#DpsPrayer[data-prayer="sorrow"] {
  background-image: url(${___CSS_LOADER_URL_REPLACEMENT_117___});
}

#DpsPrayer[data-prayer="torment"] {
  background-image: url(${___CSS_LOADER_URL_REPLACEMENT_118___});
}

#DpsPrayer[data-prayer="turmoil"] {
  background-image: url(${___CSS_LOADER_URL_REPLACEMENT_119___});
}

#OverheadPrayer[data-prayer="deflectmagic"] {
  background-image: url(${___CSS_LOADER_URL_REPLACEMENT_120___});
}

#OverheadPrayer[data-prayer="deflectmelee"] {
  background-image: url(${___CSS_LOADER_URL_REPLACEMENT_121___});
}

#OverheadPrayer[data-prayer="deflectnecromancy"] {
  background-image: url(${___CSS_LOADER_URL_REPLACEMENT_122___});
}

#OverheadPrayer[data-prayer="deflectranged"] {
  background-image: url(${___CSS_LOADER_URL_REPLACEMENT_123___});
}

#OverheadPrayer[data-prayer="protectfrommagic"] {
  background-image: url(${___CSS_LOADER_URL_REPLACEMENT_124___});
}

#OverheadPrayer[data-prayer="protectfrommelee"] {
  background-image: url(${___CSS_LOADER_URL_REPLACEMENT_125___});
}

#OverheadPrayer[data-prayer="protectfromnecromancy"] {
  background-image: url(${___CSS_LOADER_URL_REPLACEMENT_126___});
}

#OverheadPrayer[data-prayer="protectfromranged"] {
  background-image: url(${___CSS_LOADER_URL_REPLACEMENT_127___});
}

#OverheadPrayer[data-prayer="soulsplit"] {
  background-image: url(${___CSS_LOADER_URL_REPLACEMENT_128___});
}

#DpsPrayer[data-prayer=""] {
  background-image: url(${___CSS_LOADER_URL_REPLACEMENT_129___});
}

#OverheadPrayer[data-prayer=""] {
  background-image: url(${___CSS_LOADER_URL_REPLACEMENT_129___});
}

.tracked-region li.cooldown::before,
.tracked-region li.cooldown::after {
  content:  attr(data-cooldown) !important;
}

.blink-maintainables .tracked-region li.inactive.maintainable::before,
.blink-maintainables .tracked-region li.inactive.maintainable::after {
  width: 100%;
  height: 100%;
  background-color: rgba(0,0,0,.15);
  display: flex;
  align-items: center;
  justify-content: center;
  content:  '!!' !important;
  color: red;
  font-size: 20px;
  top: 50%;
  left: 50%;
  right: auto !important;;
  bottom: auto !important;
  transform: translate(-50%, -50%);
  animation: blink-animation 1.8s steps(3, start) infinite;
  border: solid 1px red;
}

@keyframes blink-animation {
  to {
    visibility: hidden;
  }
}

#DpsPrayer[data-prayer=""]::before,
#DpsPrayer[data-prayer=""]::after {
  width: 100%;
  height: 100%;
  display: flex;
  align-items: center;
  justify-content: center;
  white-space: pre;
  content:  'DPS\\aPray' !important;
  line-height: .95;
  font-size: 8px;
  font-family: 'trajan-pro-3', sans-serif;
  top: 50%;
  left: 50%;
  right: auto !important;
  bottom: auto !important;
  transform: translate(-50%, -50%);
}

#DpsPrayer[data-prayer=""]::after {
  color: #FFF;
}

#DpsPrayer[data-prayer=""]::before {
  color: #000;
  top: calc(50% + 1px);
  left: calc(50% + 1px);
}

#OverheadPrayer[data-prayer=""]::before,
#OverheadPrayer[data-prayer=""]::after {
  width: 100%;
  height: 100%;
  display: flex;
  align-items: center;
  justify-content: center;
  white-space: pre;
  content:  'Over\\aHead' !important;
  line-height: .95;
  font-size: 8px;
  font-family: 'trajan-pro-3', sans-serif;
  top: 50%;
  left: 50%;
  right: auto !important;
  bottom: auto !important;
  transform: translate(-50%, -50%);
}

#OverheadPrayer[data-prayer=""]::after {
  color: #FFF;
}

#OverheadPrayer[data-prayer=""]::before {
  color: #000;
  top: calc(50% + 1px);
  left: calc(50% + 1px);
}

#BetterBuffsBar:not(.fade) .tracked-region li.inactive,
#BetterBuffsBar:not(.fade) .tracked-region li.cooldown {
  opacity: 0;
}

#BetterBuffsBar:not(.fade):hover .tracked-region li.inactive,
#BetterBuffsBar:not(.fade):hover .tracked-region li.cooldown {
  opacity: 1;
}

#UntrackedBuffs {
  border: solid 1px red;
  min-height: 10px;
  padding: 4px;
}

#ToggleOverlayButton {
  position: fixed;
  top: 3px;
  right: 0px;
  font-size: 20px;
}

#ToggleOverlayButton:hover {
  cursor: pointer;
}

#ToggleOverlayButton:hover::before {
  content: 'Toggle Overlay';
}

li:not(.sortable-selected) {
  border: solid 1px transparent;
}

li.sortable-selected {
  border: solid 1px #92cefe;
}

li.disabled {
  display: none !important;
  height: 0 !important;
  width: 0 !important;
  visibility: hidden;
  opacity: 0;
  border: none !important;
  pointer-events: none;
}

hr {
  opacity: .5;
}

h3 {
  margin-top: .75rem;
  margin-bottom: .35rem;
}

.flex {
  display: flex;
  align-items: center;
  justify-content: flex-start;
}

.flex-wrap { flex-wrap: wrap; }
.full { width: 100%; }

#Settings .setting {
  margin-bottom: .65rem;
}

#Settings input[type="range"] {
  margin-top: .4rem !important;
}

#Settings input[type="range"] ~ output {
  font-size: 14px;
  color: #94afbd;
  text-shadow: 1px 1px #000000;
  margin-top: .4rem;
}

input[type="color"] {
  margin-right: .5rem;
  width: 21px;
  height: 24px;
  background-color: transparent;
  padding: 0;
  border: none;
}

input[type="text"],
input[type="checkbox"],
select {
  margin-right: .5rem;
}

input[type="color"]:hover {
  cursor: pointer;
}

input[type="number"] {
  margin: 0 .5rem;
  max-width: 40px;
  margin-left: 0;
}

input[type="number"].per-row {
  margin-left: 0;
}

small {
  display: block;
  margin: 1rem 0;
}

.nisimgbutton {
    width: 20px;
    height: 20px;
    border: 3px solid #212B2D;
    box-sizing: border-box;
    border-image: url(${___CSS_LOADER_URL_REPLACEMENT_130___}) 3 fill;
    cursor: pointer;
}

.nisimgbutton:hover {
    filter: brightness(1.2);
}

/*font stolen from jagex*/
@font-face{
	font-family:'trajan-pro-3';
	src:url(${___CSS_LOADER_URL_REPLACEMENT_131___});
}

/*Chromium custom scrollbars, will only work on chromium browsers (such as alt1) */
body::-webkit-scrollbar,
body *:not(.normalscroll)::-webkit-scrollbar
{width:10px; height:10px;}

body::-webkit-scrollbar-button:start:vertical,
body *:not(.normalscroll)::-webkit-scrollbar-button:start:vertical
{background-image:url(${___CSS_LOADER_URL_REPLACEMENT_132___}); background-position:0px 0px; height:15px;}

body::-webkit-scrollbar-button:end:vertical,
body *:not(.normalscroll)::-webkit-scrollbar-button:end:vertical
{background-image:url(${___CSS_LOADER_URL_REPLACEMENT_132___}); background-position:-45px 0px; height:15px;}

body::-webkit-scrollbar-track:vertical,
body *:not(.normalscroll)::-webkit-scrollbar-track:vertical
{background-image:url(${___CSS_LOADER_URL_REPLACEMENT_132___}); background-position:-15px 0px;}

body::-webkit-scrollbar-thumb:vertical,
body *:not(.normalscroll)::-webkit-scrollbar-thumb:vertical
{background-image:url(${___CSS_LOADER_URL_REPLACEMENT_132___}); background-position:-30px 0px; border-radius:5px;}

body::-webkit-scrollbar-button:start:horizontal,
body *:not(.normalscroll)::-webkit-scrollbar-button:start:horizontal
{background-image:url(${___CSS_LOADER_URL_REPLACEMENT_133___}); background-position:0px 0px; width:15px;}

body::-webkit-scrollbar-button:end:horizontal,
body *:not(.normalscroll)::-webkit-scrollbar-button:end:horizontal
{background-image:url(${___CSS_LOADER_URL_REPLACEMENT_133___}); background-position:0px -45px; width:15px;}

body::-webkit-scrollbar-track:horizontal,
body *:not(.normalscroll)::-webkit-scrollbar-track:horizontal
{background-image:url(${___CSS_LOADER_URL_REPLACEMENT_133___}); background-position:0px -15px;}

body::-webkit-scrollbar-thumb:horizontal,
body *:not(.normalscroll)::-webkit-scrollbar-thumb:horizontal
{background-image:url(${___CSS_LOADER_URL_REPLACEMENT_133___}); background-position:0px -30px; border-radius:5px;}

body::-webkit-scrollbar-corner,
body *:not(.normalscroll)::-webkit-scrollbar-corner
{background:#060d11;}

input[type="text"],
input[type="number"],
input[type="input"],
select
	{height:20px; cursor:text; color:#B1AFAE; outline:none; position:relative; padding:0px 4px; box-sizing:border-box; background:linear-gradient(to bottom, #191714,#292222,#100C0C); border:1px solid #514949; font-family:sans-serif; font-size:13px;}

select{height:19px; cursor:pointer; outline:none; box-sizing:border-box; padding:0px 0px 0px 4px;}
select>option{background:#1D190D;}

hr {
  width:100%; height:0px; border-top:1px solid #000; border-bottom:1px solid #41555F;
}

.nisbutton {
    height: 32px;
    position: relative;
    background: url(${___CSS_LOADER_URL_REPLACEMENT_134___}) 0px -100%/24px 400% repeat content-box;
    cursor: pointer;
    text-align: center;
    color: #000;
    font-family: 'trajan-pro-3';
    text-shadow: 1px 1px 2px #ecc622;
    font-size: 18px;
    margin: 5px;
    padding: 0px 12px;
    line-height: 32px;
    user-select: none;
    -webkit-user-select: none;
}

.nisbutton::before {
    width: 12px;
    height: 100%;
    content: "";
    position: absolute;
    top: 0px;
    left: 0px;
    background: url(${___CSS_LOADER_URL_REPLACEMENT_134___}) 0px 0px / 24px 400%;
}

.nisbutton::after {
    width: 12px;
    height: 100%;
    content: "";
    position: absolute;
    top: 0px;
    right: 0px;
    background: url(${___CSS_LOADER_URL_REPLACEMENT_134___}) -12px 0px / 24px 400%;
}

.nisbutton:not([disabled]):hover {
    background-position: 0px -300%;
}

.nisbutton:not([disabled]):hover::before {
    background-position: 0px -200%;
}

.nisbutton:not([disabled]):hover::after {
    background-position: -12px -200%;
}

.nisbutton[disabled] {
  opacity: .5;
  cursor: default;
  pointer-events: none;
}
`, ""]);
// Exports
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (___CSS_LOADER_EXPORT___);


/***/ }),

/***/ "../node_modules/css-loader/dist/runtime/api.js":
/*!******************************************************!*\
  !*** ../node_modules/css-loader/dist/runtime/api.js ***!
  \******************************************************/
/***/ ((module) => {

"use strict";


/*
  MIT License http://www.opensource.org/licenses/mit-license.php
  Author Tobias Koppers @sokra
*/
module.exports = function (cssWithMappingToString) {
  var list = [];

  // return the list of modules as css string
  list.toString = function toString() {
    return this.map(function (item) {
      var content = "";
      var needLayer = typeof item[5] !== "undefined";
      if (item[4]) {
        content += "@supports (".concat(item[4], ") {");
      }
      if (item[2]) {
        content += "@media ".concat(item[2], " {");
      }
      if (needLayer) {
        content += "@layer".concat(item[5].length > 0 ? " ".concat(item[5]) : "", " {");
      }
      content += cssWithMappingToString(item);
      if (needLayer) {
        content += "}";
      }
      if (item[2]) {
        content += "}";
      }
      if (item[4]) {
        content += "}";
      }
      return content;
    }).join("");
  };

  // import a list of modules into the list
  list.i = function i(modules, media, dedupe, supports, layer) {
    if (typeof modules === "string") {
      modules = [[null, modules, undefined]];
    }
    var alreadyImportedModules = {};
    if (dedupe) {
      for (var k = 0; k < this.length; k++) {
        var id = this[k][0];
        if (id != null) {
          alreadyImportedModules[id] = true;
        }
      }
    }
    for (var _k = 0; _k < modules.length; _k++) {
      var item = [].concat(modules[_k]);
      if (dedupe && alreadyImportedModules[item[0]]) {
        continue;
      }
      if (typeof layer !== "undefined") {
        if (typeof item[5] === "undefined") {
          item[5] = layer;
        } else {
          item[1] = "@layer".concat(item[5].length > 0 ? " ".concat(item[5]) : "", " {").concat(item[1], "}");
          item[5] = layer;
        }
      }
      if (media) {
        if (!item[2]) {
          item[2] = media;
        } else {
          item[1] = "@media ".concat(item[2], " {").concat(item[1], "}");
          item[2] = media;
        }
      }
      if (supports) {
        if (!item[4]) {
          item[4] = "".concat(supports);
        } else {
          item[1] = "@supports (".concat(item[4], ") {").concat(item[1], "}");
          item[4] = supports;
        }
      }
      list.push(item);
    }
  };
  return list;
};

/***/ }),

/***/ "../node_modules/css-loader/dist/runtime/getUrl.js":
/*!*********************************************************!*\
  !*** ../node_modules/css-loader/dist/runtime/getUrl.js ***!
  \*********************************************************/
/***/ ((module) => {

"use strict";


module.exports = function (url, options) {
  if (!options) {
    options = {};
  }
  if (!url) {
    return url;
  }
  url = String(url.__esModule ? url.default : url);

  // If url is already wrapped in quotes, remove them
  if (/^['"].*['"]$/.test(url)) {
    url = url.slice(1, -1);
  }
  if (options.hash) {
    url += options.hash;
  }

  // Should url be wrapped?
  // See https://drafts.csswg.org/css-values-3/#urls
  if (/["'() \t\n]|(%20)/.test(url) || options.needQuotes) {
    return "\"".concat(url.replace(/"/g, '\\"').replace(/\n/g, "\\n"), "\"");
  }
  return url;
};

/***/ }),

/***/ "../node_modules/css-loader/dist/runtime/noSourceMaps.js":
/*!***************************************************************!*\
  !*** ../node_modules/css-loader/dist/runtime/noSourceMaps.js ***!
  \***************************************************************/
/***/ ((module) => {

"use strict";


module.exports = function (i) {
  return i[1];
};

/***/ }),

/***/ "../node_modules/html-to-image/es/apply-style.js":
/*!*******************************************************!*\
  !*** ../node_modules/html-to-image/es/apply-style.js ***!
  \*******************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   applyStyle: () => (/* binding */ applyStyle)
/* harmony export */ });
function applyStyle(node, options) {
    const { style } = node;
    if (options.backgroundColor) {
        style.backgroundColor = options.backgroundColor;
    }
    if (options.width) {
        style.width = `${options.width}px`;
    }
    if (options.height) {
        style.height = `${options.height}px`;
    }
    const manual = options.style;
    if (manual != null) {
        Object.keys(manual).forEach((key) => {
            style[key] = manual[key];
        });
    }
    return node;
}
//# sourceMappingURL=apply-style.js.map

/***/ }),

/***/ "../node_modules/html-to-image/es/clone-node.js":
/*!******************************************************!*\
  !*** ../node_modules/html-to-image/es/clone-node.js ***!
  \******************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   cloneNode: () => (/* binding */ cloneNode)
/* harmony export */ });
/* harmony import */ var _clone_pseudos__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./clone-pseudos */ "../node_modules/html-to-image/es/clone-pseudos.js");
/* harmony import */ var _util__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./util */ "../node_modules/html-to-image/es/util.js");
/* harmony import */ var _mimes__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./mimes */ "../node_modules/html-to-image/es/mimes.js");
/* harmony import */ var _dataurl__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./dataurl */ "../node_modules/html-to-image/es/dataurl.js");




async function cloneCanvasElement(canvas) {
    const dataURL = canvas.toDataURL();
    if (dataURL === 'data:,') {
        return canvas.cloneNode(false);
    }
    return (0,_util__WEBPACK_IMPORTED_MODULE_1__.createImage)(dataURL);
}
async function cloneVideoElement(video, options) {
    if (video.currentSrc) {
        const canvas = document.createElement('canvas');
        const ctx = canvas.getContext('2d');
        canvas.width = video.clientWidth;
        canvas.height = video.clientHeight;
        ctx === null || ctx === void 0 ? void 0 : ctx.drawImage(video, 0, 0, canvas.width, canvas.height);
        const dataURL = canvas.toDataURL();
        return (0,_util__WEBPACK_IMPORTED_MODULE_1__.createImage)(dataURL);
    }
    const poster = video.poster;
    const contentType = (0,_mimes__WEBPACK_IMPORTED_MODULE_2__.getMimeType)(poster);
    const dataURL = await (0,_dataurl__WEBPACK_IMPORTED_MODULE_3__.resourceToDataURL)(poster, contentType, options);
    return (0,_util__WEBPACK_IMPORTED_MODULE_1__.createImage)(dataURL);
}
async function cloneIFrameElement(iframe) {
    var _a;
    try {
        if ((_a = iframe === null || iframe === void 0 ? void 0 : iframe.contentDocument) === null || _a === void 0 ? void 0 : _a.body) {
            return (await cloneNode(iframe.contentDocument.body, {}, true));
        }
    }
    catch (_b) {
        // Failed to clone iframe
    }
    return iframe.cloneNode(false);
}
async function cloneSingleNode(node, options) {
    if ((0,_util__WEBPACK_IMPORTED_MODULE_1__.isInstanceOfElement)(node, HTMLCanvasElement)) {
        return cloneCanvasElement(node);
    }
    if ((0,_util__WEBPACK_IMPORTED_MODULE_1__.isInstanceOfElement)(node, HTMLVideoElement)) {
        return cloneVideoElement(node, options);
    }
    if ((0,_util__WEBPACK_IMPORTED_MODULE_1__.isInstanceOfElement)(node, HTMLIFrameElement)) {
        return cloneIFrameElement(node);
    }
    return node.cloneNode(false);
}
const isSlotElement = (node) => node.tagName != null && node.tagName.toUpperCase() === 'SLOT';
async function cloneChildren(nativeNode, clonedNode, options) {
    var _a, _b;
    let children = [];
    if (isSlotElement(nativeNode) && nativeNode.assignedNodes) {
        children = (0,_util__WEBPACK_IMPORTED_MODULE_1__.toArray)(nativeNode.assignedNodes());
    }
    else if ((0,_util__WEBPACK_IMPORTED_MODULE_1__.isInstanceOfElement)(nativeNode, HTMLIFrameElement) &&
        ((_a = nativeNode.contentDocument) === null || _a === void 0 ? void 0 : _a.body)) {
        children = (0,_util__WEBPACK_IMPORTED_MODULE_1__.toArray)(nativeNode.contentDocument.body.childNodes);
    }
    else {
        children = (0,_util__WEBPACK_IMPORTED_MODULE_1__.toArray)(((_b = nativeNode.shadowRoot) !== null && _b !== void 0 ? _b : nativeNode).childNodes);
    }
    if (children.length === 0 ||
        (0,_util__WEBPACK_IMPORTED_MODULE_1__.isInstanceOfElement)(nativeNode, HTMLVideoElement)) {
        return clonedNode;
    }
    await children.reduce((deferred, child) => deferred
        .then(() => cloneNode(child, options))
        .then((clonedChild) => {
        if (clonedChild) {
            clonedNode.appendChild(clonedChild);
        }
    }), Promise.resolve());
    return clonedNode;
}
function cloneCSSStyle(nativeNode, clonedNode) {
    const targetStyle = clonedNode.style;
    if (!targetStyle) {
        return;
    }
    const sourceStyle = window.getComputedStyle(nativeNode);
    if (sourceStyle.cssText) {
        targetStyle.cssText = sourceStyle.cssText;
        targetStyle.transformOrigin = sourceStyle.transformOrigin;
    }
    else {
        (0,_util__WEBPACK_IMPORTED_MODULE_1__.toArray)(sourceStyle).forEach((name) => {
            let value = sourceStyle.getPropertyValue(name);
            if (name === 'font-size' && value.endsWith('px')) {
                const reducedFont = Math.floor(parseFloat(value.substring(0, value.length - 2))) - 0.1;
                value = `${reducedFont}px`;
            }
            if ((0,_util__WEBPACK_IMPORTED_MODULE_1__.isInstanceOfElement)(nativeNode, HTMLIFrameElement) &&
                name === 'display' &&
                value === 'inline') {
                value = 'block';
            }
            if (name === 'd' && clonedNode.getAttribute('d')) {
                value = `path(${clonedNode.getAttribute('d')})`;
            }
            targetStyle.setProperty(name, value, sourceStyle.getPropertyPriority(name));
        });
    }
}
function cloneInputValue(nativeNode, clonedNode) {
    if ((0,_util__WEBPACK_IMPORTED_MODULE_1__.isInstanceOfElement)(nativeNode, HTMLTextAreaElement)) {
        clonedNode.innerHTML = nativeNode.value;
    }
    if ((0,_util__WEBPACK_IMPORTED_MODULE_1__.isInstanceOfElement)(nativeNode, HTMLInputElement)) {
        clonedNode.setAttribute('value', nativeNode.value);
    }
}
function cloneSelectValue(nativeNode, clonedNode) {
    if ((0,_util__WEBPACK_IMPORTED_MODULE_1__.isInstanceOfElement)(nativeNode, HTMLSelectElement)) {
        const clonedSelect = clonedNode;
        const selectedOption = Array.from(clonedSelect.children).find((child) => nativeNode.value === child.getAttribute('value'));
        if (selectedOption) {
            selectedOption.setAttribute('selected', '');
        }
    }
}
function decorate(nativeNode, clonedNode) {
    if ((0,_util__WEBPACK_IMPORTED_MODULE_1__.isInstanceOfElement)(clonedNode, Element)) {
        cloneCSSStyle(nativeNode, clonedNode);
        (0,_clone_pseudos__WEBPACK_IMPORTED_MODULE_0__.clonePseudoElements)(nativeNode, clonedNode);
        cloneInputValue(nativeNode, clonedNode);
        cloneSelectValue(nativeNode, clonedNode);
    }
    return clonedNode;
}
async function ensureSVGSymbols(clone, options) {
    const uses = clone.querySelectorAll ? clone.querySelectorAll('use') : [];
    if (uses.length === 0) {
        return clone;
    }
    const processedDefs = {};
    for (let i = 0; i < uses.length; i++) {
        const use = uses[i];
        const id = use.getAttribute('xlink:href');
        if (id) {
            const exist = clone.querySelector(id);
            const definition = document.querySelector(id);
            if (!exist && definition && !processedDefs[id]) {
                // eslint-disable-next-line no-await-in-loop
                processedDefs[id] = (await cloneNode(definition, options, true));
            }
        }
    }
    const nodes = Object.values(processedDefs);
    if (nodes.length) {
        const ns = 'http://www.w3.org/1999/xhtml';
        const svg = document.createElementNS(ns, 'svg');
        svg.setAttribute('xmlns', ns);
        svg.style.position = 'absolute';
        svg.style.width = '0';
        svg.style.height = '0';
        svg.style.overflow = 'hidden';
        svg.style.display = 'none';
        const defs = document.createElementNS(ns, 'defs');
        svg.appendChild(defs);
        for (let i = 0; i < nodes.length; i++) {
            defs.appendChild(nodes[i]);
        }
        clone.appendChild(svg);
    }
    return clone;
}
async function cloneNode(node, options, isRoot) {
    if (!isRoot && options.filter && !options.filter(node)) {
        return null;
    }
    return Promise.resolve(node)
        .then((clonedNode) => cloneSingleNode(clonedNode, options))
        .then((clonedNode) => cloneChildren(node, clonedNode, options))
        .then((clonedNode) => decorate(node, clonedNode))
        .then((clonedNode) => ensureSVGSymbols(clonedNode, options));
}
//# sourceMappingURL=clone-node.js.map

/***/ }),

/***/ "../node_modules/html-to-image/es/clone-pseudos.js":
/*!*********************************************************!*\
  !*** ../node_modules/html-to-image/es/clone-pseudos.js ***!
  \*********************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   clonePseudoElements: () => (/* binding */ clonePseudoElements)
/* harmony export */ });
/* harmony import */ var _util__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./util */ "../node_modules/html-to-image/es/util.js");

function formatCSSText(style) {
    const content = style.getPropertyValue('content');
    return `${style.cssText} content: '${content.replace(/'|"/g, '')}';`;
}
function formatCSSProperties(style) {
    return (0,_util__WEBPACK_IMPORTED_MODULE_0__.toArray)(style)
        .map((name) => {
        const value = style.getPropertyValue(name);
        const priority = style.getPropertyPriority(name);
        return `${name}: ${value}${priority ? ' !important' : ''};`;
    })
        .join(' ');
}
function getPseudoElementStyle(className, pseudo, style) {
    const selector = `.${className}:${pseudo}`;
    const cssText = style.cssText
        ? formatCSSText(style)
        : formatCSSProperties(style);
    return document.createTextNode(`${selector}{${cssText}}`);
}
function clonePseudoElement(nativeNode, clonedNode, pseudo) {
    const style = window.getComputedStyle(nativeNode, pseudo);
    const content = style.getPropertyValue('content');
    if (content === '' || content === 'none') {
        return;
    }
    const className = (0,_util__WEBPACK_IMPORTED_MODULE_0__.uuid)();
    try {
        clonedNode.className = `${clonedNode.className} ${className}`;
    }
    catch (err) {
        return;
    }
    const styleElement = document.createElement('style');
    styleElement.appendChild(getPseudoElementStyle(className, pseudo, style));
    clonedNode.appendChild(styleElement);
}
function clonePseudoElements(nativeNode, clonedNode) {
    clonePseudoElement(nativeNode, clonedNode, ':before');
    clonePseudoElement(nativeNode, clonedNode, ':after');
}
//# sourceMappingURL=clone-pseudos.js.map

/***/ }),

/***/ "../node_modules/html-to-image/es/dataurl.js":
/*!***************************************************!*\
  !*** ../node_modules/html-to-image/es/dataurl.js ***!
  \***************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   fetchAsDataURL: () => (/* binding */ fetchAsDataURL),
/* harmony export */   isDataUrl: () => (/* binding */ isDataUrl),
/* harmony export */   makeDataUrl: () => (/* binding */ makeDataUrl),
/* harmony export */   resourceToDataURL: () => (/* binding */ resourceToDataURL)
/* harmony export */ });
function getContentFromDataUrl(dataURL) {
    return dataURL.split(/,/)[1];
}
function isDataUrl(url) {
    return url.search(/^(data:)/) !== -1;
}
function makeDataUrl(content, mimeType) {
    return `data:${mimeType};base64,${content}`;
}
async function fetchAsDataURL(url, init, process) {
    const res = await fetch(url, init);
    if (res.status === 404) {
        throw new Error(`Resource "${res.url}" not found`);
    }
    const blob = await res.blob();
    return new Promise((resolve, reject) => {
        const reader = new FileReader();
        reader.onerror = reject;
        reader.onloadend = () => {
            try {
                resolve(process({ res, result: reader.result }));
            }
            catch (error) {
                reject(error);
            }
        };
        reader.readAsDataURL(blob);
    });
}
const cache = {};
function getCacheKey(url, contentType, includeQueryParams) {
    let key = url.replace(/\?.*/, '');
    if (includeQueryParams) {
        key = url;
    }
    // font resource
    if (/ttf|otf|eot|woff2?/i.test(key)) {
        key = key.replace(/.*\//, '');
    }
    return contentType ? `[${contentType}]${key}` : key;
}
async function resourceToDataURL(resourceUrl, contentType, options) {
    const cacheKey = getCacheKey(resourceUrl, contentType, options.includeQueryParams);
    if (cache[cacheKey] != null) {
        return cache[cacheKey];
    }
    // ref: https://developer.mozilla.org/en/docs/Web/API/XMLHttpRequest/Using_XMLHttpRequest#Bypassing_the_cache
    if (options.cacheBust) {
        // eslint-disable-next-line no-param-reassign
        resourceUrl += (/\?/.test(resourceUrl) ? '&' : '?') + new Date().getTime();
    }
    let dataURL;
    try {
        const content = await fetchAsDataURL(resourceUrl, options.fetchRequestInit, ({ res, result }) => {
            if (!contentType) {
                // eslint-disable-next-line no-param-reassign
                contentType = res.headers.get('Content-Type') || '';
            }
            return getContentFromDataUrl(result);
        });
        dataURL = makeDataUrl(content, contentType);
    }
    catch (error) {
        dataURL = options.imagePlaceholder || '';
        let msg = `Failed to fetch resource: ${resourceUrl}`;
        if (error) {
            msg = typeof error === 'string' ? error : error.message;
        }
        if (msg) {
            console.warn(msg);
        }
    }
    cache[cacheKey] = dataURL;
    return dataURL;
}
//# sourceMappingURL=dataurl.js.map

/***/ }),

/***/ "../node_modules/html-to-image/es/embed-images.js":
/*!********************************************************!*\
  !*** ../node_modules/html-to-image/es/embed-images.js ***!
  \********************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   embedImages: () => (/* binding */ embedImages)
/* harmony export */ });
/* harmony import */ var _embed_resources__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./embed-resources */ "../node_modules/html-to-image/es/embed-resources.js");
/* harmony import */ var _util__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./util */ "../node_modules/html-to-image/es/util.js");
/* harmony import */ var _dataurl__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./dataurl */ "../node_modules/html-to-image/es/dataurl.js");
/* harmony import */ var _mimes__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./mimes */ "../node_modules/html-to-image/es/mimes.js");




async function embedProp(propName, node, options) {
    var _a;
    const propValue = (_a = node.style) === null || _a === void 0 ? void 0 : _a.getPropertyValue(propName);
    if (propValue) {
        const cssString = await (0,_embed_resources__WEBPACK_IMPORTED_MODULE_0__.embedResources)(propValue, null, options);
        node.style.setProperty(propName, cssString, node.style.getPropertyPriority(propName));
        return true;
    }
    return false;
}
async function embedBackground(clonedNode, options) {
    if (!(await embedProp('background', clonedNode, options))) {
        await embedProp('background-image', clonedNode, options);
    }
    if (!(await embedProp('mask', clonedNode, options))) {
        await embedProp('mask-image', clonedNode, options);
    }
}
async function embedImageNode(clonedNode, options) {
    const isImageElement = (0,_util__WEBPACK_IMPORTED_MODULE_1__.isInstanceOfElement)(clonedNode, HTMLImageElement);
    if (!(isImageElement && !(0,_dataurl__WEBPACK_IMPORTED_MODULE_2__.isDataUrl)(clonedNode.src)) &&
        !((0,_util__WEBPACK_IMPORTED_MODULE_1__.isInstanceOfElement)(clonedNode, SVGImageElement) &&
            !(0,_dataurl__WEBPACK_IMPORTED_MODULE_2__.isDataUrl)(clonedNode.href.baseVal))) {
        return;
    }
    const url = isImageElement ? clonedNode.src : clonedNode.href.baseVal;
    const dataURL = await (0,_dataurl__WEBPACK_IMPORTED_MODULE_2__.resourceToDataURL)(url, (0,_mimes__WEBPACK_IMPORTED_MODULE_3__.getMimeType)(url), options);
    await new Promise((resolve, reject) => {
        clonedNode.onload = resolve;
        clonedNode.onerror = reject;
        const image = clonedNode;
        if (image.decode) {
            image.decode = resolve;
        }
        if (image.loading === 'lazy') {
            image.loading = 'eager';
        }
        if (isImageElement) {
            clonedNode.srcset = '';
            clonedNode.src = dataURL;
        }
        else {
            clonedNode.href.baseVal = dataURL;
        }
    });
}
async function embedChildren(clonedNode, options) {
    const children = (0,_util__WEBPACK_IMPORTED_MODULE_1__.toArray)(clonedNode.childNodes);
    const deferreds = children.map((child) => embedImages(child, options));
    await Promise.all(deferreds).then(() => clonedNode);
}
async function embedImages(clonedNode, options) {
    if ((0,_util__WEBPACK_IMPORTED_MODULE_1__.isInstanceOfElement)(clonedNode, Element)) {
        await embedBackground(clonedNode, options);
        await embedImageNode(clonedNode, options);
        await embedChildren(clonedNode, options);
    }
}
//# sourceMappingURL=embed-images.js.map

/***/ }),

/***/ "../node_modules/html-to-image/es/embed-resources.js":
/*!***********************************************************!*\
  !*** ../node_modules/html-to-image/es/embed-resources.js ***!
  \***********************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   embed: () => (/* binding */ embed),
/* harmony export */   embedResources: () => (/* binding */ embedResources),
/* harmony export */   parseURLs: () => (/* binding */ parseURLs),
/* harmony export */   shouldEmbed: () => (/* binding */ shouldEmbed)
/* harmony export */ });
/* harmony import */ var _util__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./util */ "../node_modules/html-to-image/es/util.js");
/* harmony import */ var _mimes__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./mimes */ "../node_modules/html-to-image/es/mimes.js");
/* harmony import */ var _dataurl__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./dataurl */ "../node_modules/html-to-image/es/dataurl.js");



const URL_REGEX = /url\((['"]?)([^'"]+?)\1\)/g;
const URL_WITH_FORMAT_REGEX = /url\([^)]+\)\s*format\((["']?)([^"']+)\1\)/g;
const FONT_SRC_REGEX = /src:\s*(?:url\([^)]+\)\s*format\([^)]+\)[,;]\s*)+/g;
function toRegex(url) {
    // eslint-disable-next-line no-useless-escape
    const escaped = url.replace(/([.*+?^${}()|\[\]\/\\])/g, '\\$1');
    return new RegExp(`(url\\(['"]?)(${escaped})(['"]?\\))`, 'g');
}
function parseURLs(cssText) {
    const urls = [];
    cssText.replace(URL_REGEX, (raw, quotation, url) => {
        urls.push(url);
        return raw;
    });
    return urls.filter((url) => !(0,_dataurl__WEBPACK_IMPORTED_MODULE_2__.isDataUrl)(url));
}
async function embed(cssText, resourceURL, baseURL, options, getContentFromUrl) {
    try {
        const resolvedURL = baseURL ? (0,_util__WEBPACK_IMPORTED_MODULE_0__.resolveUrl)(resourceURL, baseURL) : resourceURL;
        const contentType = (0,_mimes__WEBPACK_IMPORTED_MODULE_1__.getMimeType)(resourceURL);
        let dataURL;
        if (getContentFromUrl) {
            const content = await getContentFromUrl(resolvedURL);
            dataURL = (0,_dataurl__WEBPACK_IMPORTED_MODULE_2__.makeDataUrl)(content, contentType);
        }
        else {
            dataURL = await (0,_dataurl__WEBPACK_IMPORTED_MODULE_2__.resourceToDataURL)(resolvedURL, contentType, options);
        }
        return cssText.replace(toRegex(resourceURL), `$1${dataURL}$3`);
    }
    catch (error) {
        // pass
    }
    return cssText;
}
function filterPreferredFontFormat(str, { preferredFontFormat }) {
    return !preferredFontFormat
        ? str
        : str.replace(FONT_SRC_REGEX, (match) => {
            // eslint-disable-next-line no-constant-condition
            while (true) {
                const [src, , format] = URL_WITH_FORMAT_REGEX.exec(match) || [];
                if (!format) {
                    return '';
                }
                if (format === preferredFontFormat) {
                    return `src: ${src};`;
                }
            }
        });
}
function shouldEmbed(url) {
    return url.search(URL_REGEX) !== -1;
}
async function embedResources(cssText, baseUrl, options) {
    if (!shouldEmbed(cssText)) {
        return cssText;
    }
    const filteredCSSText = filterPreferredFontFormat(cssText, options);
    const urls = parseURLs(filteredCSSText);
    return urls.reduce((deferred, url) => deferred.then((css) => embed(css, url, baseUrl, options)), Promise.resolve(filteredCSSText));
}
//# sourceMappingURL=embed-resources.js.map

/***/ }),

/***/ "../node_modules/html-to-image/es/embed-webfonts.js":
/*!**********************************************************!*\
  !*** ../node_modules/html-to-image/es/embed-webfonts.js ***!
  \**********************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   embedWebFonts: () => (/* binding */ embedWebFonts),
/* harmony export */   getWebFontCSS: () => (/* binding */ getWebFontCSS)
/* harmony export */ });
/* harmony import */ var _util__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./util */ "../node_modules/html-to-image/es/util.js");
/* harmony import */ var _dataurl__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./dataurl */ "../node_modules/html-to-image/es/dataurl.js");
/* harmony import */ var _embed_resources__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./embed-resources */ "../node_modules/html-to-image/es/embed-resources.js");



const cssFetchCache = {};
async function fetchCSS(url) {
    let cache = cssFetchCache[url];
    if (cache != null) {
        return cache;
    }
    const res = await fetch(url);
    const cssText = await res.text();
    cache = { url, cssText };
    cssFetchCache[url] = cache;
    return cache;
}
async function embedFonts(data, options) {
    let cssText = data.cssText;
    const regexUrl = /url\(["']?([^"')]+)["']?\)/g;
    const fontLocs = cssText.match(/url\([^)]+\)/g) || [];
    const loadFonts = fontLocs.map(async (loc) => {
        let url = loc.replace(regexUrl, '$1');
        if (!url.startsWith('https://')) {
            url = new URL(url, data.url).href;
        }
        return (0,_dataurl__WEBPACK_IMPORTED_MODULE_1__.fetchAsDataURL)(url, options.fetchRequestInit, ({ result }) => {
            cssText = cssText.replace(loc, `url(${result})`);
            return [loc, result];
        });
    });
    return Promise.all(loadFonts).then(() => cssText);
}
function parseCSS(source) {
    if (source == null) {
        return [];
    }
    const result = [];
    const commentsRegex = /(\/\*[\s\S]*?\*\/)/gi;
    // strip out comments
    let cssText = source.replace(commentsRegex, '');
    // eslint-disable-next-line prefer-regex-literals
    const keyframesRegex = new RegExp('((@.*?keyframes [\\s\\S]*?){([\\s\\S]*?}\\s*?)})', 'gi');
    // eslint-disable-next-line no-constant-condition
    while (true) {
        const matches = keyframesRegex.exec(cssText);
        if (matches === null) {
            break;
        }
        result.push(matches[0]);
    }
    cssText = cssText.replace(keyframesRegex, '');
    const importRegex = /@import[\s\S]*?url\([^)]*\)[\s\S]*?;/gi;
    // to match css & media queries together
    const combinedCSSRegex = '((\\s*?(?:\\/\\*[\\s\\S]*?\\*\\/)?\\s*?@media[\\s\\S]' +
        '*?){([\\s\\S]*?)}\\s*?})|(([\\s\\S]*?){([\\s\\S]*?)})';
    // unified regex
    const unifiedRegex = new RegExp(combinedCSSRegex, 'gi');
    // eslint-disable-next-line no-constant-condition
    while (true) {
        let matches = importRegex.exec(cssText);
        if (matches === null) {
            matches = unifiedRegex.exec(cssText);
            if (matches === null) {
                break;
            }
            else {
                importRegex.lastIndex = unifiedRegex.lastIndex;
            }
        }
        else {
            unifiedRegex.lastIndex = importRegex.lastIndex;
        }
        result.push(matches[0]);
    }
    return result;
}
async function getCSSRules(styleSheets, options) {
    const ret = [];
    const deferreds = [];
    // First loop inlines imports
    styleSheets.forEach((sheet) => {
        if ('cssRules' in sheet) {
            try {
                (0,_util__WEBPACK_IMPORTED_MODULE_0__.toArray)(sheet.cssRules || []).forEach((item, index) => {
                    if (item.type === CSSRule.IMPORT_RULE) {
                        let importIndex = index + 1;
                        const url = item.href;
                        const deferred = fetchCSS(url)
                            .then((metadata) => embedFonts(metadata, options))
                            .then((cssText) => parseCSS(cssText).forEach((rule) => {
                            try {
                                sheet.insertRule(rule, rule.startsWith('@import')
                                    ? (importIndex += 1)
                                    : sheet.cssRules.length);
                            }
                            catch (error) {
                                console.error('Error inserting rule from remote css', {
                                    rule,
                                    error,
                                });
                            }
                        }))
                            .catch((e) => {
                            console.error('Error loading remote css', e.toString());
                        });
                        deferreds.push(deferred);
                    }
                });
            }
            catch (e) {
                const inline = styleSheets.find((a) => a.href == null) || document.styleSheets[0];
                if (sheet.href != null) {
                    deferreds.push(fetchCSS(sheet.href)
                        .then((metadata) => embedFonts(metadata, options))
                        .then((cssText) => parseCSS(cssText).forEach((rule) => {
                        inline.insertRule(rule, sheet.cssRules.length);
                    }))
                        .catch((err) => {
                        console.error('Error loading remote stylesheet', err);
                    }));
                }
                console.error('Error inlining remote css file', e);
            }
        }
    });
    return Promise.all(deferreds).then(() => {
        // Second loop parses rules
        styleSheets.forEach((sheet) => {
            if ('cssRules' in sheet) {
                try {
                    (0,_util__WEBPACK_IMPORTED_MODULE_0__.toArray)(sheet.cssRules || []).forEach((item) => {
                        ret.push(item);
                    });
                }
                catch (e) {
                    console.error(`Error while reading CSS rules from ${sheet.href}`, e);
                }
            }
        });
        return ret;
    });
}
function getWebFontRules(cssRules) {
    return cssRules
        .filter((rule) => rule.type === CSSRule.FONT_FACE_RULE)
        .filter((rule) => (0,_embed_resources__WEBPACK_IMPORTED_MODULE_2__.shouldEmbed)(rule.style.getPropertyValue('src')));
}
async function parseWebFontRules(node, options) {
    if (node.ownerDocument == null) {
        throw new Error('Provided element is not within a Document');
    }
    const styleSheets = (0,_util__WEBPACK_IMPORTED_MODULE_0__.toArray)(node.ownerDocument.styleSheets);
    const cssRules = await getCSSRules(styleSheets, options);
    return getWebFontRules(cssRules);
}
async function getWebFontCSS(node, options) {
    const rules = await parseWebFontRules(node, options);
    const cssTexts = await Promise.all(rules.map((rule) => {
        const baseUrl = rule.parentStyleSheet ? rule.parentStyleSheet.href : null;
        return (0,_embed_resources__WEBPACK_IMPORTED_MODULE_2__.embedResources)(rule.cssText, baseUrl, options);
    }));
    return cssTexts.join('\n');
}
async function embedWebFonts(clonedNode, options) {
    const cssText = options.fontEmbedCSS != null
        ? options.fontEmbedCSS
        : options.skipFonts
            ? null
            : await getWebFontCSS(clonedNode, options);
    if (cssText) {
        const styleNode = document.createElement('style');
        const sytleContent = document.createTextNode(cssText);
        styleNode.appendChild(sytleContent);
        if (clonedNode.firstChild) {
            clonedNode.insertBefore(styleNode, clonedNode.firstChild);
        }
        else {
            clonedNode.appendChild(styleNode);
        }
    }
}
//# sourceMappingURL=embed-webfonts.js.map

/***/ }),

/***/ "../node_modules/html-to-image/es/index.js":
/*!*************************************************!*\
  !*** ../node_modules/html-to-image/es/index.js ***!
  \*************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   getFontEmbedCSS: () => (/* binding */ getFontEmbedCSS),
/* harmony export */   toBlob: () => (/* binding */ toBlob),
/* harmony export */   toCanvas: () => (/* binding */ toCanvas),
/* harmony export */   toJpeg: () => (/* binding */ toJpeg),
/* harmony export */   toPixelData: () => (/* binding */ toPixelData),
/* harmony export */   toPng: () => (/* binding */ toPng),
/* harmony export */   toSvg: () => (/* binding */ toSvg)
/* harmony export */ });
/* harmony import */ var _clone_node__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./clone-node */ "../node_modules/html-to-image/es/clone-node.js");
/* harmony import */ var _embed_images__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./embed-images */ "../node_modules/html-to-image/es/embed-images.js");
/* harmony import */ var _apply_style__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./apply-style */ "../node_modules/html-to-image/es/apply-style.js");
/* harmony import */ var _embed_webfonts__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./embed-webfonts */ "../node_modules/html-to-image/es/embed-webfonts.js");
/* harmony import */ var _util__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./util */ "../node_modules/html-to-image/es/util.js");





async function toSvg(node, options = {}) {
    const { width, height } = (0,_util__WEBPACK_IMPORTED_MODULE_4__.getImageSize)(node, options);
    const clonedNode = (await (0,_clone_node__WEBPACK_IMPORTED_MODULE_0__.cloneNode)(node, options, true));
    await (0,_embed_webfonts__WEBPACK_IMPORTED_MODULE_3__.embedWebFonts)(clonedNode, options);
    await (0,_embed_images__WEBPACK_IMPORTED_MODULE_1__.embedImages)(clonedNode, options);
    (0,_apply_style__WEBPACK_IMPORTED_MODULE_2__.applyStyle)(clonedNode, options);
    const datauri = await (0,_util__WEBPACK_IMPORTED_MODULE_4__.nodeToDataURL)(clonedNode, width, height);
    return datauri;
}
async function toCanvas(node, options = {}) {
    const { width, height } = (0,_util__WEBPACK_IMPORTED_MODULE_4__.getImageSize)(node, options);
    const svg = await toSvg(node, options);
    const img = await (0,_util__WEBPACK_IMPORTED_MODULE_4__.createImage)(svg);
    const canvas = document.createElement('canvas');
    const context = canvas.getContext('2d');
    const ratio = options.pixelRatio || (0,_util__WEBPACK_IMPORTED_MODULE_4__.getPixelRatio)();
    const canvasWidth = options.canvasWidth || width;
    const canvasHeight = options.canvasHeight || height;
    canvas.width = canvasWidth * ratio;
    canvas.height = canvasHeight * ratio;
    if (!options.skipAutoScale) {
        (0,_util__WEBPACK_IMPORTED_MODULE_4__.checkCanvasDimensions)(canvas);
    }
    canvas.style.width = `${canvasWidth}`;
    canvas.style.height = `${canvasHeight}`;
    if (options.backgroundColor) {
        context.fillStyle = options.backgroundColor;
        context.fillRect(0, 0, canvas.width, canvas.height);
    }
    context.drawImage(img, 0, 0, canvas.width, canvas.height);
    return canvas;
}
async function toPixelData(node, options = {}) {
    const { width, height } = (0,_util__WEBPACK_IMPORTED_MODULE_4__.getImageSize)(node, options);
    const canvas = await toCanvas(node, options);
    const ctx = canvas.getContext('2d');
    return ctx.getImageData(0, 0, width, height).data;
}
async function toPng(node, options = {}) {
    const canvas = await toCanvas(node, options);
    return canvas.toDataURL();
}
async function toJpeg(node, options = {}) {
    const canvas = await toCanvas(node, options);
    return canvas.toDataURL('image/jpeg', options.quality || 1);
}
async function toBlob(node, options = {}) {
    const canvas = await toCanvas(node, options);
    const blob = await (0,_util__WEBPACK_IMPORTED_MODULE_4__.canvasToBlob)(canvas);
    return blob;
}
async function getFontEmbedCSS(node, options = {}) {
    return (0,_embed_webfonts__WEBPACK_IMPORTED_MODULE_3__.getWebFontCSS)(node, options);
}
//# sourceMappingURL=index.js.map

/***/ }),

/***/ "../node_modules/html-to-image/es/mimes.js":
/*!*************************************************!*\
  !*** ../node_modules/html-to-image/es/mimes.js ***!
  \*************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   getMimeType: () => (/* binding */ getMimeType)
/* harmony export */ });
const WOFF = 'application/font-woff';
const JPEG = 'image/jpeg';
const mimes = {
    woff: WOFF,
    woff2: WOFF,
    ttf: 'application/font-truetype',
    eot: 'application/vnd.ms-fontobject',
    png: 'image/png',
    jpg: JPEG,
    jpeg: JPEG,
    gif: 'image/gif',
    tiff: 'image/tiff',
    svg: 'image/svg+xml',
    webp: 'image/webp',
};
function getExtension(url) {
    const match = /\.([^./]*?)$/g.exec(url);
    return match ? match[1] : '';
}
function getMimeType(url) {
    const extension = getExtension(url).toLowerCase();
    return mimes[extension] || '';
}
//# sourceMappingURL=mimes.js.map

/***/ }),

/***/ "../node_modules/html-to-image/es/util.js":
/*!************************************************!*\
  !*** ../node_modules/html-to-image/es/util.js ***!
  \************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   canvasToBlob: () => (/* binding */ canvasToBlob),
/* harmony export */   checkCanvasDimensions: () => (/* binding */ checkCanvasDimensions),
/* harmony export */   createImage: () => (/* binding */ createImage),
/* harmony export */   delay: () => (/* binding */ delay),
/* harmony export */   getImageSize: () => (/* binding */ getImageSize),
/* harmony export */   getPixelRatio: () => (/* binding */ getPixelRatio),
/* harmony export */   isInstanceOfElement: () => (/* binding */ isInstanceOfElement),
/* harmony export */   nodeToDataURL: () => (/* binding */ nodeToDataURL),
/* harmony export */   resolveUrl: () => (/* binding */ resolveUrl),
/* harmony export */   svgToDataURL: () => (/* binding */ svgToDataURL),
/* harmony export */   toArray: () => (/* binding */ toArray),
/* harmony export */   uuid: () => (/* binding */ uuid)
/* harmony export */ });
function resolveUrl(url, baseUrl) {
    // url is absolute already
    if (url.match(/^[a-z]+:\/\//i)) {
        return url;
    }
    // url is absolute already, without protocol
    if (url.match(/^\/\//)) {
        return window.location.protocol + url;
    }
    // dataURI, mailto:, tel:, etc.
    if (url.match(/^[a-z]+:/i)) {
        return url;
    }
    const doc = document.implementation.createHTMLDocument();
    const base = doc.createElement('base');
    const a = doc.createElement('a');
    doc.head.appendChild(base);
    doc.body.appendChild(a);
    if (baseUrl) {
        base.href = baseUrl;
    }
    a.href = url;
    return a.href;
}
const uuid = (() => {
    // generate uuid for className of pseudo elements.
    // We should not use GUIDs, otherwise pseudo elements sometimes cannot be captured.
    let counter = 0;
    // ref: http://stackoverflow.com/a/6248722/2519373
    const random = () => 
    // eslint-disable-next-line no-bitwise
    `0000${((Math.random() * 36 ** 4) << 0).toString(36)}`.slice(-4);
    return () => {
        counter += 1;
        return `u${random()}${counter}`;
    };
})();
function delay(ms) {
    return (args) => new Promise((resolve) => {
        setTimeout(() => resolve(args), ms);
    });
}
function toArray(arrayLike) {
    const arr = [];
    for (let i = 0, l = arrayLike.length; i < l; i++) {
        arr.push(arrayLike[i]);
    }
    return arr;
}
function px(node, styleProperty) {
    const win = node.ownerDocument.defaultView || window;
    const val = win.getComputedStyle(node).getPropertyValue(styleProperty);
    return val ? parseFloat(val.replace('px', '')) : 0;
}
function getNodeWidth(node) {
    const leftBorder = px(node, 'border-left-width');
    const rightBorder = px(node, 'border-right-width');
    return node.clientWidth + leftBorder + rightBorder;
}
function getNodeHeight(node) {
    const topBorder = px(node, 'border-top-width');
    const bottomBorder = px(node, 'border-bottom-width');
    return node.clientHeight + topBorder + bottomBorder;
}
function getImageSize(targetNode, options = {}) {
    const width = options.width || getNodeWidth(targetNode);
    const height = options.height || getNodeHeight(targetNode);
    return { width, height };
}
function getPixelRatio() {
    let ratio;
    let FINAL_PROCESS;
    try {
        FINAL_PROCESS = process;
    }
    catch (e) {
        // pass
    }
    const val = FINAL_PROCESS && FINAL_PROCESS.env
        ? FINAL_PROCESS.env.devicePixelRatio
        : null;
    if (val) {
        ratio = parseInt(val, 10);
        if (Number.isNaN(ratio)) {
            ratio = 1;
        }
    }
    return ratio || window.devicePixelRatio || 1;
}
// @see https://developer.mozilla.org/en-US/docs/Web/HTML/Element/canvas#maximum_canvas_size
const canvasDimensionLimit = 16384;
function checkCanvasDimensions(canvas) {
    if (canvas.width > canvasDimensionLimit ||
        canvas.height > canvasDimensionLimit) {
        if (canvas.width > canvasDimensionLimit &&
            canvas.height > canvasDimensionLimit) {
            if (canvas.width > canvas.height) {
                canvas.height *= canvasDimensionLimit / canvas.width;
                canvas.width = canvasDimensionLimit;
            }
            else {
                canvas.width *= canvasDimensionLimit / canvas.height;
                canvas.height = canvasDimensionLimit;
            }
        }
        else if (canvas.width > canvasDimensionLimit) {
            canvas.height *= canvasDimensionLimit / canvas.width;
            canvas.width = canvasDimensionLimit;
        }
        else {
            canvas.width *= canvasDimensionLimit / canvas.height;
            canvas.height = canvasDimensionLimit;
        }
    }
}
function canvasToBlob(canvas, options = {}) {
    if (canvas.toBlob) {
        return new Promise((resolve) => {
            canvas.toBlob(resolve, options.type ? options.type : 'image/png', options.quality ? options.quality : 1);
        });
    }
    return new Promise((resolve) => {
        const binaryString = window.atob(canvas
            .toDataURL(options.type ? options.type : undefined, options.quality ? options.quality : undefined)
            .split(',')[1]);
        const len = binaryString.length;
        const binaryArray = new Uint8Array(len);
        for (let i = 0; i < len; i += 1) {
            binaryArray[i] = binaryString.charCodeAt(i);
        }
        resolve(new Blob([binaryArray], {
            type: options.type ? options.type : 'image/png',
        }));
    });
}
function createImage(url) {
    return new Promise((resolve, reject) => {
        const img = new Image();
        img.decode = () => resolve(img);
        img.onload = () => resolve(img);
        img.onerror = reject;
        img.crossOrigin = 'anonymous';
        img.decoding = 'async';
        img.src = url;
    });
}
async function svgToDataURL(svg) {
    return Promise.resolve()
        .then(() => new XMLSerializer().serializeToString(svg))
        .then(encodeURIComponent)
        .then((html) => `data:image/svg+xml;charset=utf-8,${html}`);
}
async function nodeToDataURL(node, width, height) {
    const xmlns = 'http://www.w3.org/2000/svg';
    const svg = document.createElementNS(xmlns, 'svg');
    const foreignObject = document.createElementNS(xmlns, 'foreignObject');
    svg.setAttribute('width', `${width}`);
    svg.setAttribute('height', `${height}`);
    svg.setAttribute('viewBox', `0 0 ${width} ${height}`);
    foreignObject.setAttribute('width', '100%');
    foreignObject.setAttribute('height', '100%');
    foreignObject.setAttribute('x', '0');
    foreignObject.setAttribute('y', '0');
    foreignObject.setAttribute('externalResourcesRequired', 'true');
    svg.appendChild(foreignObject);
    foreignObject.appendChild(node);
    return svgToDataURL(svg);
}
const isInstanceOfElement = (node, instance) => {
    if (node instanceof instance)
        return true;
    const nodePrototype = Object.getPrototypeOf(node);
    if (nodePrototype === null)
        return false;
    return (nodePrototype.constructor.name === instance.name ||
        isInstanceOfElement(nodePrototype, instance));
};
//# sourceMappingURL=util.js.map

/***/ }),

/***/ "../node_modules/sortablejs/modular/sortable.esm.js":
/*!**********************************************************!*\
  !*** ../node_modules/sortablejs/modular/sortable.esm.js ***!
  \**********************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   MultiDrag: () => (/* binding */ MultiDragPlugin),
/* harmony export */   Sortable: () => (/* binding */ Sortable),
/* harmony export */   Swap: () => (/* binding */ SwapPlugin),
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/**!
 * Sortable 1.15.0
 * @author	RubaXa   <trash@rubaxa.org>
 * @author	owenm    <owen23355@gmail.com>
 * @license MIT
 */
function ownKeys(object, enumerableOnly) {
  var keys = Object.keys(object);

  if (Object.getOwnPropertySymbols) {
    var symbols = Object.getOwnPropertySymbols(object);

    if (enumerableOnly) {
      symbols = symbols.filter(function (sym) {
        return Object.getOwnPropertyDescriptor(object, sym).enumerable;
      });
    }

    keys.push.apply(keys, symbols);
  }

  return keys;
}

function _objectSpread2(target) {
  for (var i = 1; i < arguments.length; i++) {
    var source = arguments[i] != null ? arguments[i] : {};

    if (i % 2) {
      ownKeys(Object(source), true).forEach(function (key) {
        _defineProperty(target, key, source[key]);
      });
    } else if (Object.getOwnPropertyDescriptors) {
      Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));
    } else {
      ownKeys(Object(source)).forEach(function (key) {
        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
      });
    }
  }

  return target;
}

function _typeof(obj) {
  "@babel/helpers - typeof";

  if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") {
    _typeof = function (obj) {
      return typeof obj;
    };
  } else {
    _typeof = function (obj) {
      return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;
    };
  }

  return _typeof(obj);
}

function _defineProperty(obj, key, value) {
  if (key in obj) {
    Object.defineProperty(obj, key, {
      value: value,
      enumerable: true,
      configurable: true,
      writable: true
    });
  } else {
    obj[key] = value;
  }

  return obj;
}

function _extends() {
  _extends = Object.assign || function (target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];

      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }

    return target;
  };

  return _extends.apply(this, arguments);
}

function _objectWithoutPropertiesLoose(source, excluded) {
  if (source == null) return {};
  var target = {};
  var sourceKeys = Object.keys(source);
  var key, i;

  for (i = 0; i < sourceKeys.length; i++) {
    key = sourceKeys[i];
    if (excluded.indexOf(key) >= 0) continue;
    target[key] = source[key];
  }

  return target;
}

function _objectWithoutProperties(source, excluded) {
  if (source == null) return {};

  var target = _objectWithoutPropertiesLoose(source, excluded);

  var key, i;

  if (Object.getOwnPropertySymbols) {
    var sourceSymbolKeys = Object.getOwnPropertySymbols(source);

    for (i = 0; i < sourceSymbolKeys.length; i++) {
      key = sourceSymbolKeys[i];
      if (excluded.indexOf(key) >= 0) continue;
      if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;
      target[key] = source[key];
    }
  }

  return target;
}

function _toConsumableArray(arr) {
  return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread();
}

function _arrayWithoutHoles(arr) {
  if (Array.isArray(arr)) return _arrayLikeToArray(arr);
}

function _iterableToArray(iter) {
  if (typeof Symbol !== "undefined" && iter[Symbol.iterator] != null || iter["@@iterator"] != null) return Array.from(iter);
}

function _unsupportedIterableToArray(o, minLen) {
  if (!o) return;
  if (typeof o === "string") return _arrayLikeToArray(o, minLen);
  var n = Object.prototype.toString.call(o).slice(8, -1);
  if (n === "Object" && o.constructor) n = o.constructor.name;
  if (n === "Map" || n === "Set") return Array.from(o);
  if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen);
}

function _arrayLikeToArray(arr, len) {
  if (len == null || len > arr.length) len = arr.length;

  for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i];

  return arr2;
}

function _nonIterableSpread() {
  throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
}

var version = "1.15.0";

function userAgent(pattern) {
  if (typeof window !== 'undefined' && window.navigator) {
    return !! /*@__PURE__*/navigator.userAgent.match(pattern);
  }
}

var IE11OrLess = userAgent(/(?:Trident.*rv[ :]?11\.|msie|iemobile|Windows Phone)/i);
var Edge = userAgent(/Edge/i);
var FireFox = userAgent(/firefox/i);
var Safari = userAgent(/safari/i) && !userAgent(/chrome/i) && !userAgent(/android/i);
var IOS = userAgent(/iP(ad|od|hone)/i);
var ChromeForAndroid = userAgent(/chrome/i) && userAgent(/android/i);

var captureMode = {
  capture: false,
  passive: false
};

function on(el, event, fn) {
  el.addEventListener(event, fn, !IE11OrLess && captureMode);
}

function off(el, event, fn) {
  el.removeEventListener(event, fn, !IE11OrLess && captureMode);
}

function matches(
/**HTMLElement*/
el,
/**String*/
selector) {
  if (!selector) return;
  selector[0] === '>' && (selector = selector.substring(1));

  if (el) {
    try {
      if (el.matches) {
        return el.matches(selector);
      } else if (el.msMatchesSelector) {
        return el.msMatchesSelector(selector);
      } else if (el.webkitMatchesSelector) {
        return el.webkitMatchesSelector(selector);
      }
    } catch (_) {
      return false;
    }
  }

  return false;
}

function getParentOrHost(el) {
  return el.host && el !== document && el.host.nodeType ? el.host : el.parentNode;
}

function closest(
/**HTMLElement*/
el,
/**String*/
selector,
/**HTMLElement*/
ctx, includeCTX) {
  if (el) {
    ctx = ctx || document;

    do {
      if (selector != null && (selector[0] === '>' ? el.parentNode === ctx && matches(el, selector) : matches(el, selector)) || includeCTX && el === ctx) {
        return el;
      }

      if (el === ctx) break;
      /* jshint boss:true */
    } while (el = getParentOrHost(el));
  }

  return null;
}

var R_SPACE = /\s+/g;

function toggleClass(el, name, state) {
  if (el && name) {
    if (el.classList) {
      el.classList[state ? 'add' : 'remove'](name);
    } else {
      var className = (' ' + el.className + ' ').replace(R_SPACE, ' ').replace(' ' + name + ' ', ' ');
      el.className = (className + (state ? ' ' + name : '')).replace(R_SPACE, ' ');
    }
  }
}

function css(el, prop, val) {
  var style = el && el.style;

  if (style) {
    if (val === void 0) {
      if (document.defaultView && document.defaultView.getComputedStyle) {
        val = document.defaultView.getComputedStyle(el, '');
      } else if (el.currentStyle) {
        val = el.currentStyle;
      }

      return prop === void 0 ? val : val[prop];
    } else {
      if (!(prop in style) && prop.indexOf('webkit') === -1) {
        prop = '-webkit-' + prop;
      }

      style[prop] = val + (typeof val === 'string' ? '' : 'px');
    }
  }
}

function matrix(el, selfOnly) {
  var appliedTransforms = '';

  if (typeof el === 'string') {
    appliedTransforms = el;
  } else {
    do {
      var transform = css(el, 'transform');

      if (transform && transform !== 'none') {
        appliedTransforms = transform + ' ' + appliedTransforms;
      }
      /* jshint boss:true */

    } while (!selfOnly && (el = el.parentNode));
  }

  var matrixFn = window.DOMMatrix || window.WebKitCSSMatrix || window.CSSMatrix || window.MSCSSMatrix;
  /*jshint -W056 */

  return matrixFn && new matrixFn(appliedTransforms);
}

function find(ctx, tagName, iterator) {
  if (ctx) {
    var list = ctx.getElementsByTagName(tagName),
        i = 0,
        n = list.length;

    if (iterator) {
      for (; i < n; i++) {
        iterator(list[i], i);
      }
    }

    return list;
  }

  return [];
}

function getWindowScrollingElement() {
  var scrollingElement = document.scrollingElement;

  if (scrollingElement) {
    return scrollingElement;
  } else {
    return document.documentElement;
  }
}
/**
 * Returns the "bounding client rect" of given element
 * @param  {HTMLElement} el                       The element whose boundingClientRect is wanted
 * @param  {[Boolean]} relativeToContainingBlock  Whether the rect should be relative to the containing block of (including) the container
 * @param  {[Boolean]} relativeToNonStaticParent  Whether the rect should be relative to the relative parent of (including) the contaienr
 * @param  {[Boolean]} undoScale                  Whether the container's scale() should be undone
 * @param  {[HTMLElement]} container              The parent the element will be placed in
 * @return {Object}                               The boundingClientRect of el, with specified adjustments
 */


function getRect(el, relativeToContainingBlock, relativeToNonStaticParent, undoScale, container) {
  if (!el.getBoundingClientRect && el !== window) return;
  var elRect, top, left, bottom, right, height, width;

  if (el !== window && el.parentNode && el !== getWindowScrollingElement()) {
    elRect = el.getBoundingClientRect();
    top = elRect.top;
    left = elRect.left;
    bottom = elRect.bottom;
    right = elRect.right;
    height = elRect.height;
    width = elRect.width;
  } else {
    top = 0;
    left = 0;
    bottom = window.innerHeight;
    right = window.innerWidth;
    height = window.innerHeight;
    width = window.innerWidth;
  }

  if ((relativeToContainingBlock || relativeToNonStaticParent) && el !== window) {
    // Adjust for translate()
    container = container || el.parentNode; // solves #1123 (see: https://stackoverflow.com/a/37953806/6088312)
    // Not needed on <= IE11

    if (!IE11OrLess) {
      do {
        if (container && container.getBoundingClientRect && (css(container, 'transform') !== 'none' || relativeToNonStaticParent && css(container, 'position') !== 'static')) {
          var containerRect = container.getBoundingClientRect(); // Set relative to edges of padding box of container

          top -= containerRect.top + parseInt(css(container, 'border-top-width'));
          left -= containerRect.left + parseInt(css(container, 'border-left-width'));
          bottom = top + elRect.height;
          right = left + elRect.width;
          break;
        }
        /* jshint boss:true */

      } while (container = container.parentNode);
    }
  }

  if (undoScale && el !== window) {
    // Adjust for scale()
    var elMatrix = matrix(container || el),
        scaleX = elMatrix && elMatrix.a,
        scaleY = elMatrix && elMatrix.d;

    if (elMatrix) {
      top /= scaleY;
      left /= scaleX;
      width /= scaleX;
      height /= scaleY;
      bottom = top + height;
      right = left + width;
    }
  }

  return {
    top: top,
    left: left,
    bottom: bottom,
    right: right,
    width: width,
    height: height
  };
}
/**
 * Checks if a side of an element is scrolled past a side of its parents
 * @param  {HTMLElement}  el           The element who's side being scrolled out of view is in question
 * @param  {String}       elSide       Side of the element in question ('top', 'left', 'right', 'bottom')
 * @param  {String}       parentSide   Side of the parent in question ('top', 'left', 'right', 'bottom')
 * @return {HTMLElement}               The parent scroll element that the el's side is scrolled past, or null if there is no such element
 */


function isScrolledPast(el, elSide, parentSide) {
  var parent = getParentAutoScrollElement(el, true),
      elSideVal = getRect(el)[elSide];
  /* jshint boss:true */

  while (parent) {
    var parentSideVal = getRect(parent)[parentSide],
        visible = void 0;

    if (parentSide === 'top' || parentSide === 'left') {
      visible = elSideVal >= parentSideVal;
    } else {
      visible = elSideVal <= parentSideVal;
    }

    if (!visible) return parent;
    if (parent === getWindowScrollingElement()) break;
    parent = getParentAutoScrollElement(parent, false);
  }

  return false;
}
/**
 * Gets nth child of el, ignoring hidden children, sortable's elements (does not ignore clone if it's visible)
 * and non-draggable elements
 * @param  {HTMLElement} el       The parent element
 * @param  {Number} childNum      The index of the child
 * @param  {Object} options       Parent Sortable's options
 * @return {HTMLElement}          The child at index childNum, or null if not found
 */


function getChild(el, childNum, options, includeDragEl) {
  var currentChild = 0,
      i = 0,
      children = el.children;

  while (i < children.length) {
    if (children[i].style.display !== 'none' && children[i] !== Sortable.ghost && (includeDragEl || children[i] !== Sortable.dragged) && closest(children[i], options.draggable, el, false)) {
      if (currentChild === childNum) {
        return children[i];
      }

      currentChild++;
    }

    i++;
  }

  return null;
}
/**
 * Gets the last child in the el, ignoring ghostEl or invisible elements (clones)
 * @param  {HTMLElement} el       Parent element
 * @param  {selector} selector    Any other elements that should be ignored
 * @return {HTMLElement}          The last child, ignoring ghostEl
 */


function lastChild(el, selector) {
  var last = el.lastElementChild;

  while (last && (last === Sortable.ghost || css(last, 'display') === 'none' || selector && !matches(last, selector))) {
    last = last.previousElementSibling;
  }

  return last || null;
}
/**
 * Returns the index of an element within its parent for a selected set of
 * elements
 * @param  {HTMLElement} el
 * @param  {selector} selector
 * @return {number}
 */


function index(el, selector) {
  var index = 0;

  if (!el || !el.parentNode) {
    return -1;
  }
  /* jshint boss:true */


  while (el = el.previousElementSibling) {
    if (el.nodeName.toUpperCase() !== 'TEMPLATE' && el !== Sortable.clone && (!selector || matches(el, selector))) {
      index++;
    }
  }

  return index;
}
/**
 * Returns the scroll offset of the given element, added with all the scroll offsets of parent elements.
 * The value is returned in real pixels.
 * @param  {HTMLElement} el
 * @return {Array}             Offsets in the format of [left, top]
 */


function getRelativeScrollOffset(el) {
  var offsetLeft = 0,
      offsetTop = 0,
      winScroller = getWindowScrollingElement();

  if (el) {
    do {
      var elMatrix = matrix(el),
          scaleX = elMatrix.a,
          scaleY = elMatrix.d;
      offsetLeft += el.scrollLeft * scaleX;
      offsetTop += el.scrollTop * scaleY;
    } while (el !== winScroller && (el = el.parentNode));
  }

  return [offsetLeft, offsetTop];
}
/**
 * Returns the index of the object within the given array
 * @param  {Array} arr   Array that may or may not hold the object
 * @param  {Object} obj  An object that has a key-value pair unique to and identical to a key-value pair in the object you want to find
 * @return {Number}      The index of the object in the array, or -1
 */


function indexOfObject(arr, obj) {
  for (var i in arr) {
    if (!arr.hasOwnProperty(i)) continue;

    for (var key in obj) {
      if (obj.hasOwnProperty(key) && obj[key] === arr[i][key]) return Number(i);
    }
  }

  return -1;
}

function getParentAutoScrollElement(el, includeSelf) {
  // skip to window
  if (!el || !el.getBoundingClientRect) return getWindowScrollingElement();
  var elem = el;
  var gotSelf = false;

  do {
    // we don't need to get elem css if it isn't even overflowing in the first place (performance)
    if (elem.clientWidth < elem.scrollWidth || elem.clientHeight < elem.scrollHeight) {
      var elemCSS = css(elem);

      if (elem.clientWidth < elem.scrollWidth && (elemCSS.overflowX == 'auto' || elemCSS.overflowX == 'scroll') || elem.clientHeight < elem.scrollHeight && (elemCSS.overflowY == 'auto' || elemCSS.overflowY == 'scroll')) {
        if (!elem.getBoundingClientRect || elem === document.body) return getWindowScrollingElement();
        if (gotSelf || includeSelf) return elem;
        gotSelf = true;
      }
    }
    /* jshint boss:true */

  } while (elem = elem.parentNode);

  return getWindowScrollingElement();
}

function extend(dst, src) {
  if (dst && src) {
    for (var key in src) {
      if (src.hasOwnProperty(key)) {
        dst[key] = src[key];
      }
    }
  }

  return dst;
}

function isRectEqual(rect1, rect2) {
  return Math.round(rect1.top) === Math.round(rect2.top) && Math.round(rect1.left) === Math.round(rect2.left) && Math.round(rect1.height) === Math.round(rect2.height) && Math.round(rect1.width) === Math.round(rect2.width);
}

var _throttleTimeout;

function throttle(callback, ms) {
  return function () {
    if (!_throttleTimeout) {
      var args = arguments,
          _this = this;

      if (args.length === 1) {
        callback.call(_this, args[0]);
      } else {
        callback.apply(_this, args);
      }

      _throttleTimeout = setTimeout(function () {
        _throttleTimeout = void 0;
      }, ms);
    }
  };
}

function cancelThrottle() {
  clearTimeout(_throttleTimeout);
  _throttleTimeout = void 0;
}

function scrollBy(el, x, y) {
  el.scrollLeft += x;
  el.scrollTop += y;
}

function clone(el) {
  var Polymer = window.Polymer;
  var $ = window.jQuery || window.Zepto;

  if (Polymer && Polymer.dom) {
    return Polymer.dom(el).cloneNode(true);
  } else if ($) {
    return $(el).clone(true)[0];
  } else {
    return el.cloneNode(true);
  }
}

function setRect(el, rect) {
  css(el, 'position', 'absolute');
  css(el, 'top', rect.top);
  css(el, 'left', rect.left);
  css(el, 'width', rect.width);
  css(el, 'height', rect.height);
}

function unsetRect(el) {
  css(el, 'position', '');
  css(el, 'top', '');
  css(el, 'left', '');
  css(el, 'width', '');
  css(el, 'height', '');
}

var expando = 'Sortable' + new Date().getTime();

function AnimationStateManager() {
  var animationStates = [],
      animationCallbackId;
  return {
    captureAnimationState: function captureAnimationState() {
      animationStates = [];
      if (!this.options.animation) return;
      var children = [].slice.call(this.el.children);
      children.forEach(function (child) {
        if (css(child, 'display') === 'none' || child === Sortable.ghost) return;
        animationStates.push({
          target: child,
          rect: getRect(child)
        });

        var fromRect = _objectSpread2({}, animationStates[animationStates.length - 1].rect); // If animating: compensate for current animation


        if (child.thisAnimationDuration) {
          var childMatrix = matrix(child, true);

          if (childMatrix) {
            fromRect.top -= childMatrix.f;
            fromRect.left -= childMatrix.e;
          }
        }

        child.fromRect = fromRect;
      });
    },
    addAnimationState: function addAnimationState(state) {
      animationStates.push(state);
    },
    removeAnimationState: function removeAnimationState(target) {
      animationStates.splice(indexOfObject(animationStates, {
        target: target
      }), 1);
    },
    animateAll: function animateAll(callback) {
      var _this = this;

      if (!this.options.animation) {
        clearTimeout(animationCallbackId);
        if (typeof callback === 'function') callback();
        return;
      }

      var animating = false,
          animationTime = 0;
      animationStates.forEach(function (state) {
        var time = 0,
            target = state.target,
            fromRect = target.fromRect,
            toRect = getRect(target),
            prevFromRect = target.prevFromRect,
            prevToRect = target.prevToRect,
            animatingRect = state.rect,
            targetMatrix = matrix(target, true);

        if (targetMatrix) {
          // Compensate for current animation
          toRect.top -= targetMatrix.f;
          toRect.left -= targetMatrix.e;
        }

        target.toRect = toRect;

        if (target.thisAnimationDuration) {
          // Could also check if animatingRect is between fromRect and toRect
          if (isRectEqual(prevFromRect, toRect) && !isRectEqual(fromRect, toRect) && // Make sure animatingRect is on line between toRect & fromRect
          (animatingRect.top - toRect.top) / (animatingRect.left - toRect.left) === (fromRect.top - toRect.top) / (fromRect.left - toRect.left)) {
            // If returning to same place as started from animation and on same axis
            time = calculateRealTime(animatingRect, prevFromRect, prevToRect, _this.options);
          }
        } // if fromRect != toRect: animate


        if (!isRectEqual(toRect, fromRect)) {
          target.prevFromRect = fromRect;
          target.prevToRect = toRect;

          if (!time) {
            time = _this.options.animation;
          }

          _this.animate(target, animatingRect, toRect, time);
        }

        if (time) {
          animating = true;
          animationTime = Math.max(animationTime, time);
          clearTimeout(target.animationResetTimer);
          target.animationResetTimer = setTimeout(function () {
            target.animationTime = 0;
            target.prevFromRect = null;
            target.fromRect = null;
            target.prevToRect = null;
            target.thisAnimationDuration = null;
          }, time);
          target.thisAnimationDuration = time;
        }
      });
      clearTimeout(animationCallbackId);

      if (!animating) {
        if (typeof callback === 'function') callback();
      } else {
        animationCallbackId = setTimeout(function () {
          if (typeof callback === 'function') callback();
        }, animationTime);
      }

      animationStates = [];
    },
    animate: function animate(target, currentRect, toRect, duration) {
      if (duration) {
        css(target, 'transition', '');
        css(target, 'transform', '');
        var elMatrix = matrix(this.el),
            scaleX = elMatrix && elMatrix.a,
            scaleY = elMatrix && elMatrix.d,
            translateX = (currentRect.left - toRect.left) / (scaleX || 1),
            translateY = (currentRect.top - toRect.top) / (scaleY || 1);
        target.animatingX = !!translateX;
        target.animatingY = !!translateY;
        css(target, 'transform', 'translate3d(' + translateX + 'px,' + translateY + 'px,0)');
        this.forRepaintDummy = repaint(target); // repaint

        css(target, 'transition', 'transform ' + duration + 'ms' + (this.options.easing ? ' ' + this.options.easing : ''));
        css(target, 'transform', 'translate3d(0,0,0)');
        typeof target.animated === 'number' && clearTimeout(target.animated);
        target.animated = setTimeout(function () {
          css(target, 'transition', '');
          css(target, 'transform', '');
          target.animated = false;
          target.animatingX = false;
          target.animatingY = false;
        }, duration);
      }
    }
  };
}

function repaint(target) {
  return target.offsetWidth;
}

function calculateRealTime(animatingRect, fromRect, toRect, options) {
  return Math.sqrt(Math.pow(fromRect.top - animatingRect.top, 2) + Math.pow(fromRect.left - animatingRect.left, 2)) / Math.sqrt(Math.pow(fromRect.top - toRect.top, 2) + Math.pow(fromRect.left - toRect.left, 2)) * options.animation;
}

var plugins = [];
var defaults = {
  initializeByDefault: true
};
var PluginManager = {
  mount: function mount(plugin) {
    // Set default static properties
    for (var option in defaults) {
      if (defaults.hasOwnProperty(option) && !(option in plugin)) {
        plugin[option] = defaults[option];
      }
    }

    plugins.forEach(function (p) {
      if (p.pluginName === plugin.pluginName) {
        throw "Sortable: Cannot mount plugin ".concat(plugin.pluginName, " more than once");
      }
    });
    plugins.push(plugin);
  },
  pluginEvent: function pluginEvent(eventName, sortable, evt) {
    var _this = this;

    this.eventCanceled = false;

    evt.cancel = function () {
      _this.eventCanceled = true;
    };

    var eventNameGlobal = eventName + 'Global';
    plugins.forEach(function (plugin) {
      if (!sortable[plugin.pluginName]) return; // Fire global events if it exists in this sortable

      if (sortable[plugin.pluginName][eventNameGlobal]) {
        sortable[plugin.pluginName][eventNameGlobal](_objectSpread2({
          sortable: sortable
        }, evt));
      } // Only fire plugin event if plugin is enabled in this sortable,
      // and plugin has event defined


      if (sortable.options[plugin.pluginName] && sortable[plugin.pluginName][eventName]) {
        sortable[plugin.pluginName][eventName](_objectSpread2({
          sortable: sortable
        }, evt));
      }
    });
  },
  initializePlugins: function initializePlugins(sortable, el, defaults, options) {
    plugins.forEach(function (plugin) {
      var pluginName = plugin.pluginName;
      if (!sortable.options[pluginName] && !plugin.initializeByDefault) return;
      var initialized = new plugin(sortable, el, sortable.options);
      initialized.sortable = sortable;
      initialized.options = sortable.options;
      sortable[pluginName] = initialized; // Add default options from plugin

      _extends(defaults, initialized.defaults);
    });

    for (var option in sortable.options) {
      if (!sortable.options.hasOwnProperty(option)) continue;
      var modified = this.modifyOption(sortable, option, sortable.options[option]);

      if (typeof modified !== 'undefined') {
        sortable.options[option] = modified;
      }
    }
  },
  getEventProperties: function getEventProperties(name, sortable) {
    var eventProperties = {};
    plugins.forEach(function (plugin) {
      if (typeof plugin.eventProperties !== 'function') return;

      _extends(eventProperties, plugin.eventProperties.call(sortable[plugin.pluginName], name));
    });
    return eventProperties;
  },
  modifyOption: function modifyOption(sortable, name, value) {
    var modifiedValue;
    plugins.forEach(function (plugin) {
      // Plugin must exist on the Sortable
      if (!sortable[plugin.pluginName]) return; // If static option listener exists for this option, call in the context of the Sortable's instance of this plugin

      if (plugin.optionListeners && typeof plugin.optionListeners[name] === 'function') {
        modifiedValue = plugin.optionListeners[name].call(sortable[plugin.pluginName], value);
      }
    });
    return modifiedValue;
  }
};

function dispatchEvent(_ref) {
  var sortable = _ref.sortable,
      rootEl = _ref.rootEl,
      name = _ref.name,
      targetEl = _ref.targetEl,
      cloneEl = _ref.cloneEl,
      toEl = _ref.toEl,
      fromEl = _ref.fromEl,
      oldIndex = _ref.oldIndex,
      newIndex = _ref.newIndex,
      oldDraggableIndex = _ref.oldDraggableIndex,
      newDraggableIndex = _ref.newDraggableIndex,
      originalEvent = _ref.originalEvent,
      putSortable = _ref.putSortable,
      extraEventProperties = _ref.extraEventProperties;
  sortable = sortable || rootEl && rootEl[expando];
  if (!sortable) return;
  var evt,
      options = sortable.options,
      onName = 'on' + name.charAt(0).toUpperCase() + name.substr(1); // Support for new CustomEvent feature

  if (window.CustomEvent && !IE11OrLess && !Edge) {
    evt = new CustomEvent(name, {
      bubbles: true,
      cancelable: true
    });
  } else {
    evt = document.createEvent('Event');
    evt.initEvent(name, true, true);
  }

  evt.to = toEl || rootEl;
  evt.from = fromEl || rootEl;
  evt.item = targetEl || rootEl;
  evt.clone = cloneEl;
  evt.oldIndex = oldIndex;
  evt.newIndex = newIndex;
  evt.oldDraggableIndex = oldDraggableIndex;
  evt.newDraggableIndex = newDraggableIndex;
  evt.originalEvent = originalEvent;
  evt.pullMode = putSortable ? putSortable.lastPutMode : undefined;

  var allEventProperties = _objectSpread2(_objectSpread2({}, extraEventProperties), PluginManager.getEventProperties(name, sortable));

  for (var option in allEventProperties) {
    evt[option] = allEventProperties[option];
  }

  if (rootEl) {
    rootEl.dispatchEvent(evt);
  }

  if (options[onName]) {
    options[onName].call(sortable, evt);
  }
}

var _excluded = ["evt"];

var pluginEvent = function pluginEvent(eventName, sortable) {
  var _ref = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {},
      originalEvent = _ref.evt,
      data = _objectWithoutProperties(_ref, _excluded);

  PluginManager.pluginEvent.bind(Sortable)(eventName, sortable, _objectSpread2({
    dragEl: dragEl,
    parentEl: parentEl,
    ghostEl: ghostEl,
    rootEl: rootEl,
    nextEl: nextEl,
    lastDownEl: lastDownEl,
    cloneEl: cloneEl,
    cloneHidden: cloneHidden,
    dragStarted: moved,
    putSortable: putSortable,
    activeSortable: Sortable.active,
    originalEvent: originalEvent,
    oldIndex: oldIndex,
    oldDraggableIndex: oldDraggableIndex,
    newIndex: newIndex,
    newDraggableIndex: newDraggableIndex,
    hideGhostForTarget: _hideGhostForTarget,
    unhideGhostForTarget: _unhideGhostForTarget,
    cloneNowHidden: function cloneNowHidden() {
      cloneHidden = true;
    },
    cloneNowShown: function cloneNowShown() {
      cloneHidden = false;
    },
    dispatchSortableEvent: function dispatchSortableEvent(name) {
      _dispatchEvent({
        sortable: sortable,
        name: name,
        originalEvent: originalEvent
      });
    }
  }, data));
};

function _dispatchEvent(info) {
  dispatchEvent(_objectSpread2({
    putSortable: putSortable,
    cloneEl: cloneEl,
    targetEl: dragEl,
    rootEl: rootEl,
    oldIndex: oldIndex,
    oldDraggableIndex: oldDraggableIndex,
    newIndex: newIndex,
    newDraggableIndex: newDraggableIndex
  }, info));
}

var dragEl,
    parentEl,
    ghostEl,
    rootEl,
    nextEl,
    lastDownEl,
    cloneEl,
    cloneHidden,
    oldIndex,
    newIndex,
    oldDraggableIndex,
    newDraggableIndex,
    activeGroup,
    putSortable,
    awaitingDragStarted = false,
    ignoreNextClick = false,
    sortables = [],
    tapEvt,
    touchEvt,
    lastDx,
    lastDy,
    tapDistanceLeft,
    tapDistanceTop,
    moved,
    lastTarget,
    lastDirection,
    pastFirstInvertThresh = false,
    isCircumstantialInvert = false,
    targetMoveDistance,
    // For positioning ghost absolutely
ghostRelativeParent,
    ghostRelativeParentInitialScroll = [],
    // (left, top)
_silent = false,
    savedInputChecked = [];
/** @const */

var documentExists = typeof document !== 'undefined',
    PositionGhostAbsolutely = IOS,
    CSSFloatProperty = Edge || IE11OrLess ? 'cssFloat' : 'float',
    // This will not pass for IE9, because IE9 DnD only works on anchors
supportDraggable = documentExists && !ChromeForAndroid && !IOS && 'draggable' in document.createElement('div'),
    supportCssPointerEvents = function () {
  if (!documentExists) return; // false when <= IE11

  if (IE11OrLess) {
    return false;
  }

  var el = document.createElement('x');
  el.style.cssText = 'pointer-events:auto';
  return el.style.pointerEvents === 'auto';
}(),
    _detectDirection = function _detectDirection(el, options) {
  var elCSS = css(el),
      elWidth = parseInt(elCSS.width) - parseInt(elCSS.paddingLeft) - parseInt(elCSS.paddingRight) - parseInt(elCSS.borderLeftWidth) - parseInt(elCSS.borderRightWidth),
      child1 = getChild(el, 0, options),
      child2 = getChild(el, 1, options),
      firstChildCSS = child1 && css(child1),
      secondChildCSS = child2 && css(child2),
      firstChildWidth = firstChildCSS && parseInt(firstChildCSS.marginLeft) + parseInt(firstChildCSS.marginRight) + getRect(child1).width,
      secondChildWidth = secondChildCSS && parseInt(secondChildCSS.marginLeft) + parseInt(secondChildCSS.marginRight) + getRect(child2).width;

  if (elCSS.display === 'flex') {
    return elCSS.flexDirection === 'column' || elCSS.flexDirection === 'column-reverse' ? 'vertical' : 'horizontal';
  }

  if (elCSS.display === 'grid') {
    return elCSS.gridTemplateColumns.split(' ').length <= 1 ? 'vertical' : 'horizontal';
  }

  if (child1 && firstChildCSS["float"] && firstChildCSS["float"] !== 'none') {
    var touchingSideChild2 = firstChildCSS["float"] === 'left' ? 'left' : 'right';
    return child2 && (secondChildCSS.clear === 'both' || secondChildCSS.clear === touchingSideChild2) ? 'vertical' : 'horizontal';
  }

  return child1 && (firstChildCSS.display === 'block' || firstChildCSS.display === 'flex' || firstChildCSS.display === 'table' || firstChildCSS.display === 'grid' || firstChildWidth >= elWidth && elCSS[CSSFloatProperty] === 'none' || child2 && elCSS[CSSFloatProperty] === 'none' && firstChildWidth + secondChildWidth > elWidth) ? 'vertical' : 'horizontal';
},
    _dragElInRowColumn = function _dragElInRowColumn(dragRect, targetRect, vertical) {
  var dragElS1Opp = vertical ? dragRect.left : dragRect.top,
      dragElS2Opp = vertical ? dragRect.right : dragRect.bottom,
      dragElOppLength = vertical ? dragRect.width : dragRect.height,
      targetS1Opp = vertical ? targetRect.left : targetRect.top,
      targetS2Opp = vertical ? targetRect.right : targetRect.bottom,
      targetOppLength = vertical ? targetRect.width : targetRect.height;
  return dragElS1Opp === targetS1Opp || dragElS2Opp === targetS2Opp || dragElS1Opp + dragElOppLength / 2 === targetS1Opp + targetOppLength / 2;
},

/**
 * Detects first nearest empty sortable to X and Y position using emptyInsertThreshold.
 * @param  {Number} x      X position
 * @param  {Number} y      Y position
 * @return {HTMLElement}   Element of the first found nearest Sortable
 */
_detectNearestEmptySortable = function _detectNearestEmptySortable(x, y) {
  var ret;
  sortables.some(function (sortable) {
    var threshold = sortable[expando].options.emptyInsertThreshold;
    if (!threshold || lastChild(sortable)) return;
    var rect = getRect(sortable),
        insideHorizontally = x >= rect.left - threshold && x <= rect.right + threshold,
        insideVertically = y >= rect.top - threshold && y <= rect.bottom + threshold;

    if (insideHorizontally && insideVertically) {
      return ret = sortable;
    }
  });
  return ret;
},
    _prepareGroup = function _prepareGroup(options) {
  function toFn(value, pull) {
    return function (to, from, dragEl, evt) {
      var sameGroup = to.options.group.name && from.options.group.name && to.options.group.name === from.options.group.name;

      if (value == null && (pull || sameGroup)) {
        // Default pull value
        // Default pull and put value if same group
        return true;
      } else if (value == null || value === false) {
        return false;
      } else if (pull && value === 'clone') {
        return value;
      } else if (typeof value === 'function') {
        return toFn(value(to, from, dragEl, evt), pull)(to, from, dragEl, evt);
      } else {
        var otherGroup = (pull ? to : from).options.group.name;
        return value === true || typeof value === 'string' && value === otherGroup || value.join && value.indexOf(otherGroup) > -1;
      }
    };
  }

  var group = {};
  var originalGroup = options.group;

  if (!originalGroup || _typeof(originalGroup) != 'object') {
    originalGroup = {
      name: originalGroup
    };
  }

  group.name = originalGroup.name;
  group.checkPull = toFn(originalGroup.pull, true);
  group.checkPut = toFn(originalGroup.put);
  group.revertClone = originalGroup.revertClone;
  options.group = group;
},
    _hideGhostForTarget = function _hideGhostForTarget() {
  if (!supportCssPointerEvents && ghostEl) {
    css(ghostEl, 'display', 'none');
  }
},
    _unhideGhostForTarget = function _unhideGhostForTarget() {
  if (!supportCssPointerEvents && ghostEl) {
    css(ghostEl, 'display', '');
  }
}; // #1184 fix - Prevent click event on fallback if dragged but item not changed position


if (documentExists && !ChromeForAndroid) {
  document.addEventListener('click', function (evt) {
    if (ignoreNextClick) {
      evt.preventDefault();
      evt.stopPropagation && evt.stopPropagation();
      evt.stopImmediatePropagation && evt.stopImmediatePropagation();
      ignoreNextClick = false;
      return false;
    }
  }, true);
}

var nearestEmptyInsertDetectEvent = function nearestEmptyInsertDetectEvent(evt) {
  if (dragEl) {
    evt = evt.touches ? evt.touches[0] : evt;

    var nearest = _detectNearestEmptySortable(evt.clientX, evt.clientY);

    if (nearest) {
      // Create imitation event
      var event = {};

      for (var i in evt) {
        if (evt.hasOwnProperty(i)) {
          event[i] = evt[i];
        }
      }

      event.target = event.rootEl = nearest;
      event.preventDefault = void 0;
      event.stopPropagation = void 0;

      nearest[expando]._onDragOver(event);
    }
  }
};

var _checkOutsideTargetEl = function _checkOutsideTargetEl(evt) {
  if (dragEl) {
    dragEl.parentNode[expando]._isOutsideThisEl(evt.target);
  }
};
/**
 * @class  Sortable
 * @param  {HTMLElement}  el
 * @param  {Object}       [options]
 */


function Sortable(el, options) {
  if (!(el && el.nodeType && el.nodeType === 1)) {
    throw "Sortable: `el` must be an HTMLElement, not ".concat({}.toString.call(el));
  }

  this.el = el; // root element

  this.options = options = _extends({}, options); // Export instance

  el[expando] = this;
  var defaults = {
    group: null,
    sort: true,
    disabled: false,
    store: null,
    handle: null,
    draggable: /^[uo]l$/i.test(el.nodeName) ? '>li' : '>*',
    swapThreshold: 1,
    // percentage; 0 <= x <= 1
    invertSwap: false,
    // invert always
    invertedSwapThreshold: null,
    // will be set to same as swapThreshold if default
    removeCloneOnHide: true,
    direction: function direction() {
      return _detectDirection(el, this.options);
    },
    ghostClass: 'sortable-ghost',
    chosenClass: 'sortable-chosen',
    dragClass: 'sortable-drag',
    ignore: 'a, img',
    filter: null,
    preventOnFilter: true,
    animation: 0,
    easing: null,
    setData: function setData(dataTransfer, dragEl) {
      dataTransfer.setData('Text', dragEl.textContent);
    },
    dropBubble: false,
    dragoverBubble: false,
    dataIdAttr: 'data-id',
    delay: 0,
    delayOnTouchOnly: false,
    touchStartThreshold: (Number.parseInt ? Number : window).parseInt(window.devicePixelRatio, 10) || 1,
    forceFallback: false,
    fallbackClass: 'sortable-fallback',
    fallbackOnBody: false,
    fallbackTolerance: 0,
    fallbackOffset: {
      x: 0,
      y: 0
    },
    supportPointer: Sortable.supportPointer !== false && 'PointerEvent' in window && !Safari,
    emptyInsertThreshold: 5
  };
  PluginManager.initializePlugins(this, el, defaults); // Set default options

  for (var name in defaults) {
    !(name in options) && (options[name] = defaults[name]);
  }

  _prepareGroup(options); // Bind all private methods


  for (var fn in this) {
    if (fn.charAt(0) === '_' && typeof this[fn] === 'function') {
      this[fn] = this[fn].bind(this);
    }
  } // Setup drag mode


  this.nativeDraggable = options.forceFallback ? false : supportDraggable;

  if (this.nativeDraggable) {
    // Touch start threshold cannot be greater than the native dragstart threshold
    this.options.touchStartThreshold = 1;
  } // Bind events


  if (options.supportPointer) {
    on(el, 'pointerdown', this._onTapStart);
  } else {
    on(el, 'mousedown', this._onTapStart);
    on(el, 'touchstart', this._onTapStart);
  }

  if (this.nativeDraggable) {
    on(el, 'dragover', this);
    on(el, 'dragenter', this);
  }

  sortables.push(this.el); // Restore sorting

  options.store && options.store.get && this.sort(options.store.get(this) || []); // Add animation state manager

  _extends(this, AnimationStateManager());
}

Sortable.prototype =
/** @lends Sortable.prototype */
{
  constructor: Sortable,
  _isOutsideThisEl: function _isOutsideThisEl(target) {
    if (!this.el.contains(target) && target !== this.el) {
      lastTarget = null;
    }
  },
  _getDirection: function _getDirection(evt, target) {
    return typeof this.options.direction === 'function' ? this.options.direction.call(this, evt, target, dragEl) : this.options.direction;
  },
  _onTapStart: function _onTapStart(
  /** Event|TouchEvent */
  evt) {
    if (!evt.cancelable) return;

    var _this = this,
        el = this.el,
        options = this.options,
        preventOnFilter = options.preventOnFilter,
        type = evt.type,
        touch = evt.touches && evt.touches[0] || evt.pointerType && evt.pointerType === 'touch' && evt,
        target = (touch || evt).target,
        originalTarget = evt.target.shadowRoot && (evt.path && evt.path[0] || evt.composedPath && evt.composedPath()[0]) || target,
        filter = options.filter;

    _saveInputCheckedState(el); // Don't trigger start event when an element is been dragged, otherwise the evt.oldindex always wrong when set option.group.


    if (dragEl) {
      return;
    }

    if (/mousedown|pointerdown/.test(type) && evt.button !== 0 || options.disabled) {
      return; // only left button and enabled
    } // cancel dnd if original target is content editable


    if (originalTarget.isContentEditable) {
      return;
    } // Safari ignores further event handling after mousedown


    if (!this.nativeDraggable && Safari && target && target.tagName.toUpperCase() === 'SELECT') {
      return;
    }

    target = closest(target, options.draggable, el, false);

    if (target && target.animated) {
      return;
    }

    if (lastDownEl === target) {
      // Ignoring duplicate `down`
      return;
    } // Get the index of the dragged element within its parent


    oldIndex = index(target);
    oldDraggableIndex = index(target, options.draggable); // Check filter

    if (typeof filter === 'function') {
      if (filter.call(this, evt, target, this)) {
        _dispatchEvent({
          sortable: _this,
          rootEl: originalTarget,
          name: 'filter',
          targetEl: target,
          toEl: el,
          fromEl: el
        });

        pluginEvent('filter', _this, {
          evt: evt
        });
        preventOnFilter && evt.cancelable && evt.preventDefault();
        return; // cancel dnd
      }
    } else if (filter) {
      filter = filter.split(',').some(function (criteria) {
        criteria = closest(originalTarget, criteria.trim(), el, false);

        if (criteria) {
          _dispatchEvent({
            sortable: _this,
            rootEl: criteria,
            name: 'filter',
            targetEl: target,
            fromEl: el,
            toEl: el
          });

          pluginEvent('filter', _this, {
            evt: evt
          });
          return true;
        }
      });

      if (filter) {
        preventOnFilter && evt.cancelable && evt.preventDefault();
        return; // cancel dnd
      }
    }

    if (options.handle && !closest(originalTarget, options.handle, el, false)) {
      return;
    } // Prepare `dragstart`


    this._prepareDragStart(evt, touch, target);
  },
  _prepareDragStart: function _prepareDragStart(
  /** Event */
  evt,
  /** Touch */
  touch,
  /** HTMLElement */
  target) {
    var _this = this,
        el = _this.el,
        options = _this.options,
        ownerDocument = el.ownerDocument,
        dragStartFn;

    if (target && !dragEl && target.parentNode === el) {
      var dragRect = getRect(target);
      rootEl = el;
      dragEl = target;
      parentEl = dragEl.parentNode;
      nextEl = dragEl.nextSibling;
      lastDownEl = target;
      activeGroup = options.group;
      Sortable.dragged = dragEl;
      tapEvt = {
        target: dragEl,
        clientX: (touch || evt).clientX,
        clientY: (touch || evt).clientY
      };
      tapDistanceLeft = tapEvt.clientX - dragRect.left;
      tapDistanceTop = tapEvt.clientY - dragRect.top;
      this._lastX = (touch || evt).clientX;
      this._lastY = (touch || evt).clientY;
      dragEl.style['will-change'] = 'all';

      dragStartFn = function dragStartFn() {
        pluginEvent('delayEnded', _this, {
          evt: evt
        });

        if (Sortable.eventCanceled) {
          _this._onDrop();

          return;
        } // Delayed drag has been triggered
        // we can re-enable the events: touchmove/mousemove


        _this._disableDelayedDragEvents();

        if (!FireFox && _this.nativeDraggable) {
          dragEl.draggable = true;
        } // Bind the events: dragstart/dragend


        _this._triggerDragStart(evt, touch); // Drag start event


        _dispatchEvent({
          sortable: _this,
          name: 'choose',
          originalEvent: evt
        }); // Chosen item


        toggleClass(dragEl, options.chosenClass, true);
      }; // Disable "draggable"


      options.ignore.split(',').forEach(function (criteria) {
        find(dragEl, criteria.trim(), _disableDraggable);
      });
      on(ownerDocument, 'dragover', nearestEmptyInsertDetectEvent);
      on(ownerDocument, 'mousemove', nearestEmptyInsertDetectEvent);
      on(ownerDocument, 'touchmove', nearestEmptyInsertDetectEvent);
      on(ownerDocument, 'mouseup', _this._onDrop);
      on(ownerDocument, 'touchend', _this._onDrop);
      on(ownerDocument, 'touchcancel', _this._onDrop); // Make dragEl draggable (must be before delay for FireFox)

      if (FireFox && this.nativeDraggable) {
        this.options.touchStartThreshold = 4;
        dragEl.draggable = true;
      }

      pluginEvent('delayStart', this, {
        evt: evt
      }); // Delay is impossible for native DnD in Edge or IE

      if (options.delay && (!options.delayOnTouchOnly || touch) && (!this.nativeDraggable || !(Edge || IE11OrLess))) {
        if (Sortable.eventCanceled) {
          this._onDrop();

          return;
        } // If the user moves the pointer or let go the click or touch
        // before the delay has been reached:
        // disable the delayed drag


        on(ownerDocument, 'mouseup', _this._disableDelayedDrag);
        on(ownerDocument, 'touchend', _this._disableDelayedDrag);
        on(ownerDocument, 'touchcancel', _this._disableDelayedDrag);
        on(ownerDocument, 'mousemove', _this._delayedDragTouchMoveHandler);
        on(ownerDocument, 'touchmove', _this._delayedDragTouchMoveHandler);
        options.supportPointer && on(ownerDocument, 'pointermove', _this._delayedDragTouchMoveHandler);
        _this._dragStartTimer = setTimeout(dragStartFn, options.delay);
      } else {
        dragStartFn();
      }
    }
  },
  _delayedDragTouchMoveHandler: function _delayedDragTouchMoveHandler(
  /** TouchEvent|PointerEvent **/
  e) {
    var touch = e.touches ? e.touches[0] : e;

    if (Math.max(Math.abs(touch.clientX - this._lastX), Math.abs(touch.clientY - this._lastY)) >= Math.floor(this.options.touchStartThreshold / (this.nativeDraggable && window.devicePixelRatio || 1))) {
      this._disableDelayedDrag();
    }
  },
  _disableDelayedDrag: function _disableDelayedDrag() {
    dragEl && _disableDraggable(dragEl);
    clearTimeout(this._dragStartTimer);

    this._disableDelayedDragEvents();
  },
  _disableDelayedDragEvents: function _disableDelayedDragEvents() {
    var ownerDocument = this.el.ownerDocument;
    off(ownerDocument, 'mouseup', this._disableDelayedDrag);
    off(ownerDocument, 'touchend', this._disableDelayedDrag);
    off(ownerDocument, 'touchcancel', this._disableDelayedDrag);
    off(ownerDocument, 'mousemove', this._delayedDragTouchMoveHandler);
    off(ownerDocument, 'touchmove', this._delayedDragTouchMoveHandler);
    off(ownerDocument, 'pointermove', this._delayedDragTouchMoveHandler);
  },
  _triggerDragStart: function _triggerDragStart(
  /** Event */
  evt,
  /** Touch */
  touch) {
    touch = touch || evt.pointerType == 'touch' && evt;

    if (!this.nativeDraggable || touch) {
      if (this.options.supportPointer) {
        on(document, 'pointermove', this._onTouchMove);
      } else if (touch) {
        on(document, 'touchmove', this._onTouchMove);
      } else {
        on(document, 'mousemove', this._onTouchMove);
      }
    } else {
      on(dragEl, 'dragend', this);
      on(rootEl, 'dragstart', this._onDragStart);
    }

    try {
      if (document.selection) {
        // Timeout neccessary for IE9
        _nextTick(function () {
          document.selection.empty();
        });
      } else {
        window.getSelection().removeAllRanges();
      }
    } catch (err) {}
  },
  _dragStarted: function _dragStarted(fallback, evt) {

    awaitingDragStarted = false;

    if (rootEl && dragEl) {
      pluginEvent('dragStarted', this, {
        evt: evt
      });

      if (this.nativeDraggable) {
        on(document, 'dragover', _checkOutsideTargetEl);
      }

      var options = this.options; // Apply effect

      !fallback && toggleClass(dragEl, options.dragClass, false);
      toggleClass(dragEl, options.ghostClass, true);
      Sortable.active = this;
      fallback && this._appendGhost(); // Drag start event

      _dispatchEvent({
        sortable: this,
        name: 'start',
        originalEvent: evt
      });
    } else {
      this._nulling();
    }
  },
  _emulateDragOver: function _emulateDragOver() {
    if (touchEvt) {
      this._lastX = touchEvt.clientX;
      this._lastY = touchEvt.clientY;

      _hideGhostForTarget();

      var target = document.elementFromPoint(touchEvt.clientX, touchEvt.clientY);
      var parent = target;

      while (target && target.shadowRoot) {
        target = target.shadowRoot.elementFromPoint(touchEvt.clientX, touchEvt.clientY);
        if (target === parent) break;
        parent = target;
      }

      dragEl.parentNode[expando]._isOutsideThisEl(target);

      if (parent) {
        do {
          if (parent[expando]) {
            var inserted = void 0;
            inserted = parent[expando]._onDragOver({
              clientX: touchEvt.clientX,
              clientY: touchEvt.clientY,
              target: target,
              rootEl: parent
            });

            if (inserted && !this.options.dragoverBubble) {
              break;
            }
          }

          target = parent; // store last element
        }
        /* jshint boss:true */
        while (parent = parent.parentNode);
      }

      _unhideGhostForTarget();
    }
  },
  _onTouchMove: function _onTouchMove(
  /**TouchEvent*/
  evt) {
    if (tapEvt) {
      var options = this.options,
          fallbackTolerance = options.fallbackTolerance,
          fallbackOffset = options.fallbackOffset,
          touch = evt.touches ? evt.touches[0] : evt,
          ghostMatrix = ghostEl && matrix(ghostEl, true),
          scaleX = ghostEl && ghostMatrix && ghostMatrix.a,
          scaleY = ghostEl && ghostMatrix && ghostMatrix.d,
          relativeScrollOffset = PositionGhostAbsolutely && ghostRelativeParent && getRelativeScrollOffset(ghostRelativeParent),
          dx = (touch.clientX - tapEvt.clientX + fallbackOffset.x) / (scaleX || 1) + (relativeScrollOffset ? relativeScrollOffset[0] - ghostRelativeParentInitialScroll[0] : 0) / (scaleX || 1),
          dy = (touch.clientY - tapEvt.clientY + fallbackOffset.y) / (scaleY || 1) + (relativeScrollOffset ? relativeScrollOffset[1] - ghostRelativeParentInitialScroll[1] : 0) / (scaleY || 1); // only set the status to dragging, when we are actually dragging

      if (!Sortable.active && !awaitingDragStarted) {
        if (fallbackTolerance && Math.max(Math.abs(touch.clientX - this._lastX), Math.abs(touch.clientY - this._lastY)) < fallbackTolerance) {
          return;
        }

        this._onDragStart(evt, true);
      }

      if (ghostEl) {
        if (ghostMatrix) {
          ghostMatrix.e += dx - (lastDx || 0);
          ghostMatrix.f += dy - (lastDy || 0);
        } else {
          ghostMatrix = {
            a: 1,
            b: 0,
            c: 0,
            d: 1,
            e: dx,
            f: dy
          };
        }

        var cssMatrix = "matrix(".concat(ghostMatrix.a, ",").concat(ghostMatrix.b, ",").concat(ghostMatrix.c, ",").concat(ghostMatrix.d, ",").concat(ghostMatrix.e, ",").concat(ghostMatrix.f, ")");
        css(ghostEl, 'webkitTransform', cssMatrix);
        css(ghostEl, 'mozTransform', cssMatrix);
        css(ghostEl, 'msTransform', cssMatrix);
        css(ghostEl, 'transform', cssMatrix);
        lastDx = dx;
        lastDy = dy;
        touchEvt = touch;
      }

      evt.cancelable && evt.preventDefault();
    }
  },
  _appendGhost: function _appendGhost() {
    // Bug if using scale(): https://stackoverflow.com/questions/2637058
    // Not being adjusted for
    if (!ghostEl) {
      var container = this.options.fallbackOnBody ? document.body : rootEl,
          rect = getRect(dragEl, true, PositionGhostAbsolutely, true, container),
          options = this.options; // Position absolutely

      if (PositionGhostAbsolutely) {
        // Get relatively positioned parent
        ghostRelativeParent = container;

        while (css(ghostRelativeParent, 'position') === 'static' && css(ghostRelativeParent, 'transform') === 'none' && ghostRelativeParent !== document) {
          ghostRelativeParent = ghostRelativeParent.parentNode;
        }

        if (ghostRelativeParent !== document.body && ghostRelativeParent !== document.documentElement) {
          if (ghostRelativeParent === document) ghostRelativeParent = getWindowScrollingElement();
          rect.top += ghostRelativeParent.scrollTop;
          rect.left += ghostRelativeParent.scrollLeft;
        } else {
          ghostRelativeParent = getWindowScrollingElement();
        }

        ghostRelativeParentInitialScroll = getRelativeScrollOffset(ghostRelativeParent);
      }

      ghostEl = dragEl.cloneNode(true);
      toggleClass(ghostEl, options.ghostClass, false);
      toggleClass(ghostEl, options.fallbackClass, true);
      toggleClass(ghostEl, options.dragClass, true);
      css(ghostEl, 'transition', '');
      css(ghostEl, 'transform', '');
      css(ghostEl, 'box-sizing', 'border-box');
      css(ghostEl, 'margin', 0);
      css(ghostEl, 'top', rect.top);
      css(ghostEl, 'left', rect.left);
      css(ghostEl, 'width', rect.width);
      css(ghostEl, 'height', rect.height);
      css(ghostEl, 'opacity', '0.8');
      css(ghostEl, 'position', PositionGhostAbsolutely ? 'absolute' : 'fixed');
      css(ghostEl, 'zIndex', '100000');
      css(ghostEl, 'pointerEvents', 'none');
      Sortable.ghost = ghostEl;
      container.appendChild(ghostEl); // Set transform-origin

      css(ghostEl, 'transform-origin', tapDistanceLeft / parseInt(ghostEl.style.width) * 100 + '% ' + tapDistanceTop / parseInt(ghostEl.style.height) * 100 + '%');
    }
  },
  _onDragStart: function _onDragStart(
  /**Event*/
  evt,
  /**boolean*/
  fallback) {
    var _this = this;

    var dataTransfer = evt.dataTransfer;
    var options = _this.options;
    pluginEvent('dragStart', this, {
      evt: evt
    });

    if (Sortable.eventCanceled) {
      this._onDrop();

      return;
    }

    pluginEvent('setupClone', this);

    if (!Sortable.eventCanceled) {
      cloneEl = clone(dragEl);
      cloneEl.removeAttribute("id");
      cloneEl.draggable = false;
      cloneEl.style['will-change'] = '';

      this._hideClone();

      toggleClass(cloneEl, this.options.chosenClass, false);
      Sortable.clone = cloneEl;
    } // #1143: IFrame support workaround


    _this.cloneId = _nextTick(function () {
      pluginEvent('clone', _this);
      if (Sortable.eventCanceled) return;

      if (!_this.options.removeCloneOnHide) {
        rootEl.insertBefore(cloneEl, dragEl);
      }

      _this._hideClone();

      _dispatchEvent({
        sortable: _this,
        name: 'clone'
      });
    });
    !fallback && toggleClass(dragEl, options.dragClass, true); // Set proper drop events

    if (fallback) {
      ignoreNextClick = true;
      _this._loopId = setInterval(_this._emulateDragOver, 50);
    } else {
      // Undo what was set in _prepareDragStart before drag started
      off(document, 'mouseup', _this._onDrop);
      off(document, 'touchend', _this._onDrop);
      off(document, 'touchcancel', _this._onDrop);

      if (dataTransfer) {
        dataTransfer.effectAllowed = 'move';
        options.setData && options.setData.call(_this, dataTransfer, dragEl);
      }

      on(document, 'drop', _this); // #1276 fix:

      css(dragEl, 'transform', 'translateZ(0)');
    }

    awaitingDragStarted = true;
    _this._dragStartId = _nextTick(_this._dragStarted.bind(_this, fallback, evt));
    on(document, 'selectstart', _this);
    moved = true;

    if (Safari) {
      css(document.body, 'user-select', 'none');
    }
  },
  // Returns true - if no further action is needed (either inserted or another condition)
  _onDragOver: function _onDragOver(
  /**Event*/
  evt) {
    var el = this.el,
        target = evt.target,
        dragRect,
        targetRect,
        revert,
        options = this.options,
        group = options.group,
        activeSortable = Sortable.active,
        isOwner = activeGroup === group,
        canSort = options.sort,
        fromSortable = putSortable || activeSortable,
        vertical,
        _this = this,
        completedFired = false;

    if (_silent) return;

    function dragOverEvent(name, extra) {
      pluginEvent(name, _this, _objectSpread2({
        evt: evt,
        isOwner: isOwner,
        axis: vertical ? 'vertical' : 'horizontal',
        revert: revert,
        dragRect: dragRect,
        targetRect: targetRect,
        canSort: canSort,
        fromSortable: fromSortable,
        target: target,
        completed: completed,
        onMove: function onMove(target, after) {
          return _onMove(rootEl, el, dragEl, dragRect, target, getRect(target), evt, after);
        },
        changed: changed
      }, extra));
    } // Capture animation state


    function capture() {
      dragOverEvent('dragOverAnimationCapture');

      _this.captureAnimationState();

      if (_this !== fromSortable) {
        fromSortable.captureAnimationState();
      }
    } // Return invocation when dragEl is inserted (or completed)


    function completed(insertion) {
      dragOverEvent('dragOverCompleted', {
        insertion: insertion
      });

      if (insertion) {
        // Clones must be hidden before folding animation to capture dragRectAbsolute properly
        if (isOwner) {
          activeSortable._hideClone();
        } else {
          activeSortable._showClone(_this);
        }

        if (_this !== fromSortable) {
          // Set ghost class to new sortable's ghost class
          toggleClass(dragEl, putSortable ? putSortable.options.ghostClass : activeSortable.options.ghostClass, false);
          toggleClass(dragEl, options.ghostClass, true);
        }

        if (putSortable !== _this && _this !== Sortable.active) {
          putSortable = _this;
        } else if (_this === Sortable.active && putSortable) {
          putSortable = null;
        } // Animation


        if (fromSortable === _this) {
          _this._ignoreWhileAnimating = target;
        }

        _this.animateAll(function () {
          dragOverEvent('dragOverAnimationComplete');
          _this._ignoreWhileAnimating = null;
        });

        if (_this !== fromSortable) {
          fromSortable.animateAll();
          fromSortable._ignoreWhileAnimating = null;
        }
      } // Null lastTarget if it is not inside a previously swapped element


      if (target === dragEl && !dragEl.animated || target === el && !target.animated) {
        lastTarget = null;
      } // no bubbling and not fallback


      if (!options.dragoverBubble && !evt.rootEl && target !== document) {
        dragEl.parentNode[expando]._isOutsideThisEl(evt.target); // Do not detect for empty insert if already inserted


        !insertion && nearestEmptyInsertDetectEvent(evt);
      }

      !options.dragoverBubble && evt.stopPropagation && evt.stopPropagation();
      return completedFired = true;
    } // Call when dragEl has been inserted


    function changed() {
      newIndex = index(dragEl);
      newDraggableIndex = index(dragEl, options.draggable);

      _dispatchEvent({
        sortable: _this,
        name: 'change',
        toEl: el,
        newIndex: newIndex,
        newDraggableIndex: newDraggableIndex,
        originalEvent: evt
      });
    }

    if (evt.preventDefault !== void 0) {
      evt.cancelable && evt.preventDefault();
    }

    target = closest(target, options.draggable, el, true);
    dragOverEvent('dragOver');
    if (Sortable.eventCanceled) return completedFired;

    if (dragEl.contains(evt.target) || target.animated && target.animatingX && target.animatingY || _this._ignoreWhileAnimating === target) {
      return completed(false);
    }

    ignoreNextClick = false;

    if (activeSortable && !options.disabled && (isOwner ? canSort || (revert = parentEl !== rootEl) // Reverting item into the original list
    : putSortable === this || (this.lastPutMode = activeGroup.checkPull(this, activeSortable, dragEl, evt)) && group.checkPut(this, activeSortable, dragEl, evt))) {
      vertical = this._getDirection(evt, target) === 'vertical';
      dragRect = getRect(dragEl);
      dragOverEvent('dragOverValid');
      if (Sortable.eventCanceled) return completedFired;

      if (revert) {
        parentEl = rootEl; // actualization

        capture();

        this._hideClone();

        dragOverEvent('revert');

        if (!Sortable.eventCanceled) {
          if (nextEl) {
            rootEl.insertBefore(dragEl, nextEl);
          } else {
            rootEl.appendChild(dragEl);
          }
        }

        return completed(true);
      }

      var elLastChild = lastChild(el, options.draggable);

      if (!elLastChild || _ghostIsLast(evt, vertical, this) && !elLastChild.animated) {
        // Insert to end of list
        // If already at end of list: Do not insert
        if (elLastChild === dragEl) {
          return completed(false);
        } // if there is a last element, it is the target


        if (elLastChild && el === evt.target) {
          target = elLastChild;
        }

        if (target) {
          targetRect = getRect(target);
        }

        if (_onMove(rootEl, el, dragEl, dragRect, target, targetRect, evt, !!target) !== false) {
          capture();

          if (elLastChild && elLastChild.nextSibling) {
            // the last draggable element is not the last node
            el.insertBefore(dragEl, elLastChild.nextSibling);
          } else {
            el.appendChild(dragEl);
          }

          parentEl = el; // actualization

          changed();
          return completed(true);
        }
      } else if (elLastChild && _ghostIsFirst(evt, vertical, this)) {
        // Insert to start of list
        var firstChild = getChild(el, 0, options, true);

        if (firstChild === dragEl) {
          return completed(false);
        }

        target = firstChild;
        targetRect = getRect(target);

        if (_onMove(rootEl, el, dragEl, dragRect, target, targetRect, evt, false) !== false) {
          capture();
          el.insertBefore(dragEl, firstChild);
          parentEl = el; // actualization

          changed();
          return completed(true);
        }
      } else if (target.parentNode === el) {
        targetRect = getRect(target);
        var direction = 0,
            targetBeforeFirstSwap,
            differentLevel = dragEl.parentNode !== el,
            differentRowCol = !_dragElInRowColumn(dragEl.animated && dragEl.toRect || dragRect, target.animated && target.toRect || targetRect, vertical),
            side1 = vertical ? 'top' : 'left',
            scrolledPastTop = isScrolledPast(target, 'top', 'top') || isScrolledPast(dragEl, 'top', 'top'),
            scrollBefore = scrolledPastTop ? scrolledPastTop.scrollTop : void 0;

        if (lastTarget !== target) {
          targetBeforeFirstSwap = targetRect[side1];
          pastFirstInvertThresh = false;
          isCircumstantialInvert = !differentRowCol && options.invertSwap || differentLevel;
        }

        direction = _getSwapDirection(evt, target, targetRect, vertical, differentRowCol ? 1 : options.swapThreshold, options.invertedSwapThreshold == null ? options.swapThreshold : options.invertedSwapThreshold, isCircumstantialInvert, lastTarget === target);
        var sibling;

        if (direction !== 0) {
          // Check if target is beside dragEl in respective direction (ignoring hidden elements)
          var dragIndex = index(dragEl);

          do {
            dragIndex -= direction;
            sibling = parentEl.children[dragIndex];
          } while (sibling && (css(sibling, 'display') === 'none' || sibling === ghostEl));
        } // If dragEl is already beside target: Do not insert


        if (direction === 0 || sibling === target) {
          return completed(false);
        }

        lastTarget = target;
        lastDirection = direction;
        var nextSibling = target.nextElementSibling,
            after = false;
        after = direction === 1;

        var moveVector = _onMove(rootEl, el, dragEl, dragRect, target, targetRect, evt, after);

        if (moveVector !== false) {
          if (moveVector === 1 || moveVector === -1) {
            after = moveVector === 1;
          }

          _silent = true;
          setTimeout(_unsilent, 30);
          capture();

          if (after && !nextSibling) {
            el.appendChild(dragEl);
          } else {
            target.parentNode.insertBefore(dragEl, after ? nextSibling : target);
          } // Undo chrome's scroll adjustment (has no effect on other browsers)


          if (scrolledPastTop) {
            scrollBy(scrolledPastTop, 0, scrollBefore - scrolledPastTop.scrollTop);
          }

          parentEl = dragEl.parentNode; // actualization
          // must be done before animation

          if (targetBeforeFirstSwap !== undefined && !isCircumstantialInvert) {
            targetMoveDistance = Math.abs(targetBeforeFirstSwap - getRect(target)[side1]);
          }

          changed();
          return completed(true);
        }
      }

      if (el.contains(dragEl)) {
        return completed(false);
      }
    }

    return false;
  },
  _ignoreWhileAnimating: null,
  _offMoveEvents: function _offMoveEvents() {
    off(document, 'mousemove', this._onTouchMove);
    off(document, 'touchmove', this._onTouchMove);
    off(document, 'pointermove', this._onTouchMove);
    off(document, 'dragover', nearestEmptyInsertDetectEvent);
    off(document, 'mousemove', nearestEmptyInsertDetectEvent);
    off(document, 'touchmove', nearestEmptyInsertDetectEvent);
  },
  _offUpEvents: function _offUpEvents() {
    var ownerDocument = this.el.ownerDocument;
    off(ownerDocument, 'mouseup', this._onDrop);
    off(ownerDocument, 'touchend', this._onDrop);
    off(ownerDocument, 'pointerup', this._onDrop);
    off(ownerDocument, 'touchcancel', this._onDrop);
    off(document, 'selectstart', this);
  },
  _onDrop: function _onDrop(
  /**Event*/
  evt) {
    var el = this.el,
        options = this.options; // Get the index of the dragged element within its parent

    newIndex = index(dragEl);
    newDraggableIndex = index(dragEl, options.draggable);
    pluginEvent('drop', this, {
      evt: evt
    });
    parentEl = dragEl && dragEl.parentNode; // Get again after plugin event

    newIndex = index(dragEl);
    newDraggableIndex = index(dragEl, options.draggable);

    if (Sortable.eventCanceled) {
      this._nulling();

      return;
    }

    awaitingDragStarted = false;
    isCircumstantialInvert = false;
    pastFirstInvertThresh = false;
    clearInterval(this._loopId);
    clearTimeout(this._dragStartTimer);

    _cancelNextTick(this.cloneId);

    _cancelNextTick(this._dragStartId); // Unbind events


    if (this.nativeDraggable) {
      off(document, 'drop', this);
      off(el, 'dragstart', this._onDragStart);
    }

    this._offMoveEvents();

    this._offUpEvents();

    if (Safari) {
      css(document.body, 'user-select', '');
    }

    css(dragEl, 'transform', '');

    if (evt) {
      if (moved) {
        evt.cancelable && evt.preventDefault();
        !options.dropBubble && evt.stopPropagation();
      }

      ghostEl && ghostEl.parentNode && ghostEl.parentNode.removeChild(ghostEl);

      if (rootEl === parentEl || putSortable && putSortable.lastPutMode !== 'clone') {
        // Remove clone(s)
        cloneEl && cloneEl.parentNode && cloneEl.parentNode.removeChild(cloneEl);
      }

      if (dragEl) {
        if (this.nativeDraggable) {
          off(dragEl, 'dragend', this);
        }

        _disableDraggable(dragEl);

        dragEl.style['will-change'] = ''; // Remove classes
        // ghostClass is added in dragStarted

        if (moved && !awaitingDragStarted) {
          toggleClass(dragEl, putSortable ? putSortable.options.ghostClass : this.options.ghostClass, false);
        }

        toggleClass(dragEl, this.options.chosenClass, false); // Drag stop event

        _dispatchEvent({
          sortable: this,
          name: 'unchoose',
          toEl: parentEl,
          newIndex: null,
          newDraggableIndex: null,
          originalEvent: evt
        });

        if (rootEl !== parentEl) {
          if (newIndex >= 0) {
            // Add event
            _dispatchEvent({
              rootEl: parentEl,
              name: 'add',
              toEl: parentEl,
              fromEl: rootEl,
              originalEvent: evt
            }); // Remove event


            _dispatchEvent({
              sortable: this,
              name: 'remove',
              toEl: parentEl,
              originalEvent: evt
            }); // drag from one list and drop into another


            _dispatchEvent({
              rootEl: parentEl,
              name: 'sort',
              toEl: parentEl,
              fromEl: rootEl,
              originalEvent: evt
            });

            _dispatchEvent({
              sortable: this,
              name: 'sort',
              toEl: parentEl,
              originalEvent: evt
            });
          }

          putSortable && putSortable.save();
        } else {
          if (newIndex !== oldIndex) {
            if (newIndex >= 0) {
              // drag & drop within the same list
              _dispatchEvent({
                sortable: this,
                name: 'update',
                toEl: parentEl,
                originalEvent: evt
              });

              _dispatchEvent({
                sortable: this,
                name: 'sort',
                toEl: parentEl,
                originalEvent: evt
              });
            }
          }
        }

        if (Sortable.active) {
          /* jshint eqnull:true */
          if (newIndex == null || newIndex === -1) {
            newIndex = oldIndex;
            newDraggableIndex = oldDraggableIndex;
          }

          _dispatchEvent({
            sortable: this,
            name: 'end',
            toEl: parentEl,
            originalEvent: evt
          }); // Save sorting


          this.save();
        }
      }
    }

    this._nulling();
  },
  _nulling: function _nulling() {
    pluginEvent('nulling', this);
    rootEl = dragEl = parentEl = ghostEl = nextEl = cloneEl = lastDownEl = cloneHidden = tapEvt = touchEvt = moved = newIndex = newDraggableIndex = oldIndex = oldDraggableIndex = lastTarget = lastDirection = putSortable = activeGroup = Sortable.dragged = Sortable.ghost = Sortable.clone = Sortable.active = null;
    savedInputChecked.forEach(function (el) {
      el.checked = true;
    });
    savedInputChecked.length = lastDx = lastDy = 0;
  },
  handleEvent: function handleEvent(
  /**Event*/
  evt) {
    switch (evt.type) {
      case 'drop':
      case 'dragend':
        this._onDrop(evt);

        break;

      case 'dragenter':
      case 'dragover':
        if (dragEl) {
          this._onDragOver(evt);

          _globalDragOver(evt);
        }

        break;

      case 'selectstart':
        evt.preventDefault();
        break;
    }
  },

  /**
   * Serializes the item into an array of string.
   * @returns {String[]}
   */
  toArray: function toArray() {
    var order = [],
        el,
        children = this.el.children,
        i = 0,
        n = children.length,
        options = this.options;

    for (; i < n; i++) {
      el = children[i];

      if (closest(el, options.draggable, this.el, false)) {
        order.push(el.getAttribute(options.dataIdAttr) || _generateId(el));
      }
    }

    return order;
  },

  /**
   * Sorts the elements according to the array.
   * @param  {String[]}  order  order of the items
   */
  sort: function sort(order, useAnimation) {
    var items = {},
        rootEl = this.el;
    this.toArray().forEach(function (id, i) {
      var el = rootEl.children[i];

      if (closest(el, this.options.draggable, rootEl, false)) {
        items[id] = el;
      }
    }, this);
    useAnimation && this.captureAnimationState();
    order.forEach(function (id) {
      if (items[id]) {
        rootEl.removeChild(items[id]);
        rootEl.appendChild(items[id]);
      }
    });
    useAnimation && this.animateAll();
  },

  /**
   * Save the current sorting
   */
  save: function save() {
    var store = this.options.store;
    store && store.set && store.set(this);
  },

  /**
   * For each element in the set, get the first element that matches the selector by testing the element itself and traversing up through its ancestors in the DOM tree.
   * @param   {HTMLElement}  el
   * @param   {String}       [selector]  default: `options.draggable`
   * @returns {HTMLElement|null}
   */
  closest: function closest$1(el, selector) {
    return closest(el, selector || this.options.draggable, this.el, false);
  },

  /**
   * Set/get option
   * @param   {string} name
   * @param   {*}      [value]
   * @returns {*}
   */
  option: function option(name, value) {
    var options = this.options;

    if (value === void 0) {
      return options[name];
    } else {
      var modifiedValue = PluginManager.modifyOption(this, name, value);

      if (typeof modifiedValue !== 'undefined') {
        options[name] = modifiedValue;
      } else {
        options[name] = value;
      }

      if (name === 'group') {
        _prepareGroup(options);
      }
    }
  },

  /**
   * Destroy
   */
  destroy: function destroy() {
    pluginEvent('destroy', this);
    var el = this.el;
    el[expando] = null;
    off(el, 'mousedown', this._onTapStart);
    off(el, 'touchstart', this._onTapStart);
    off(el, 'pointerdown', this._onTapStart);

    if (this.nativeDraggable) {
      off(el, 'dragover', this);
      off(el, 'dragenter', this);
    } // Remove draggable attributes


    Array.prototype.forEach.call(el.querySelectorAll('[draggable]'), function (el) {
      el.removeAttribute('draggable');
    });

    this._onDrop();

    this._disableDelayedDragEvents();

    sortables.splice(sortables.indexOf(this.el), 1);
    this.el = el = null;
  },
  _hideClone: function _hideClone() {
    if (!cloneHidden) {
      pluginEvent('hideClone', this);
      if (Sortable.eventCanceled) return;
      css(cloneEl, 'display', 'none');

      if (this.options.removeCloneOnHide && cloneEl.parentNode) {
        cloneEl.parentNode.removeChild(cloneEl);
      }

      cloneHidden = true;
    }
  },
  _showClone: function _showClone(putSortable) {
    if (putSortable.lastPutMode !== 'clone') {
      this._hideClone();

      return;
    }

    if (cloneHidden) {
      pluginEvent('showClone', this);
      if (Sortable.eventCanceled) return; // show clone at dragEl or original position

      if (dragEl.parentNode == rootEl && !this.options.group.revertClone) {
        rootEl.insertBefore(cloneEl, dragEl);
      } else if (nextEl) {
        rootEl.insertBefore(cloneEl, nextEl);
      } else {
        rootEl.appendChild(cloneEl);
      }

      if (this.options.group.revertClone) {
        this.animate(dragEl, cloneEl);
      }

      css(cloneEl, 'display', '');
      cloneHidden = false;
    }
  }
};

function _globalDragOver(
/**Event*/
evt) {
  if (evt.dataTransfer) {
    evt.dataTransfer.dropEffect = 'move';
  }

  evt.cancelable && evt.preventDefault();
}

function _onMove(fromEl, toEl, dragEl, dragRect, targetEl, targetRect, originalEvent, willInsertAfter) {
  var evt,
      sortable = fromEl[expando],
      onMoveFn = sortable.options.onMove,
      retVal; // Support for new CustomEvent feature

  if (window.CustomEvent && !IE11OrLess && !Edge) {
    evt = new CustomEvent('move', {
      bubbles: true,
      cancelable: true
    });
  } else {
    evt = document.createEvent('Event');
    evt.initEvent('move', true, true);
  }

  evt.to = toEl;
  evt.from = fromEl;
  evt.dragged = dragEl;
  evt.draggedRect = dragRect;
  evt.related = targetEl || toEl;
  evt.relatedRect = targetRect || getRect(toEl);
  evt.willInsertAfter = willInsertAfter;
  evt.originalEvent = originalEvent;
  fromEl.dispatchEvent(evt);

  if (onMoveFn) {
    retVal = onMoveFn.call(sortable, evt, originalEvent);
  }

  return retVal;
}

function _disableDraggable(el) {
  el.draggable = false;
}

function _unsilent() {
  _silent = false;
}

function _ghostIsFirst(evt, vertical, sortable) {
  var rect = getRect(getChild(sortable.el, 0, sortable.options, true));
  var spacer = 10;
  return vertical ? evt.clientX < rect.left - spacer || evt.clientY < rect.top && evt.clientX < rect.right : evt.clientY < rect.top - spacer || evt.clientY < rect.bottom && evt.clientX < rect.left;
}

function _ghostIsLast(evt, vertical, sortable) {
  var rect = getRect(lastChild(sortable.el, sortable.options.draggable));
  var spacer = 10;
  return vertical ? evt.clientX > rect.right + spacer || evt.clientX <= rect.right && evt.clientY > rect.bottom && evt.clientX >= rect.left : evt.clientX > rect.right && evt.clientY > rect.top || evt.clientX <= rect.right && evt.clientY > rect.bottom + spacer;
}

function _getSwapDirection(evt, target, targetRect, vertical, swapThreshold, invertedSwapThreshold, invertSwap, isLastTarget) {
  var mouseOnAxis = vertical ? evt.clientY : evt.clientX,
      targetLength = vertical ? targetRect.height : targetRect.width,
      targetS1 = vertical ? targetRect.top : targetRect.left,
      targetS2 = vertical ? targetRect.bottom : targetRect.right,
      invert = false;

  if (!invertSwap) {
    // Never invert or create dragEl shadow when target movemenet causes mouse to move past the end of regular swapThreshold
    if (isLastTarget && targetMoveDistance < targetLength * swapThreshold) {
      // multiplied only by swapThreshold because mouse will already be inside target by (1 - threshold) * targetLength / 2
      // check if past first invert threshold on side opposite of lastDirection
      if (!pastFirstInvertThresh && (lastDirection === 1 ? mouseOnAxis > targetS1 + targetLength * invertedSwapThreshold / 2 : mouseOnAxis < targetS2 - targetLength * invertedSwapThreshold / 2)) {
        // past first invert threshold, do not restrict inverted threshold to dragEl shadow
        pastFirstInvertThresh = true;
      }

      if (!pastFirstInvertThresh) {
        // dragEl shadow (target move distance shadow)
        if (lastDirection === 1 ? mouseOnAxis < targetS1 + targetMoveDistance // over dragEl shadow
        : mouseOnAxis > targetS2 - targetMoveDistance) {
          return -lastDirection;
        }
      } else {
        invert = true;
      }
    } else {
      // Regular
      if (mouseOnAxis > targetS1 + targetLength * (1 - swapThreshold) / 2 && mouseOnAxis < targetS2 - targetLength * (1 - swapThreshold) / 2) {
        return _getInsertDirection(target);
      }
    }
  }

  invert = invert || invertSwap;

  if (invert) {
    // Invert of regular
    if (mouseOnAxis < targetS1 + targetLength * invertedSwapThreshold / 2 || mouseOnAxis > targetS2 - targetLength * invertedSwapThreshold / 2) {
      return mouseOnAxis > targetS1 + targetLength / 2 ? 1 : -1;
    }
  }

  return 0;
}
/**
 * Gets the direction dragEl must be swapped relative to target in order to make it
 * seem that dragEl has been "inserted" into that element's position
 * @param  {HTMLElement} target       The target whose position dragEl is being inserted at
 * @return {Number}                   Direction dragEl must be swapped
 */


function _getInsertDirection(target) {
  if (index(dragEl) < index(target)) {
    return 1;
  } else {
    return -1;
  }
}
/**
 * Generate id
 * @param   {HTMLElement} el
 * @returns {String}
 * @private
 */


function _generateId(el) {
  var str = el.tagName + el.className + el.src + el.href + el.textContent,
      i = str.length,
      sum = 0;

  while (i--) {
    sum += str.charCodeAt(i);
  }

  return sum.toString(36);
}

function _saveInputCheckedState(root) {
  savedInputChecked.length = 0;
  var inputs = root.getElementsByTagName('input');
  var idx = inputs.length;

  while (idx--) {
    var el = inputs[idx];
    el.checked && savedInputChecked.push(el);
  }
}

function _nextTick(fn) {
  return setTimeout(fn, 0);
}

function _cancelNextTick(id) {
  return clearTimeout(id);
} // Fixed #973:


if (documentExists) {
  on(document, 'touchmove', function (evt) {
    if ((Sortable.active || awaitingDragStarted) && evt.cancelable) {
      evt.preventDefault();
    }
  });
} // Export utils


Sortable.utils = {
  on: on,
  off: off,
  css: css,
  find: find,
  is: function is(el, selector) {
    return !!closest(el, selector, el, false);
  },
  extend: extend,
  throttle: throttle,
  closest: closest,
  toggleClass: toggleClass,
  clone: clone,
  index: index,
  nextTick: _nextTick,
  cancelNextTick: _cancelNextTick,
  detectDirection: _detectDirection,
  getChild: getChild
};
/**
 * Get the Sortable instance of an element
 * @param  {HTMLElement} element The element
 * @return {Sortable|undefined}         The instance of Sortable
 */

Sortable.get = function (element) {
  return element[expando];
};
/**
 * Mount a plugin to Sortable
 * @param  {...SortablePlugin|SortablePlugin[]} plugins       Plugins being mounted
 */


Sortable.mount = function () {
  for (var _len = arguments.length, plugins = new Array(_len), _key = 0; _key < _len; _key++) {
    plugins[_key] = arguments[_key];
  }

  if (plugins[0].constructor === Array) plugins = plugins[0];
  plugins.forEach(function (plugin) {
    if (!plugin.prototype || !plugin.prototype.constructor) {
      throw "Sortable: Mounted plugin must be a constructor function, not ".concat({}.toString.call(plugin));
    }

    if (plugin.utils) Sortable.utils = _objectSpread2(_objectSpread2({}, Sortable.utils), plugin.utils);
    PluginManager.mount(plugin);
  });
};
/**
 * Create sortable instance
 * @param {HTMLElement}  el
 * @param {Object}      [options]
 */


Sortable.create = function (el, options) {
  return new Sortable(el, options);
}; // Export


Sortable.version = version;

var autoScrolls = [],
    scrollEl,
    scrollRootEl,
    scrolling = false,
    lastAutoScrollX,
    lastAutoScrollY,
    touchEvt$1,
    pointerElemChangedInterval;

function AutoScrollPlugin() {
  function AutoScroll() {
    this.defaults = {
      scroll: true,
      forceAutoScrollFallback: false,
      scrollSensitivity: 30,
      scrollSpeed: 10,
      bubbleScroll: true
    }; // Bind all private methods

    for (var fn in this) {
      if (fn.charAt(0) === '_' && typeof this[fn] === 'function') {
        this[fn] = this[fn].bind(this);
      }
    }
  }

  AutoScroll.prototype = {
    dragStarted: function dragStarted(_ref) {
      var originalEvent = _ref.originalEvent;

      if (this.sortable.nativeDraggable) {
        on(document, 'dragover', this._handleAutoScroll);
      } else {
        if (this.options.supportPointer) {
          on(document, 'pointermove', this._handleFallbackAutoScroll);
        } else if (originalEvent.touches) {
          on(document, 'touchmove', this._handleFallbackAutoScroll);
        } else {
          on(document, 'mousemove', this._handleFallbackAutoScroll);
        }
      }
    },
    dragOverCompleted: function dragOverCompleted(_ref2) {
      var originalEvent = _ref2.originalEvent;

      // For when bubbling is canceled and using fallback (fallback 'touchmove' always reached)
      if (!this.options.dragOverBubble && !originalEvent.rootEl) {
        this._handleAutoScroll(originalEvent);
      }
    },
    drop: function drop() {
      if (this.sortable.nativeDraggable) {
        off(document, 'dragover', this._handleAutoScroll);
      } else {
        off(document, 'pointermove', this._handleFallbackAutoScroll);
        off(document, 'touchmove', this._handleFallbackAutoScroll);
        off(document, 'mousemove', this._handleFallbackAutoScroll);
      }

      clearPointerElemChangedInterval();
      clearAutoScrolls();
      cancelThrottle();
    },
    nulling: function nulling() {
      touchEvt$1 = scrollRootEl = scrollEl = scrolling = pointerElemChangedInterval = lastAutoScrollX = lastAutoScrollY = null;
      autoScrolls.length = 0;
    },
    _handleFallbackAutoScroll: function _handleFallbackAutoScroll(evt) {
      this._handleAutoScroll(evt, true);
    },
    _handleAutoScroll: function _handleAutoScroll(evt, fallback) {
      var _this = this;

      var x = (evt.touches ? evt.touches[0] : evt).clientX,
          y = (evt.touches ? evt.touches[0] : evt).clientY,
          elem = document.elementFromPoint(x, y);
      touchEvt$1 = evt; // IE does not seem to have native autoscroll,
      // Edge's autoscroll seems too conditional,
      // MACOS Safari does not have autoscroll,
      // Firefox and Chrome are good

      if (fallback || this.options.forceAutoScrollFallback || Edge || IE11OrLess || Safari) {
        autoScroll(evt, this.options, elem, fallback); // Listener for pointer element change

        var ogElemScroller = getParentAutoScrollElement(elem, true);

        if (scrolling && (!pointerElemChangedInterval || x !== lastAutoScrollX || y !== lastAutoScrollY)) {
          pointerElemChangedInterval && clearPointerElemChangedInterval(); // Detect for pointer elem change, emulating native DnD behaviour

          pointerElemChangedInterval = setInterval(function () {
            var newElem = getParentAutoScrollElement(document.elementFromPoint(x, y), true);

            if (newElem !== ogElemScroller) {
              ogElemScroller = newElem;
              clearAutoScrolls();
            }

            autoScroll(evt, _this.options, newElem, fallback);
          }, 10);
          lastAutoScrollX = x;
          lastAutoScrollY = y;
        }
      } else {
        // if DnD is enabled (and browser has good autoscrolling), first autoscroll will already scroll, so get parent autoscroll of first autoscroll
        if (!this.options.bubbleScroll || getParentAutoScrollElement(elem, true) === getWindowScrollingElement()) {
          clearAutoScrolls();
          return;
        }

        autoScroll(evt, this.options, getParentAutoScrollElement(elem, false), false);
      }
    }
  };
  return _extends(AutoScroll, {
    pluginName: 'scroll',
    initializeByDefault: true
  });
}

function clearAutoScrolls() {
  autoScrolls.forEach(function (autoScroll) {
    clearInterval(autoScroll.pid);
  });
  autoScrolls = [];
}

function clearPointerElemChangedInterval() {
  clearInterval(pointerElemChangedInterval);
}

var autoScroll = throttle(function (evt, options, rootEl, isFallback) {
  // Bug: https://bugzilla.mozilla.org/show_bug.cgi?id=505521
  if (!options.scroll) return;
  var x = (evt.touches ? evt.touches[0] : evt).clientX,
      y = (evt.touches ? evt.touches[0] : evt).clientY,
      sens = options.scrollSensitivity,
      speed = options.scrollSpeed,
      winScroller = getWindowScrollingElement();
  var scrollThisInstance = false,
      scrollCustomFn; // New scroll root, set scrollEl

  if (scrollRootEl !== rootEl) {
    scrollRootEl = rootEl;
    clearAutoScrolls();
    scrollEl = options.scroll;
    scrollCustomFn = options.scrollFn;

    if (scrollEl === true) {
      scrollEl = getParentAutoScrollElement(rootEl, true);
    }
  }

  var layersOut = 0;
  var currentParent = scrollEl;

  do {
    var el = currentParent,
        rect = getRect(el),
        top = rect.top,
        bottom = rect.bottom,
        left = rect.left,
        right = rect.right,
        width = rect.width,
        height = rect.height,
        canScrollX = void 0,
        canScrollY = void 0,
        scrollWidth = el.scrollWidth,
        scrollHeight = el.scrollHeight,
        elCSS = css(el),
        scrollPosX = el.scrollLeft,
        scrollPosY = el.scrollTop;

    if (el === winScroller) {
      canScrollX = width < scrollWidth && (elCSS.overflowX === 'auto' || elCSS.overflowX === 'scroll' || elCSS.overflowX === 'visible');
      canScrollY = height < scrollHeight && (elCSS.overflowY === 'auto' || elCSS.overflowY === 'scroll' || elCSS.overflowY === 'visible');
    } else {
      canScrollX = width < scrollWidth && (elCSS.overflowX === 'auto' || elCSS.overflowX === 'scroll');
      canScrollY = height < scrollHeight && (elCSS.overflowY === 'auto' || elCSS.overflowY === 'scroll');
    }

    var vx = canScrollX && (Math.abs(right - x) <= sens && scrollPosX + width < scrollWidth) - (Math.abs(left - x) <= sens && !!scrollPosX);
    var vy = canScrollY && (Math.abs(bottom - y) <= sens && scrollPosY + height < scrollHeight) - (Math.abs(top - y) <= sens && !!scrollPosY);

    if (!autoScrolls[layersOut]) {
      for (var i = 0; i <= layersOut; i++) {
        if (!autoScrolls[i]) {
          autoScrolls[i] = {};
        }
      }
    }

    if (autoScrolls[layersOut].vx != vx || autoScrolls[layersOut].vy != vy || autoScrolls[layersOut].el !== el) {
      autoScrolls[layersOut].el = el;
      autoScrolls[layersOut].vx = vx;
      autoScrolls[layersOut].vy = vy;
      clearInterval(autoScrolls[layersOut].pid);

      if (vx != 0 || vy != 0) {
        scrollThisInstance = true;
        /* jshint loopfunc:true */

        autoScrolls[layersOut].pid = setInterval(function () {
          // emulate drag over during autoscroll (fallback), emulating native DnD behaviour
          if (isFallback && this.layer === 0) {
            Sortable.active._onTouchMove(touchEvt$1); // To move ghost if it is positioned absolutely

          }

          var scrollOffsetY = autoScrolls[this.layer].vy ? autoScrolls[this.layer].vy * speed : 0;
          var scrollOffsetX = autoScrolls[this.layer].vx ? autoScrolls[this.layer].vx * speed : 0;

          if (typeof scrollCustomFn === 'function') {
            if (scrollCustomFn.call(Sortable.dragged.parentNode[expando], scrollOffsetX, scrollOffsetY, evt, touchEvt$1, autoScrolls[this.layer].el) !== 'continue') {
              return;
            }
          }

          scrollBy(autoScrolls[this.layer].el, scrollOffsetX, scrollOffsetY);
        }.bind({
          layer: layersOut
        }), 24);
      }
    }

    layersOut++;
  } while (options.bubbleScroll && currentParent !== winScroller && (currentParent = getParentAutoScrollElement(currentParent, false)));

  scrolling = scrollThisInstance; // in case another function catches scrolling as false in between when it is not
}, 30);

var drop = function drop(_ref) {
  var originalEvent = _ref.originalEvent,
      putSortable = _ref.putSortable,
      dragEl = _ref.dragEl,
      activeSortable = _ref.activeSortable,
      dispatchSortableEvent = _ref.dispatchSortableEvent,
      hideGhostForTarget = _ref.hideGhostForTarget,
      unhideGhostForTarget = _ref.unhideGhostForTarget;
  if (!originalEvent) return;
  var toSortable = putSortable || activeSortable;
  hideGhostForTarget();
  var touch = originalEvent.changedTouches && originalEvent.changedTouches.length ? originalEvent.changedTouches[0] : originalEvent;
  var target = document.elementFromPoint(touch.clientX, touch.clientY);
  unhideGhostForTarget();

  if (toSortable && !toSortable.el.contains(target)) {
    dispatchSortableEvent('spill');
    this.onSpill({
      dragEl: dragEl,
      putSortable: putSortable
    });
  }
};

function Revert() {}

Revert.prototype = {
  startIndex: null,
  dragStart: function dragStart(_ref2) {
    var oldDraggableIndex = _ref2.oldDraggableIndex;
    this.startIndex = oldDraggableIndex;
  },
  onSpill: function onSpill(_ref3) {
    var dragEl = _ref3.dragEl,
        putSortable = _ref3.putSortable;
    this.sortable.captureAnimationState();

    if (putSortable) {
      putSortable.captureAnimationState();
    }

    var nextSibling = getChild(this.sortable.el, this.startIndex, this.options);

    if (nextSibling) {
      this.sortable.el.insertBefore(dragEl, nextSibling);
    } else {
      this.sortable.el.appendChild(dragEl);
    }

    this.sortable.animateAll();

    if (putSortable) {
      putSortable.animateAll();
    }
  },
  drop: drop
};

_extends(Revert, {
  pluginName: 'revertOnSpill'
});

function Remove() {}

Remove.prototype = {
  onSpill: function onSpill(_ref4) {
    var dragEl = _ref4.dragEl,
        putSortable = _ref4.putSortable;
    var parentSortable = putSortable || this.sortable;
    parentSortable.captureAnimationState();
    dragEl.parentNode && dragEl.parentNode.removeChild(dragEl);
    parentSortable.animateAll();
  },
  drop: drop
};

_extends(Remove, {
  pluginName: 'removeOnSpill'
});

var lastSwapEl;

function SwapPlugin() {
  function Swap() {
    this.defaults = {
      swapClass: 'sortable-swap-highlight'
    };
  }

  Swap.prototype = {
    dragStart: function dragStart(_ref) {
      var dragEl = _ref.dragEl;
      lastSwapEl = dragEl;
    },
    dragOverValid: function dragOverValid(_ref2) {
      var completed = _ref2.completed,
          target = _ref2.target,
          onMove = _ref2.onMove,
          activeSortable = _ref2.activeSortable,
          changed = _ref2.changed,
          cancel = _ref2.cancel;
      if (!activeSortable.options.swap) return;
      var el = this.sortable.el,
          options = this.options;

      if (target && target !== el) {
        var prevSwapEl = lastSwapEl;

        if (onMove(target) !== false) {
          toggleClass(target, options.swapClass, true);
          lastSwapEl = target;
        } else {
          lastSwapEl = null;
        }

        if (prevSwapEl && prevSwapEl !== lastSwapEl) {
          toggleClass(prevSwapEl, options.swapClass, false);
        }
      }

      changed();
      completed(true);
      cancel();
    },
    drop: function drop(_ref3) {
      var activeSortable = _ref3.activeSortable,
          putSortable = _ref3.putSortable,
          dragEl = _ref3.dragEl;
      var toSortable = putSortable || this.sortable;
      var options = this.options;
      lastSwapEl && toggleClass(lastSwapEl, options.swapClass, false);

      if (lastSwapEl && (options.swap || putSortable && putSortable.options.swap)) {
        if (dragEl !== lastSwapEl) {
          toSortable.captureAnimationState();
          if (toSortable !== activeSortable) activeSortable.captureAnimationState();
          swapNodes(dragEl, lastSwapEl);
          toSortable.animateAll();
          if (toSortable !== activeSortable) activeSortable.animateAll();
        }
      }
    },
    nulling: function nulling() {
      lastSwapEl = null;
    }
  };
  return _extends(Swap, {
    pluginName: 'swap',
    eventProperties: function eventProperties() {
      return {
        swapItem: lastSwapEl
      };
    }
  });
}

function swapNodes(n1, n2) {
  var p1 = n1.parentNode,
      p2 = n2.parentNode,
      i1,
      i2;
  if (!p1 || !p2 || p1.isEqualNode(n2) || p2.isEqualNode(n1)) return;
  i1 = index(n1);
  i2 = index(n2);

  if (p1.isEqualNode(p2) && i1 < i2) {
    i2++;
  }

  p1.insertBefore(n2, p1.children[i1]);
  p2.insertBefore(n1, p2.children[i2]);
}

var multiDragElements = [],
    multiDragClones = [],
    lastMultiDragSelect,
    // for selection with modifier key down (SHIFT)
multiDragSortable,
    initialFolding = false,
    // Initial multi-drag fold when drag started
folding = false,
    // Folding any other time
dragStarted = false,
    dragEl$1,
    clonesFromRect,
    clonesHidden;

function MultiDragPlugin() {
  function MultiDrag(sortable) {
    // Bind all private methods
    for (var fn in this) {
      if (fn.charAt(0) === '_' && typeof this[fn] === 'function') {
        this[fn] = this[fn].bind(this);
      }
    }

    if (!sortable.options.avoidImplicitDeselect) {
      if (sortable.options.supportPointer) {
        on(document, 'pointerup', this._deselectMultiDrag);
      } else {
        on(document, 'mouseup', this._deselectMultiDrag);
        on(document, 'touchend', this._deselectMultiDrag);
      }
    }

    on(document, 'keydown', this._checkKeyDown);
    on(document, 'keyup', this._checkKeyUp);
    this.defaults = {
      selectedClass: 'sortable-selected',
      multiDragKey: null,
      avoidImplicitDeselect: false,
      setData: function setData(dataTransfer, dragEl) {
        var data = '';

        if (multiDragElements.length && multiDragSortable === sortable) {
          multiDragElements.forEach(function (multiDragElement, i) {
            data += (!i ? '' : ', ') + multiDragElement.textContent;
          });
        } else {
          data = dragEl.textContent;
        }

        dataTransfer.setData('Text', data);
      }
    };
  }

  MultiDrag.prototype = {
    multiDragKeyDown: false,
    isMultiDrag: false,
    delayStartGlobal: function delayStartGlobal(_ref) {
      var dragged = _ref.dragEl;
      dragEl$1 = dragged;
    },
    delayEnded: function delayEnded() {
      this.isMultiDrag = ~multiDragElements.indexOf(dragEl$1);
    },
    setupClone: function setupClone(_ref2) {
      var sortable = _ref2.sortable,
          cancel = _ref2.cancel;
      if (!this.isMultiDrag) return;

      for (var i = 0; i < multiDragElements.length; i++) {
        multiDragClones.push(clone(multiDragElements[i]));
        multiDragClones[i].sortableIndex = multiDragElements[i].sortableIndex;
        multiDragClones[i].draggable = false;
        multiDragClones[i].style['will-change'] = '';
        toggleClass(multiDragClones[i], this.options.selectedClass, false);
        multiDragElements[i] === dragEl$1 && toggleClass(multiDragClones[i], this.options.chosenClass, false);
      }

      sortable._hideClone();

      cancel();
    },
    clone: function clone(_ref3) {
      var sortable = _ref3.sortable,
          rootEl = _ref3.rootEl,
          dispatchSortableEvent = _ref3.dispatchSortableEvent,
          cancel = _ref3.cancel;
      if (!this.isMultiDrag) return;

      if (!this.options.removeCloneOnHide) {
        if (multiDragElements.length && multiDragSortable === sortable) {
          insertMultiDragClones(true, rootEl);
          dispatchSortableEvent('clone');
          cancel();
        }
      }
    },
    showClone: function showClone(_ref4) {
      var cloneNowShown = _ref4.cloneNowShown,
          rootEl = _ref4.rootEl,
          cancel = _ref4.cancel;
      if (!this.isMultiDrag) return;
      insertMultiDragClones(false, rootEl);
      multiDragClones.forEach(function (clone) {
        css(clone, 'display', '');
      });
      cloneNowShown();
      clonesHidden = false;
      cancel();
    },
    hideClone: function hideClone(_ref5) {
      var _this = this;

      var sortable = _ref5.sortable,
          cloneNowHidden = _ref5.cloneNowHidden,
          cancel = _ref5.cancel;
      if (!this.isMultiDrag) return;
      multiDragClones.forEach(function (clone) {
        css(clone, 'display', 'none');

        if (_this.options.removeCloneOnHide && clone.parentNode) {
          clone.parentNode.removeChild(clone);
        }
      });
      cloneNowHidden();
      clonesHidden = true;
      cancel();
    },
    dragStartGlobal: function dragStartGlobal(_ref6) {
      var sortable = _ref6.sortable;

      if (!this.isMultiDrag && multiDragSortable) {
        multiDragSortable.multiDrag._deselectMultiDrag();
      }

      multiDragElements.forEach(function (multiDragElement) {
        multiDragElement.sortableIndex = index(multiDragElement);
      }); // Sort multi-drag elements

      multiDragElements = multiDragElements.sort(function (a, b) {
        return a.sortableIndex - b.sortableIndex;
      });
      dragStarted = true;
    },
    dragStarted: function dragStarted(_ref7) {
      var _this2 = this;

      var sortable = _ref7.sortable;
      if (!this.isMultiDrag) return;

      if (this.options.sort) {
        // Capture rects,
        // hide multi drag elements (by positioning them absolute),
        // set multi drag elements rects to dragRect,
        // show multi drag elements,
        // animate to rects,
        // unset rects & remove from DOM
        sortable.captureAnimationState();

        if (this.options.animation) {
          multiDragElements.forEach(function (multiDragElement) {
            if (multiDragElement === dragEl$1) return;
            css(multiDragElement, 'position', 'absolute');
          });
          var dragRect = getRect(dragEl$1, false, true, true);
          multiDragElements.forEach(function (multiDragElement) {
            if (multiDragElement === dragEl$1) return;
            setRect(multiDragElement, dragRect);
          });
          folding = true;
          initialFolding = true;
        }
      }

      sortable.animateAll(function () {
        folding = false;
        initialFolding = false;

        if (_this2.options.animation) {
          multiDragElements.forEach(function (multiDragElement) {
            unsetRect(multiDragElement);
          });
        } // Remove all auxiliary multidrag items from el, if sorting enabled


        if (_this2.options.sort) {
          removeMultiDragElements();
        }
      });
    },
    dragOver: function dragOver(_ref8) {
      var target = _ref8.target,
          completed = _ref8.completed,
          cancel = _ref8.cancel;

      if (folding && ~multiDragElements.indexOf(target)) {
        completed(false);
        cancel();
      }
    },
    revert: function revert(_ref9) {
      var fromSortable = _ref9.fromSortable,
          rootEl = _ref9.rootEl,
          sortable = _ref9.sortable,
          dragRect = _ref9.dragRect;

      if (multiDragElements.length > 1) {
        // Setup unfold animation
        multiDragElements.forEach(function (multiDragElement) {
          sortable.addAnimationState({
            target: multiDragElement,
            rect: folding ? getRect(multiDragElement) : dragRect
          });
          unsetRect(multiDragElement);
          multiDragElement.fromRect = dragRect;
          fromSortable.removeAnimationState(multiDragElement);
        });
        folding = false;
        insertMultiDragElements(!this.options.removeCloneOnHide, rootEl);
      }
    },
    dragOverCompleted: function dragOverCompleted(_ref10) {
      var sortable = _ref10.sortable,
          isOwner = _ref10.isOwner,
          insertion = _ref10.insertion,
          activeSortable = _ref10.activeSortable,
          parentEl = _ref10.parentEl,
          putSortable = _ref10.putSortable;
      var options = this.options;

      if (insertion) {
        // Clones must be hidden before folding animation to capture dragRectAbsolute properly
        if (isOwner) {
          activeSortable._hideClone();
        }

        initialFolding = false; // If leaving sort:false root, or already folding - Fold to new location

        if (options.animation && multiDragElements.length > 1 && (folding || !isOwner && !activeSortable.options.sort && !putSortable)) {
          // Fold: Set all multi drag elements's rects to dragEl's rect when multi-drag elements are invisible
          var dragRectAbsolute = getRect(dragEl$1, false, true, true);
          multiDragElements.forEach(function (multiDragElement) {
            if (multiDragElement === dragEl$1) return;
            setRect(multiDragElement, dragRectAbsolute); // Move element(s) to end of parentEl so that it does not interfere with multi-drag clones insertion if they are inserted
            // while folding, and so that we can capture them again because old sortable will no longer be fromSortable

            parentEl.appendChild(multiDragElement);
          });
          folding = true;
        } // Clones must be shown (and check to remove multi drags) after folding when interfering multiDragElements are moved out


        if (!isOwner) {
          // Only remove if not folding (folding will remove them anyways)
          if (!folding) {
            removeMultiDragElements();
          }

          if (multiDragElements.length > 1) {
            var clonesHiddenBefore = clonesHidden;

            activeSortable._showClone(sortable); // Unfold animation for clones if showing from hidden


            if (activeSortable.options.animation && !clonesHidden && clonesHiddenBefore) {
              multiDragClones.forEach(function (clone) {
                activeSortable.addAnimationState({
                  target: clone,
                  rect: clonesFromRect
                });
                clone.fromRect = clonesFromRect;
                clone.thisAnimationDuration = null;
              });
            }
          } else {
            activeSortable._showClone(sortable);
          }
        }
      }
    },
    dragOverAnimationCapture: function dragOverAnimationCapture(_ref11) {
      var dragRect = _ref11.dragRect,
          isOwner = _ref11.isOwner,
          activeSortable = _ref11.activeSortable;
      multiDragElements.forEach(function (multiDragElement) {
        multiDragElement.thisAnimationDuration = null;
      });

      if (activeSortable.options.animation && !isOwner && activeSortable.multiDrag.isMultiDrag) {
        clonesFromRect = _extends({}, dragRect);
        var dragMatrix = matrix(dragEl$1, true);
        clonesFromRect.top -= dragMatrix.f;
        clonesFromRect.left -= dragMatrix.e;
      }
    },
    dragOverAnimationComplete: function dragOverAnimationComplete() {
      if (folding) {
        folding = false;
        removeMultiDragElements();
      }
    },
    drop: function drop(_ref12) {
      var evt = _ref12.originalEvent,
          rootEl = _ref12.rootEl,
          parentEl = _ref12.parentEl,
          sortable = _ref12.sortable,
          dispatchSortableEvent = _ref12.dispatchSortableEvent,
          oldIndex = _ref12.oldIndex,
          putSortable = _ref12.putSortable;
      var toSortable = putSortable || this.sortable;
      if (!evt) return;
      var options = this.options,
          children = parentEl.children; // Multi-drag selection

      if (!dragStarted) {
        if (options.multiDragKey && !this.multiDragKeyDown) {
          this._deselectMultiDrag();
        }

        toggleClass(dragEl$1, options.selectedClass, !~multiDragElements.indexOf(dragEl$1));

        if (!~multiDragElements.indexOf(dragEl$1)) {
          multiDragElements.push(dragEl$1);
          dispatchEvent({
            sortable: sortable,
            rootEl: rootEl,
            name: 'select',
            targetEl: dragEl$1,
            originalEvent: evt
          }); // Modifier activated, select from last to dragEl

          if (evt.shiftKey && lastMultiDragSelect && sortable.el.contains(lastMultiDragSelect)) {
            var lastIndex = index(lastMultiDragSelect),
                currentIndex = index(dragEl$1);

            if (~lastIndex && ~currentIndex && lastIndex !== currentIndex) {
              // Must include lastMultiDragSelect (select it), in case modified selection from no selection
              // (but previous selection existed)
              var n, i;

              if (currentIndex > lastIndex) {
                i = lastIndex;
                n = currentIndex;
              } else {
                i = currentIndex;
                n = lastIndex + 1;
              }

              for (; i < n; i++) {
                if (~multiDragElements.indexOf(children[i])) continue;
                toggleClass(children[i], options.selectedClass, true);
                multiDragElements.push(children[i]);
                dispatchEvent({
                  sortable: sortable,
                  rootEl: rootEl,
                  name: 'select',
                  targetEl: children[i],
                  originalEvent: evt
                });
              }
            }
          } else {
            lastMultiDragSelect = dragEl$1;
          }

          multiDragSortable = toSortable;
        } else {
          multiDragElements.splice(multiDragElements.indexOf(dragEl$1), 1);
          lastMultiDragSelect = null;
          dispatchEvent({
            sortable: sortable,
            rootEl: rootEl,
            name: 'deselect',
            targetEl: dragEl$1,
            originalEvent: evt
          });
        }
      } // Multi-drag drop


      if (dragStarted && this.isMultiDrag) {
        folding = false; // Do not "unfold" after around dragEl if reverted

        if ((parentEl[expando].options.sort || parentEl !== rootEl) && multiDragElements.length > 1) {
          var dragRect = getRect(dragEl$1),
              multiDragIndex = index(dragEl$1, ':not(.' + this.options.selectedClass + ')');
          if (!initialFolding && options.animation) dragEl$1.thisAnimationDuration = null;
          toSortable.captureAnimationState();

          if (!initialFolding) {
            if (options.animation) {
              dragEl$1.fromRect = dragRect;
              multiDragElements.forEach(function (multiDragElement) {
                multiDragElement.thisAnimationDuration = null;

                if (multiDragElement !== dragEl$1) {
                  var rect = folding ? getRect(multiDragElement) : dragRect;
                  multiDragElement.fromRect = rect; // Prepare unfold animation

                  toSortable.addAnimationState({
                    target: multiDragElement,
                    rect: rect
                  });
                }
              });
            } // Multi drag elements are not necessarily removed from the DOM on drop, so to reinsert
            // properly they must all be removed


            removeMultiDragElements();
            multiDragElements.forEach(function (multiDragElement) {
              if (children[multiDragIndex]) {
                parentEl.insertBefore(multiDragElement, children[multiDragIndex]);
              } else {
                parentEl.appendChild(multiDragElement);
              }

              multiDragIndex++;
            }); // If initial folding is done, the elements may have changed position because they are now
            // unfolding around dragEl, even though dragEl may not have his index changed, so update event
            // must be fired here as Sortable will not.

            if (oldIndex === index(dragEl$1)) {
              var update = false;
              multiDragElements.forEach(function (multiDragElement) {
                if (multiDragElement.sortableIndex !== index(multiDragElement)) {
                  update = true;
                  return;
                }
              });

              if (update) {
                dispatchSortableEvent('update');
              }
            }
          } // Must be done after capturing individual rects (scroll bar)


          multiDragElements.forEach(function (multiDragElement) {
            unsetRect(multiDragElement);
          });
          toSortable.animateAll();
        }

        multiDragSortable = toSortable;
      } // Remove clones if necessary


      if (rootEl === parentEl || putSortable && putSortable.lastPutMode !== 'clone') {
        multiDragClones.forEach(function (clone) {
          clone.parentNode && clone.parentNode.removeChild(clone);
        });
      }
    },
    nullingGlobal: function nullingGlobal() {
      this.isMultiDrag = dragStarted = false;
      multiDragClones.length = 0;
    },
    destroyGlobal: function destroyGlobal() {
      this._deselectMultiDrag();

      off(document, 'pointerup', this._deselectMultiDrag);
      off(document, 'mouseup', this._deselectMultiDrag);
      off(document, 'touchend', this._deselectMultiDrag);
      off(document, 'keydown', this._checkKeyDown);
      off(document, 'keyup', this._checkKeyUp);
    },
    _deselectMultiDrag: function _deselectMultiDrag(evt) {
      if (typeof dragStarted !== "undefined" && dragStarted) return; // Only deselect if selection is in this sortable

      if (multiDragSortable !== this.sortable) return; // Only deselect if target is not item in this sortable

      if (evt && closest(evt.target, this.options.draggable, this.sortable.el, false)) return; // Only deselect if left click

      if (evt && evt.button !== 0) return;

      while (multiDragElements.length) {
        var el = multiDragElements[0];
        toggleClass(el, this.options.selectedClass, false);
        multiDragElements.shift();
        dispatchEvent({
          sortable: this.sortable,
          rootEl: this.sortable.el,
          name: 'deselect',
          targetEl: el,
          originalEvent: evt
        });
      }
    },
    _checkKeyDown: function _checkKeyDown(evt) {
      if (evt.key === this.options.multiDragKey) {
        this.multiDragKeyDown = true;
      }
    },
    _checkKeyUp: function _checkKeyUp(evt) {
      if (evt.key === this.options.multiDragKey) {
        this.multiDragKeyDown = false;
      }
    }
  };
  return _extends(MultiDrag, {
    // Static methods & properties
    pluginName: 'multiDrag',
    utils: {
      /**
       * Selects the provided multi-drag item
       * @param  {HTMLElement} el    The element to be selected
       */
      select: function select(el) {
        var sortable = el.parentNode[expando];
        if (!sortable || !sortable.options.multiDrag || ~multiDragElements.indexOf(el)) return;

        if (multiDragSortable && multiDragSortable !== sortable) {
          multiDragSortable.multiDrag._deselectMultiDrag();

          multiDragSortable = sortable;
        }

        toggleClass(el, sortable.options.selectedClass, true);
        multiDragElements.push(el);
      },

      /**
       * Deselects the provided multi-drag item
       * @param  {HTMLElement} el    The element to be deselected
       */
      deselect: function deselect(el) {
        var sortable = el.parentNode[expando],
            index = multiDragElements.indexOf(el);
        if (!sortable || !sortable.options.multiDrag || !~index) return;
        toggleClass(el, sortable.options.selectedClass, false);
        multiDragElements.splice(index, 1);
      }
    },
    eventProperties: function eventProperties() {
      var _this3 = this;

      var oldIndicies = [],
          newIndicies = [];
      multiDragElements.forEach(function (multiDragElement) {
        oldIndicies.push({
          multiDragElement: multiDragElement,
          index: multiDragElement.sortableIndex
        }); // multiDragElements will already be sorted if folding

        var newIndex;

        if (folding && multiDragElement !== dragEl$1) {
          newIndex = -1;
        } else if (folding) {
          newIndex = index(multiDragElement, ':not(.' + _this3.options.selectedClass + ')');
        } else {
          newIndex = index(multiDragElement);
        }

        newIndicies.push({
          multiDragElement: multiDragElement,
          index: newIndex
        });
      });
      return {
        items: _toConsumableArray(multiDragElements),
        clones: [].concat(multiDragClones),
        oldIndicies: oldIndicies,
        newIndicies: newIndicies
      };
    },
    optionListeners: {
      multiDragKey: function multiDragKey(key) {
        key = key.toLowerCase();

        if (key === 'ctrl') {
          key = 'Control';
        } else if (key.length > 1) {
          key = key.charAt(0).toUpperCase() + key.substr(1);
        }

        return key;
      }
    }
  });
}

function insertMultiDragElements(clonesInserted, rootEl) {
  multiDragElements.forEach(function (multiDragElement, i) {
    var target = rootEl.children[multiDragElement.sortableIndex + (clonesInserted ? Number(i) : 0)];

    if (target) {
      rootEl.insertBefore(multiDragElement, target);
    } else {
      rootEl.appendChild(multiDragElement);
    }
  });
}
/**
 * Insert multi-drag clones
 * @param  {[Boolean]} elementsInserted  Whether the multi-drag elements are inserted
 * @param  {HTMLElement} rootEl
 */


function insertMultiDragClones(elementsInserted, rootEl) {
  multiDragClones.forEach(function (clone, i) {
    var target = rootEl.children[clone.sortableIndex + (elementsInserted ? Number(i) : 0)];

    if (target) {
      rootEl.insertBefore(clone, target);
    } else {
      rootEl.appendChild(clone);
    }
  });
}

function removeMultiDragElements() {
  multiDragElements.forEach(function (multiDragElement) {
    if (multiDragElement === dragEl$1) return;
    multiDragElement.parentNode && multiDragElement.parentNode.removeChild(multiDragElement);
  });
}

Sortable.mount(new AutoScrollPlugin());
Sortable.mount(Remove, Revert);

/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (Sortable);



/***/ }),

/***/ "./css/betterbuffsbar.css":
/*!********************************!*\
  !*** ./css/betterbuffsbar.css ***!
  \********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _node_modules_style_loader_dist_runtime_injectStylesIntoStyleTag_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! !../../node_modules/style-loader/dist/runtime/injectStylesIntoStyleTag.js */ "../node_modules/style-loader/dist/runtime/injectStylesIntoStyleTag.js");
/* harmony import */ var _node_modules_style_loader_dist_runtime_injectStylesIntoStyleTag_js__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_node_modules_style_loader_dist_runtime_injectStylesIntoStyleTag_js__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _node_modules_style_loader_dist_runtime_styleDomAPI_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! !../../node_modules/style-loader/dist/runtime/styleDomAPI.js */ "../node_modules/style-loader/dist/runtime/styleDomAPI.js");
/* harmony import */ var _node_modules_style_loader_dist_runtime_styleDomAPI_js__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(_node_modules_style_loader_dist_runtime_styleDomAPI_js__WEBPACK_IMPORTED_MODULE_1__);
/* harmony import */ var _node_modules_style_loader_dist_runtime_insertBySelector_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! !../../node_modules/style-loader/dist/runtime/insertBySelector.js */ "../node_modules/style-loader/dist/runtime/insertBySelector.js");
/* harmony import */ var _node_modules_style_loader_dist_runtime_insertBySelector_js__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(_node_modules_style_loader_dist_runtime_insertBySelector_js__WEBPACK_IMPORTED_MODULE_2__);
/* harmony import */ var _node_modules_style_loader_dist_runtime_setAttributesWithoutAttributes_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! !../../node_modules/style-loader/dist/runtime/setAttributesWithoutAttributes.js */ "../node_modules/style-loader/dist/runtime/setAttributesWithoutAttributes.js");
/* harmony import */ var _node_modules_style_loader_dist_runtime_setAttributesWithoutAttributes_js__WEBPACK_IMPORTED_MODULE_3___default = /*#__PURE__*/__webpack_require__.n(_node_modules_style_loader_dist_runtime_setAttributesWithoutAttributes_js__WEBPACK_IMPORTED_MODULE_3__);
/* harmony import */ var _node_modules_style_loader_dist_runtime_insertStyleElement_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! !../../node_modules/style-loader/dist/runtime/insertStyleElement.js */ "../node_modules/style-loader/dist/runtime/insertStyleElement.js");
/* harmony import */ var _node_modules_style_loader_dist_runtime_insertStyleElement_js__WEBPACK_IMPORTED_MODULE_4___default = /*#__PURE__*/__webpack_require__.n(_node_modules_style_loader_dist_runtime_insertStyleElement_js__WEBPACK_IMPORTED_MODULE_4__);
/* harmony import */ var _node_modules_style_loader_dist_runtime_styleTagTransform_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! !../../node_modules/style-loader/dist/runtime/styleTagTransform.js */ "../node_modules/style-loader/dist/runtime/styleTagTransform.js");
/* harmony import */ var _node_modules_style_loader_dist_runtime_styleTagTransform_js__WEBPACK_IMPORTED_MODULE_5___default = /*#__PURE__*/__webpack_require__.n(_node_modules_style_loader_dist_runtime_styleTagTransform_js__WEBPACK_IMPORTED_MODULE_5__);
/* harmony import */ var _node_modules_css_loader_dist_cjs_js_betterbuffsbar_css__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! !!../../node_modules/css-loader/dist/cjs.js!./betterbuffsbar.css */ "../node_modules/css-loader/dist/cjs.js!./css/betterbuffsbar.css");

      
      
      
      
      
      
      
      
      

var options = {};

options.styleTagTransform = (_node_modules_style_loader_dist_runtime_styleTagTransform_js__WEBPACK_IMPORTED_MODULE_5___default());
options.setAttributes = (_node_modules_style_loader_dist_runtime_setAttributesWithoutAttributes_js__WEBPACK_IMPORTED_MODULE_3___default());

      options.insert = _node_modules_style_loader_dist_runtime_insertBySelector_js__WEBPACK_IMPORTED_MODULE_2___default().bind(null, "head");
    
options.domAPI = (_node_modules_style_loader_dist_runtime_styleDomAPI_js__WEBPACK_IMPORTED_MODULE_1___default());
options.insertStyleElement = (_node_modules_style_loader_dist_runtime_insertStyleElement_js__WEBPACK_IMPORTED_MODULE_4___default());

var update = _node_modules_style_loader_dist_runtime_injectStylesIntoStyleTag_js__WEBPACK_IMPORTED_MODULE_0___default()(_node_modules_css_loader_dist_cjs_js_betterbuffsbar_css__WEBPACK_IMPORTED_MODULE_6__["default"], options);




       /* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (_node_modules_css_loader_dist_cjs_js_betterbuffsbar_css__WEBPACK_IMPORTED_MODULE_6__["default"] && _node_modules_css_loader_dist_cjs_js_betterbuffsbar_css__WEBPACK_IMPORTED_MODULE_6__["default"].locals ? _node_modules_css_loader_dist_cjs_js_betterbuffsbar_css__WEBPACK_IMPORTED_MODULE_6__["default"].locals : undefined);


/***/ }),

/***/ "../node_modules/style-loader/dist/runtime/injectStylesIntoStyleTag.js":
/*!*****************************************************************************!*\
  !*** ../node_modules/style-loader/dist/runtime/injectStylesIntoStyleTag.js ***!
  \*****************************************************************************/
/***/ ((module) => {

"use strict";


var stylesInDOM = [];
function getIndexByIdentifier(identifier) {
  var result = -1;
  for (var i = 0; i < stylesInDOM.length; i++) {
    if (stylesInDOM[i].identifier === identifier) {
      result = i;
      break;
    }
  }
  return result;
}
function modulesToDom(list, options) {
  var idCountMap = {};
  var identifiers = [];
  for (var i = 0; i < list.length; i++) {
    var item = list[i];
    var id = options.base ? item[0] + options.base : item[0];
    var count = idCountMap[id] || 0;
    var identifier = "".concat(id, " ").concat(count);
    idCountMap[id] = count + 1;
    var indexByIdentifier = getIndexByIdentifier(identifier);
    var obj = {
      css: item[1],
      media: item[2],
      sourceMap: item[3],
      supports: item[4],
      layer: item[5]
    };
    if (indexByIdentifier !== -1) {
      stylesInDOM[indexByIdentifier].references++;
      stylesInDOM[indexByIdentifier].updater(obj);
    } else {
      var updater = addElementStyle(obj, options);
      options.byIndex = i;
      stylesInDOM.splice(i, 0, {
        identifier: identifier,
        updater: updater,
        references: 1
      });
    }
    identifiers.push(identifier);
  }
  return identifiers;
}
function addElementStyle(obj, options) {
  var api = options.domAPI(options);
  api.update(obj);
  var updater = function updater(newObj) {
    if (newObj) {
      if (newObj.css === obj.css && newObj.media === obj.media && newObj.sourceMap === obj.sourceMap && newObj.supports === obj.supports && newObj.layer === obj.layer) {
        return;
      }
      api.update(obj = newObj);
    } else {
      api.remove();
    }
  };
  return updater;
}
module.exports = function (list, options) {
  options = options || {};
  list = list || [];
  var lastIdentifiers = modulesToDom(list, options);
  return function update(newList) {
    newList = newList || [];
    for (var i = 0; i < lastIdentifiers.length; i++) {
      var identifier = lastIdentifiers[i];
      var index = getIndexByIdentifier(identifier);
      stylesInDOM[index].references--;
    }
    var newLastIdentifiers = modulesToDom(newList, options);
    for (var _i = 0; _i < lastIdentifiers.length; _i++) {
      var _identifier = lastIdentifiers[_i];
      var _index = getIndexByIdentifier(_identifier);
      if (stylesInDOM[_index].references === 0) {
        stylesInDOM[_index].updater();
        stylesInDOM.splice(_index, 1);
      }
    }
    lastIdentifiers = newLastIdentifiers;
  };
};

/***/ }),

/***/ "../node_modules/style-loader/dist/runtime/insertBySelector.js":
/*!*********************************************************************!*\
  !*** ../node_modules/style-loader/dist/runtime/insertBySelector.js ***!
  \*********************************************************************/
/***/ ((module) => {

"use strict";


var memo = {};

/* istanbul ignore next  */
function getTarget(target) {
  if (typeof memo[target] === "undefined") {
    var styleTarget = document.querySelector(target);

    // Special case to return head of iframe instead of iframe itself
    if (window.HTMLIFrameElement && styleTarget instanceof window.HTMLIFrameElement) {
      try {
        // This will throw an exception if access to iframe is blocked
        // due to cross-origin restrictions
        styleTarget = styleTarget.contentDocument.head;
      } catch (e) {
        // istanbul ignore next
        styleTarget = null;
      }
    }
    memo[target] = styleTarget;
  }
  return memo[target];
}

/* istanbul ignore next  */
function insertBySelector(insert, style) {
  var target = getTarget(insert);
  if (!target) {
    throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");
  }
  target.appendChild(style);
}
module.exports = insertBySelector;

/***/ }),

/***/ "../node_modules/style-loader/dist/runtime/insertStyleElement.js":
/*!***********************************************************************!*\
  !*** ../node_modules/style-loader/dist/runtime/insertStyleElement.js ***!
  \***********************************************************************/
/***/ ((module) => {

"use strict";


/* istanbul ignore next  */
function insertStyleElement(options) {
  var element = document.createElement("style");
  options.setAttributes(element, options.attributes);
  options.insert(element, options.options);
  return element;
}
module.exports = insertStyleElement;

/***/ }),

/***/ "../node_modules/style-loader/dist/runtime/setAttributesWithoutAttributes.js":
/*!***********************************************************************************!*\
  !*** ../node_modules/style-loader/dist/runtime/setAttributesWithoutAttributes.js ***!
  \***********************************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";


/* istanbul ignore next  */
function setAttributesWithoutAttributes(styleElement) {
  var nonce =  true ? __webpack_require__.nc : 0;
  if (nonce) {
    styleElement.setAttribute("nonce", nonce);
  }
}
module.exports = setAttributesWithoutAttributes;

/***/ }),

/***/ "../node_modules/style-loader/dist/runtime/styleDomAPI.js":
/*!****************************************************************!*\
  !*** ../node_modules/style-loader/dist/runtime/styleDomAPI.js ***!
  \****************************************************************/
/***/ ((module) => {

"use strict";


/* istanbul ignore next  */
function apply(styleElement, options, obj) {
  var css = "";
  if (obj.supports) {
    css += "@supports (".concat(obj.supports, ") {");
  }
  if (obj.media) {
    css += "@media ".concat(obj.media, " {");
  }
  var needLayer = typeof obj.layer !== "undefined";
  if (needLayer) {
    css += "@layer".concat(obj.layer.length > 0 ? " ".concat(obj.layer) : "", " {");
  }
  css += obj.css;
  if (needLayer) {
    css += "}";
  }
  if (obj.media) {
    css += "}";
  }
  if (obj.supports) {
    css += "}";
  }
  var sourceMap = obj.sourceMap;
  if (sourceMap && typeof btoa !== "undefined") {
    css += "\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(sourceMap)))), " */");
  }

  // For old IE
  /* istanbul ignore if  */
  options.styleTagTransform(css, styleElement, options.options);
}
function removeStyleElement(styleElement) {
  // istanbul ignore if
  if (styleElement.parentNode === null) {
    return false;
  }
  styleElement.parentNode.removeChild(styleElement);
}

/* istanbul ignore next  */
function domAPI(options) {
  if (typeof document === "undefined") {
    return {
      update: function update() {},
      remove: function remove() {}
    };
  }
  var styleElement = options.insertStyleElement(options);
  return {
    update: function update(obj) {
      apply(styleElement, options, obj);
    },
    remove: function remove() {
      removeStyleElement(styleElement);
    }
  };
}
module.exports = domAPI;

/***/ }),

/***/ "../node_modules/style-loader/dist/runtime/styleTagTransform.js":
/*!**********************************************************************!*\
  !*** ../node_modules/style-loader/dist/runtime/styleTagTransform.js ***!
  \**********************************************************************/
/***/ ((module) => {

"use strict";


/* istanbul ignore next  */
function styleTagTransform(css, styleElement) {
  if (styleElement.styleSheet) {
    styleElement.styleSheet.cssText = css;
  } else {
    while (styleElement.firstChild) {
      styleElement.removeChild(styleElement.firstChild);
    }
    styleElement.appendChild(document.createTextNode(css));
  }
}
module.exports = styleTagTransform;

/***/ }),

/***/ "./a1sauce.ts":
/*!********************!*\
  !*** ./a1sauce.ts ***!
  \********************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   createButton: () => (/* binding */ createButton),
/* harmony export */   createCheckboxSetting: () => (/* binding */ createCheckboxSetting),
/* harmony export */   createDropdownSetting: () => (/* binding */ createDropdownSetting),
/* harmony export */   createHeading: () => (/* binding */ createHeading),
/* harmony export */   createNumberSetting: () => (/* binding */ createNumberSetting),
/* harmony export */   createProfileManager: () => (/* binding */ createProfileManager),
/* harmony export */   createRangeSetting: () => (/* binding */ createRangeSetting),
/* harmony export */   createSeperator: () => (/* binding */ createSeperator),
/* harmony export */   createSmallText: () => (/* binding */ createSmallText),
/* harmony export */   createText: () => (/* binding */ createText),
/* harmony export */   createTextSetting: () => (/* binding */ createTextSetting),
/* harmony export */   getSetting: () => (/* binding */ getSetting),
/* harmony export */   loadSettings: () => (/* binding */ loadSettings),
/* harmony export */   setDefaultSettings: () => (/* binding */ setDefaultSettings),
/* harmony export */   settingsExist: () => (/* binding */ settingsExist),
/* harmony export */   updateSetting: () => (/* binding */ updateSetting)
/* harmony export */ });
// TODO: Figure out why I can't just import { default as config } from './appconfig.json';
var config = {
    appName: 'betterBuffBar',
};
function createHeading(size, content) {
    var header = document.createElement(size);
    header.innerHTML = content;
    return header;
}
function createText(content) {
    var text = document.createElement('p');
    text.innerHTML = content;
    return text;
}
function createSmallText(content) {
    var text = document.createElement('small');
    text.innerHTML = content;
    return text;
}
function createSeperator() {
    return document.createElement('hr');
}
function createButton(content, fn, options) {
    var _a = options.classes, classes = _a === void 0 ? options.classes : _a;
    var button = document.createElement('button');
    button.innerHTML = content;
    button.classList.add(classes ? classes : 'button');
    button.addEventListener('click', function () {
        fn();
    });
    return button;
}
function createDropdownSetting(name, description, defaultValue, options) {
    var select = createDropdown(name, defaultValue, options);
    var label = createLabel(name, description);
    var container = createFlexContainer('reverse-setting');
    container.appendChild(select);
    container.appendChild(label);
    return container;
}
function createTextSetting(name, description, defaultValue) {
    var input = createInput('text', name, defaultValue);
    var label = createLabel(name, description);
    label.setAttribute('for', name);
    var container = createFlexContainer();
    container.appendChild(input);
    container.appendChild(label);
    return container;
}
function createCheckboxSetting(name, description, defaultValue) {
    var input = createCheckboxInput(name, defaultValue);
    var label = createLabel(name, description);
    var container = createFlexContainer('reverse-setting');
    container.appendChild(input);
    container.appendChild(label);
    container.addEventListener('click', function (e) {
        if (e.target == container) {
            input.checked = !input.checked;
            input.dispatchEvent(new CustomEvent('change', { bubbles: true }));
            updateSetting(name, input.checked);
        }
    });
    return container;
}
function createNumberSetting(name, description, options) {
    var _a, _b, _c;
    if (options === void 0) { options = {}; }
    var _d = options.defaultValue, defaultValue = _d === void 0 ? (_a = options.defaultValue) !== null && _a !== void 0 ? _a : 10 : _d, _e = options.min, min = _e === void 0 ? (_b = options.min) !== null && _b !== void 0 ? _b : 1 : _e, _f = options.max, max = _f === void 0 ? (_c = options.max) !== null && _c !== void 0 ? _c : 20 : _f;
    var input = createInput('number', name, defaultValue);
    input.setAttribute('min', min.toString());
    input.setAttribute('max', max.toString());
    var label = createLabel(name, description);
    var container = createFlexContainer('reverse-setting');
    container.appendChild(input);
    container.appendChild(label);
    return container;
}
function createRangeSetting(name, description, options) {
    var _a, _b, _c, _d;
    if (options === void 0) { options = {}; }
    var _e = options.defaultValue, defaultValue = _e === void 0 ? (_a = options.defaultValue) !== null && _a !== void 0 ? _a : '100' : _e, _f = options.min, min = _f === void 0 ? (_b = options.min) !== null && _b !== void 0 ? _b : 0 : _f, _g = options.max, max = _g === void 0 ? (_c = options.max) !== null && _c !== void 0 ? _c : 100 : _g, _h = options.unit, unit = _h === void 0 ? (_d = options.unit) !== null && _d !== void 0 ? _d : '%' : _h;
    var input = createInput('range', name, defaultValue);
    input.setAttribute('min', min.toString());
    input.setAttribute('max', max.toString());
    var label = createLabel(name, description);
    label.classList.add('full');
    if (getSetting(name) != undefined) {
        input.value = getSetting(name);
    }
    var output = createOutput();
    output.setAttribute('id', "".concat(name, "Output"));
    output.setAttribute('for', name);
    output.innerHTML = input.value + unit;
    output.after(unit);
    var container = createFlexContainer();
    container.classList.add('flex-wrap');
    container.appendChild(label);
    container.appendChild(input);
    container.appendChild(output);
    input.addEventListener('input', function () {
        output.innerHTML = input.value + unit;
    });
    return container;
}
function createProfileManager() {
    function saveProfile() {
        var id = container.querySelector('select').selectedIndex;
        if (id !== 0) {
            var profiles = getSetting('profiles');
            var loadOptions_1 = container.querySelector('select');
            if (!getSetting('profiles')) {
                profiles = [
                    { value: '0', name: 'Select Profile' },
                    { value: 'Melee', name: 'Melee' },
                    { value: 'Ranged', name: 'Ranged' },
                    { value: 'Magic', name: 'Magic' },
                    { value: 'Necromancy', name: 'Necromancy' },
                    { value: 'Hybrid', name: 'Hybrid' },
                ];
                updateSetting('profiles', profiles);
            }
            var name_1 = container.querySelector('input').value;
            profiles[id].name = name_1;
            var data = [];
            var trackedBuffs = localStorage['Buffs'];
            var untrackedBuffs = localStorage['UntrackedBuffs'];
            var settings = JSON.parse(localStorage[config.appName]);
            var profile_data = { trackedBuffs: trackedBuffs, untrackedBuffs: untrackedBuffs, settings: settings };
            data.push(profile_data);
            profiles[id].value = data;
            updateSetting('profiles', profiles);
            var profileOptions_1 = [
                { value: '0', name: 'Select Profile' },
                { value: 'Melee', name: 'Melee' },
                { value: 'Ranged', name: 'Ranged' },
                { value: 'Magic', name: 'Magic' },
                { value: 'Necromancy', name: 'Necromancy' },
                { value: 'Hybrid', name: 'Hybrid' },
            ];
            var savedProfiles_1 = getSetting('profiles');
            savedProfiles_1 === null || savedProfiles_1 === void 0 ? void 0 : savedProfiles_1.forEach(function (profile, index) {
                profileOptions_1[index].value = profile.name;
                profileOptions_1[index].name = profile.name;
            });
            loadOptions_1.parentElement.replaceWith(createDropdownSetting('Profile', '', 'CreateNew', profileOptions_1));
            document
                .querySelector('#Profile')
                .addEventListener('change', function () {
                var name = document.querySelector('.profile-name');
                var dropdown = document.querySelector('#Profile');
                name.value = dropdown.value;
            });
        }
    }
    function loadProfile() {
        var id = container.querySelector('select').selectedIndex;
        if (id !== 0) {
            var data = getSetting('profiles');
            data[id].value.forEach(function (key) {
                localStorage['Buffs'] = key.trackedBuffs;
                localStorage['UntrackedBuffs'] = key.untrackedBuffs;
                Object.keys(key.settings).forEach(function (setting) {
                    if (setting.toString() !== 'profiles') {
                        updateSetting(setting, key.settings[setting]);
                    }
                });
            });
        }
    }
    function deleteProfile() {
        var id = container.querySelector('select').selectedIndex;
        var profiles = getSetting('profiles');
        if (id !== 0) {
            profiles.splice(id, 1);
            updateSetting('profiles', profiles);
        }
        loadOptions.parentElement.replaceWith(createDropdownSetting('Profile', '', 'CreateNew', profiles));
    }
    var profileOptions = [
        { value: '0', name: 'Select Profile' },
        { value: 'Melee', name: 'Melee' },
        { value: 'Ranged', name: 'Ranged' },
        { value: 'Magic', name: 'Magic' },
        { value: 'Necromancy', name: 'Necromancy' },
        { value: 'Hybrid', name: 'Hybrid' },
    ];
    var savedProfiles = getSetting('profiles');
    savedProfiles === null || savedProfiles === void 0 ? void 0 : savedProfiles.forEach(function (profile, index) {
        profileOptions[index].value = profile.name;
        profileOptions[index].name = profile.name;
    });
    var profileHeader = createHeading('h3', 'Profiles [Beta]');
    var profileText = createText('Select a profile and save settings. You can rename the profile using the text field after selecting. To load a profile select the profile and click load.');
    var saveButton = createButton('Save', saveProfile, {
        classes: 'nisbutton',
    });
    var profileName = createInput('text', 'ProfileName', '');
    profileName.classList.add('profile-name');
    var loadOptions = createDropdownSetting('Profile', '', 'Add', profileOptions);
    loadOptions.classList.add('profile-list');
    loadOptions.querySelector('select').selectedIndex = 0;
    var loadButton = createButton('Load', loadProfile, {
        classes: 'nisbutton',
    });
    loadButton.classList.add('load-btn');
    var deleteButton = createButton('Delete Profile', deleteProfile, {
        classes: '',
    });
    var container = createFlexContainer();
    container.classList.remove('flex');
    var endSeperator = createSeperator();
    container.classList.add('flex-wrap');
    container.appendChild(profileHeader);
    container.appendChild(profileText);
    container.appendChild(loadOptions);
    container.appendChild(document.createElement('br'));
    container.appendChild(saveButton);
    container.appendChild(profileName);
    container.appendChild(loadButton);
    //container.appendChild(deleteButton);
    container.appendChild(endSeperator);
    return container;
}
function createLabel(name, description) {
    var label = document.createElement('label');
    label.setAttribute('for', name);
    label.innerHTML = description;
    return label;
}
function createInput(type, name, defaultValue) {
    var _a;
    var input = document.createElement('input');
    input.id = name;
    input.type = type;
    input.dataset.setting = name;
    input.dataset.defaultValue = defaultValue;
    input.value = input.dataset.defaultValue;
    if (getSetting(name)) {
        input.value = (_a = getSetting(name)) !== null && _a !== void 0 ? _a : input.dataset.defaultValue;
    }
    else {
        updateSetting(name, input.dataset.defaultValue);
    }
    input.addEventListener('change', function () {
        if (type == 'text') {
            updateSetting(name, input.value);
        }
        else if (type == 'number' || type == 'range') {
            updateSetting(name, parseInt(input.value, 10));
        }
    });
    return input;
}
function createCheckboxInput(name, defaultValue) {
    var input = document.createElement('input');
    input.id = name;
    input.type = 'checkbox';
    input.dataset.setting = name;
    input.dataset.defaultValue = defaultValue;
    input.checked = defaultValue;
    if (getSetting(name)) {
        input.checked = getSetting(name);
    }
    else {
        updateSetting(name, input.checked);
    }
    input.addEventListener('change', function () {
        updateSetting(name, input.checked);
    });
    return input;
}
function createDropdown(name, defaultValue, options) {
    var select = document.createElement('select');
    select.id = name;
    select.dataset.setting = name;
    select.dataset.defaultValue = defaultValue;
    select.value = defaultValue;
    if (getSetting(name)) {
        select.value = getSetting(name);
    }
    for (var i = 0; i < options.length; i++) {
        var option = document.createElement('option');
        option.value = options[i].value;
        option.text = options[i].name;
        select.appendChild(option);
    }
    if (getSetting(name)) {
        select.value = getSetting(name);
    }
    else {
        updateSetting(name, select.value);
    }
    select.addEventListener('change', function () {
        updateSetting(name, select.value);
    });
    return select;
}
function createOutput() {
    var output = document.createElement('output');
    return output;
}
function createFlexContainer(classes) {
    var container = document.createElement('div');
    container.classList.add('flex');
    container.classList.add('setting');
    if (classes) {
        container.classList.add(classes);
    }
    return container;
}
function setDefaultSettings() {
    var settings = document.querySelectorAll('[data-setting]');
    settings.forEach(function (setting) {
        switch (setting.type) {
            case 'number':
            case 'range':
                updateSetting(setting.dataset.setting, parseInt(setting.dataset.defaultValue, 10));
                break;
            case 'checkbox':
                if (setting.dataset.defaultValue == 'false') {
                    updateSetting(setting.dataset.setting, false);
                }
                else {
                    updateSetting(setting.dataset.setting, true);
                }
                break;
            default:
                updateSetting(setting.dataset.setting, setting.dataset.defaultValue);
        }
    });
}
function loadSettings() {
    var settings = document.querySelectorAll('[data-setting]');
    settings.forEach(function (setting) {
        var _a;
        switch (setting.type) {
            case 'number':
            case 'range':
                setting.value =
                    (_a = getSetting(setting.dataset.setting)) !== null && _a !== void 0 ? _a : setting.dataset.defaultValue;
                break;
            case 'checkbox':
                setting.checked =
                    getSetting(setting.dataset.setting) ||
                        setting.dataset.defaultValue;
                break;
            default:
                setting.value =
                    getSetting(setting.dataset.setting) ||
                        setting.dataset.defaultValue;
        }
    });
}
function settingsExist() {
    if (!localStorage[config.appName]) {
        setDefaultSettings();
    }
    else {
        loadSettings();
    }
}
function getSetting(setting) {
    if (!localStorage[config.appName]) {
        localStorage.setItem(config.appName, JSON.stringify({}));
        setDefaultSettings();
    }
    return JSON.parse(localStorage[config.appName])[setting];
}
function updateSetting(setting, value) {
    if (!localStorage.getItem(config.appName)) {
        localStorage.setItem(config.appName, JSON.stringify({}));
    }
    var save_data = JSON.parse(localStorage[config.appName]);
    save_data[setting] = value;
    localStorage.setItem(config.appName, JSON.stringify(save_data));
}


/***/ }),

/***/ "data:font/opentype;base64,":

  !*** data:font/opentype;base64,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 ***!

/***/ ((module) => {

"use strict";
module.exports = "data:font/opentype;base64,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";

/***/ }),

/***/ "data:image/png;base64,":
/*!******************************!*\
  !*** data:image/png;base64, ***!
  \******************************/
/***/ ((module) => {

"use strict";
module.exports = "data:image/png;base64,";

/***/ }),

/***/ "./appconfig.json":
/*!************************!*\
  !*** ./appconfig.json ***!
  \************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
module.exports = __webpack_require__.p + "appconfig.json";

/***/ }),

/***/ "./asset/buffs/adrenaline_potion.png":
/*!*******************************************!*\
  !*** ./asset/buffs/adrenaline_potion.png ***!
  \*******************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
module.exports = __webpack_require__.p + "adrenaline_potion.png";

/***/ }),

/***/ "./asset/buffs/affliction.png":
/*!************************************!*\
  !*** ./asset/buffs/affliction.png ***!
  \************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
module.exports = __webpack_require__.p + "affliction.png";

/***/ }),

/***/ "./asset/buffs/ancient_elven_ritual_shard.png":
/*!****************************************************!*\
  !*** ./asset/buffs/ancient_elven_ritual_shard.png ***!
  \****************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
module.exports = __webpack_require__.p + "ancient_elven_ritual_shard.png";

/***/ }),

/***/ "./asset/buffs/anguish.png":
/*!*********************************!*\
  !*** ./asset/buffs/anguish.png ***!
  \*********************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
module.exports = __webpack_require__.p + "anguish.png";

/***/ }),

/***/ "./asset/buffs/animate_dead.png":
/*!**************************************!*\
  !*** ./asset/buffs/animate_dead.png ***!
  \**************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
module.exports = __webpack_require__.p + "animate_dead.png";

/***/ }),

/***/ "./asset/buffs/anticipation.png":
/*!**************************************!*\
  !*** ./asset/buffs/anticipation.png ***!
  \**************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
module.exports = __webpack_require__.p + "anticipation.png";

/***/ }),

/***/ "./asset/buffs/antifire.png":
/*!**********************************!*\
  !*** ./asset/buffs/antifire.png ***!
  \**********************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
module.exports = __webpack_require__.p + "antifire.png";

/***/ }),

/***/ "./asset/buffs/aura.png":
/*!******************************!*\
  !*** ./asset/buffs/aura.png ***!
  \******************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
module.exports = __webpack_require__.p + "aura.png";

/***/ }),

/***/ "./asset/buffs/balance_by_force.png":
/*!******************************************!*\
  !*** ./asset/buffs/balance_by_force.png ***!
  \******************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
module.exports = __webpack_require__.p + "balance_by_force.png";

/***/ }),

/***/ "./asset/buffs/barricade.png":
/*!***********************************!*\
  !*** ./asset/buffs/barricade.png ***!
  \***********************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
module.exports = __webpack_require__.p + "barricade.png";

/***/ }),

/***/ "./asset/buffs/berserk.png":
/*!*********************************!*\
  !*** ./asset/buffs/berserk.png ***!
  \*********************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
module.exports = __webpack_require__.p + "berserk.png";

/***/ }),

/***/ "./asset/buffs/blank.png":
/*!*******************************!*\
  !*** ./asset/buffs/blank.png ***!
  \*******************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
module.exports = __webpack_require__.p + "blank.png";

/***/ }),

/***/ "./asset/buffs/bonfire.png":
/*!*********************************!*\
  !*** ./asset/buffs/bonfire.png ***!
  \*********************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
module.exports = __webpack_require__.p + "bonfire.png";

/***/ }),

/***/ "./asset/buffs/crystal_rain.png":
/*!**************************************!*\
  !*** ./asset/buffs/crystal_rain.png ***!
  \**************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
module.exports = __webpack_require__.p + "crystal_rain.png";

/***/ }),

/***/ "./asset/buffs/darkness.png":
/*!**********************************!*\
  !*** ./asset/buffs/darkness.png ***!
  \**********************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
module.exports = __webpack_require__.p + "darkness.png";

/***/ }),

/***/ "./asset/buffs/death_guard.png":
/*!*************************************!*\
  !*** ./asset/buffs/death_guard.png ***!
  \*************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
module.exports = __webpack_require__.p + "death_guard.png";

/***/ }),

/***/ "./asset/buffs/death_mark.png":
/*!************************************!*\
  !*** ./asset/buffs/death_mark.png ***!
  \************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
module.exports = __webpack_require__.p + "death_mark.png";

/***/ }),

/***/ "./asset/buffs/death_spark.png":
/*!*************************************!*\
  !*** ./asset/buffs/death_spark.png ***!
  \*************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
module.exports = __webpack_require__.p + "death_spark.png";

/***/ }),

/***/ "./asset/buffs/deaths_swiftness.png":
/*!******************************************!*\
  !*** ./asset/buffs/deaths_swiftness.png ***!
  \******************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
module.exports = __webpack_require__.p + "deaths_swiftness.png";

/***/ }),

/***/ "./asset/buffs/deflect_magic.png":
/*!***************************************!*\
  !*** ./asset/buffs/deflect_magic.png ***!
  \***************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
module.exports = __webpack_require__.p + "deflect_magic.png";

/***/ }),

/***/ "./asset/buffs/deflect_necromancy.png":
/*!********************************************!*\
  !*** ./asset/buffs/deflect_necromancy.png ***!
  \********************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
module.exports = __webpack_require__.p + "deflect_necromancy.png";

/***/ }),

/***/ "./asset/buffs/deflect_ranged.png":
/*!****************************************!*\
  !*** ./asset/buffs/deflect_ranged.png ***!
  \****************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
module.exports = __webpack_require__.p + "deflect_ranged.png";

/***/ }),

/***/ "./asset/buffs/demon_slayer.png":
/*!**************************************!*\
  !*** ./asset/buffs/demon_slayer.png ***!
  \**************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
module.exports = __webpack_require__.p + "demon_slayer.png";

/***/ }),

/***/ "./asset/buffs/desat/adrenaline_potion-desat.png":
/*!*******************************************************!*\
  !*** ./asset/buffs/desat/adrenaline_potion-desat.png ***!
  \*******************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
module.exports = __webpack_require__.p + "adrenaline_potion-desat.png";

/***/ }),

/***/ "./asset/buffs/desat/ancient_elven_ritual_shard-desat.png":
/*!****************************************************************!*\
  !*** ./asset/buffs/desat/ancient_elven_ritual_shard-desat.png ***!
  \****************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
module.exports = __webpack_require__.p + "ancient_elven_ritual_shard-desat.png";

/***/ }),

/***/ "./asset/buffs/desat/animate_dead-desat.png":
/*!**************************************************!*\
  !*** ./asset/buffs/desat/animate_dead-desat.png ***!
  \**************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
module.exports = __webpack_require__.p + "animate_dead-desat.png";

/***/ }),

/***/ "./asset/buffs/desat/anticipation-desat.png":
/*!**************************************************!*\
  !*** ./asset/buffs/desat/anticipation-desat.png ***!
  \**************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
module.exports = __webpack_require__.p + "anticipation-desat.png";

/***/ }),

/***/ "./asset/buffs/desat/antifire-desat.png":
/*!**********************************************!*\
  !*** ./asset/buffs/desat/antifire-desat.png ***!
  \**********************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
module.exports = __webpack_require__.p + "antifire-desat.png";

/***/ }),

/***/ "./asset/buffs/desat/aura-desat.png":
/*!******************************************!*\
  !*** ./asset/buffs/desat/aura-desat.png ***!
  \******************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
module.exports = __webpack_require__.p + "aura-desat.png";

/***/ }),

/***/ "./asset/buffs/desat/balance_by_force-desat.png":
/*!******************************************************!*\
  !*** ./asset/buffs/desat/balance_by_force-desat.png ***!
  \******************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
module.exports = __webpack_require__.p + "balance_by_force-desat.png";

/***/ }),

/***/ "./asset/buffs/desat/barricade-desat.png":
/*!***********************************************!*\
  !*** ./asset/buffs/desat/barricade-desat.png ***!
  \***********************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
module.exports = __webpack_require__.p + "barricade-desat.png";

/***/ }),

/***/ "./asset/buffs/desat/berserk-desat.png":
/*!*********************************************!*\
  !*** ./asset/buffs/desat/berserk-desat.png ***!
  \*********************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
module.exports = __webpack_require__.p + "berserk-desat.png";

/***/ }),

/***/ "./asset/buffs/desat/bonfire-desat.png":
/*!*********************************************!*\
  !*** ./asset/buffs/desat/bonfire-desat.png ***!
  \*********************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
module.exports = __webpack_require__.p + "bonfire-desat.png";

/***/ }),

/***/ "./asset/buffs/desat/crystal_rain-desat.png":
/*!**************************************************!*\
  !*** ./asset/buffs/desat/crystal_rain-desat.png ***!
  \**************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
module.exports = __webpack_require__.p + "crystal_rain-desat.png";

/***/ }),

/***/ "./asset/buffs/desat/darkness-desat.png":
/*!**********************************************!*\
  !*** ./asset/buffs/desat/darkness-desat.png ***!
  \**********************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
module.exports = __webpack_require__.p + "darkness-desat.png";

/***/ }),

/***/ "./asset/buffs/desat/death_guard-desat.png":
/*!*************************************************!*\
  !*** ./asset/buffs/desat/death_guard-desat.png ***!
  \*************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
module.exports = __webpack_require__.p + "death_guard-desat.png";

/***/ }),

/***/ "./asset/buffs/desat/death_mark-desat.png":
/*!************************************************!*\
  !*** ./asset/buffs/desat/death_mark-desat.png ***!
  \************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
module.exports = __webpack_require__.p + "death_mark-desat.png";

/***/ }),

/***/ "./asset/buffs/desat/death_spark-desat.png":
/*!*************************************************!*\
  !*** ./asset/buffs/desat/death_spark-desat.png ***!
  \*************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
module.exports = __webpack_require__.p + "death_spark-desat.png";

/***/ }),

/***/ "./asset/buffs/desat/deaths_swiftness-desat.png":
/*!******************************************************!*\
  !*** ./asset/buffs/desat/deaths_swiftness-desat.png ***!
  \******************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
module.exports = __webpack_require__.p + "deaths_swiftness-desat.png";

/***/ }),

/***/ "./asset/buffs/desat/demon_slayer-desat.png":
/*!**************************************************!*\
  !*** ./asset/buffs/desat/demon_slayer-desat.png ***!
  \**************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
module.exports = __webpack_require__.p + "demon_slayer-desat.png";

/***/ }),

/***/ "./asset/buffs/desat/devotion-desat.png":
/*!**********************************************!*\
  !*** ./asset/buffs/desat/devotion-desat.png ***!
  \**********************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
module.exports = __webpack_require__.p + "devotion-desat.png";

/***/ }),

/***/ "./asset/buffs/desat/divert-desat.png":
/*!********************************************!*\
  !*** ./asset/buffs/desat/divert-desat.png ***!
  \********************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
module.exports = __webpack_require__.p + "divert-desat.png";

/***/ }),

/***/ "./asset/buffs/desat/dragon_slayer-desat.png":
/*!***************************************************!*\
  !*** ./asset/buffs/desat/dragon_slayer-desat.png ***!
  \***************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
module.exports = __webpack_require__.p + "dragon_slayer-desat.png";

/***/ }),

/***/ "./asset/buffs/desat/dwarf_weed_incense-desat.png":
/*!********************************************************!*\
  !*** ./asset/buffs/desat/dwarf_weed_incense-desat.png ***!
  \********************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
module.exports = __webpack_require__.p + "dwarf_weed_incense-desat.png";

/***/ }),

/***/ "./asset/buffs/desat/elder_overload-desat.png":
/*!****************************************************!*\
  !*** ./asset/buffs/desat/elder_overload-desat.png ***!
  \****************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
module.exports = __webpack_require__.p + "elder_overload-desat.png";

/***/ }),

/***/ "./asset/buffs/desat/enhanced_excalibur-desat.png":
/*!********************************************************!*\
  !*** ./asset/buffs/desat/enhanced_excalibur-desat.png ***!
  \********************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
module.exports = __webpack_require__.p + "enhanced_excalibur-desat.png";

/***/ }),

/***/ "./asset/buffs/desat/erethdors_grimoire-desat.png":
/*!********************************************************!*\
  !*** ./asset/buffs/desat/erethdors_grimoire-desat.png ***!
  \********************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
module.exports = __webpack_require__.p + "erethdors_grimoire-desat.png";

/***/ }),

/***/ "./asset/buffs/desat/fellstalk_incense-desat.png":
/*!*******************************************************!*\
  !*** ./asset/buffs/desat/fellstalk_incense-desat.png ***!
  \*******************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
module.exports = __webpack_require__.p + "fellstalk_incense-desat.png";

/***/ }),

/***/ "./asset/buffs/desat/freedom-desat.png":
/*!*********************************************!*\
  !*** ./asset/buffs/desat/freedom-desat.png ***!
  \*********************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
module.exports = __webpack_require__.p + "freedom-desat.png";

/***/ }),

/***/ "./asset/buffs/desat/gladiators_rage-desat.png":
/*!*****************************************************!*\
  !*** ./asset/buffs/desat/gladiators_rage-desat.png ***!
  \*****************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
module.exports = __webpack_require__.p + "gladiators_rage-desat.png";

/***/ }),

/***/ "./asset/buffs/desat/greater_deaths_swiftness-desat.png":
/*!**************************************************************!*\
  !*** ./asset/buffs/desat/greater_deaths_swiftness-desat.png ***!
  \**************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
module.exports = __webpack_require__.p + "greater_deaths_swiftness-desat.png";

/***/ }),

/***/ "./asset/buffs/desat/greater_sunshine-desat.png":
/*!******************************************************!*\
  !*** ./asset/buffs/desat/greater_sunshine-desat.png ***!
  \******************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
module.exports = __webpack_require__.p + "greater_sunshine-desat.png";

/***/ }),

/***/ "./asset/buffs/desat/immortality-desat.png":
/*!*************************************************!*\
  !*** ./asset/buffs/desat/immortality-desat.png ***!
  \*************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
module.exports = __webpack_require__.p + "immortality-desat.png";

/***/ }),

/***/ "./asset/buffs/desat/ingenuity_of_the_humans-desat.png":
/*!*************************************************************!*\
  !*** ./asset/buffs/desat/ingenuity_of_the_humans-desat.png ***!
  \*************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
module.exports = __webpack_require__.p + "ingenuity_of_the_humans-desat.png";

/***/ }),

/***/ "./asset/buffs/desat/instability-desat.png":
/*!*************************************************!*\
  !*** ./asset/buffs/desat/instability-desat.png ***!
  \*************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
module.exports = __webpack_require__.p + "instability-desat.png";

/***/ }),

/***/ "./asset/buffs/desat/kwuarm_incense-desat.png":
/*!****************************************************!*\
  !*** ./asset/buffs/desat/kwuarm_incense-desat.png ***!
  \****************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
module.exports = __webpack_require__.p + "kwuarm_incense-desat.png";

/***/ }),

/***/ "./asset/buffs/desat/lantadyme_incense-desat.png":
/*!*******************************************************!*\
  !*** ./asset/buffs/desat/lantadyme_incense-desat.png ***!
  \*******************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
module.exports = __webpack_require__.p + "lantadyme_incense-desat.png";

/***/ }),

/***/ "./asset/buffs/desat/limitless-desat.png":
/*!***********************************************!*\
  !*** ./asset/buffs/desat/limitless-desat.png ***!
  \***********************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
module.exports = __webpack_require__.p + "limitless-desat.png";

/***/ }),

/***/ "./asset/buffs/desat/living_death-desat.png":
/*!**************************************************!*\
  !*** ./asset/buffs/desat/living_death-desat.png ***!
  \**************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
module.exports = __webpack_require__.p + "living_death-desat.png";

/***/ }),

/***/ "./asset/buffs/desat/necrosis-desat.png":
/*!**********************************************!*\
  !*** ./asset/buffs/desat/necrosis-desat.png ***!
  \**********************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
module.exports = __webpack_require__.p + "necrosis-desat.png";

/***/ }),

/***/ "./asset/buffs/desat/omni_guard-desat.png":
/*!************************************************!*\
  !*** ./asset/buffs/desat/omni_guard-desat.png ***!
  \************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
module.exports = __webpack_require__.p + "omni_guard-desat.png";

/***/ }),

/***/ "./asset/buffs/desat/overload-desat.png":
/*!**********************************************!*\
  !*** ./asset/buffs/desat/overload-desat.png ***!
  \**********************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
module.exports = __webpack_require__.p + "overload-desat.png";

/***/ }),

/***/ "./asset/buffs/desat/perfect_eqilibrium-desat.png":
/*!********************************************************!*\
  !*** ./asset/buffs/desat/perfect_eqilibrium-desat.png ***!
  \********************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
module.exports = __webpack_require__.p + "perfect_eqilibrium-desat.png";

/***/ }),

/***/ "./asset/buffs/desat/powerburst_prevention-desat.png":
/*!***********************************************************!*\
  !*** ./asset/buffs/desat/powerburst_prevention-desat.png ***!
  \***********************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
module.exports = __webpack_require__.p + "powerburst_prevention-desat.png";

/***/ }),

/***/ "./asset/buffs/desat/prayer_renewal-desat.png":
/*!****************************************************!*\
  !*** ./asset/buffs/desat/prayer_renewal-desat.png ***!
  \****************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
module.exports = __webpack_require__.p + "prayer_renewal-desat.png";

/***/ }),

/***/ "./asset/buffs/desat/reflect-desat.png":
/*!*********************************************!*\
  !*** ./asset/buffs/desat/reflect-desat.png ***!
  \*********************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
module.exports = __webpack_require__.p + "reflect-desat.png";

/***/ }),

/***/ "./asset/buffs/desat/resonance-desat.png":
/*!***********************************************!*\
  !*** ./asset/buffs/desat/resonance-desat.png ***!
  \***********************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
module.exports = __webpack_require__.p + "resonance-desat.png";

/***/ }),

/***/ "./asset/buffs/desat/sign_of_life-desat.png":
/*!**************************************************!*\
  !*** ./asset/buffs/desat/sign_of_life-desat.png ***!
  \**************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
module.exports = __webpack_require__.p + "sign_of_life-desat.png";

/***/ }),

/***/ "./asset/buffs/desat/split_soul-desat.png":
/*!************************************************!*\
  !*** ./asset/buffs/desat/split_soul-desat.png ***!
  \************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
module.exports = __webpack_require__.p + "split_soul-desat.png";

/***/ }),

/***/ "./asset/buffs/desat/stunned-desat.png":
/*!*********************************************!*\
  !*** ./asset/buffs/desat/stunned-desat.png ***!
  \*********************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
module.exports = __webpack_require__.p + "stunned-desat.png";

/***/ }),

/***/ "./asset/buffs/desat/sunshine-desat.png":
/*!**********************************************!*\
  !*** ./asset/buffs/desat/sunshine-desat.png ***!
  \**********************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
module.exports = __webpack_require__.p + "sunshine-desat.png";

/***/ }),

/***/ "./asset/buffs/desat/threads_of_fate-desat.png":
/*!*****************************************************!*\
  !*** ./asset/buffs/desat/threads_of_fate-desat.png ***!
  \*****************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
module.exports = __webpack_require__.p + "threads_of_fate-desat.png";

/***/ }),

/***/ "./asset/buffs/desat/time_rift-desat.png":
/*!***********************************************!*\
  !*** ./asset/buffs/desat/time_rift-desat.png ***!
  \***********************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
module.exports = __webpack_require__.p + "time_rift-desat.png";

/***/ }),

/***/ "./asset/buffs/desat/undead_slayer-desat.png":
/*!***************************************************!*\
  !*** ./asset/buffs/desat/undead_slayer-desat.png ***!
  \***************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
module.exports = __webpack_require__.p + "undead_slayer-desat.png";

/***/ }),

/***/ "./asset/buffs/desat/virus-desat.png":
/*!*******************************************!*\
  !*** ./asset/buffs/desat/virus-desat.png ***!
  \*******************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
module.exports = __webpack_require__.p + "virus-desat.png";

/***/ }),

/***/ "./asset/buffs/desat/vulnerability-desat.png":
/*!***************************************************!*\
  !*** ./asset/buffs/desat/vulnerability-desat.png ***!
  \***************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
module.exports = __webpack_require__.p + "vulnerability-desat.png";

/***/ }),

/***/ "./asset/buffs/desat/weapon_poison-desat.png":
/*!***************************************************!*\
  !*** ./asset/buffs/desat/weapon_poison-desat.png ***!
  \***************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
module.exports = __webpack_require__.p + "weapon_poison-desat.png";

/***/ }),

/***/ "./asset/buffs/desolation.png":
/*!************************************!*\
  !*** ./asset/buffs/desolation.png ***!
  \************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
module.exports = __webpack_require__.p + "desolation.png";

/***/ }),

/***/ "./asset/buffs/devotion.png":
/*!**********************************!*\
  !*** ./asset/buffs/devotion.png ***!
  \**********************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
module.exports = __webpack_require__.p + "devotion.png";

/***/ }),

/***/ "./asset/buffs/divert.png":
/*!********************************!*\
  !*** ./asset/buffs/divert.png ***!
  \********************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
module.exports = __webpack_require__.p + "divert.png";

/***/ }),

/***/ "./asset/buffs/dragon_slayer.png":
/*!***************************************!*\
  !*** ./asset/buffs/dragon_slayer.png ***!
  \***************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
module.exports = __webpack_require__.p + "dragon_slayer.png";

/***/ }),

/***/ "./asset/buffs/dwarf_weed_incense.png":
/*!********************************************!*\
  !*** ./asset/buffs/dwarf_weed_incense.png ***!
  \********************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
module.exports = __webpack_require__.p + "dwarf_weed_incense.png";

/***/ }),

/***/ "./asset/buffs/elder_overload.png":
/*!****************************************!*\
  !*** ./asset/buffs/elder_overload.png ***!
  \****************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
module.exports = __webpack_require__.p + "elder_overload.png";

/***/ }),

/***/ "./asset/buffs/enhanced_excalibur.png":
/*!********************************************!*\
  !*** ./asset/buffs/enhanced_excalibur.png ***!
  \********************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
module.exports = __webpack_require__.p + "enhanced_excalibur.png";

/***/ }),

/***/ "./asset/buffs/erethdors_grimoire.png":
/*!********************************************!*\
  !*** ./asset/buffs/erethdors_grimoire.png ***!
  \********************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
module.exports = __webpack_require__.p + "erethdors_grimoire.png";

/***/ }),

/***/ "./asset/buffs/fellstalk_incense.png":
/*!*******************************************!*\
  !*** ./asset/buffs/fellstalk_incense.png ***!
  \*******************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
module.exports = __webpack_require__.p + "fellstalk_incense.png";

/***/ }),

/***/ "./asset/buffs/freedom.png":
/*!*********************************!*\
  !*** ./asset/buffs/freedom.png ***!
  \*********************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
module.exports = __webpack_require__.p + "freedom.png";

/***/ }),

/***/ "./asset/buffs/gladiators_rage.png":
/*!*****************************************!*\
  !*** ./asset/buffs/gladiators_rage.png ***!
  \*****************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
module.exports = __webpack_require__.p + "gladiators_rage.png";

/***/ }),

/***/ "./asset/buffs/greater_deaths_swiftness.png":
/*!**************************************************!*\
  !*** ./asset/buffs/greater_deaths_swiftness.png ***!
  \**************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
module.exports = __webpack_require__.p + "greater_deaths_swiftness.png";

/***/ }),

/***/ "./asset/buffs/greater_sunshine.png":
/*!******************************************!*\
  !*** ./asset/buffs/greater_sunshine.png ***!
  \******************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
module.exports = __webpack_require__.p + "greater_sunshine.png";

/***/ }),

/***/ "./asset/buffs/immortality.png":
/*!*************************************!*\
  !*** ./asset/buffs/immortality.png ***!
  \*************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
module.exports = __webpack_require__.p + "immortality.png";

/***/ }),

/***/ "./asset/buffs/ingenuity_of_the_humans.png":
/*!*************************************************!*\
  !*** ./asset/buffs/ingenuity_of_the_humans.png ***!
  \*************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
module.exports = __webpack_require__.p + "ingenuity_of_the_humans.png";

/***/ }),

/***/ "./asset/buffs/instability.png":
/*!*************************************!*\
  !*** ./asset/buffs/instability.png ***!
  \*************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
module.exports = __webpack_require__.p + "instability.png";

/***/ }),

/***/ "./asset/buffs/kwuarm_incense.png":
/*!****************************************!*\
  !*** ./asset/buffs/kwuarm_incense.png ***!
  \****************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
module.exports = __webpack_require__.p + "kwuarm_incense.png";

/***/ }),

/***/ "./asset/buffs/lantadyme_incense.png":
/*!*******************************************!*\
  !*** ./asset/buffs/lantadyme_incense.png ***!
  \*******************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
module.exports = __webpack_require__.p + "lantadyme_incense.png";

/***/ }),

/***/ "./asset/buffs/limitless.png":
/*!***********************************!*\
  !*** ./asset/buffs/limitless.png ***!
  \***********************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
module.exports = __webpack_require__.p + "limitless.png";

/***/ }),

/***/ "./asset/buffs/living_death.png":
/*!**************************************!*\
  !*** ./asset/buffs/living_death.png ***!
  \**************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
module.exports = __webpack_require__.p + "living_death.png";

/***/ }),

/***/ "./asset/buffs/malevolence.png":
/*!*************************************!*\
  !*** ./asset/buffs/malevolence.png ***!
  \*************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
module.exports = __webpack_require__.p + "malevolence.png";

/***/ }),

/***/ "./asset/buffs/necrosis.png":
/*!**********************************!*\
  !*** ./asset/buffs/necrosis.png ***!
  \**********************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
module.exports = __webpack_require__.p + "necrosis.png";

/***/ }),

/***/ "./asset/buffs/omni_guard.png":
/*!************************************!*\
  !*** ./asset/buffs/omni_guard.png ***!
  \************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
module.exports = __webpack_require__.p + "omni_guard.png";

/***/ }),

/***/ "./asset/buffs/overload.png":
/*!**********************************!*\
  !*** ./asset/buffs/overload.png ***!
  \**********************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
module.exports = __webpack_require__.p + "overload.png";

/***/ }),

/***/ "./asset/buffs/perfect_eqilibrium.png":
/*!********************************************!*\
  !*** ./asset/buffs/perfect_eqilibrium.png ***!
  \********************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
module.exports = __webpack_require__.p + "perfect_eqilibrium.png";

/***/ }),

/***/ "./asset/buffs/powerburst_prevention.png":
/*!***********************************************!*\
  !*** ./asset/buffs/powerburst_prevention.png ***!
  \***********************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
module.exports = __webpack_require__.p + "powerburst_prevention.png";

/***/ }),

/***/ "./asset/buffs/prayer_renewal.png":
/*!****************************************!*\
  !*** ./asset/buffs/prayer_renewal.png ***!
  \****************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
module.exports = __webpack_require__.p + "prayer_renewal.png";

/***/ }),

/***/ "./asset/buffs/protect_from_magic.png":
/*!********************************************!*\
  !*** ./asset/buffs/protect_from_magic.png ***!
  \********************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
module.exports = __webpack_require__.p + "protect_from_magic.png";

/***/ }),

/***/ "./asset/buffs/protect_from_melee.png":
/*!********************************************!*\
  !*** ./asset/buffs/protect_from_melee.png ***!
  \********************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
module.exports = __webpack_require__.p + "protect_from_melee.png";

/***/ }),

/***/ "./asset/buffs/protect_from_necromancy.png":
/*!*************************************************!*\
  !*** ./asset/buffs/protect_from_necromancy.png ***!
  \*************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
module.exports = __webpack_require__.p + "protect_from_necromancy.png";

/***/ }),

/***/ "./asset/buffs/protect_from_ranged.png":
/*!*********************************************!*\
  !*** ./asset/buffs/protect_from_ranged.png ***!
  \*********************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
module.exports = __webpack_require__.p + "protect_from_ranged.png";

/***/ }),

/***/ "./asset/buffs/reflect.png":
/*!*********************************!*\
  !*** ./asset/buffs/reflect.png ***!
  \*********************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
module.exports = __webpack_require__.p + "reflect.png";

/***/ }),

/***/ "./asset/buffs/resonance.png":
/*!***********************************!*\
  !*** ./asset/buffs/resonance.png ***!
  \***********************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
module.exports = __webpack_require__.p + "resonance.png";

/***/ }),

/***/ "./asset/buffs/ruination.png":
/*!***********************************!*\
  !*** ./asset/buffs/ruination.png ***!
  \***********************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
module.exports = __webpack_require__.p + "ruination.png";

/***/ }),

/***/ "./asset/buffs/sign_of_life.png":
/*!**************************************!*\
  !*** ./asset/buffs/sign_of_life.png ***!
  \**************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
module.exports = __webpack_require__.p + "sign_of_life.png";

/***/ }),

/***/ "./asset/buffs/sorrow.png":
/*!********************************!*\
  !*** ./asset/buffs/sorrow.png ***!
  \********************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
module.exports = __webpack_require__.p + "sorrow.png";

/***/ }),

/***/ "./asset/buffs/soul_split.png":
/*!************************************!*\
  !*** ./asset/buffs/soul_split.png ***!
  \************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
module.exports = __webpack_require__.p + "soul_split.png";

/***/ }),

/***/ "./asset/buffs/split_soul.png":
/*!************************************!*\
  !*** ./asset/buffs/split_soul.png ***!
  \************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
module.exports = __webpack_require__.p + "split_soul.png";

/***/ }),

/***/ "./asset/buffs/stunned.png":
/*!*********************************!*\
  !*** ./asset/buffs/stunned.png ***!
  \*********************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
module.exports = __webpack_require__.p + "stunned.png";

/***/ }),

/***/ "./asset/buffs/sunshine.png":
/*!**********************************!*\
  !*** ./asset/buffs/sunshine.png ***!
  \**********************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
module.exports = __webpack_require__.p + "sunshine.png";

/***/ }),

/***/ "./asset/buffs/threads_of_fate.png":
/*!*****************************************!*\
  !*** ./asset/buffs/threads_of_fate.png ***!
  \*****************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
module.exports = __webpack_require__.p + "threads_of_fate.png";

/***/ }),

/***/ "./asset/buffs/time_rift.png":
/*!***********************************!*\
  !*** ./asset/buffs/time_rift.png ***!
  \***********************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
module.exports = __webpack_require__.p + "time_rift.png";

/***/ }),

/***/ "./asset/buffs/torment.png":
/*!*********************************!*\
  !*** ./asset/buffs/torment.png ***!
  \*********************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
module.exports = __webpack_require__.p + "torment.png";

/***/ }),

/***/ "./asset/buffs/turmoil.png":
/*!*********************************!*\
  !*** ./asset/buffs/turmoil.png ***!
  \*********************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
module.exports = __webpack_require__.p + "turmoil.png";

/***/ }),

/***/ "./asset/buffs/undead_slayer.png":
/*!***************************************!*\
  !*** ./asset/buffs/undead_slayer.png ***!
  \***************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
module.exports = __webpack_require__.p + "undead_slayer.png";

/***/ }),

/***/ "./asset/buffs/virus_black.webp":
/*!**************************************!*\
  !*** ./asset/buffs/virus_black.webp ***!
  \**************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
module.exports = __webpack_require__.p + "virus_black.webp";

/***/ }),

/***/ "./asset/buffs/virus_blue.webp":
/*!*************************************!*\
  !*** ./asset/buffs/virus_blue.webp ***!
  \*************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
module.exports = __webpack_require__.p + "virus_blue.webp";

/***/ }),

/***/ "./asset/buffs/virus_green.webp":
/*!**************************************!*\
  !*** ./asset/buffs/virus_green.webp ***!
  \**************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
module.exports = __webpack_require__.p + "virus_green.webp";

/***/ }),

/***/ "./asset/buffs/virus_red.webp":
/*!************************************!*\
  !*** ./asset/buffs/virus_red.webp ***!
  \************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
module.exports = __webpack_require__.p + "virus_red.webp";

/***/ }),

/***/ "./asset/buffs/vulnerability.png":
/*!***************************************!*\
  !*** ./asset/buffs/vulnerability.png ***!
  \***************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
module.exports = __webpack_require__.p + "vulnerability.png";

/***/ }),

/***/ "./asset/buffs/weapon_poison.png":
/*!***************************************!*\
  !*** ./asset/buffs/weapon_poison.png ***!
  \***************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
module.exports = __webpack_require__.p + "weapon_poison.png";

/***/ }),

/***/ "./asset/nis/bg.png":
/*!**************************!*\
  !*** ./asset/nis/bg.png ***!
  \**************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
module.exports = __webpack_require__.p + "bg.png";

/***/ }),

/***/ "./asset/resource/nis-imgbutton.png":
/*!******************************************!*\
  !*** ./asset/resource/nis-imgbutton.png ***!
  \******************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
module.exports = __webpack_require__.p + "nis-imgbutton.png";

/***/ }),

/***/ "./asset/resource/nisbutton.png":
/*!**************************************!*\
  !*** ./asset/resource/nisbutton.png ***!
  \**************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
module.exports = __webpack_require__.p + "nisbutton.png";

/***/ }),

/***/ "./asset/resource/scroll.png":
/*!***********************************!*\
  !*** ./asset/resource/scroll.png ***!
  \***********************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
module.exports = __webpack_require__.p + "scroll.png";

/***/ }),

/***/ "./asset/resource/scrollhor.png":
/*!**************************************!*\
  !*** ./asset/resource/scrollhor.png ***!
  \**************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
module.exports = __webpack_require__.p + "scrollhor.png";

/***/ }),

/***/ "./icon.png":
/*!******************!*\
  !*** ./icon.png ***!
  \******************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
module.exports = __webpack_require__.p + "icon.png";

/***/ }),

/***/ "./index.html":
/*!********************!*\
  !*** ./index.html ***!
  \********************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
module.exports = __webpack_require__.p + "index.html";

/***/ }),

/***/ "canvas":
/*!*************************!*\
  !*** external "canvas" ***!
  \*************************/
/***/ ((module) => {

"use strict";
if(typeof __WEBPACK_EXTERNAL_MODULE_canvas__ === 'undefined') { var e = new Error("Cannot find module 'canvas'"); e.code = 'MODULE_NOT_FOUND'; throw e; }

module.exports = __WEBPACK_EXTERNAL_MODULE_canvas__;

/***/ }),

/***/ "electron/common":
/*!**********************************!*\
  !*** external "electron/common" ***!
  \**********************************/
/***/ ((module) => {

"use strict";
if(typeof __WEBPACK_EXTERNAL_MODULE_electron_common__ === 'undefined') { var e = new Error("Cannot find module 'electron/common'"); e.code = 'MODULE_NOT_FOUND'; throw e; }

module.exports = __WEBPACK_EXTERNAL_MODULE_electron_common__;

/***/ }),

/***/ "sharp":
/*!************************!*\
  !*** external "sharp" ***!
  \************************/
/***/ ((module) => {

"use strict";
if(typeof __WEBPACK_EXTERNAL_MODULE_sharp__ === 'undefined') { var e = new Error("Cannot find module 'sharp'"); e.code = 'MODULE_NOT_FOUND'; throw e; }

module.exports = __WEBPACK_EXTERNAL_MODULE_sharp__;

/***/ }),

/***/ "../node_modules/alt1/dist/base/index.js":
/*!***********************************************!*\
  !*** ../node_modules/alt1/dist/base/index.js ***!
  \***********************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

(function webpackUniversalModuleDefinition(root, factory) {
	if(true)
		module.exports = factory((function webpackLoadOptionalExternalModule() { try { return __webpack_require__(/*! sharp */ "sharp"); } catch(e) {} }()), (function webpackLoadOptionalExternalModule() { try { return __webpack_require__(/*! canvas */ "canvas"); } catch(e) {} }()), (function webpackLoadOptionalExternalModule() { try { return __webpack_require__(/*! electron/common */ "electron/common"); } catch(e) {} }()));
	else {}
})(globalThis, (__WEBPACK_EXTERNAL_MODULE_sharp__, __WEBPACK_EXTERNAL_MODULE_canvas__, __WEBPACK_EXTERNAL_MODULE_electron_common__) => {
return /******/ (() => { // webpackBootstrap
/******/ 	"use strict";
/******/ 	var __webpack_modules__ = ({

/***/ "./src/base/alt1api.ts":
/*!*****************************!*\
  !*** ./src/base/alt1api.ts ***!
  \*****************************/
/***/ ((__unused_webpack_module, exports) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));


/***/ }),

/***/ "./src/base/declarations.ts":
/*!**********************************!*\
  !*** ./src/base/declarations.ts ***!
  \**********************************/
/***/ ((__unused_webpack_module, exports) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));


/***/ }),

/***/ "./src/base/imagedata-extensions.ts":
/*!******************************************!*\
  !*** ./src/base/imagedata-extensions.ts ***!
  \******************************************/
/***/ (function(__unused_webpack_module, exports, __nested_webpack_require_2062__) {


var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.ImageData = void 0;
const a1lib = __importStar(__nested_webpack_require_2062__(/*! ./index */ "./src/base/index.ts"));
const nodeimports = __importStar(__nested_webpack_require_2062__(/*! ./nodepolyfill */ "./src/base/nodepolyfill.ts"));
(function () {
    var globalvar = (typeof self != "undefined" ? self : (typeof __nested_webpack_require_2062__.g != "undefined" ? __nested_webpack_require_2062__.g : null));
    var filltype = typeof globalvar.ImageData == "undefined";
    var fillconstr = filltype;
    if (!filltype) {
        var oldconstr = globalvar.ImageData;
        try {
            let data = new Uint8ClampedArray(4);
            data[0] = 1;
            let a = new globalvar.ImageData(data, 1, 1);
            fillconstr = a.data[0] != 1;
        }
        catch (e) {
            fillconstr = true;
        }
    }
    if (fillconstr) {
        var constr = function ImageDataShim() {
            var i = 0;
            var data = (arguments[i] instanceof Uint8ClampedArray ? arguments[i++] : null);
            var width = arguments[i++];
            var height = arguments[i++];
            if (filltype) {
                if (!data) {
                    data = new Uint8ClampedArray(width * height * 4);
                }
                this.width = width;
                this.height = height;
                this.data = data;
            }
            else if (fillconstr) {
                //WARNING This branch of code does not use the same pixel data backing store
                //(problem with wasm, however all wasm browser have a native constructor (unless asm.js is used))
                var canvas = document.createElement('canvas');
                canvas.width = width;
                canvas.height = height;
                var ctx = canvas.getContext("2d");
                var imageData = ctx.createImageData(width, height);
                if (data) {
                    imageData.data.set(data);
                }
                return imageData;
            }
            // else {
            // 	//oh no...
            // 	//we need this monstrocity in order to call the native constructor with variable number of args
            // 	//when es5 transpile is enable (that strips the spread operator)
            // 	return new (Function.prototype.bind.apply(oldconstr, [null,...arguments]));
            // }
        };
        if (!filltype) {
            constr.prototype = globalvar.ImageData.prototype;
        }
        globalvar.ImageData = constr;
        exports.ImageData = constr;
    }
    else {
        exports.ImageData = globalvar.ImageData;
    }
})();
//Recast into a drawable imagedata class on all platforms, into a normal browser ImageData on browsers or a node-canvas imagedata on nodejs
exports.ImageData.prototype.toDrawableData = function () {
    if (typeof document == "undefined") {
        return nodeimports.imageDataToDrawable(this);
    }
    else {
        return this;
    }
};
exports.ImageData.prototype.putImageData = function (buf, cx, cy) {
    for (var dx = 0; dx < buf.width; dx++) {
        for (var dy = 0; dy < buf.height; dy++) {
            var i1 = (dx + cx) * 4 + (dy + cy) * 4 * this.width;
            var i2 = dx * 4 + dy * 4 * buf.width;
            this.data[i1] = buf.data[i2];
            this.data[i1 + 1] = buf.data[i2 + 1];
            this.data[i1 + 2] = buf.data[i2 + 2];
            this.data[i1 + 3] = buf.data[i2 + 3];
        }
    }
};
exports.ImageData.prototype.pixelOffset = function (x, y) {
    return x * 4 + y * this.width * 4;
};
//creates a hash of a portion of the buffer used to check for changes
exports.ImageData.prototype.getPixelHash = function (rect) {
    if (!rect) {
        rect = new a1lib.Rect(0, 0, this.width, this.height);
    }
    var hash = 0;
    for (var x = rect.x; x < rect.x + rect.width; x++) {
        for (var y = rect.y; y < rect.y + rect.height; y++) {
            var i = x * 4 + y * 4 * this.width;
            hash = (((hash << 5) - hash) + this.data[i]) | 0;
            hash = (((hash << 5) - hash) + this.data[i + 1]) | 0;
            hash = (((hash << 5) - hash) + this.data[i + 2]) | 0;
            hash = (((hash << 5) - hash) + this.data[i + 3]) | 0;
        }
    }
    return hash;
};
exports.ImageData.prototype.clone = function (rect) {
    let res = new exports.ImageData(rect.width, rect.height);
    this.copyTo(res, rect.x, rect.y, rect.width, rect.height, 0, 0);
    return res;
};
exports.ImageData.prototype.show = function (x = 5, y = 5, zoom = 1) {
    if (typeof document == "undefined") {
        console.error("need a document to show an imagedata object");
        return;
    }
    var imgs = document.getElementsByClassName("debugimage");
    while (imgs.length > exports.ImageData.prototype.show.maxImages) {
        imgs[0].remove();
    }
    var el = this.toImage();
    el.classList.add("debugimage");
    el.style.position = "absolute";
    el.style.zIndex = "1000";
    el.style.left = x / zoom + "px";
    el.style.top = y / zoom + "px";
    el.style.background = "purple";
    el.style.cursor = "pointer";
    el.style.imageRendering = "pixelated";
    el.style.outline = "1px solid #0f0";
    el.style.width = (this.width == 1 ? 100 : this.width) * zoom + "px";
    el.style.height = (this.height == 1 ? 100 : this.height) * zoom + "px";
    el.onclick = function () { el.remove(); };
    document.body.appendChild(el);
    return el;
};
exports.ImageData.prototype.show.maxImages = 10;
exports.ImageData.prototype.toImage = function (rect) {
    if (!rect) {
        rect = new a1lib.Rect(0, 0, this.width, this.height);
    }
    if (typeof document != "undefined") {
        var el = document.createElement("canvas");
        el.width = rect.width;
        el.height = rect.height;
    }
    else {
        el = nodeimports.createCanvas(rect.width, rect.height);
    }
    var ctx = el.getContext("2d");
    ctx.putImageData(this.toDrawableData(), -rect.x, -rect.y);
    return el;
};
exports.ImageData.prototype.getPixel = function (x, y) {
    var i = x * 4 + y * 4 * this.width;
    return [this.data[i], this.data[i + 1], this.data[i + 2], this.data[i + 3]];
};
exports.ImageData.prototype.getPixelValueSum = function (x, y) {
    var i = x * 4 + y * 4 * this.width;
    return this.data[i] + this.data[i + 1] + this.data[i + 2];
};
exports.ImageData.prototype.getPixelInt = function (x, y) {
    var i = x * 4 + y * 4 * this.width;
    return (this.data[i + 3] << 24) + (this.data[i + 0] << 16) + (this.data[i + 1] << 8) + (this.data[i + 2] << 0);
};
exports.ImageData.prototype.getColorDifference = function (x, y, r, g, b, a = 255) {
    var i = x * 4 + y * 4 * this.width;
    return Math.abs(this.data[i] - r) + Math.abs(this.data[i + 1] - g) + Math.abs(this.data[i + 2] - b) * a / 255;
};
exports.ImageData.prototype.setPixel = function (x, y, ...color) {
    var r, g, b, a;
    var [r, g, b, a] = (Array.isArray(color[0]) ? color[0] : color);
    var i = x * 4 + y * 4 * this.width;
    this.data[i] = r;
    this.data[i + 1] = g;
    this.data[i + 2] = b;
    this.data[i + 3] = a == undefined ? 255 : a;
};
exports.ImageData.prototype.setPixelInt = function (x, y, color) {
    var i = x * 4 + y * 4 * this.width;
    this.data[i] = (color >> 24) & 0xff;
    this.data[i + 1] = (color >> 16) & 0xff;
    this.data[i + 2] = (color >> 8) & 0xff;
    this.data[i + 3] = (color >> 0) & 0xff;
};
exports.ImageData.prototype.toFileBytes = function (format, quality) {
    if (typeof HTMLCanvasElement != "undefined") {
        return new Promise(d => this.toImage().toBlob(b => {
            var r = new FileReader();
            r.readAsArrayBuffer(b);
            r.onload = () => d(new Uint8Array(r.result));
        }, format, quality));
    }
    else {
        return nodeimports.imageDataToFileBytes(this, format, quality);
    }
};
exports.ImageData.prototype.toPngBase64 = function () {
    if (typeof HTMLCanvasElement != "undefined") {
        var str = this.toImage().toDataURL("image/png");
        return str.slice(str.indexOf(",") + 1);
    }
    else {
        throw new Error("synchronous image conversion not supported in nodejs, try using ImageData.prototype.toFileBytes");
    }
};
exports.ImageData.prototype.pixelCompare = function (buf, x = 0, y = 0, max) {
    return a1lib.ImageDetect.simpleCompare(this, buf, x, y, max);
};
exports.ImageData.prototype.copyTo = function (target, sourcex, sourcey, width, height, targetx, targety) {
    //convince v8 that these are 31bit uints
    const targetwidth = target.width | 0;
    const thiswidth = this.width | 0;
    const copywidth = width | 0;
    const fastwidth = Math.floor(width / 4) * 4;
    const thisdata = new Int32Array(this.data.buffer, this.data.byteOffset, this.data.byteLength / 4);
    const targetdata = new Int32Array(target.data.buffer, target.data.byteOffset, target.data.byteLength / 4);
    for (let cy = 0; cy < height; cy++) {
        let cx = 0;
        let it = (cx + targetx) + (cy + targety) * targetwidth;
        let is = (cx + sourcex) + (cy + sourcey) * thiswidth;
        //copy 4 pixels per iter (xmm)
        for (; cx < fastwidth; cx += 4) {
            targetdata[it] = thisdata[is];
            targetdata[it + 1] = thisdata[is + 1];
            targetdata[it + 2] = thisdata[is + 2];
            targetdata[it + 3] = thisdata[is + 3];
            it += 4;
            is += 4;
        }
        //copy remainder per pixel
        for (; cx < copywidth; cx++) {
            targetdata[it] = thisdata[is];
            it += 1;
            is += 1;
        }
    }
};


/***/ }),

/***/ "./src/base/imagedetect.ts":
/*!*********************************!*\
  !*** ./src/base/imagedetect.ts ***!
  \*********************************/
/***/ (function(__unused_webpack_module, exports, __nested_webpack_require_12931__) {


var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.ImageDataSet = exports.webpackImages = exports.asyncMap = exports.coldif = exports.simpleCompareRMSE = exports.simpleCompare = exports.findSubbuffer = exports.findSubimage = exports.clearPngColorspace = exports.isPngBuffer = exports.imageDataFromFileBuffer = exports.imageDataFromBase64 = exports.imageDataFromUrl = void 0;
const imgref_1 = __nested_webpack_require_12931__(/*! ./imgref */ "./src/base/imgref.ts");
const wapper = __importStar(__nested_webpack_require_12931__(/*! ./wrapper */ "./src/base/wrapper.ts"));
const nodeimports = __importStar(__nested_webpack_require_12931__(/*! ./nodepolyfill */ "./src/base/nodepolyfill.ts"));
const _1 = __nested_webpack_require_12931__(/*! . */ "./src/base/index.ts");
/**
* Downloads an image and returns the ImageData.
* Cleans sRGB headers from downloaded png images. Assumes that data url's are already cleaned from sRGB and other headers
* @param url http(s) or data url to the image
*/
async function imageDataFromUrl(url) {
    var hdr = "data:image/png;base64,";
    var isdataurl = url.startsWith(hdr);
    if (typeof Image != "undefined") {
        if (isdataurl) {
            return loadImageDataFromUrl(url);
        }
        else {
            let res = await fetch(url);
            if (!res.ok) {
                throw new Error("failed to load image: " + url);
            }
            let file = new Uint8Array(await res.arrayBuffer());
            return imageDataFromFileBuffer(file);
        }
    }
    else {
        if (isdataurl) {
            return imageDataFromBase64(url.slice(hdr.length));
        }
        throw new Error("loading remote images in nodejs has been disabled, load the raw bytes and use imageDataFromNodeBuffer instead");
    }
}
exports.imageDataFromUrl = imageDataFromUrl;
function loadImageDataFromUrl(url) {
    if (typeof Image == "undefined") {
        throw new Error("Browser environment expected");
    }
    return new Promise((done, fail) => {
        var img = new Image();
        img.crossOrigin = "crossorigin";
        img.onload = function () { done(new imgref_1.ImgRefCtx(img).toData()); };
        img.onerror = fail;
        img.src = url;
    });
}
/**
* Loads an ImageData object from a base64 encoded png image
* Make sure the png image does not have a sRGB chunk or the resulting pixels will differ for different users!!!
* @param data a base64 encoded png image
*/
async function imageDataFromBase64(data) {
    if (typeof Image != "undefined") {
        return imageDataFromUrl("data:image/png;base64," + data);
    }
    else {
        return nodeimports.imageDataFromBase64(data);
    }
}
exports.imageDataFromBase64 = imageDataFromBase64;
/**
 * Loads an ImageData object directly from a png encoded file buffer
 * This method ensures that png color space headers are taken care off
 * @param data The bytes of a png file
 */
async function imageDataFromFileBuffer(data) {
    if (isPngBuffer(data)) {
        clearPngColorspace(data);
    }
    if (typeof Image != "undefined") {
        let blob = new Blob([data], { type: "image/png" });
        let url = URL.createObjectURL(blob);
        let r = await loadImageDataFromUrl(url);
        URL.revokeObjectURL(url);
        return r;
    }
    else {
        return nodeimports.imageDataFromBuffer(data);
    }
}
exports.imageDataFromFileBuffer = imageDataFromFileBuffer;
/**
* Checks if a given byte array is a png file (by checking for ?PNG as first 4 bytes)
* @param bytes Raw bytes of the png file
*/
function isPngBuffer(bytes) {
    return bytes[0] == 137 && bytes[1] == 80 && bytes[2] == 78 && bytes[3] == 71;
}
exports.isPngBuffer = isPngBuffer;
/**
* Resets the colorspace data in the png file.
* This makes sure the browser renders the exact colors in the file instead of filtering it in order to obtain the best real life representation of
* what it looked like on the authors screen. (this feature is often broken and not supported)
* For example a round trip printscreen -> open in browser results in different colors than the original
* @param data Raw bytes of the png file
*/
function clearPngColorspace(data) {
    if (!isPngBuffer(data)) {
        throw new Error("non-png image received");
    }
    var i = 8;
    while (i < data.length) {
        var length = data[i++] * 0x1000000 + data[i++] * 0x10000 + data[i++] * 0x100 + data[i++];
        var ancillary = !!((data[i] >> 5) & 1);
        var chunkname = String.fromCharCode(data[i], data[i + 1], data[i + 2], data[i + 3]);
        var chunkid = chunkname.toLowerCase();
        if (chunkid != "trns" && ancillary) {
            data[i + 0] = "n".charCodeAt(0);
            data[i + 1] = "o".charCodeAt(0);
            data[i + 2] = "P".charCodeAt(0);
            data[i + 3] = "E".charCodeAt(0);
            //calculate new chunk checksum
            //http://www.libpng.org/pub/png/spec/1.2/PNG-CRCAppendix.html
            var end = i + 4 + length;
            var crc = 0xffffffff;
            //should be fast enough like this
            var bitcrc = function (bit) {
                for (var k = 0; k < 8; k++) {
                    if (bit & 1) {
                        bit = 0xedb88320 ^ (bit >>> 1);
                    }
                    else {
                        bit = bit >>> 1;
                    }
                }
                return bit;
            };
            for (var a = i; a < end; a++) {
                if (a >= i + 4) {
                    data[a] = 0;
                }
                var bit = data[a];
                crc = bitcrc((crc ^ bit) & 0xff) ^ (crc >>> 8);
            }
            crc = crc ^ 0xffffffff;
            //new chunk checksum
            data[i + 4 + length + 0] = (crc >> 24) & 0xff;
            data[i + 4 + length + 1] = (crc >> 16) & 0xff;
            data[i + 4 + length + 2] = (crc >> 8) & 0xff;
            data[i + 4 + length + 3] = (crc >> 0) & 0xff;
        }
        if (chunkname == "IEND") {
            break;
        }
        i += 4; //type
        i += length; //data
        i += 4; //crc
    }
}
exports.clearPngColorspace = clearPngColorspace;
/**
* finds the given needle ImageBuffer in the given haystack ImgRef this function uses the best optimized available
* code depending on the type of the haystack. It will use fast c# searching if the haystack is an ImgRefBind, js searching
* is used otherwise.
* the checklist argument is no longer used and should ignored or null/undefined
* The optional sx,sy,sw,sh arguments indicate a bounding rectangle in which to search the needle. The rectangle should be bigger than the needle
* @returns An array of points where the needle is found. The array is empty if none are found
*/
function findSubimage(haystackImgref, needleBuffer, sx = 0, sy = 0, sw = haystackImgref.width, sh = haystackImgref.height) {
    if (!haystackImgref) {
        throw new TypeError();
    }
    if (!needleBuffer) {
        throw new TypeError();
    }
    var max = 30;
    //check if we can do this in alt1
    if (haystackImgref instanceof imgref_1.ImgRefBind && wapper.hasAlt1 && alt1.bindFindSubImg) {
        var needlestr = wapper.encodeImageString(needleBuffer);
        var r = alt1.bindFindSubImg(haystackImgref.handle, needlestr, needleBuffer.width, sx, sy, sw, sh);
        if (!r) {
            throw new wapper.Alt1Error();
        }
        return JSON.parse(r);
    }
    return findSubbuffer(haystackImgref.read(), needleBuffer, sx, sy, sw, sh);
}
exports.findSubimage = findSubimage;
/**
* Uses js to find the given needle ImageBuffer in the given haystack ImageBuffer. It is better to use the alt1.bind- functions in
* combination with a1nxt.findsubimg.
* the optional sx,sy,sw,sh arguments indicate a bounding rectangle in which to search.
* @returns An array of points where the needle is found. The array is empty if none are found
*/
function findSubbuffer(haystack, needle, sx = 0, sy = 0, sw = haystack.width, sh = haystack.height) {
    var r = [];
    var maxdif = 30;
    var maxresults = 50;
    var needlestride = needle.width * 4;
    var heystackstride = haystack.width * 4;
    //built list of non trans pixel to check
    var checkList = [];
    for (var y = 0; y < needle.height; y++) {
        for (var x = 0; x < needle.width; x++) {
            var i = x * 4 + y * needlestride;
            if (needle.data[i + 3] == 255) {
                checkList.push({ x: x, y: y });
            }
            if (checkList.length == 10) {
                break;
            }
        }
        if (checkList.length == 10) {
            break;
        }
    }
    var cw = (sx + sw) - needle.width;
    var ch = (sy + sh) - needle.height;
    var checklength = checkList.length;
    for (var y = sy; y <= ch; y++) {
        outer: for (var x = sx; x <= cw; x++) {
            for (var a = 0; a < checklength; a++) {
                var i1 = (x + checkList[a].x) * 4 + (y + checkList[a].y) * heystackstride;
                var i2 = checkList[a].x * 4 + checkList[a].y * needlestride;
                var d = 0;
                d = d + Math.abs(haystack.data[i1 + 0] - needle.data[i2 + 0]) | 0;
                d = d + Math.abs(haystack.data[i1 + 1] - needle.data[i2 + 1]) | 0;
                d = d + Math.abs(haystack.data[i1 + 2] - needle.data[i2 + 2]) | 0;
                d *= 255 / needle.data[i2 + 3];
                if (d > maxdif) {
                    continue outer;
                }
            }
            if (simpleCompare(haystack, needle, x, y, maxdif) != Infinity) {
                r.push({ x, y });
                if (r.length > maxresults) {
                    return r;
                }
            }
        }
    }
    return r;
}
exports.findSubbuffer = findSubbuffer;
/**
* Compares two images and returns the average color difference per pixel between them
* @param max The max color difference at any point in the image before short circuiting the function and returning Infinity. set to -1 to always continue.
* @returns The average color difference per pixel or Infinity if the difference is more than max at any point in the image
*/
function simpleCompare(bigbuf, checkbuf, x, y, max = 30) {
    if (x < 0 || y < 0) {
        throw new RangeError();
    }
    if (x + checkbuf.width > bigbuf.width || y + checkbuf.height > bigbuf.height) {
        throw new RangeError();
    }
    if (max == -1) {
        max = 255 * 4;
    }
    var dif = 0;
    for (var step = 8; step >= 1; step /= 2) {
        for (var cx = 0; cx < checkbuf.width; cx += step) {
            for (var cy = 0; cy < checkbuf.height; cy += step) {
                var i1 = (x + cx) * 4 + (y + cy) * bigbuf.width * 4;
                var i2 = cx * 4 + cy * checkbuf.width * 4;
                var d = 0;
                d = d + Math.abs(bigbuf.data[i1 + 0] - checkbuf.data[i2 + 0]) | 0;
                d = d + Math.abs(bigbuf.data[i1 + 1] - checkbuf.data[i2 + 1]) | 0;
                d = d + Math.abs(bigbuf.data[i1 + 2] - checkbuf.data[i2 + 2]) | 0;
                d *= checkbuf.data[i2 + 3] / 255;
                if (step == 1) {
                    dif += d;
                }
                if (d > max) {
                    return Infinity;
                }
            }
        }
    }
    return dif / checkbuf.width / checkbuf.height;
}
exports.simpleCompare = simpleCompare;
/**
* Calculates the root mean square error between the two buffers at the given coordinate, this method can be used in situations with significant blur or
* transparency, it does not bail early on non-matching images like simpleCompare does so it can be expected to be much slower when called often.
* @returns The root mean square error beteen the images, high single pixel errors are penalized more than consisten low errors. return of 0 means perfect match.
*/
function simpleCompareRMSE(bigbuf, checkbuf, x, y) {
    if (x < 0 || y < 0) {
        throw new RangeError();
    }
    if (x + checkbuf.width > bigbuf.width || y + checkbuf.height > bigbuf.height) {
        throw new RangeError();
    }
    var dif = 0;
    var numpix = 0;
    for (var cx = 0; cx < checkbuf.width; cx++) {
        for (var cy = 0; cy < checkbuf.height; cy++) {
            var i1 = (x + cx) * 4 + (y + cy) * bigbuf.width * 4;
            var i2 = cx * 4 + cy * checkbuf.width * 4;
            var d = 0;
            d = d + Math.abs(bigbuf.data[i1 + 0] - checkbuf.data[i2 + 0]) | 0;
            d = d + Math.abs(bigbuf.data[i1 + 1] - checkbuf.data[i2 + 1]) | 0;
            d = d + Math.abs(bigbuf.data[i1 + 2] - checkbuf.data[i2 + 2]) | 0;
            var weight = checkbuf.data[i2 + 3] / 255;
            numpix += weight;
            dif += d * d * weight;
        }
    }
    return Math.sqrt(dif / numpix);
}
exports.simpleCompareRMSE = simpleCompareRMSE;
/**
* Returns the difference between two colors (scaled to the alpha of the second color)
*/
function coldif(r1, g1, b1, r2, g2, b2, a2) {
    return (Math.abs(r1 - r2) + Math.abs(g1 - g2) + Math.abs(b1 - b2)) * a2 / 255; //only applies alpha for 2nd buffer!
}
exports.coldif = coldif;
/**
 * Turns map of promises into a map that contains the resolved values after loading.
 * @param input
 */
function asyncMap(input) {
    var raw = {};
    var promises = [];
    for (var a in input) {
        if (input.hasOwnProperty(a)) {
            raw[a] = null;
            promises.push(input[a].then(function (a, i) { raw[a] = i; r[a] = i; }.bind(null, a)));
        }
    }
    var r = {};
    var promise = Promise.all(promises).then(() => { r.loaded = true; return r; });
    Object.defineProperty(r, "loaded", { enumerable: false, value: false, writable: true });
    Object.defineProperty(r, "promise", { enumerable: false, value: promise });
    Object.defineProperty(r, "raw", { enumerable: false, value: raw });
    return Object.assign(r, raw);
}
exports.asyncMap = asyncMap;
/**
* Same as asyncMap, but casts the properties to ImageData in typescript
*/
function webpackImages(input) {
    return asyncMap(input);
}
exports.webpackImages = webpackImages;
class ImageDataSet {
    constructor() {
        this.buffers = [];
    }
    matchBest(img, x, y, max) {
        let best = null;
        let bestscore = max;
        for (let a = 0; a < this.buffers.length; a++) {
            let score = img.pixelCompare(this.buffers[a], x, y, bestscore);
            if (isFinite(score) && (bestscore == undefined || score < bestscore)) {
                bestscore = score;
                best = a;
            }
        }
        if (best == null) {
            return null;
        }
        return { index: best, score: bestscore };
    }
    static fromFilmStrip(baseimg, width) {
        if ((baseimg.width % width) != 0) {
            throw new Error("slice size does not fit in base img");
        }
        let r = new ImageDataSet();
        for (let x = 0; x < baseimg.width; x += width) {
            r.buffers.push(baseimg.clone(new _1.Rect(x, 0, width, baseimg.height)));
        }
        return r;
    }
    static fromFilmStripUneven(baseimg, widths) {
        let r = new ImageDataSet();
        let x = 0;
        for (let w of widths) {
            r.buffers.push(baseimg.clone(new _1.Rect(x, 0, w, baseimg.height)));
            x += w;
            if (x > baseimg.width) {
                throw new Error("sampling filmstrip outside bounds");
            }
        }
        if (x != baseimg.width) {
            throw new Error("unconsumed pixels left in film strip imagedata");
        }
        return r;
    }
    static fromAtlas(baseimg, slices) {
        let r = new ImageDataSet();
        for (let slice of slices) {
            r.buffers.push(baseimg.clone(slice));
        }
        return r;
    }
}
exports.ImageDataSet = ImageDataSet;


/***/ }),

/***/ "./src/base/imgref.ts":
/*!****************************!*\
  !*** ./src/base/imgref.ts ***!
  \****************************/
/***/ ((__unused_webpack_module, exports, __nested_webpack_require_29896__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.ImgRefData = exports.ImgRefBind = exports.ImgRefCtx = exports.ImgRef = void 0;
const index_1 = __nested_webpack_require_29896__(/*! ./index */ "./src/base/index.ts");
/**
 * Represents an image that might be in different types of memory
 * This is mostly used to represent images still in Alt1 memory that have
 * not been transfered to js yet. Various a1lib api's use this type and
 * choose the most efficient approach based on the memory type
 */
class ImgRef {
    constructor(x, y, w, h) {
        this.t = "none";
        this.x = x;
        this.y = y;
        this.width = w;
        this.height = h;
    }
    read(x = 0, y = 0, w = this.width, h = this.height) {
        throw new Error("This imgref (" + this.t + ") does not support toData");
    }
    findSubimage(needle, sx = 0, sy = 0, w = this.width, h = this.height) {
        return index_1.ImageDetect.findSubimage(this, needle, sx, sy, w, h);
    }
    toData(x = this.x, y = this.y, w = this.width, h = this.height) {
        return this.read(x - this.x, y - this.y, w, h);
    }
    ;
    containsArea(rect) {
        return this.x <= rect.x && this.y <= rect.y && this.x + this.width >= rect.x + rect.width && this.y + this.height >= rect.y + rect.height;
    }
}
exports.ImgRef = ImgRef;
/**
 * Represents an image in js render memory (canvas/image tag)
 */
class ImgRefCtx extends ImgRef {
    constructor(img, x = 0, y = 0) {
        if (img instanceof CanvasRenderingContext2D) {
            super(x, y, img.canvas.width, img.canvas.height);
            this.ctx = img;
        }
        else {
            super(x, y, img.width, img.height);
            if (img instanceof HTMLCanvasElement) {
                this.ctx = img.getContext("2d", { willReadFrequently: true });
            }
            else {
                var cnv = document.createElement("canvas");
                cnv.width = img.width;
                cnv.height = img.height;
                this.ctx = cnv.getContext("2d", { willReadFrequently: true });
                this.ctx.drawImage(img, 0, 0);
            }
        }
        this.t = "ctx";
    }
    read(x = 0, y = 0, w = this.width, h = this.height) {
        return this.ctx.getImageData(x, y, w, h);
    }
}
exports.ImgRefCtx = ImgRefCtx;
/**
 * Represents in image in Alt1 memory, This type of image can be searched for subimages
 * very efficiently and transfering the full image to js can be avoided this way
 */
class ImgRefBind extends ImgRef {
    constructor(handle, x = 0, y = 0, w = 0, h = 0) {
        super(x, y, w, h);
        this.handle = handle;
        this.t = "bind";
    }
    read(x = 0, y = 0, w = this.width, h = this.height) {
        return (0, index_1.transferImageData)(this.handle, x, y, w, h);
    }
}
exports.ImgRefBind = ImgRefBind;
/**
 * Represents an image in js memory
 */
class ImgRefData extends ImgRef {
    constructor(buf, x = 0, y = 0) {
        super(x, y, buf.width, buf.height);
        this.buf = buf;
        this.t = "data";
    }
    read(x = 0, y = 0, w = this.width, h = this.height) {
        if (x == 0 && y == 0 && w == this.width && h == this.height) {
            return this.buf;
        }
        var r = new ImageData(w, h);
        for (var b = y; b < y + h; b++) {
            for (var a = x; a < x + w; a++) {
                var i1 = (a - x) * 4 + (b - y) * w * 4;
                var i2 = a * 4 + b * 4 * this.buf.width;
                r.data[i1] = this.buf.data[i2];
                r.data[i1 + 1] = this.buf.data[i2 + 1];
                r.data[i1 + 2] = this.buf.data[i2 + 2];
                r.data[i1 + 3] = this.buf.data[i2 + 3];
            }
        }
        return r;
    }
}
exports.ImgRefData = ImgRefData;


/***/ }),

/***/ "./src/base/index.ts":
/*!***************************!*\
  !*** ./src/base/index.ts ***!
  \***************************/
/***/ (function(__unused_webpack_module, exports, __nested_webpack_require_33868__) {


var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __exportStar = (this && this.__exportStar) || function(m, exports) {
    for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.imageDataFromUrl = exports.ImageDataSet = exports.findSubbuffer = exports.simpleCompare = exports.findSubimage = exports.webpackImages = exports.NodePolyfill = exports.ImageData = exports.Rect = exports.PasteInput = exports.ImageDetect = void 0;
__nested_webpack_require_33868__(/*! ./declarations */ "./src/base/declarations.ts");
exports.ImageDetect = __importStar(__nested_webpack_require_33868__(/*! ./imagedetect */ "./src/base/imagedetect.ts"));
exports.PasteInput = __importStar(__nested_webpack_require_33868__(/*! ./pasteinput */ "./src/base/pasteinput.ts"));
var rect_1 = __nested_webpack_require_33868__(/*! ./rect */ "./src/base/rect.ts");
Object.defineProperty(exports, "Rect", ({ enumerable: true, get: function () { return __importDefault(rect_1).default; } }));
var imagedata_extensions_1 = __nested_webpack_require_33868__(/*! ./imagedata-extensions */ "./src/base/imagedata-extensions.ts");
Object.defineProperty(exports, "ImageData", ({ enumerable: true, get: function () { return imagedata_extensions_1.ImageData; } }));
exports.NodePolyfill = __importStar(__nested_webpack_require_33868__(/*! ./nodepolyfill */ "./src/base/nodepolyfill.ts"));
__exportStar(__nested_webpack_require_33868__(/*! ./imgref */ "./src/base/imgref.ts"), exports);
__exportStar(__nested_webpack_require_33868__(/*! ./wrapper */ "./src/base/wrapper.ts"), exports);
var imagedetect_1 = __nested_webpack_require_33868__(/*! ./imagedetect */ "./src/base/imagedetect.ts");
Object.defineProperty(exports, "webpackImages", ({ enumerable: true, get: function () { return imagedetect_1.webpackImages; } }));
Object.defineProperty(exports, "findSubimage", ({ enumerable: true, get: function () { return imagedetect_1.findSubimage; } }));
Object.defineProperty(exports, "simpleCompare", ({ enumerable: true, get: function () { return imagedetect_1.simpleCompare; } }));
Object.defineProperty(exports, "findSubbuffer", ({ enumerable: true, get: function () { return imagedetect_1.findSubbuffer; } }));
Object.defineProperty(exports, "ImageDataSet", ({ enumerable: true, get: function () { return imagedetect_1.ImageDataSet; } }));
Object.defineProperty(exports, "imageDataFromUrl", ({ enumerable: true, get: function () { return imagedetect_1.imageDataFromUrl; } }));


/***/ }),

/***/ "./src/base/nodepolyfill.ts":
/*!**********************************!*\
  !*** ./src/base/nodepolyfill.ts ***!
  \**********************************/
/***/ ((__unused_webpack_module, exports, __nested_webpack_require_37680__) => {


//nodejs and electron polyfills for web api's
//commented out type info as that breaks webpack with optional dependencies
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.imageDataFromBuffer = exports.imageDataFromBase64 = exports.imageDataToFileBytes = exports.createCanvas = exports.imageDataToDrawable = exports.requireElectronCommon = exports.requireNodeCanvas = exports.requireSharp = exports.polyfillRequire = void 0;
const index_1 = __nested_webpack_require_37680__(/*! ./index */ "./src/base/index.ts");
const imagedetect_1 = __nested_webpack_require_37680__(/*! ./imagedetect */ "./src/base/imagedetect.ts");
var requirefunction = null;
/**
 * Call this function to let the libs require extra dependencies on nodejs in order
 * to polyfill some browser api's (mostly image compression/decompression)
 * `NodePolifill.polyfillRequire(require);` should solve most cases
 */
function polyfillRequire(requirefn) {
    requirefunction = requirefn;
}
exports.polyfillRequire = polyfillRequire;
function requireSharp() {
    try {
        if (requirefunction) {
            return requirefunction("sharp");
        }
        else {
            return __nested_webpack_require_37680__(/* webpackIgnore: true */ /*! sharp */ "sharp"); // as typeof import("sharp");
        }
    }
    catch (e) { }
    return null;
}
exports.requireSharp = requireSharp;
function requireNodeCanvas() {
    //attempt to require sharp first, after loading canvas the module sharp fails to load
    requireSharp();
    try {
        if (requirefunction) {
            return requirefunction("canvas");
        }
        else {
            return __nested_webpack_require_37680__(/* webpackIgnore: true */ /*! canvas */ "canvas"); // as typeof import("sharp");
        }
    }
    catch (e) { }
    return null;
}
exports.requireNodeCanvas = requireNodeCanvas;
function requireElectronCommon() {
    try {
        if (requirefunction) {
            return requirefunction("electron/common");
        }
        else {
            return __nested_webpack_require_37680__(/* webpackIgnore: true */ /*! electron/common */ "electron/common");
        }
    }
    catch (e) { }
    return null;
}
exports.requireElectronCommon = requireElectronCommon;
function imageDataToDrawable(buf) {
    let nodecnv = requireNodeCanvas();
    if (!nodecnv) {
        throw new Error("couldn't find built-in canvas or the module 'canvas'");
    }
    return new nodecnv.ImageData(buf.data, buf.width, buf.height);
}
exports.imageDataToDrawable = imageDataToDrawable;
function createCanvas(w, h) {
    let nodecnv = requireNodeCanvas();
    if (!nodecnv) {
        throw new Error("couldn't find built-in canvas or the module 'canvas'");
    }
    return nodecnv.createCanvas(w, h);
}
exports.createCanvas = createCanvas;
function flipBGRAtoRGBA(data) {
    for (let i = 0; i < data.length; i += 4) {
        let tmp = data[i + 2];
        data[i + 2] = data[i + 0];
        data[i + 0] = tmp;
    }
}
async function imageDataToFileBytes(buf, format, quality) {
    //use the electron API if we're in electron
    var electronCommon;
    var sharp;
    if (electronCommon = requireElectronCommon()) {
        let nativeImage = electronCommon.nativeImage;
        //need to copy the buffer in order to flip it without destroying the original
        let bufcpy = Buffer.from(buf.data.slice(buf.data.byteOffset, buf.data.byteLength));
        flipBGRAtoRGBA(bufcpy);
        let nativeimg = nativeImage.createFromBitmap(bufcpy, { width: buf.width, height: buf.height });
        return nativeimg.toPNG();
    }
    else if (sharp = requireSharp()) {
        let img = sharp(Buffer.from(buf.data.buffer), { raw: { width: buf.width, height: buf.height, channels: 4 } });
        if (format == "image/png") {
            img.png();
        }
        else if (format == "image/webp") {
            var opts = { quality: 80 };
            if (typeof quality == "number") {
                opts.quality = quality * 100;
            }
            img.webp(opts);
        }
        else {
            throw new Error("unknown image format: " + format);
        }
        return await img.toBuffer({ resolveWithObject: false }).buffer;
    }
    throw new Error("coulnd't find build-in image compression methods or the module 'electron/common' or 'sharp'");
}
exports.imageDataToFileBytes = imageDataToFileBytes;
function imageDataFromBase64(base64) {
    return imageDataFromBuffer(Buffer.from(base64, "base64"));
}
exports.imageDataFromBase64 = imageDataFromBase64;
async function imageDataFromBuffer(buffer) {
    (0, imagedetect_1.clearPngColorspace)(buffer);
    //use the electron API if we're in electron
    var electronCommon;
    var nodecnv;
    if (electronCommon = requireElectronCommon()) {
        let nativeImage = electronCommon.nativeImage;
        let img = nativeImage.createFromBuffer(buffer);
        let pixels = img.toBitmap();
        let size = img.getSize();
        let pixbuf = new Uint8ClampedArray(pixels.buffer, pixels.byteOffset, pixels.byteLength);
        flipBGRAtoRGBA(pixbuf);
        return new index_1.ImageData(pixbuf, size.width, size.height);
    }
    else if (nodecnv = requireNodeCanvas()) {
        return new Promise((done, err) => {
            let img = new nodecnv.Image();
            img.onerror = err;
            img.onload = () => {
                var cnv = nodecnv.createCanvas(img.naturalWidth, img.naturalHeight);
                var ctx = cnv.getContext("2d");
                ctx.drawImage(img, 0, 0);
                var data = ctx.getImageData(0, 0, img.naturalWidth, img.naturalHeight);
                //use our own class
                done(new index_1.ImageData(data.data, data.width, data.height));
            };
            img.src = Buffer.from(buffer.buffer, buffer.byteOffset, buffer.byteLength);
        });
    }
    throw new Error("couldn't find built-in canvas, module 'electron/common' or the module 'canvas'");
}
exports.imageDataFromBuffer = imageDataFromBuffer;


/***/ }),

/***/ "./src/base/pasteinput.ts":
/*!********************************!*\
  !*** ./src/base/pasteinput.ts ***!
  \********************************/
/***/ (function(__unused_webpack_module, exports, __nested_webpack_require_43872__) {


var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.fileDialog = exports.start = exports.startDragNDrop = exports.triggerPaste = exports.unlisten = exports.listen = exports.lastref = void 0;
const index_1 = __nested_webpack_require_43872__(/*! ./index */ "./src/base/index.ts");
const ImageDetect = __importStar(__nested_webpack_require_43872__(/*! ./imagedetect */ "./src/base/imagedetect.ts"));
var listeners = [];
var started = false;
var dndStarted = false;
var pasting = false;
exports.lastref = null;
function listen(func, errorfunc, dragndrop) {
    listeners.push({ cb: func, error: errorfunc });
    if (!started) {
        start();
    }
    if (dragndrop && !dndStarted) {
        startDragNDrop();
    }
}
exports.listen = listen;
function unlisten(func) {
    let i = listeners.findIndex(c => c.cb == func);
    if (i != -1) {
        listeners.splice(i, 1);
    }
}
exports.unlisten = unlisten;
/**
 * currently used in multiple document situations (iframe), might be removed in the future
 */
function triggerPaste(img) {
    exports.lastref = img;
    for (var a in listeners) {
        listeners[a].cb(exports.lastref);
    }
}
exports.triggerPaste = triggerPaste;
function pasted(img) {
    pasting = false;
    triggerPaste(new index_1.ImgRefCtx(img));
}
function error(error, mes) {
    var _a, _b;
    pasting = false;
    for (var a in listeners) {
        (_b = (_a = listeners[a]).error) === null || _b === void 0 ? void 0 : _b.call(_a, mes, error);
    }
}
function startDragNDrop() {
    var getitem = function (items) {
        var foundimage = "";
        for (var a = 0; a < items.length; a++) {
            var item = items[a];
            var m = item.type.match(/^image\/(\w+)$/);
            if (m) {
                if (m[1] == "png") {
                    return item;
                }
                else {
                    foundimage = m[1];
                }
            }
        }
        if (foundimage) {
            error("notpng", "The image you uploaded is not a .png image. Other image type have compression noise and can't be used for image detection.");
        }
        return null;
    };
    window.addEventListener("dragover", function (e) {
        e.preventDefault();
    });
    window.addEventListener("drop", function (e) {
        if (!e.dataTransfer) {
            return;
        }
        var item = getitem(e.dataTransfer.items);
        e.preventDefault();
        if (!item) {
            return;
        }
        fromFile(item.getAsFile());
    });
}
exports.startDragNDrop = startDragNDrop;
function start() {
    if (started) {
        return;
    }
    started = true;
    //determine if we have a clipboard api
    //try{a=new Event("clipboard"); a="clipboardData" in a;}
    //catch(e){a=false;}
    var ischrome = !!navigator.userAgent.match(/Chrome/) && !navigator.userAgent.match(/Edge/);
    //old method breaks after chrome 41, revert to good old user agent sniffing
    //nvm, internet explorer (edge) decided that it wants to be chrome, however fails at delivering
    //turns out this one is interesting, edge is a hybrid between the paste api's
    var apipasted = function (e) {
        if (!e.clipboardData) {
            return;
        }
        for (var a = 0; a < e.clipboardData.items.length; a++) { //loop all data types
            if (e.clipboardData.items[a].type.indexOf("image") != -1) {
                var file = e.clipboardData.items[a].getAsFile();
                if (file) {
                    var img = new Image();
                    img.src = (window.URL || window.webkitURL).createObjectURL(file);
                    if (img.width > 0) {
                        pasted(img);
                    }
                    else {
                        img.onload = function () { pasted(img); };
                    }
                }
            }
        }
    };
    if (ischrome) {
        document.addEventListener("paste", apipasted);
    }
    else {
        var catcher = document.createElement("div");
        catcher.setAttribute("contenteditable", "");
        catcher.className = "forcehidden"; //retarded ie safety/bug, cant apply styles using js//TODO i don't even know what's going on
        catcher.onpaste = function (e) {
            if (e.clipboardData && e.clipboardData.items) {
                apipasted(e);
                return;
            }
            setTimeout(function () {
                var b = catcher.children[0];
                if (!b || b.tagName != "IMG") {
                    return;
                }
                var img = new Image();
                img.src = b.src;
                var a = img.src.match(/^data:([\w\/]+);/);
                if (img.width > 0) {
                    pasted(img);
                }
                else {
                    img.onload = function () { pasted(img); };
                }
                catcher.innerHTML = "";
            }, 1);
        };
        document.body.appendChild(catcher);
    }
    //detect if ctrl-v is pressed and focus catcher if needed
    document.addEventListener("keydown", function (e) {
        if (e.target.tagName == "INPUT") {
            return;
        }
        if (e.keyCode != "V".charCodeAt(0) || !e.ctrlKey) {
            return;
        }
        pasting = true;
        setTimeout(function () {
            if (pasting) {
                error("noimg", "You pressed Ctrl+V, but no image was pasted by your browser, make sure your clipboard contains an image, and not a link to an image.");
            }
        }, 1000);
        if (catcher) {
            catcher.focus();
        }
    });
}
exports.start = start;
function fileDialog() {
    var fileinput = document.createElement("input");
    fileinput.type = "file";
    fileinput.accept = "image/png";
    fileinput.onchange = function () { if (fileinput.files && fileinput.files[0]) {
        fromFile(fileinput.files[0]);
    } };
    fileinput.click();
    return fileinput;
}
exports.fileDialog = fileDialog;
function fromFile(file) {
    if (!file) {
        return;
    }
    var reader = new FileReader();
    reader.onload = function () {
        var bytearray = new Uint8Array(reader.result);
        if (ImageDetect.isPngBuffer(bytearray)) {
            ImageDetect.clearPngColorspace(bytearray);
        }
        var blob = new Blob([bytearray], { type: "image/png" });
        var img = new Image();
        var bloburl = URL.createObjectURL(blob);
        img.onerror = () => {
            URL.revokeObjectURL(bloburl);
            error("invalidfile", "The file you uploaded could not be opened as an image.");
        };
        img.src = bloburl;
        if (img.width > 0) {
            pasted(img);
            URL.revokeObjectURL(bloburl);
        }
        else {
            img.onload = function () {
                pasted(img);
                URL.revokeObjectURL(bloburl);
            };
        }
    };
    reader.readAsArrayBuffer(file);
}


/***/ }),

/***/ "./src/base/rect.ts":
/*!**************************!*\
  !*** ./src/base/rect.ts ***!
  \**************************/
/***/ ((__unused_webpack_module, exports) => {


//util class for rectangle maths
//TODO shit this sucks can we remove it again?
//more of a shorthand to get {x,y,width,height} than a class
//kinda starting to like it again
//TODO remove rant
Object.defineProperty(exports, "__esModule", ({ value: true }));
;
/**
 * Simple rectangle class with some util functions
 */
class Rect {
    constructor(x, y, w, h) {
        this.x = x;
        this.y = y;
        this.width = w;
        this.height = h;
    }
    static fromArgs(...args) {
        if (typeof args[0] == "object") {
            return new Rect(args[0].x, args[0].y, args[0].width, args[0].height);
        }
        else if (typeof args[0] == "number" && args.length >= 4) {
            return new Rect(args[0], args[1], args[2], args[3]);
        }
        else {
            throw new Error("invalid rect args");
        }
    }
    /**
     * Resizes this Rect to include the full size of a given second rectangle
     */
    union(r2) {
        var x = Math.min(this.x, r2.x);
        var y = Math.min(this.y, r2.y);
        this.width = Math.max(this.x + this.width, r2.x + r2.width) - x;
        this.height = Math.max(this.y + this.height, r2.y + r2.height) - y;
        this.x = x;
        this.y = y;
        return this;
    }
    /**
     * Resizes this Rect to include a given point
     */
    includePoint(x, y) {
        this.union(new Rect(x, y, 0, 0));
    }
    /**
     * Grows the rectangle with the given dimensions
     */
    inflate(w, h) {
        this.x -= w;
        this.y -= h;
        this.width += 2 * w;
        this.height += 2 * h;
    }
    /**
     * Resizes this Rect to the area that overlaps a given Rect
     * width and height will be set to 0 if the intersection does not exist
     */
    intersect(r2) {
        if (this.x < r2.x) {
            this.width -= r2.x - this.x;
            this.x = r2.x;
        }
        if (this.y < r2.y) {
            this.height -= r2.y - this.y;
            this.y = r2.y;
        }
        this.width = Math.min(this.x + this.width, r2.x + r2.width) - this.x;
        this.height = Math.min(this.y + this.height, r2.y + r2.height) - this.y;
        if (this.width <= 0 || this.height <= 0) {
            this.width = 0;
            this.height = 0;
        }
    }
    /**
     * Returns wether this Rect has at least one pixel overlap with a given Rect
     */
    overlaps(r2) {
        return this.x < r2.x + r2.width && this.x + this.width > r2.x && this.y < r2.y + r2.height && this.y + this.height > r2.y;
    }
    /**
     * Returns wether a given Rect fits completely inside this Rect
     * @param r2
     */
    contains(r2) {
        return this.x <= r2.x && this.x + this.width >= r2.x + r2.width && this.y <= r2.y && this.y + this.height >= r2.y + r2.height;
    }
    /**
     * Returns wether a given point lies inside this Rect
     */
    containsPoint(x, y) {
        return this.x <= x && this.x + this.width > x && this.y <= y && this.y + this.height > y;
    }
}
exports["default"] = Rect;


/***/ }),

/***/ "./src/base/wrapper.ts":
/*!*****************************!*\
  !*** ./src/base/wrapper.ts ***!
  \*****************************/
/***/ (function(__unused_webpack_module, exports, __nested_webpack_require_55275__) {


var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.captureStream = exports.captureMultiAsync = exports.captureAsync = exports.ImageStreamReader = exports.once = exports.removeListener = exports.on = exports.addResizeElement = exports.getMousePosition = exports.hasAlt1Version = exports.resetEnvironment = exports.identifyApp = exports.unmixColor = exports.mixColor = exports.encodeImageString = exports.decodeImageString = exports.transferImageData = exports.captureHoldFullRs = exports.captureHoldScreen = exports.captureHold = exports.capture = exports.getdisplaybounds = exports.requireAlt1 = exports.openbrowser = exports.skinName = exports.hasAlt1 = exports.newestversion = exports.Alt1Error = exports.NoAlt1Error = void 0;
const rect_1 = __importDefault(__nested_webpack_require_55275__(/*! ./rect */ "./src/base/rect.ts"));
const imgref_1 = __nested_webpack_require_55275__(/*! ./imgref */ "./src/base/imgref.ts");
const imagedata_extensions_1 = __nested_webpack_require_55275__(/*! ./imagedata-extensions */ "./src/base/imagedata-extensions.ts");
__nested_webpack_require_55275__(/*! ./alt1api */ "./src/base/alt1api.ts");
/**
 * Thrown when a method is called that can not be used outside of Alt1
 */
class NoAlt1Error extends Error {
    constructor() {
        super();
        this.message = "This method can not be ran outside of Alt1";
    }
}
exports.NoAlt1Error = NoAlt1Error;
;
/**
 * Thrown when the Alt1 API returns an invalid result
 * Errors of a different type are throw when internal Alt1 errors occur
 */
class Alt1Error extends Error {
}
exports.Alt1Error = Alt1Error;
/**
 * The latest Alt1 version
 */
exports.newestversion = "1.5.5";
/**
 * Whether the Alt1 API is available
 */
exports.hasAlt1 = (typeof alt1 != "undefined");
/**
 * The name of the Alt1 interface skin. (Always "default" if running in a browser)
 */
exports.skinName = exports.hasAlt1 ? alt1.skinName : "default";
/**
 * Max number of bytes that can be sent by alt1 in one function
 * Not completely sure why this number is different than window.alt1.maxtranfer
 */
var maxtransfer = 4000000;
/**
 * Open a link in the default browser
 * @deprecated use window.open instead
 */
function openbrowser(url) {
    if (exports.hasAlt1) {
        alt1.openBrowser(url);
    }
    else {
        window.open(url, '_blank');
    }
}
exports.openbrowser = openbrowser;
/**
 * Throw if Alt1 API is not available
 */
function requireAlt1() {
    if (!exports.hasAlt1) {
        throw new NoAlt1Error();
    }
}
exports.requireAlt1 = requireAlt1;
/**
 * Returns an object with a rectangle that spans all screens
 */
function getdisplaybounds() {
    if (!exports.hasAlt1) {
        return false;
    }
    return new rect_1.default(alt1.screenX, alt1.screenY, alt1.screenWidth, alt1.screenHeight);
}
exports.getdisplaybounds = getdisplaybounds;
/**
 * gets an imagebuffer with pixel data about the requested region
 */
function capture(...args) {
    //TODO change null return on error into throw instead (x3)
    if (!exports.hasAlt1) {
        throw new NoAlt1Error();
    }
    var rect = rect_1.default.fromArgs(...args);
    if (alt1.capture) {
        return new imagedata_extensions_1.ImageData(alt1.capture(rect.x, rect.y, rect.width, rect.height), rect.width, rect.height);
    }
    var buf = new imagedata_extensions_1.ImageData(rect.width, rect.height);
    if (rect.width * rect.height * 4 <= maxtransfer) {
        var data = alt1.getRegion(rect.x, rect.y, rect.width, rect.height);
        if (!data) {
            return null;
        }
        decodeImageString(data, buf, 0, 0, rect.width, rect.height);
    }
    else {
        //split up the request to to exceed the single transfer limit (for now)
        var x1 = rect.x;
        var ref = alt1.bindRegion(rect.x, rect.y, rect.width, rect.height);
        if (ref <= 0) {
            return null;
        }
        while (x1 < rect.x + rect.width) {
            var x2 = Math.min(rect.x + rect.width, Math.floor(x1 + (maxtransfer / 4 / rect.height)));
            var data = alt1.bindGetRegion(ref, x1, rect.y, x2 - x1, rect.height);
            if (!data) {
                return null;
            }
            decodeImageString(data, buf, x1 - rect.x, 0, x2 - x1, rect.height);
            x1 = x2;
        }
    }
    return buf;
}
exports.capture = capture;
/**
 * Makes alt1 bind an area of the rs client in memory without sending it to the js client
 * returns an imgref object which can be used to get pixel data using the imgreftobuf function
 * currently only one bind can exist per app and the ref in (v) will always be 1
 */
function captureHold(x, y, w, h) {
    x = Math.round(x);
    y = Math.round(y);
    w = Math.round(w);
    h = Math.round(h);
    requireAlt1();
    var r = alt1.bindRegion(x, y, w, h);
    if (r <= 0) {
        throw new Alt1Error("capturehold failed");
    }
    return new imgref_1.ImgRefBind(r, x, y, w, h);
}
exports.captureHold = captureHold;
/**
 * Same as captureHoldRegion, but captures the screen instead of the rs client. it also uses screen coordinates instead and can capture outside of the rs client
 */
function captureHoldScreen(x, y, w, h) {
    x = Math.round(x);
    y = Math.round(y);
    w = Math.round(w);
    h = Math.round(h);
    requireAlt1();
    var r = alt1.bindScreenRegion(x, y, w, h);
    if (r <= 0) {
        return false;
    }
    return new imgref_1.ImgRefBind(r, x, y, w, h);
}
exports.captureHoldScreen = captureHoldScreen;
/**
 * bind the full rs window
 */
function captureHoldFullRs() {
    return captureHold(0, 0, alt1.rsWidth, alt1.rsHeight);
}
exports.captureHoldFullRs = captureHoldFullRs;
/**
 * returns a subregion from a bound image
 * used internally in imgreftobuf if imgref is a bound image
 * @deprecated This should be handled internall by the imgrefbind.toData method
 */
function transferImageData(handle, x, y, w, h) {
    x = Math.round(x);
    y = Math.round(y);
    w = Math.round(w);
    h = Math.round(h);
    requireAlt1();
    if (alt1.bindGetRegionBuffer) {
        return new imagedata_extensions_1.ImageData(alt1.bindGetRegionBuffer(handle, x, y, w, h), w, h);
    }
    var r = new imagedata_extensions_1.ImageData(w, h);
    var x1 = x;
    while (true) { //split up the request to to exceed the single transfer limit (for now)
        var x2 = Math.min(x + w, Math.floor(x1 + (maxtransfer / 4 / h)));
        var a = alt1.bindGetRegion(handle, x1, y, x2 - x1, h);
        if (!a) {
            throw new Alt1Error();
        }
        decodeImageString(a, r, x1 - x, 0, x2 - x1, h);
        x1 = x2;
        if (x1 == x + w) {
            break;
        }
        ;
    }
    return r;
}
exports.transferImageData = transferImageData;
/**
 * decodes a returned string from alt1 to an imagebuffer. You generally never have to do this yourself
 */
function decodeImageString(imagestring, target, x, y, w, h) {
    var bin = atob(imagestring);
    var bytes = target.data;
    w |= 0;
    h |= 0;
    var offset = 4 * x + 4 * y * target.width;
    var target_width = target.width | 0;
    for (var a = 0; a < w; a++) {
        for (var b = 0; b < h; b++) {
            var i1 = (offset + (a * 4 | 0) + (b * target_width * 4 | 0)) | 0;
            var i2 = ((a * 4 | 0) + (b * 4 * w | 0)) | 0;
            bytes[i1 + 0 | 0] = bin.charCodeAt(i2 + 2 | 0); //fix weird red/blue swap in c#
            bytes[i1 + 1 | 0] = bin.charCodeAt(i2 + 1 | 0);
            bytes[i1 + 2 | 0] = bin.charCodeAt(i2 + 0 | 0);
            bytes[i1 + 3 | 0] = bin.charCodeAt(i2 + 3 | 0);
        }
    }
    return target;
}
exports.decodeImageString = decodeImageString;
/**
 * encodes an imagebuffer to a string
 */
function encodeImageString(buf, sx = 0, sy = 0, sw = buf.width, sh = buf.height) {
    var raw = "";
    for (var y = sy; y < sy + sh; y++) {
        for (var x = sx; x < sx + sw; x++) {
            var i = 4 * x + 4 * buf.width * y | 0;
            raw += String.fromCharCode(buf.data[i + 2 | 0]);
            raw += String.fromCharCode(buf.data[i + 1 | 0]);
            raw += String.fromCharCode(buf.data[i + 0 | 0]);
            raw += String.fromCharCode(buf.data[i + 3 | 0]);
        }
    }
    return btoa(raw);
}
exports.encodeImageString = encodeImageString;
/**
 * mixes the given color into a single int. This format is used by alt1
 */
function mixColor(r, g, b, a = 255) {
    return (b << 0) + (g << 8) + (r << 16) + (a << 24);
}
exports.mixColor = mixColor;
function unmixColor(col) {
    var r = (col >> 16) & 0xff;
    var g = (col >> 8) & 0xff;
    var b = (col >> 0) & 0xff;
    return [r, g, b];
}
exports.unmixColor = unmixColor;
function identifyApp(url) {
    if (exports.hasAlt1) {
        alt1.identifyAppUrl(url);
    }
}
exports.identifyApp = identifyApp;
function resetEnvironment() {
    exports.hasAlt1 = (typeof alt1 != "undefined");
    exports.skinName = exports.hasAlt1 ? alt1.skinName : "default";
}
exports.resetEnvironment = resetEnvironment;
function convertAlt1Version(str) {
    var a = str.match(/^(\d+)\.(\d+)\.(\d+)$/);
    if (!a) {
        throw new RangeError("Invalid version string");
    }
    return (+a[1]) * 1000 * 1000 + (+a[2]) * 1000 + (+a[3]) * 1;
}
var cachedVersionInt = -1;
/**
 * checks if alt1 is running and at least the given version. versionstr should be a string with the version eg: 1.3.2
 * @param versionstr
 */
function hasAlt1Version(versionstr) {
    if (!exports.hasAlt1) {
        return false;
    }
    if (cachedVersionInt == -1) {
        cachedVersionInt = alt1.versionint;
    }
    return cachedVersionInt >= convertAlt1Version(versionstr);
}
exports.hasAlt1Version = hasAlt1Version;
/**
 * Gets the current cursor position in the game, returns null if the rs window is not active (alt1.rsActive)
 */
function getMousePosition() {
    var pos = alt1.mousePosition;
    if (pos == -1) {
        return null;
    }
    return { x: pos >>> 16, y: pos & 0xFFFF };
}
exports.getMousePosition = getMousePosition;
/**
 * Registers a given HTML element as a frame border, when this element is dragged by the user the Alt1 frame will resize accordingly
 * Use the direction arguements to make a given direction stick to the mouse. eg. Only set left to true to make the element behave as the left border
 * Or set all to true to move the whole window. Not all combinations are permitted
 */
function addResizeElement(el, left, top, right, bot) {
    if (!exports.hasAlt1 || !alt1.userResize) {
        return;
    }
    el.addEventListener("mousedown", function (e) {
        alt1.userResize(left, top, right, bot);
        e.preventDefault();
    });
}
exports.addResizeElement = addResizeElement;
/**
 * Add an event listener
 */
function on(type, listener) {
    if (!exports.hasAlt1) {
        return;
    }
    if (!alt1.events) {
        alt1.events = {};
    }
    if (!alt1.events[type]) {
        alt1.events[type] = [];
    }
    alt1.events[type].push(listener);
}
exports.on = on;
/**
 * Removes an event listener
 */
function removeListener(type, listener) {
    var elist = exports.hasAlt1 && alt1.events && alt1.events[type];
    if (!elist) {
        return;
    }
    var i = elist.indexOf(listener);
    if (i == -1) {
        return;
    }
    elist.splice(i, 1);
}
exports.removeListener = removeListener;
/**
 * Listens for the event to fire once and then stops listening
 * @param event
 * @param cb
 */
function once(type, listener) {
    var fn = (e) => {
        removeListener(type, fn);
        listener(e);
    };
    on(type, fn);
}
exports.once = once;
;
/**
 * Used to read a set of images from a binary stream returned by the Alt1 API
 */
class ImageStreamReader {
    constructor(reader, ...args) {
        this.framebuffer = null;
        this.pos = 0;
        this.reading = false;
        this.closed = false;
        //paused state
        this.pausedindex = -1;
        this.pausedbuffer = null;
        this.streamreader = reader;
        if (args[0] instanceof imagedata_extensions_1.ImageData) {
            this.setFrameBuffer(args[0]);
        }
        else if (typeof args[0] == "number") {
            this.setFrameBuffer(new imagedata_extensions_1.ImageData(args[0], args[1]));
        }
    }
    /**
     *
     */
    setFrameBuffer(buffer) {
        if (this.reading) {
            throw new Error("can't change framebuffer while reading");
        }
        this.framebuffer = buffer;
    }
    /**
     * Closes the underlying stream and ends reading
     */
    close() {
        this.streamreader.cancel();
    }
    /**
     * Reads a single image from the stream
     */
    async nextImage() {
        if (this.reading) {
            throw new Error("already reading from this stream");
        }
        if (!this.framebuffer) {
            throw new Error("framebuffer not set");
        }
        this.reading = true;
        var synctime = -Date.now();
        var starttime = Date.now();
        var r = false;
        while (!r) {
            if (this.pausedindex != -1 && this.pausedbuffer) {
                r = this.readChunk(this.pausedindex, this.framebuffer.data, this.pausedbuffer);
            }
            else {
                synctime += Date.now();
                var res = await this.streamreader.read();
                synctime -= Date.now();
                if (res.done) {
                    throw new Error("Stream closed while reading");
                }
                var data = res.value;
                r = this.readChunk(0, this.framebuffer.data, data);
            }
        }
        synctime += Date.now();
        //console.log("Decoded async image, " + this.framebuffer.width + "x" + this.framebuffer.height + " time: " + (Date.now() - starttime) + "ms (" + synctime + "ms main thread)");
        this.reading = false;
        return this.framebuffer;
    }
    readChunk(i, framedata, buffer) {
        //very hot code, explicit int32 casting with |0 speeds it up by ~ x2
        i = i | 0;
        var framesize = framedata.length | 0;
        var pos = this.pos;
        var datalen = buffer.length | 0;
        //var data32 = new Float64Array(buffer.buffer);
        //var framedata32 = new Float64Array(framedata.buffer);
        //fix possible buffer misalignment
        //align to 16 for extra loop unrolling
        while (i < datalen) {
            //slow loop, fix alignment and other issues
            while (i < datalen && pos < framesize && (pos % 16 != 0 || !((i + 16 | 0) <= datalen && (pos + 16 | 0) <= framesize))) {
                var rel = pos;
                if (pos % 4 == 0) {
                    rel = rel + 2 | 0;
                }
                if (pos % 4 == 2) {
                    rel = rel - 2 | 0;
                }
                framedata[rel | 0] = buffer[i | 0];
                i = i + 1 | 0;
                pos = pos + 1 | 0;
            }
            //fast unrolled loop for large chunks i wish js had some sort of memcpy
            if (pos % 16 == 0) {
                while ((i + 16 | 0) <= datalen && (pos + 16 | 0) <= framesize) {
                    framedata[pos + 0 | 0] = buffer[i + 2 | 0];
                    framedata[pos + 1 | 0] = buffer[i + 1 | 0];
                    framedata[pos + 2 | 0] = buffer[i + 0 | 0];
                    framedata[pos + 3 | 0] = buffer[i + 3 | 0];
                    framedata[pos + 4 | 0] = buffer[i + 6 | 0];
                    framedata[pos + 5 | 0] = buffer[i + 5 | 0];
                    framedata[pos + 6 | 0] = buffer[i + 4 | 0];
                    framedata[pos + 7 | 0] = buffer[i + 7 | 0];
                    framedata[pos + 8 | 0] = buffer[i + 10 | 0];
                    framedata[pos + 9 | 0] = buffer[i + 9 | 0];
                    framedata[pos + 10 | 0] = buffer[i + 8 | 0];
                    framedata[pos + 11 | 0] = buffer[i + 11 | 0];
                    framedata[pos + 12 | 0] = buffer[i + 14 | 0];
                    framedata[pos + 13 | 0] = buffer[i + 13 | 0];
                    framedata[pos + 14 | 0] = buffer[i + 12 | 0];
                    framedata[pos + 15 | 0] = buffer[i + 15 | 0];
                    //could speed it up another x2 but wouldn't be able to swap r/b swap and possible alignment issues
                    //framedata32[pos / 8 + 0 | 0] = data32[i / 8 + 0 | 0];
                    //framedata32[pos / 8 + 1 | 0] = data32[i / 8 + 1 | 0];
                    //framedata32[pos / 4 + 2 | 0] = data32[i / 4 + 2 | 0];
                    //framedata32[pos / 4 + 3 | 0] = data32[i / 4 + 3 | 0];
                    pos = pos + 16 | 0;
                    i = i + 16 | 0;
                }
            }
            if (pos >= framesize) {
                this.pausedbuffer = null;
                this.pausedindex = -1;
                this.pos = 0;
                if (i != buffer.length - 1) {
                    this.pausedbuffer = buffer;
                    this.pausedindex = i;
                }
                return true;
            }
        }
        this.pos = pos;
        this.pausedbuffer = null;
        this.pausedindex = -1;
        return false;
    }
}
exports.ImageStreamReader = ImageStreamReader;
/**
 * Asynchronously captures a section of the game screen
 */
async function captureAsync(...args) {
    requireAlt1();
    var rect = rect_1.default.fromArgs(...args);
    if (alt1.captureAsync) {
        let img = await alt1.captureAsync(rect.x, rect.y, rect.width, rect.height);
        return new imagedata_extensions_1.ImageData(img, rect.width, rect.height);
    }
    if (!hasAlt1Version("1.4.6")) {
        return capture(rect.x, rect.y, rect.width, rect.height);
    }
    var url = "https://alt1api/pixel/getregion/" + encodeURIComponent(JSON.stringify(Object.assign(Object.assign({}, rect), { format: "raw", quality: 1 })));
    var res = await fetch(url);
    var imgreader = new ImageStreamReader(res.body.getReader(), rect.width, rect.height);
    return imgreader.nextImage();
}
exports.captureAsync = captureAsync;
/**
 * Asynchronously captures multple area's. This method captures the images in the same render frame if possible
 * @param areas
 */
async function captureMultiAsync(areas) {
    requireAlt1();
    var r = {};
    if (alt1.captureMultiAsync) {
        let bufs = await alt1.captureMultiAsync(areas);
        for (let a in areas) {
            if (!bufs[a]) {
                r[a] = null;
            }
            r[a] = new imagedata_extensions_1.ImageData(bufs[a], areas[a].width, areas[a].height);
        }
        return r;
    }
    var capts = [];
    var captids = [];
    for (var id in areas) {
        if (areas[id]) {
            capts.push(areas[id]);
            captids.push(id);
        }
        else {
            r[id] = null;
        }
    }
    if (capts.length == 0) {
        return r;
    }
    if (!hasAlt1Version("1.5.1")) {
        var proms = [];
        for (var a = 0; a < capts.length; a++) {
            proms.push(captureAsync(capts[a]));
        }
        var results = await Promise.all(proms);
        for (var a = 0; a < capts.length; a++) {
            r[captids[a]] = results[a];
        }
    }
    else {
        var res = await fetch("https://alt1api/pixel/getregionmulti/" + encodeURIComponent(JSON.stringify({ areas: capts, format: "raw", quality: 1 })));
        var imgreader = new ImageStreamReader(res.body.getReader());
        for (var a = 0; a < capts.length; a++) {
            var capt = capts[a];
            imgreader.setFrameBuffer(new imagedata_extensions_1.ImageData(capt.width, capt.height));
            r[captids[a]] = await imgreader.nextImage();
        }
    }
    return r;
}
exports.captureMultiAsync = captureMultiAsync;
/**
 * Starts capturing a realtime stream of the game. Make sure you keep reading the stream and close it when you're done or Alt1 WILL crash
 * @param framecb Called whenever a new frame is decoded
 * @param errorcb Called whenever an error occurs, the error is rethrown if not defined
 * @param fps Maximum fps of the stream
 */
function captureStream(x, y, width, height, fps, framecb, errorcb) {
    requireAlt1();
    if (!hasAlt1Version("1.4.6")) {
        throw new Alt1Error("This function is not supported in this version of Alt1");
    }
    var url = "https://alt1api/pixel/streamregion/" + encodeURIComponent(JSON.stringify({ x, y, width, height, fps, format: "raw" }));
    var res = fetch(url).then(async (res) => {
        var reader = new ImageStreamReader(res.body.getReader(), width, height);
        try {
            while (!reader.closed && !state.closed) {
                var img = await reader.nextImage();
                if (!state.closed) {
                    framecb(img);
                    state.framenr++;
                }
            }
        }
        catch (e) {
            if (!state.closed) {
                reader.close();
                if (errorcb) {
                    errorcb(e);
                }
                else {
                    throw e;
                }
            }
        }
        if (!reader.closed && state.closed) {
            reader.close();
        }
    });
    var state = {
        x, y, width, height,
        framenr: 0,
        close: () => { state.closed = true; },
        closed: false,
    };
    return state;
}
exports.captureStream = captureStream;


/***/ }),

/***/ "canvas":
/*!*************************!*\
  !*** external "canvas" ***!
  \*************************/
/***/ ((module) => {

if(typeof __WEBPACK_EXTERNAL_MODULE_canvas__ === 'undefined') { var e = new Error("Cannot find module 'canvas'"); e.code = 'MODULE_NOT_FOUND'; throw e; }

module.exports = __WEBPACK_EXTERNAL_MODULE_canvas__;

/***/ }),

/***/ "electron/common":
/*!**********************************!*\
  !*** external "electron/common" ***!
  \**********************************/
/***/ ((module) => {

if(typeof __WEBPACK_EXTERNAL_MODULE_electron_common__ === 'undefined') { var e = new Error("Cannot find module 'electron/common'"); e.code = 'MODULE_NOT_FOUND'; throw e; }

module.exports = __WEBPACK_EXTERNAL_MODULE_electron_common__;

/***/ }),

/***/ "sharp":
/*!************************!*\
  !*** external "sharp" ***!
  \************************/
/***/ ((module) => {

if(typeof __WEBPACK_EXTERNAL_MODULE_sharp__ === 'undefined') { var e = new Error("Cannot find module 'sharp'"); e.code = 'MODULE_NOT_FOUND'; throw e; }

module.exports = __WEBPACK_EXTERNAL_MODULE_sharp__;

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The module cache
/******/ 	var __webpack_module_cache__ = {};
/******/ 	
/******/ 	// The require function
/******/ 	function __nested_webpack_require_78005__(moduleId) {
/******/ 		// Check if module is in cache
/******/ 		var cachedModule = __webpack_module_cache__[moduleId];
/******/ 		if (cachedModule !== undefined) {
/******/ 			return cachedModule.exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = __webpack_module_cache__[moduleId] = {
/******/ 			// no module.id needed
/******/ 			// no module.loaded needed
/******/ 			exports: {}
/******/ 		};
/******/ 	
/******/ 		// Execute the module function
/******/ 		__webpack_modules__[moduleId].call(module.exports, module, module.exports, __nested_webpack_require_78005__);
/******/ 	
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/ 	
/************************************************************************/
/******/ 	/* webpack/runtime/global */
/******/ 	(() => {
/******/ 		__nested_webpack_require_78005__.g = (function() {
/******/ 			if (typeof globalThis === 'object') return globalThis;
/******/ 			try {
/******/ 				return this || new Function('return this')();
/******/ 			} catch (e) {
/******/ 				if (typeof window === 'object') return window;
/******/ 			}
/******/ 		})();
/******/ 	})();
/******/ 	
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module is referenced by other modules so it can't be inlined
/******/ 	var __nested_webpack_exports__ = __nested_webpack_require_78005__("./src/base/index.ts");
/******/ 	
/******/ 	return __nested_webpack_exports__;
/******/ })()
;
});

/***/ }),

/***/ "../node_modules/alt1/dist/buffs/index.js":
/*!************************************************!*\
  !*** ../node_modules/alt1/dist/buffs/index.js ***!
  \************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

(function webpackUniversalModuleDefinition(root, factory) {
	if(true)
		module.exports = factory(__webpack_require__(/*! alt1/base */ "../node_modules/alt1/dist/base/index.js"), __webpack_require__(/*! alt1/ocr */ "../node_modules/alt1/dist/ocr/index.js"));
	else {}
})(globalThis, (__WEBPACK_EXTERNAL_MODULE_alt1_base__, __WEBPACK_EXTERNAL_MODULE_alt1_ocr__) => {
return /******/ (() => { // webpackBootstrap
/******/ 	var __webpack_modules__ = ({

/***/ "./src/buffs/imgs/buffborder.data.png":
/*!********************************************!*\
  !*** ./src/buffs/imgs/buffborder.data.png ***!
  \********************************************/
/***/ ((module, __unused_webpack_exports, __nested_webpack_require_885__) => {

module.exports=(__nested_webpack_require_885__(/*! alt1/base */ "alt1/base").ImageDetect.imageDataFromBase64)("iVBORw0KGgoAAAANSUhEUgAAABsAAAAbCAYAAACN1PRVAAAAAW5vUEUAYtdMlAAAAARub1BFAAAAAEEgjiIAAAAJbm9QRQAAAAAAAAAAAKGKctUAAABCSURBVEhL7daxDQAgDANBwxasxmCsS4jECE8K5JdcX+s219iqKrGTXi+dfs2SjCEZQzKGZAzJGJIxJGNI/2KFj1gK6ntTCO2Nfp8AAAAASUVORK5CYII=")

/***/ }),

/***/ "./src/buffs/imgs/debuffborder.data.png":
/*!**********************************************!*\
  !*** ./src/buffs/imgs/debuffborder.data.png ***!
  \**********************************************/
/***/ ((module, __unused_webpack_exports, __nested_webpack_require_1504__) => {

module.exports=(__nested_webpack_require_1504__(/*! alt1/base */ "alt1/base").ImageDetect.imageDataFromBase64)("iVBORw0KGgoAAAANSUhEUgAAABsAAAAbCAYAAACN1PRVAAAAAW5vUEUAYtdMlAAAAARub1BFAAAAAEEgjiIAAAAJbm9QRQAAAAAAAAAAAKGKctUAAABFSURBVEhL7daxDQAgDANBm5XYfwOYyUgoI5gUyFc51bfhAoQmNzYl1v3MJjVqt0jMIjGLxCwSs0jMIjGLxCz+jTV+xMAB3/oJlYh5IBUAAAAASUVORK5CYII=")

/***/ }),

/***/ "./src/buffs/index.ts":
/*!****************************!*\
  !*** ./src/buffs/index.ts ***!
  \****************************/
/***/ (function(__unused_webpack_module, exports, __nested_webpack_require_2063__) {

"use strict";

var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.BuffInfo = exports.Buff = void 0;
const a1lib = __importStar(__nested_webpack_require_2063__(/*! alt1/base */ "alt1/base"));
const OCR = __importStar(__nested_webpack_require_2063__(/*! alt1/ocr */ "alt1/ocr"));
const base_1 = __nested_webpack_require_2063__(/*! alt1/base */ "alt1/base");
var imgs = (0, base_1.webpackImages)({
    buff: __nested_webpack_require_2063__(/*! ./imgs/buffborder.data.png */ "./src/buffs/imgs/buffborder.data.png"),
    debuff: __nested_webpack_require_2063__(/*! ./imgs/debuffborder.data.png */ "./src/buffs/imgs/debuffborder.data.png"),
});
var font = __nested_webpack_require_2063__(/*! ../fonts/pixel_8px_digits.fontmeta.json */ "./src/fonts/pixel_8px_digits.fontmeta.json");
function negmod(a, b) {
    return ((a % b) + b) % b;
}
class Buff {
    constructor(buffer, x, y, isdebuff) {
        this.buffer = buffer;
        this.bufferx = x;
        this.buffery = y;
        this.isdebuff = isdebuff;
    }
    readArg(type) {
        return BuffReader.readArg(this.buffer, this.bufferx + 2, this.buffery + 23, type);
    }
    readTime() {
        return BuffReader.readTime(this.buffer, this.bufferx + 2, this.buffery + 23);
    }
    compareBuffer(img) {
        return BuffReader.compareBuffer(this.buffer, this.bufferx + 1, this.buffery + 1, img);
    }
    countMatch(img, aggressive) {
        return BuffReader.countMatch(this.buffer, this.bufferx + 1, this.buffery + 1, img, aggressive);
    }
}
exports.Buff = Buff;
class BuffReader {
    constructor() {
        this.pos = null;
        this.debuffs = false;
    }
    find(img) {
        if (!img) {
            img = a1lib.captureHoldFullRs();
        }
        if (!img) {
            return null;
        }
        var poslist = img.findSubimage(this.debuffs ? imgs.debuff : imgs.buff);
        if (poslist.length == 0) {
            return null;
        }
        var grids = [];
        for (var a in poslist) {
            var ongrid = false;
            for (var b in grids) {
                if (negmod(grids[b].x - poslist[a].x, BuffReader.gridsize) == 0 && negmod(grids[b].x - poslist[a].x, BuffReader.gridsize) == 0) {
                    grids[b].x = Math.min(grids[b].x, poslist[a].x);
                    grids[b].y = Math.min(grids[b].y, poslist[a].y);
                    grids[b].n++;
                    ongrid = true;
                    break;
                }
            }
            if (!ongrid) {
                grids.push({ x: poslist[a].x, y: poslist[a].y, n: 1 });
            }
        }
        var max = 0;
        var above2 = 0;
        var best = null;
        for (var a in grids) {
            console.log("buff grid [" + grids[a].x + "," + grids[a].y + "], n:" + grids[a].n);
            if (grids[a].n > max) {
                max = grids[a].n;
                best = grids[a];
            }
            if (grids[a].n >= 2) {
                above2++;
            }
        }
        if (above2 > 1) {
            console.log("Warning, more than one possible buff bar location");
        }
        if (!best) {
            return null;
        }
        this.pos = { x: best.x, y: best.y, maxhor: 5, maxver: 1 };
        return true;
    }
    getCaptRect() {
        if (!this.pos) {
            return null;
        }
        return new a1lib.Rect(this.pos.x, this.pos.y, (this.pos.maxhor + 1) * BuffReader.gridsize, (this.pos.maxver + 1) * BuffReader.gridsize);
    }
    read(buffer) {
        if (!this.pos) {
            throw new Error("no pos");
        }
        var r = [];
        var rect = this.getCaptRect();
        if (!rect) {
            return null;
        }
        if (!buffer) {
            buffer = a1lib.capture(rect.x, rect.y, rect.width, rect.height);
        }
        var maxhor = 0;
        var maxver = 0;
        for (var ix = 0; ix <= this.pos.maxhor; ix++) {
            for (var iy = 0; iy <= this.pos.maxver; iy++) {
                var x = ix * BuffReader.gridsize;
                var y = iy * BuffReader.gridsize;
                //Have to require exact match here as we get transparency bs otherwise
                var match = buffer.pixelCompare((this.debuffs ? imgs.debuff : imgs.buff), x, y) == 0;
                if (!match) {
                    break;
                }
                r.push(new Buff(buffer, x, y, this.debuffs));
                maxhor = Math.max(maxhor, ix);
                maxver = Math.max(maxver, iy);
            }
        }
        this.pos.maxhor = Math.max(5, maxhor + 2);
        this.pos.maxver = Math.max(1, maxver + 1);
        return r;
    }
    static compareBuffer(buffer, ox, oy, buffimg) {
        var r = BuffReader.countMatch(buffer, ox, oy, buffimg, true);
        if (r.failed > 0) {
            return false;
        }
        if (r.tested < 50) {
            return false;
        }
        return true;
    }
    static countMatch(buffer, ox, oy, buffimg, agressive) {
        var r = { tested: 0, failed: 0, skipped: 0, passed: 0 };
        var data1 = buffer.data;
        var data2 = buffimg.data;
        //var debug = new ImageData(buffimg.width, buffimg.height);
        for (var y = 0; y < buffimg.height; y++) {
            for (var x = 0; x < buffimg.width; x++) {
                var i1 = buffer.pixelOffset(ox + x, oy + y);
                var i2 = buffimg.pixelOffset(x, y);
                //debug.data[i2] = 255; debug.data[i2 + 1] = debug.data[i2 + 2] = 0; debug.data[i2 + 3] = 255;
                if (data2[i2 + 3] != 255) {
                    r.skipped++;
                    continue;
                } //transparent buff pixel
                if (data1[i1] == 255 && data1[i1 + 1] == 255 && data1[i1 + 2] == 255) {
                    r.skipped++;
                    continue;
                } //white pixel - part of buff time text
                if (data1[i1] == 0 && data1[i1 + 1] == 0 && data1[i1 + 2] == 0) {
                    r.skipped++;
                    continue;
                } //black pixel - part of buff time text
                var d = a1lib.ImageDetect.coldif(data1[i1], data1[i1 + 1], data1[i1 + 2], data2[i2], data2[i2 + 1], data2[i2 + 2], 255);
                r.tested++;
                //debug.data[i2] = debug.data[i2 + 1] = debug.data[i2 + 2] = d * 10;
                if (d > 35) {
                    //qw(pixelschecked); debug.show();
                    r.failed++;
                    if (agressive) {
                        return r;
                    }
                }
                else {
                    r.passed++;
                }
            }
        }
        //debug.show(); qw(pixelschecked);
        return r;
    }
    static isolateBuffer(buffer, ox, oy, buffimg) {
        var count = BuffReader.countMatch(buffer, ox, oy, buffimg);
        if (count.passed < 50) {
            return;
        }
        var removed = 0;
        var data1 = buffer.data;
        var data2 = buffimg.data;
        //var debug = new ImageData(buffimg.width, buffimg.height);
        for (var y = 0; y < buffimg.height; y++) {
            for (var x = 0; x < buffimg.width; x++) {
                var i1 = buffer.pixelOffset(ox + x, oy + y);
                var i2 = buffimg.pixelOffset(x, y);
                //debug.data[i2] = 255; debug.data[i2 + 1] = debug.data[i2 + 2] = 0; debug.data[i2 + 3] = 255;
                if (data2[i2 + 3] != 255) {
                    continue;
                } //transparent buff pixel
                //==== new buffer has text on it ====
                if (data1[i1] == 255 && data1[i1 + 1] == 255 && data1[i1 + 2] == 255 || data1[i1] == 0 && data1[i1 + 1] == 0 && data1[i1 + 2] == 0) {
                    continue;
                }
                //==== old buf has text on it, use the new one ====
                if (data2[i2] == 255 && data2[i2 + 1] == 255 && data2[i2 + 2] == 255 || data2[i2] == 0 && data2[i2 + 1] == 0 && data2[i2 + 2] == 0) {
                    data2[i2 + 0] = data1[i1 + 0];
                    data2[i2 + 1] = data1[i1 + 1];
                    data2[i2 + 2] = data1[i1 + 2];
                    data2[i2 + 3] = data1[i1 + 3];
                    removed++;
                }
                var d = a1lib.ImageDetect.coldif(data1[i1], data1[i1 + 1], data1[i1 + 2], data2[i2], data2[i2 + 1], data2[i2 + 2], 255);
                //debug.data[i2] = debug.data[i2 + 1] = debug.data[i2 + 2] = d * 10;
                if (d > 5) {
                    //qw(pixelschecked); debug.show();
                    data2[i2 + 0] = data2[i2 + 1] = data2[i2 + 2] = data2[i2 + 3] = 0;
                    removed++;
                }
            }
        }
        //debug.show(); qw(pixelschecked);
        if (removed > 0) {
            console.log(removed + " pixels remove from buff template image");
        }
    }
    static readArg(buffer, ox, oy, type) {
        var lines = [];
        for (var dy = -10; dy < 10; dy += 10) { //the timer can be spread to a second line at certain times (229m)
            var result = OCR.readLine(buffer, font, [255, 255, 255], ox, oy + dy, true);
            if (result.text) {
                lines.push(result.text);
            }
        }
        var r = { time: 0, arg: "" };
        if (type == "timearg" && lines.length > 1) {
            r.arg = lines.pop();
        }
        var str = lines.join("");
        if (type == "arg") {
            r.arg = str;
        }
        else {
            var m;
            if (m = str.match(/^(\d+)hr($|\s?\()/i)) {
                r.time = +m[1] * 60 * 60;
            }
            else if (m = str.match(/^(\d+)m($|\s?\()/i)) {
                r.time = +m[1] * 60;
            }
            else if (m = str.match(/^(\d+)($|\s?\()/)) {
                r.time = +m[1];
            }
        }
        return r;
    }
    static readTime(buffer, ox, oy) {
        return this.readArg(buffer, ox, oy, "time").time;
    }
    static matchBuff(state, buffimg) {
        for (var a in state) {
            if (state[a].compareBuffer(buffimg)) {
                return state[a];
            }
        }
        return null;
    }
    static matchBuffMulti(state, buffinfo) {
        if (buffinfo.final) { //cheap way if we known exactly what we're searching for
            return BuffReader.matchBuff(state, buffinfo.imgdata);
        }
        else { //expensive way if we are not sure the template is final
            var bestindex = -1;
            var bestscore = 0;
            if (buffinfo.imgdata) {
                for (var a = 0; a < state.length; a++) {
                    var count = BuffReader.countMatch(state[a].buffer, state[a].bufferx + 1, state[a].buffery + 1, buffinfo.imgdata, false);
                    if (count.passed > bestscore) {
                        bestscore = count.passed;
                        bestindex = a;
                    }
                }
            }
            if (bestscore < 50) {
                return null;
            }
            //update the isolated buff
            if (buffinfo.canimprove) {
                BuffReader.isolateBuffer(state[bestindex].buffer, state[bestindex].bufferx + 1, state[bestindex].buffery + 1, buffinfo.imgdata);
            }
            return state[bestindex];
        }
    }
}
BuffReader.buffsize = 27;
BuffReader.gridsize = 30;
exports["default"] = BuffReader;
class BuffInfo {
    constructor(imgdata, debuff, id, canimprove) {
        this.imgdata = imgdata;
        this.isdebuff = debuff;
        this.buffid = id;
        this.final = !!id && !canimprove;
        this.canimprove = canimprove;
    }
}
exports.BuffInfo = BuffInfo;


/***/ }),

/***/ "alt1/base":
/*!**************************************************************************************************!*\
  !*** external {"root":"A1lib","commonjs2":"alt1/base","commonjs":"alt1/base","amd":"alt1/base"} ***!
  \**************************************************************************************************/
/***/ ((module) => {

"use strict";
module.exports = __WEBPACK_EXTERNAL_MODULE_alt1_base__;

/***/ }),

/***/ "alt1/ocr":
/*!*********************************************************************************************!*\
  !*** external {"root":"OCR","commonjs2":"alt1/ocr","commonjs":"alt1/ocr","amd":"alt1/ocr"} ***!
  \*********************************************************************************************/
/***/ ((module) => {

"use strict";
module.exports = __WEBPACK_EXTERNAL_MODULE_alt1_ocr__;

/***/ }),

/***/ "./src/fonts/pixel_8px_digits.fontmeta.json":
/*!**************************************************!*\
  !*** ./src/fonts/pixel_8px_digits.fontmeta.json ***!
  \**************************************************/
/***/ ((module) => {

"use strict";
module.exports = JSON.parse('{"chars":[{"width":7,"bonus":120,"chr":"0","pixels":[0,2,255,255,0,3,255,255,0,4,255,255,0,5,255,255,1,1,255,255,1,3,255,0,1,4,255,0,1,5,255,0,1,6,255,255,2,0,255,255,2,2,255,0,2,7,255,255,3,1,255,255,3,6,255,255,3,8,255,0,4,2,255,255,4,3,255,255,4,4,255,255,4,5,255,255,4,7,255,0,5,3,255,0,5,4,255,0,5,5,255,0,5,6,255,0],"secondary":false},{"width":4,"bonus":95,"chr":"1","pixels":[0,1,255,255,0,7,255,255,1,0,255,255,1,1,255,255,1,2,255,255,1,3,255,255,1,4,255,255,1,5,255,255,1,6,255,255,1,7,255,255,1,8,255,0,2,1,255,0,2,2,255,0,2,3,255,0,2,4,255,0,2,5,255,0,2,6,255,0,2,7,255,255,2,8,255,0],"secondary":false},{"width":7,"bonus":140,"chr":"2","pixels":[0,1,255,255,0,6,255,255,0,7,255,255,1,0,255,255,1,2,255,0,1,5,255,255,1,7,255,255,1,8,255,0,2,0,255,255,2,1,255,0,2,4,255,255,2,6,255,0,2,7,255,255,2,8,255,0,3,0,255,255,3,1,255,0,3,3,255,255,3,5,255,0,3,7,255,255,3,8,255,0,4,1,255,255,4,2,255,255,4,4,255,0,4,7,255,255,4,8,255,0,5,2,255,0,5,3,255,0,5,8,255,0],"secondary":false},{"width":6,"bonus":115,"chr":"3","pixels":[0,1,255,255,0,6,255,255,1,0,255,255,1,2,255,0,1,3,255,255,1,7,255,255,2,0,255,255,2,1,255,0,2,3,255,255,2,4,255,0,2,7,255,255,2,8,255,0,3,1,255,255,3,2,255,255,3,4,255,255,3,5,255,255,3,6,255,255,3,8,255,0,4,2,255,0,4,3,255,0,4,5,255,0,4,6,255,0,4,7,255,0],"secondary":false},{"width":5,"bonus":110,"chr":"4","pixels":[0,0,255,255,0,1,255,255,0,2,255,255,0,3,255,255,0,4,255,255,0,5,255,255,1,1,255,0,1,2,255,0,1,3,255,0,1,4,255,0,1,5,255,255,1,6,255,0,2,3,255,255,2,4,255,255,2,5,255,255,2,6,255,255,2,7,255,255,3,4,255,0,3,5,255,255,3,6,255,0,3,7,255,0,3,8,255,0],"secondary":false},{"width":6,"bonus":135,"chr":"5","pixels":[0,0,255,255,0,1,255,255,0,2,255,255,0,3,255,255,0,6,255,255,1,0,255,255,1,1,255,0,1,2,255,0,1,3,255,255,1,4,255,0,1,7,255,255,2,0,255,255,2,1,255,0,2,3,255,255,2,4,255,0,2,7,255,255,2,8,255,0,3,0,255,255,3,1,255,0,3,4,255,255,3,5,255,255,3,6,255,255,3,8,255,0,4,1,255,0,4,5,255,0,4,6,255,0,4,7,255,0],"secondary":false},{"width":7,"bonus":160,"chr":"6","pixels":[0,2,255,255,0,3,255,255,0,4,255,255,0,5,255,255,0,6,255,255,1,1,255,255,1,3,255,0,1,4,255,255,1,5,255,0,1,6,255,0,1,7,255,255,2,0,255,255,2,2,255,0,2,3,255,255,2,5,255,0,2,7,255,255,2,8,255,0,3,0,255,255,3,1,255,0,3,3,255,255,3,4,255,0,3,7,255,255,3,8,255,0,4,1,255,255,4,4,255,255,4,5,255,255,4,6,255,255,4,8,255,0,5,2,255,0,5,5,255,0,5,6,255,0,5,7,255,0],"secondary":false},{"width":6,"bonus":105,"chr":"7","pixels":[0,0,255,255,0,6,255,255,0,7,255,255,1,0,255,255,1,1,255,0,1,4,255,255,1,5,255,255,1,7,255,0,1,8,255,0,2,0,255,255,2,1,255,0,2,2,255,255,2,3,255,255,2,5,255,0,2,6,255,0,3,0,255,255,3,1,255,255,3,3,255,0,3,4,255,0,4,1,255,0,4,2,255,0],"secondary":false},{"width":7,"bonus":170,"chr":"8","pixels":[0,1,255,255,0,2,255,255,0,4,255,255,0,5,255,255,0,6,255,255,1,0,255,255,1,2,255,0,1,3,255,255,1,5,255,0,1,6,255,0,1,7,255,255,2,0,255,255,2,1,255,0,2,3,255,255,2,4,255,0,2,7,255,255,2,8,255,0,3,0,255,255,3,1,255,0,3,3,255,255,3,4,255,0,3,7,255,255,3,8,255,0,4,1,255,255,4,2,255,255,4,4,255,255,4,5,255,255,4,6,255,255,4,8,255,0,5,2,255,0,5,3,255,0,5,5,255,0,5,6,255,0,5,7,255,0],"secondary":false},{"width":7,"bonus":130,"chr":"9","pixels":[0,1,255,255,0,2,255,255,1,0,255,255,1,2,255,0,1,3,255,255,2,0,255,255,2,1,255,0,2,4,255,255,3,0,255,255,3,1,255,0,3,4,255,255,3,5,255,0,4,1,255,255,4,2,255,255,4,3,255,255,4,4,255,255,4,5,255,255,4,6,255,255,4,7,255,255,5,2,255,0,5,3,255,0,5,4,255,0,5,5,255,0,5,6,255,0,5,7,255,0,5,8,255,0],"secondary":false},{"width":7,"bonus":130,"chr":"m","pixels":[0,4,255,255,0,5,255,255,0,6,255,255,0,7,255,255,1,3,255,255,1,5,255,0,1,6,255,0,1,7,255,0,1,8,255,0,2,4,255,255,2,5,255,255,2,6,255,255,2,7,255,255,3,3,255,255,3,5,255,0,3,6,255,0,3,7,255,0,3,8,255,0,4,4,255,255,4,5,255,255,4,6,255,255,4,7,255,255,5,5,255,0,5,6,255,0,5,7,255,0,5,8,255,0],"secondary":false},{"width":3,"bonus":80,"chr":"(","pixels":[0,1,255,255,0,2,255,255,0,3,255,255,0,4,255,255,0,5,255,255,0,6,255,255,0,7,255,255,1,0,255,255,1,2,255,0,1,3,255,0,1,4,255,0,1,5,255,0,1,6,255,0,1,7,255,0,1,8,255,255,2,1,255,0],"secondary":false},{"width":2,"bonus":70,"chr":")","pixels":[0,1,255,255,0,2,255,255,0,3,255,255,0,4,255,255,0,5,255,255,0,6,255,255,0,7,255,255,1,2,255,0,1,3,255,0,1,4,255,0,1,5,255,0,1,6,255,0,1,7,255,0,1,8,255,0],"secondary":false},{"width":6,"bonus":135,"chr":"h","pixels":[0,0,255,255,0,1,255,255,0,2,255,255,0,3,255,255,0,4,255,255,0,5,255,255,0,6,255,255,0,7,255,255,1,1,255,0,1,2,255,0,1,3,255,255,1,4,255,0,1,5,255,0,1,6,255,0,1,7,255,0,1,8,255,0,2,3,255,255,2,4,255,0,2,5,255,0,3,4,255,255,3,5,255,255,3,6,255,255,3,7,255,255,4,5,255,0,4,6,255,0,4,7,255,0,4,8,255,0],"secondary":false},{"width":5,"bonus":65,"chr":"r","pixels":[0,3,255,255,0,4,255,255,0,5,255,255,0,6,255,255,0,7,255,255,1,4,255,255,1,5,255,0,1,6,255,0,1,7,255,0,1,8,255,0,2,3,255,255,2,5,255,0,3,4,255,0],"secondary":false}],"width":7,"spacewidth":3,"shadow":true,"height":9,"basey":7}');

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The module cache
/******/ 	var __webpack_module_cache__ = {};
/******/ 	
/******/ 	// The require function
/******/ 	function __nested_webpack_require_21006__(moduleId) {
/******/ 		// Check if module is in cache
/******/ 		var cachedModule = __webpack_module_cache__[moduleId];
/******/ 		if (cachedModule !== undefined) {
/******/ 			return cachedModule.exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = __webpack_module_cache__[moduleId] = {
/******/ 			// no module.id needed
/******/ 			// no module.loaded needed
/******/ 			exports: {}
/******/ 		};
/******/ 	
/******/ 		// Execute the module function
/******/ 		__webpack_modules__[moduleId].call(module.exports, module, module.exports, __nested_webpack_require_21006__);
/******/ 	
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/ 	
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module is referenced by other modules so it can't be inlined
/******/ 	var __nested_webpack_exports__ = __nested_webpack_require_21006__("./src/buffs/index.ts");
/******/ 	
/******/ 	return __nested_webpack_exports__;
/******/ })()
;
});

/***/ }),

/***/ "../node_modules/alt1/dist/ocr/index.js":
/*!**********************************************!*\
  !*** ../node_modules/alt1/dist/ocr/index.js ***!
  \**********************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

(function webpackUniversalModuleDefinition(root, factory) {
	if(true)
		module.exports = factory(__webpack_require__(/*! alt1/base */ "../node_modules/alt1/dist/base/index.js"));
	else {}
})(globalThis, (__WEBPACK_EXTERNAL_MODULE_alt1_base__) => {
return /******/ (() => { // webpackBootstrap
/******/ 	"use strict";
/******/ 	var __webpack_modules__ = ({

/***/ "./src/ocr/index.ts":
/*!**************************!*\
  !*** ./src/ocr/index.ts ***!
  \**************************/
/***/ ((__unused_webpack_module, exports, __nested_webpack_require_728__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.generateFont = exports.loadFontImage = exports.readChar = exports.readSmallCapsBackwards = exports.readLine = exports.getChatColor = exports.getChatColorMono = exports.findReadLine = exports.findChar = exports.decompose3col = exports.decomposeblack = exports.decompose2col = exports.canblend = exports.unblendTrans = exports.unblendKnownBg = exports.unblendBlackBackground = exports.debugFont = exports.debugout = exports.debug = void 0;
const base_1 = __nested_webpack_require_728__(/*! alt1/base */ "alt1/base");
exports.debug = {
    printcharscores: false,
    trackread: false
};
exports.debugout = {};
/**
 * draws the font definition to a buffer and displays it in the dom for debugging purposes
 * @param font
 */
function debugFont(font) {
    var spacing = font.width + 2;
    var buf = new base_1.ImageData(spacing * font.chars.length, font.height + 1);
    for (var a = 0; a < buf.data.length; a += 4) {
        buf.data[a] = buf.data[a + 1] = buf.data[a + 2] = 0;
        buf.data[a + 3] = 255;
    }
    for (var a = 0; a < font.chars.length; a++) {
        var bx = a * spacing;
        var chr = font.chars[a];
        for (var b = 0; b < chr.pixels.length; b += (font.shadow ? 4 : 3)) {
            buf.setPixel(bx + chr.pixels[b], chr.pixels[b + 1], [chr.pixels[b + 2], chr.pixels[b + 2], chr.pixels[b + 2], 255]);
            if (font.shadow) {
                buf.setPixel(bx + chr.pixels[b], chr.pixels[b + 1], [chr.pixels[b + 3], 0, 0, 255]);
            }
        }
    }
    buf.show();
}
exports.debugFont = debugFont;
function unblendBlackBackground(img, r, g, b) {
    var rimg = new base_1.ImageData(img.width, img.height);
    for (var i = 0; i < img.data.length; i += 4) {
        var col = decomposeblack(img.data[i], img.data[i + 1], img.data[i + 2], r, g, b);
        rimg.data[i + 0] = col[0] * 255;
        rimg.data[i + 1] = rimg.data[i + 0];
        rimg.data[i + 2] = rimg.data[i + 0];
        rimg.data[i + 3] = 255;
    }
    return rimg;
}
exports.unblendBlackBackground = unblendBlackBackground;
/**
 * unblends a imagebuffer into match strength with given color
 * the bgimg argument should contain a second image with pixel occluded by the font visible.
 * @param img
 * @param shadow detect black as second color
 * @param bgimg optional second image to
 */
function unblendKnownBg(img, bgimg, shadow, r, g, b) {
    if (bgimg && (img.width != bgimg.width || img.height != bgimg.height)) {
        throw "bgimg size doesn't match";
    }
    var rimg = new base_1.ImageData(img.width, img.height);
    var totalerror = 0;
    for (var i = 0; i < img.data.length; i += 4) {
        var col = decompose2col(img.data[i], img.data[i + 1], img.data[i + 2], r, g, b, bgimg.data[i + 0], bgimg.data[i + 1], bgimg.data[i + 2]);
        if (shadow) {
            if (col[2] > 0.01) {
                console.log("high error component: " + (col[2] * 100).toFixed(1) + "%");
            }
            totalerror += col[2];
            var m = 1 - col[1] - Math.abs(col[2]); //main color+black=100%-bg-error
            rimg.data[i + 0] = m * 255;
            rimg.data[i + 1] = col[0] / m * 255;
            rimg.data[i + 2] = rimg.data[i + 0];
        }
        else {
            rimg.data[i + 0] = col[0] * 255;
            rimg.data[i + 1] = rimg.data[i + 0];
            rimg.data[i + 2] = rimg.data[i + 0];
        }
        rimg.data[i + 3] = 255;
    }
    return rimg;
}
exports.unblendKnownBg = unblendKnownBg;
/**
 * Unblends a font image that is already conpletely isolated to the raw image used ingame. This is the easiest mode for pixel fonts where alpha is 0 or 255, or for extracted font files.
 * @param img
 * @param r
 * @param g
 * @param b
 * @param shadow whether the font has a black shadow
 */
function unblendTrans(img, shadow, r, g, b) {
    var rimg = new base_1.ImageData(img.width, img.height);
    var pxlum = r + g + b;
    for (var i = 0; i < img.data.length; i += 4) {
        if (shadow) {
            var lum = img.data[i + 0] + img.data[i + 1] + img.data[i + 2];
            rimg.data[i + 0] = img.data[i + 3];
            rimg.data[i + 1] = lum / pxlum * 255;
            rimg.data[i + 2] = rimg.data[i + 0];
        }
        else {
            rimg.data[i + 0] = img.data[i + 3];
            rimg.data[i + 1] = rimg.data[i + 0];
            rimg.data[i + 2] = rimg.data[i + 0];
        }
        rimg.data[i + 3] = 255;
    }
    return rimg;
}
exports.unblendTrans = unblendTrans;
/**
 * Determised wether color [rgb]m can be a result of a blend with color [rgb]1 that is p (0-1) of the mix
 * It returns the number that the second color has to lie outside of the possible color ranges
 * @param rm resulting color
 * @param r1 first color of the mix (the other color is unknown)
 * @param p the portion of the [rgb]1 in the mix (0-1)
 */
function canblend(rm, gm, bm, r1, g1, b1, p) {
    var m = Math.min(50, p / (1 - p));
    var r = rm + (rm - r1) * m;
    var g = gm + (gm - g1) * m;
    var b = bm + (bm - b1) * m;
    return Math.max(0, -r, -g, -b, r - 255, g - 255, b - 255);
}
exports.canblend = canblend;
/**
 * decomposes a color in 2 given component colors and returns the amount of each color present
 * also return a third (noise) component which is the the amount leftover orthagonal from the 2 given colors
 */
function decompose2col(rp, gp, bp, r1, g1, b1, r2, g2, b2) {
    //get the normal of the error (cross-product of both colors)
    var r3 = g1 * b2 - g2 * b1;
    var g3 = b1 * r2 - b2 * r1;
    var b3 = r1 * g2 - r2 * g1;
    //normalize to length 255
    var norm = 255 / Math.sqrt(r3 * r3 + g3 * g3 + b3 * b3);
    r3 *= norm;
    g3 *= norm;
    b3 *= norm;
    return decompose3col(rp, gp, bp, r1, g1, b1, r2, g2, b2, r3, g3, b3);
}
exports.decompose2col = decompose2col;
/**
 * decomposes a pixel in a given color component and black and returns what proportion of the second color it contains
 * this is not as formal as decompose 2/3 and only give a "good enough" number
 */
function decomposeblack(rp, gp, bp, r1, g1, b1) {
    var dr = Math.abs(rp - r1);
    var dg = Math.abs(gp - g1);
    var db = Math.abs(bp - b1);
    var maxdif = Math.max(dr, dg, db);
    return [1 - maxdif / 255];
}
exports.decomposeblack = decomposeblack;
/**
 * decomposes a color in 3 given component colors and returns the amount of each color present
 */
function decompose3col(rp, gp, bp, r1, g1, b1, r2, g2, b2, r3, g3, b3) {
    //P=x*C1+y*C2+z*C3
    //assemble as matrix 
    //M*w=p
    //get inverse of M
    //dirty written out version of cramer's rule
    var A = g2 * b3 - b2 * g3;
    var B = g3 * b1 - b3 * g1;
    var C = g1 * b2 - b1 * g2;
    var D = b2 * r3 - r2 * b3;
    var E = b3 * r1 - r3 * b1;
    var F = b1 * r2 - r1 * b2;
    var G = r2 * g3 - g2 * r3;
    var H = r3 * g1 - g3 * r1;
    var I = r1 * g2 - g1 * r2;
    var det = r1 * A + g1 * D + b1 * G;
    //M^-1*p=w
    var x = (A * rp + D * gp + G * bp) / det;
    var y = (B * rp + E * gp + H * bp) / det;
    var z = (C * rp + F * gp + I * bp) / det;
    return [x, y, z];
}
exports.decompose3col = decompose3col;
/**
 * brute force to the exact position of the text
 */
function findChar(buffer, font, col, x, y, w, h) {
    if (x < 0) {
        return null;
    }
    if (y - font.basey < 0) {
        return null;
    }
    if (x + w + font.width > buffer.width) {
        return null;
    }
    if (y + h - font.basey + font.height > buffer.height) {
        return null;
    }
    var best = 1000; //TODO finetune score constants
    var bestchar = null;
    for (var cx = x; cx < x + w; cx++) {
        for (var cy = y; cy < y + h; cy++) {
            var chr = readChar(buffer, font, col, cx, cy, false, false);
            if (chr != null && chr.sizescore < best) {
                best = chr.sizescore;
                bestchar = chr;
            }
        }
    }
    return bestchar;
}
exports.findChar = findChar;
/**
 * reads text with unknown exact coord or color. The given coord should be inside the text
 * color selection not implemented yet
 */
function findReadLine(buffer, font, cols, x, y, w = -1, h = -1) {
    if (w == -1) {
        w = font.width + font.spacewidth;
        x -= Math.ceil(w / 2);
    }
    if (h == -1) {
        h = 7;
        y -= 1;
    }
    var chr = null;
    if (cols.length > 1) {
        //TODO use getChatColor() instead for non-mono?
        var sorted = getChatColorMono(buffer, new base_1.Rect(x, y - font.basey, w, h), cols);
        //loop until we have a match (max 2 cols)
        for (var a = 0; a < 2 && a < sorted.length && chr == null; a++) {
            chr = findChar(buffer, font, sorted[a].col, x, y, w, h);
        }
    }
    else {
        chr = findChar(buffer, font, cols[0], x, y, w, h);
    }
    if (chr == null) {
        return { debugArea: { x, y, w, h }, text: "", fragments: [] };
    }
    return readLine(buffer, font, cols, chr.x, chr.y, true, true);
}
exports.findReadLine = findReadLine;
function getChatColorMono(buf, rect, colors) {
    var colormap = colors.map(c => ({ col: c, score: 0 }));
    if (rect.x < 0 || rect.y < 0 || rect.x + rect.width > buf.width || rect.y + rect.height > buf.height) {
        return colormap;
    }
    var data = buf.data;
    var maxd = 50;
    for (var colobj of colormap) {
        var score = 0;
        var col = colobj.col;
        for (var y = rect.y; y < rect.y + rect.height; y++) {
            for (var x = rect.x; x < rect.x + rect.width; x++) {
                var i = x * 4 + y * 4 * buf.width;
                var d = Math.abs(data[i] - col[0]) + Math.abs(data[i + 1] - col[1]) + Math.abs(data[i + 2] - col[2]);
                if (d < maxd) {
                    score += maxd - d;
                }
            }
        }
        colobj.score = score;
    }
    return colormap.sort((a, b) => b.score - a.score);
}
exports.getChatColorMono = getChatColorMono;
function unblend(r, g, b, R, G, B) {
    var m = Math.sqrt(r * r + g * g + b * b);
    var n = Math.sqrt(R * R + G * G + B * B);
    var x = (r * R + g * G + b * B) / n;
    var y = Math.sqrt(Math.max(0, m * m - x * x));
    var r1 = Math.max(0, (63.75 - y) * 4);
    var r2 = x / n * 255;
    if (r2 > 255) //brighter than refcol
     {
        r1 = Math.max(0, r1 - r2 + 255);
        r2 = 255;
    }
    return [r1, r2];
}
function getChatColor(buf, rect, colors) {
    var bestscore = -1.0;
    var best = null;
    var b2 = 0.0;
    var data = buf.data;
    for (let col of colors) {
        var score = 0.0;
        for (var y = rect.y; y < rect.y + rect.height; y++) {
            for (var x = rect.x; x < rect.x + rect.width; x++) {
                if (x < 0 || x + 1 >= buf.width) {
                    continue;
                }
                if (y < 0 || y + 1 >= buf.width) {
                    continue;
                }
                let i1 = buf.pixelOffset(x, y);
                let i2 = buf.pixelOffset(x + 1, y + 1);
                var pixel1 = unblend(data[i1 + 0], data[i1 + 1], data[i1 + 2], col[0], col[1], col[2]);
                var pixel2 = unblend(data[i2 + 0], data[i2 + 1], data[i2 + 2], col[0], col[1], col[2]);
                //TODO this is from c# can simplify a bit
                var s = (pixel1[0] / 255 * pixel1[1] / 255) * (pixel2[0] / 255 * (255.0 - pixel2[1]) / 255);
                score += s;
            }
        }
        if (score > bestscore) {
            b2 = bestscore;
            bestscore = score;
            best = col;
        }
        else if (score > b2) {
            b2 = score;
        }
    }
    //Console.WriteLine("color: " + bestcol + " - " + (bestscore - b2));
    //bestscore /= rect.width * rect.height;
    return best;
}
exports.getChatColor = getChatColor;
/**
 * reads a line of text with exactly known position and color. y should be the y coord of the text base line, x should be the first pixel of a new character
 */
function readLine(buffer, font, colors, x, y, forward, backward = false) {
    if (typeof colors[0] != "number" && colors.length == 1) {
        colors = colors[0];
    }
    var multicol = typeof colors[0] != "number";
    var allcolors = multicol ? colors : [colors];
    var detectcolor = function (sx, sy, backward) {
        var w = Math.floor(font.width * 1.5);
        if (backward) {
            sx -= w;
        }
        sy -= font.basey;
        return getChatColor(buffer, { x: sx, y: sy, width: w, height: font.height }, allcolors);
    };
    var fragments = [];
    var x1 = x;
    var x2 = x;
    var maxspaces = (typeof font.maxspaces == "number" ? font.maxspaces : 1);
    let fragtext = "";
    let fraghadprimary = false;
    var lastcol = null;
    let addfrag = (forward) => {
        if (!fragtext) {
            return;
        }
        let frag = {
            text: fragtext,
            color: lastcol,
            index: 0,
            xstart: x + (forward ? fragstartdx : fragenddx),
            xend: x + (forward ? fragenddx : fragstartdx)
        };
        if (forward) {
            fragments.push(frag);
        }
        else {
            fragments.unshift(frag);
        }
        fragtext = "";
        fragstartdx = dx;
        fraghadprimary = false;
    };
    for (var dirforward of [true, false]) {
        //init vars
        if (dirforward && !forward) {
            continue;
        }
        if (!dirforward && !backward) {
            continue;
        }
        var dx = 0;
        var fragstartdx = dx;
        var fragenddx = dx;
        var triedspaces = 0;
        var triedrecol = false;
        var col = multicol ? null : colors;
        while (true) {
            col = col || detectcolor(x + dx, y, !dirforward);
            var chr = (col ? readChar(buffer, font, col, x + dx, y, !dirforward, true) : null);
            if (col == null || chr == null) {
                if (triedspaces < maxspaces) {
                    dx += (dirforward ? 1 : -1) * font.spacewidth;
                    triedspaces++;
                    continue;
                }
                if (multicol && !triedrecol && fraghadprimary) {
                    dx -= (dirforward ? 1 : -1) * triedspaces * font.spacewidth;
                    triedspaces = 0;
                    col = null;
                    triedrecol = true;
                    continue;
                }
                if (dirforward) {
                    x2 = x + dx - font.spacewidth;
                }
                else {
                    x1 = x + dx + font.spacewidth;
                }
                break;
            }
            else {
                if (lastcol && (col[0] != lastcol[0] || col[1] != lastcol[1] || col[2] != lastcol[2])) {
                    addfrag(dirforward);
                }
                var spaces = "";
                for (var a = 0; a < triedspaces; a++) {
                    spaces += " ";
                }
                if (dirforward) {
                    fragtext += spaces + chr.chr;
                }
                else {
                    fragtext = chr.chr + spaces + fragtext;
                }
                if (!chr.basechar.secondary) {
                    fraghadprimary = true;
                }
                triedspaces = 0;
                triedrecol = false;
                dx += (dirforward ? 1 : -1) * chr.basechar.width;
                fragenddx = dx;
                lastcol = col;
            }
        }
        if (lastcol && fraghadprimary) {
            addfrag(dirforward);
        }
    }
    fragments.forEach((f, i) => f.index = i);
    return {
        debugArea: { x: x1, y: y - 9, w: x2 - x1, h: 10 },
        text: fragments.map(f => f.text).join(""),
        fragments
    };
}
exports.readLine = readLine;
/**
 * Reads a line of text that uses a smallcaps font, these fonts can have duplicate chars that only have a different amount of
 * empty space after the char before the next char starts.
 * The coordinates should be near the end of the string, or a rectangle with high 1 containing all points where the string can end.
 */
function readSmallCapsBackwards(buffer, font, cols, x, y, w = -1, h = -1) {
    if (w == -1) {
        w = font.width + font.spacewidth;
        x -= Math.ceil(w / 2);
    }
    if (h == -1) {
        h = 7;
        y -= 1;
    }
    var matchedchar = null;
    var sorted = (cols.length == 1 ? [{ col: cols[0], score: 1 }] : getChatColorMono(buffer, new base_1.Rect(x, y - font.basey, w, h), cols));
    //loop until we have a match (max 2 cols)
    for (var a = 0; a < 2 && a < sorted.length && matchedchar == null; a++) {
        for (var cx = x + w - 1; cx >= x; cx--) {
            var best = 1000; //TODO finetune score constants
            var bestchar = null;
            for (var cy = y; cy < y + h; cy++) {
                var chr = readChar(buffer, font, sorted[a].col, cx, cy, true, false);
                if (chr != null && chr.sizescore < best) {
                    best = chr.sizescore;
                    bestchar = chr;
                }
            }
            if (bestchar) {
                matchedchar = bestchar;
                break;
            }
        }
    }
    if (matchedchar == null) {
        return { text: "", debugArea: { x, y, w, h } };
    }
    return readLine(buffer, font, cols, matchedchar.x, matchedchar.y, false, true);
}
exports.readSmallCapsBackwards = readSmallCapsBackwards;
/**
 * Reads a single character at the exact given location
 * @param x exact x location of the start of the character domain (includes part of the spacing between characters)
 * @param y exact y location of the baseline pixel of the character
 * @param backwards read in backwards direction, the x location should be the first pixel after the character domain in that case
 */
function readChar(buffer, font, col, x, y, backwards, allowSecondary) {
    y -= font.basey;
    var shiftx = 0;
    var shifty = font.basey;
    var shadow = font.shadow;
    var debugobj = null;
    var debugimg = null;
    if (exports.debug.trackread) {
        var name = x + ";" + y + " " + JSON.stringify(col);
        if (!exports.debugout[name]) {
            exports.debugout[name] = [];
        }
        debugobj = exports.debugout[name];
    }
    //===== make sure the full domain is inside the bitmap/buffer ======
    if (y < 0 || y + font.height >= buffer.height) {
        return null;
    }
    if (!backwards) {
        if (x < 0 || x + font.width > buffer.width) {
            return null;
        }
    }
    else {
        if (x - font.width < 0 || x > buffer.width) {
            return null;
        }
    }
    //====== start reading the char ======
    var scores = [];
    for (var chr = 0; chr < font.chars.length; chr++) {
        var chrobj = font.chars[chr];
        if (chrobj.secondary && !allowSecondary) {
            continue;
        }
        scores[chr] = { score: 0, sizescore: 0, chr: chrobj };
        var chrx = (backwards ? x - chrobj.width : x);
        if (exports.debug.trackread) {
            debugimg = new base_1.ImageData(font.width, font.height);
        }
        for (var a = 0; a < chrobj.pixels.length;) {
            var i = (chrx + chrobj.pixels[a]) * 4 + (y + chrobj.pixels[a + 1]) * buffer.width * 4;
            var penalty = 0;
            if (!shadow) {
                penalty = canblend(buffer.data[i], buffer.data[i + 1], buffer.data[i + 2], col[0], col[1], col[2], chrobj.pixels[a + 2] / 255);
                a += 3;
            }
            else {
                var lum = chrobj.pixels[a + 3] / 255;
                penalty = canblend(buffer.data[i], buffer.data[i + 1], buffer.data[i + 2], col[0] * lum, col[1] * lum, col[2] * lum, chrobj.pixels[a + 2] / 255);
                a += 4;
            }
            scores[chr].score += Math.max(0, penalty);
            //TODO add compiler flag to this to remove it for performance
            if (debugimg) {
                debugimg.setPixel(chrobj.pixels[a], chrobj.pixels[a + 1], [penalty, penalty, penalty, 255]);
            }
        }
        scores[chr].sizescore = scores[chr].score - chrobj.bonus;
        if (debugobj) {
            debugobj.push({ chr: chrobj.chr, score: scores[chr].sizescore, rawscore: scores[chr].score, img: debugimg });
        }
    }
    scores.sort((a, b) => a.sizescore - b.sizescore);
    if (exports.debug.printcharscores) {
        scores.slice(0, 5).forEach(q => console.log(q.chr.chr, q.score.toFixed(3), q.sizescore.toFixed(3)));
    }
    var winchr = scores[0];
    if (!winchr || winchr.score > 400) {
        return null;
    }
    return { chr: winchr.chr.chr, basechar: winchr.chr, x: x + shiftx, y: y + shifty, score: winchr.score, sizescore: winchr.sizescore };
}
exports.readChar = readChar;
function loadFontImage(img, meta) {
    var bg = null;
    var pxheight = img.height - 1;
    if (meta.unblendmode == "removebg") {
        pxheight /= 2;
    }
    var inimg = img.clone({ x: 0, y: 0, width: img.width, height: pxheight });
    var outimg;
    if (meta.unblendmode == "removebg") {
        bg = img.clone({ x: 0, y: pxheight + 1, width: img.width, height: pxheight });
        outimg = unblendKnownBg(inimg, bg, meta.shadow, meta.color[0], meta.color[1], meta.color[2]);
    }
    else if (meta.unblendmode == "raw") {
        outimg = unblendTrans(inimg, meta.shadow, meta.color[0], meta.color[1], meta.color[2]);
    }
    else if (meta.unblendmode == "blackbg") {
        outimg = unblendBlackBackground(inimg, meta.color[0], meta.color[1], meta.color[2]);
    }
    else {
        throw new Error("no unblend mode");
    }
    var unblended = new base_1.ImageData(img.width, pxheight + 1);
    outimg.copyTo(unblended, 0, 0, outimg.width, outimg.height, 0, 0);
    img.copyTo(unblended, 0, pxheight, img.width, 1, 0, pxheight);
    return generateFont(unblended, meta.chars, meta.seconds, meta.bonus || {}, meta.basey, meta.spacewidth, meta.treshold, meta.shadow);
}
exports.loadFontImage = loadFontImage;
/**
 * Generates a font json description to use in reader functions
 * @param unblended A source image with all characters lined up. The image should be unblended into components using the unblend functions
 * The lowest pixel line of this image is used to mark the location and size of the charecters if the red component is 255 it means there is a character on that pixel column
 * @param chars A string containing all the characters of the image in the same order
 * @param seconds A string with characters that are considered unlikely and should only be detected if no other character is possible.
 * For example the period (.) character matches positive inside many other characters and should be marked as secondary
 * @param bonusses An object that contains bonus scores for certain difficult characters to make the more likely to be red.
 * @param basey The y position of the baseline pixel of the font
 * @param spacewidth the number of pixels a space takes
 * @param treshold minimal color match proportion (0-1) before a pixel is used for the font
 * @param shadow whether this font also uses the black shadow some fonts have. The "unblended" image should be unblended correspondingly
 * @returns a javascript object describing the font which is used as input for the different read functions
 */
function generateFont(unblended, chars, seconds, bonusses, basey, spacewidth, treshold, shadow) {
    //settings vars
    treshold *= 255;
    //initial vars
    var miny = unblended.height - 1;
    var maxy = 0;
    var font = { chars: [], width: 0, spacewidth: spacewidth, shadow: shadow, height: 0, basey: 0 };
    var ds = false;
    var chardata = [];
    //index all chars
    for (var dx = 0; dx < unblended.width; dx++) {
        var i = 4 * dx + 4 * unblended.width * (unblended.height - 1);
        if (unblended.data[i] == 255 && unblended.data[i + 3] == 255) {
            if (ds === false) {
                ds = dx;
            }
        }
        else {
            if (ds !== false) {
                //char found, start detection
                var de = dx;
                var char = chars[chardata.length];
                var chr = {
                    ds: ds,
                    de: de,
                    width: de - ds,
                    chr: char,
                    bonus: (bonusses && bonusses[char]) || 0,
                    secondary: seconds.indexOf(chars[chardata.length]) != -1,
                    pixels: []
                };
                chardata.push(chr);
                font.width = Math.max(font.width, chr.width);
                for (x = 0; x < de - ds; x++) {
                    for (y = 0; y < unblended.height - 1; y++) {
                        var i = (x + ds) * 4 + y * unblended.width * 4;
                        if (unblended.data[i] >= treshold) {
                            miny = Math.min(miny, y);
                            maxy = Math.max(maxy, y);
                        }
                    }
                }
                ds = false;
            }
        }
    }
    font.height = maxy + 1 - miny;
    font.basey = basey - miny;
    //detect all pixels
    for (var a in chardata) {
        var chr = chardata[a];
        for (var x = 0; x < chr.width; x++) {
            for (var y = 0; y < maxy + 1 - miny; y++) {
                var i = (x + chr.ds) * 4 + (y + miny) * unblended.width * 4;
                if (unblended.data[i] >= treshold) {
                    chr.pixels.push(x, y);
                    chr.pixels.push(unblended.data[i]);
                    if (shadow) {
                        chr.pixels.push(unblended.data[i + 1]);
                    }
                    chr.bonus += 5;
                }
            }
        }
        //prevent js from doing the thing with unnecessary output precision
        chr.bonus = +chr.bonus.toFixed(3);
        font.chars.push({ width: chr.width, bonus: chr.bonus, chr: chr.chr, pixels: chr.pixels, secondary: chr.secondary });
    }
    return font;
}
exports.generateFont = generateFont;


/***/ }),

/***/ "alt1/base":
/*!**************************************************************************************************!*\
  !*** external {"root":"A1lib","commonjs2":"alt1/base","commonjs":"alt1/base","amd":"alt1/base"} ***!
  \**************************************************************************************************/
/***/ ((module) => {

module.exports = __WEBPACK_EXTERNAL_MODULE_alt1_base__;

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The module cache
/******/ 	var __webpack_module_cache__ = {};
/******/ 	
/******/ 	// The require function
/******/ 	function __nested_webpack_require_27427__(moduleId) {
/******/ 		// Check if module is in cache
/******/ 		var cachedModule = __webpack_module_cache__[moduleId];
/******/ 		if (cachedModule !== undefined) {
/******/ 			return cachedModule.exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = __webpack_module_cache__[moduleId] = {
/******/ 			// no module.id needed
/******/ 			// no module.loaded needed
/******/ 			exports: {}
/******/ 		};
/******/ 	
/******/ 		// Execute the module function
/******/ 		__webpack_modules__[moduleId](module, module.exports, __nested_webpack_require_27427__);
/******/ 	
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/ 	
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module is referenced by other modules so it can't be inlined
/******/ 	var __nested_webpack_exports__ = __nested_webpack_require_27427__("./src/ocr/index.ts");
/******/ 	
/******/ 	return __nested_webpack_exports__;
/******/ })()
;
});

/***/ }),

/***/ "../node_modules/alt1/dist/targetmob/index.js":
/*!****************************************************!*\
  !*** ../node_modules/alt1/dist/targetmob/index.js ***!
  \****************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

(function webpackUniversalModuleDefinition(root, factory) {
	if(true)
		module.exports = factory(__webpack_require__(/*! alt1/base */ "../node_modules/alt1/dist/base/index.js"), __webpack_require__(/*! alt1/ocr */ "../node_modules/alt1/dist/ocr/index.js"));
	else {}
})(globalThis, (__WEBPACK_EXTERNAL_MODULE_alt1_base__, __WEBPACK_EXTERNAL_MODULE_alt1_ocr__) => {
return /******/ (() => { // webpackBootstrap
/******/ 	var __webpack_modules__ = ({

/***/ "./src/targetmob/imgs/detectimg.data.png":
/*!***********************************************!*\
  !*** ./src/targetmob/imgs/detectimg.data.png ***!
  \***********************************************/
/***/ ((module, __unused_webpack_exports, __nested_webpack_require_905__) => {

module.exports=(__nested_webpack_require_905__(/*! alt1/base */ "alt1/base").ImageDetect.imageDataFromBase64)("iVBORw0KGgoAAAANSUhEUgAAABoAAAARCAYAAADDjbwNAAAAAW5vUEUAYtdMlAAAAARub1BFAAAAAEEgjiIAAAAJbm9QRQAAAAAAAAAAAKGKctUAAAAYbm9QRQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAFYtZUsAAACJSURBVDhPtc09CoNAGIThZSEuG3KHLVKJCIJgfpAYxG5vkDL3v8NIAjZmCJ/CFE/zFjMOwG5VP8HHE0J9xzGVf9EBq3Pbf48Oj4xweSJ0A4rr+OPT6YDVcmRBB6xSc4MVHVCgUYFGBRoVaFSgUYFGBRoVaFSgUYFGBZdfb2yxHrByvoiw2n8ENwOqvL/qtsOgigAAAABJRU5ErkJggg==")

/***/ }),

/***/ "./src/targetmob/index.ts":
/*!********************************!*\
  !*** ./src/targetmob/index.ts ***!
  \********************************/
/***/ (function(__unused_webpack_module, exports, __nested_webpack_require_1620__) {

"use strict";

var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
const a1lib = __importStar(__nested_webpack_require_1620__(/*! alt1/base */ "alt1/base"));
const OCR = __importStar(__nested_webpack_require_1620__(/*! alt1/ocr */ "alt1/ocr"));
const base_1 = __nested_webpack_require_1620__(/*! alt1/base */ "alt1/base");
var chatfont = __nested_webpack_require_1620__(/*! ../fonts/aa_8px.fontmeta.json */ "./src/fonts/aa_8px.fontmeta.json");
var imgs = (0, base_1.webpackImages)({
    detectimg: __nested_webpack_require_1620__(/*! ./imgs/detectimg.data.png */ "./src/targetmob/imgs/detectimg.data.png")
});
class TargetMobReader {
    constructor() {
        this.state = null;
        this.lastpos = null;
    }
    read(img) {
        if (!img) {
            img = a1lib.captureHoldFullRs();
        }
        var pos = img.findSubimage(imgs.detectimg);
        if (pos.length != 0) {
            var data = img.toData(pos[0].x - 151, pos[0].y - 16, 220, 44);
            var mobname = OCR.findReadLine(data, chatfont, [[255, 255, 255]], 62, 18, 20, 1);
            var mobhp = OCR.findReadLine(data, chatfont, [[255, 203, 5]], 92, 39, 20, 1);
            this.lastpos = pos[0];
            this.state = {
                name: mobname.text,
                hp: +mobhp.text
            };
        }
        else {
            this.state = null;
        }
        return this.state;
    }
}
exports["default"] = TargetMobReader;


/***/ }),

/***/ "alt1/base":
/*!**************************************************************************************************!*\
  !*** external {"root":"A1lib","commonjs2":"alt1/base","commonjs":"alt1/base","amd":"alt1/base"} ***!
  \**************************************************************************************************/
/***/ ((module) => {

"use strict";
module.exports = __WEBPACK_EXTERNAL_MODULE_alt1_base__;

/***/ }),

/***/ "alt1/ocr":
/*!*********************************************************************************************!*\
  !*** external {"root":"OCR","commonjs2":"alt1/ocr","commonjs":"alt1/ocr","amd":"alt1/ocr"} ***!
  \*********************************************************************************************/
/***/ ((module) => {

"use strict";
module.exports = __WEBPACK_EXTERNAL_MODULE_alt1_ocr__;

/***/ }),

/***/ "./src/fonts/aa_8px.fontmeta.json":
/*!****************************************!*\
  !*** ./src/fonts/aa_8px.fontmeta.json ***!
  \****************************************/
/***/ ((module) => {

"use strict";
module.exports = JSON.parse('{"chars":[{"width":7,"bonus":140,"chr":"a","pixels":[0,7,187,255,1,3,221,255,1,6,169,255,1,7,164,132,1,8,255,255,2,3,255,255,2,4,221,0,2,5,196,243,2,7,170,0,2,8,255,255,2,9,255,0,3,3,255,255,3,4,255,0,3,5,255,255,3,6,187,0,3,8,221,255,3,9,255,0,4,4,254,239,4,5,255,255,4,6,254,204,4,7,255,255,4,8,240,253,4,9,221,0,5,5,240,36,5,6,255,34,5,7,211,41,5,8,255,34,5,9,238,0],"secondary":false},{"width":7,"bonus":175,"chr":"b","pixels":[0,1,203,255,0,2,221,255,0,3,221,255,0,4,221,255,0,5,221,255,0,6,221,255,0,7,221,255,0,8,203,255,1,2,211,41,1,3,248,209,1,4,243,178,1,5,230,75,1,6,230,75,1,7,243,178,1,8,246,194,1,9,204,0,2,3,255,255,2,4,204,0,2,5,170,0,2,8,255,255,2,9,187,0,3,3,255,255,3,4,255,0,3,8,255,255,3,9,255,0,4,3,169,255,4,4,254,171,4,7,169,255,4,9,255,0,5,4,204,128,5,5,232,205,5,6,205,233,5,8,170,0,6,6,187,0,6,7,187,0],"secondary":false},{"width":7,"bonus":95,"chr":"c","pixels":[0,5,169,255,0,6,187,255,1,4,187,255,1,6,193,90,1,7,237,201,1,8,164,185,2,3,255,255,2,5,187,0,2,8,255,255,3,3,255,255,3,4,255,0,3,8,255,255,3,9,255,0,4,3,221,255,4,4,255,34,4,8,221,255,4,9,255,0,5,4,226,39,5,9,221,0],"secondary":false},{"width":7,"bonus":180,"chr":"d","pixels":[0,5,187,255,0,6,187,255,1,4,169,255,1,6,205,85,1,7,232,187,1,8,203,213,2,3,255,255,2,5,170,0,2,8,255,255,2,9,170,0,3,3,255,255,3,4,255,0,3,8,255,255,3,9,255,0,4,3,203,255,4,4,254,171,4,7,169,255,4,8,187,255,4,9,255,0,5,1,203,255,5,2,225,251,5,3,225,251,5,4,248,227,5,5,244,231,5,6,230,245,5,7,230,245,5,8,237,219,5,9,187,0,6,2,204,0,6,3,221,0,6,4,221,0,6,5,221,0,6,6,221,0,6,7,221,0,6,8,221,0,6,9,204,0],"secondary":false},{"width":7,"bonus":135,"chr":"e","pixels":[0,5,187,255,0,6,169,255,1,4,187,255,1,5,255,255,1,6,209,104,1,7,237,219,2,3,255,255,2,5,255,255,2,6,255,0,2,8,255,255,3,3,255,255,3,4,255,0,3,5,255,255,3,6,255,0,3,8,255,255,3,9,255,0,4,3,187,255,4,4,255,119,4,5,255,255,4,6,255,0,4,8,221,255,4,9,255,0,5,4,224,155,5,5,227,229,5,6,255,0,5,9,221,0,6,6,204,0],"secondary":false},{"width":4,"bonus":90,"chr":"f","pixels":[0,3,203,255,1,2,221,255,1,3,255,255,1,4,248,227,1,5,225,251,1,6,225,251,1,7,225,251,1,8,210,247,2,1,255,255,2,3,255,255,2,4,255,0,2,5,221,0,2,6,221,0,2,7,221,0,2,8,221,0,2,9,204,0,3,2,255,0,3,4,255,0],"secondary":false},{"width":7,"bonus":200,"chr":"g","pixels":[0,5,187,255,0,6,187,255,1,3,169,255,1,4,153,255,1,5,155,112,1,6,205,85,1,7,232,187,1,8,184,189,1,11,153,255,2,3,255,255,2,4,170,0,2,5,153,0,2,8,255,255,2,11,245,247,3,3,255,255,3,4,255,0,3,8,255,255,3,9,255,0,3,11,221,255,4,3,221,255,4,4,255,136,4,7,153,255,4,8,221,255,4,9,255,85,4,10,203,255,5,3,203,255,5,4,250,226,5,5,239,236,5,6,230,245,5,7,230,245,5,8,241,234,5,9,243,178,5,11,204,0,6,4,204,0,6,5,221,0,6,6,221,0,6,7,221,0,6,8,221,0,6,9,221,0,6,10,170,0],"secondary":false},{"width":7,"bonus":165,"chr":"h","pixels":[0,1,203,255,0,2,221,255,0,3,221,255,0,4,221,255,0,5,221,255,0,6,221,255,0,7,221,255,0,8,203,255,1,2,211,41,1,3,243,178,1,4,248,209,1,5,230,75,1,6,226,39,1,7,226,39,1,8,226,39,1,9,204,0,2,3,255,255,2,4,170,0,2,5,204,0,3,3,255,255,3,4,255,0,4,3,169,255,4,4,255,221,4,5,221,255,4,6,221,255,4,7,221,255,4,8,203,255,5,4,175,25,5,5,226,39,5,6,226,39,5,7,226,39,5,8,226,39,5,9,204,0],"secondary":false},{"width":3,"bonus":70,"chr":"i","pixels":[0,1,237,255,0,3,203,255,0,4,221,255,0,5,221,255,0,6,221,255,0,7,221,255,0,8,203,255,1,2,238,0,1,4,211,41,1,5,226,39,1,6,226,39,1,7,226,39,1,8,226,39,1,9,204,0],"secondary":false},{"width":4,"bonus":90,"chr":"j","pixels":[0,11,153,255,1,11,169,255,2,1,203,255,2,3,203,255,2,4,225,251,2,5,225,251,2,6,225,251,2,7,225,251,2,8,225,251,2,9,225,251,3,2,204,0,3,4,204,0,3,5,221,0,3,6,221,0,3,7,221,0,3,8,221,0,3,9,221,0,3,10,221,0],"secondary":false},{"width":6,"bonus":130,"chr":"k","pixels":[0,1,203,255,0,2,221,255,0,3,221,255,0,4,221,255,0,5,221,255,0,6,221,255,0,7,221,255,0,8,203,255,1,2,211,41,1,3,226,39,1,4,226,39,1,5,255,255,1,6,226,39,1,7,226,39,1,8,226,39,1,9,204,0,2,4,166,235,2,5,255,255,2,6,255,221,3,3,203,255,3,5,153,0,3,6,255,51,3,7,250,226,3,8,160,217,4,4,204,0,4,8,239,145],"secondary":false},{"width":3,"bonus":75,"chr":"l","pixels":[0,1,203,255,0,2,221,255,0,3,221,255,0,4,221,255,0,5,221,255,0,6,221,255,0,7,221,255,1,2,211,41,1,3,226,39,1,4,226,39,1,5,226,39,1,6,226,39,1,7,226,39,1,8,255,255,2,9,255,0],"secondary":false},{"width":10,"bonus":210,"chr":"m","pixels":[0,3,203,255,0,4,221,255,0,5,221,255,0,6,221,255,0,7,221,255,0,8,203,255,1,4,248,227,1,5,230,75,1,6,226,39,1,7,226,39,1,8,226,39,1,9,204,0,2,3,237,255,2,5,221,0,3,3,255,255,3,4,238,0,4,3,153,255,4,4,255,255,4,5,221,255,4,6,221,255,4,7,221,255,4,8,203,255,5,4,228,209,5,5,255,68,5,6,226,39,5,7,226,39,5,8,226,39,5,9,204,0,6,3,255,255,6,5,187,0,7,3,237,255,7,4,255,85,8,4,249,174,8,5,232,243,8,6,225,251,8,7,225,251,8,8,210,247,9,5,170,0,9,6,221,0,9,7,221,0,9,8,221,0,9,9,204,0],"secondary":false},{"width":7,"bonus":140,"chr":"n","pixels":[0,3,203,255,0,4,221,255,0,5,221,255,0,6,221,255,0,7,221,255,0,8,203,255,1,4,248,227,1,5,232,93,1,6,226,39,1,7,226,39,1,8,226,39,1,9,204,0,2,3,237,255,2,5,221,0,3,3,255,255,3,4,238,0,4,3,237,255,4,4,255,85,5,4,249,174,5,5,232,243,5,6,225,251,5,7,225,251,5,8,210,247,6,5,170,0,6,6,221,0,6,7,221,0,6,8,221,0,6,9,204,0],"secondary":false},{"width":8,"bonus":120,"chr":"o","pixels":[0,5,187,255,0,6,169,255,1,4,203,255,1,6,209,104,1,7,244,231,2,3,237,255,2,5,204,0,2,8,252,241,3,3,255,255,3,4,238,0,3,8,255,255,3,9,238,0,4,3,237,255,4,4,255,0,4,8,255,255,4,9,255,0,5,4,251,207,5,7,221,255,5,9,255,0,6,5,237,183,6,6,192,225,6,8,221,0,7,6,170,0,7,7,170,0],"secondary":false},{"width":6,"bonus":170,"chr":"p","pixels":[0,3,237,255,0,4,255,255,0,5,187,255,0,6,203,255,0,7,255,255,0,8,221,255,0,9,221,255,0,10,221,255,1,3,255,255,1,4,240,36,1,5,255,0,1,6,187,0,1,7,211,41,1,8,254,239,1,9,221,0,1,10,221,0,1,11,221,0,2,3,255,255,2,4,255,0,2,8,255,255,2,9,238,0,3,3,237,255,3,4,255,34,3,8,237,255,3,9,255,0,4,4,253,240,4,5,255,255,4,6,255,255,4,7,237,255,4,9,238,0,5,5,239,18,5,6,255,17,5,7,255,0,5,8,238,0],"secondary":false},{"width":7,"bonus":165,"chr":"q","pixels":[0,5,187,255,0,6,187,255,1,3,169,255,1,4,153,255,1,5,155,112,1,6,205,85,1,7,228,171,1,8,209,207,2,3,255,255,2,4,170,0,2,5,153,0,2,8,255,255,2,9,170,0,3,3,237,255,3,4,255,17,3,8,237,255,3,9,255,0,4,3,255,255,4,4,255,255,4,5,191,250,4,6,187,255,4,7,255,255,4,8,239,254,4,9,253,223,4,10,221,255,5,4,255,34,5,5,255,34,5,6,196,45,5,7,196,45,5,8,255,34,5,9,240,36,5,10,226,39,5,11,221,0],"secondary":false},{"width":4,"bonus":85,"chr":"r","pixels":[0,3,203,255,0,4,221,255,0,5,221,255,0,6,221,255,0,7,221,255,0,8,203,255,1,3,187,255,1,4,244,213,1,5,232,93,1,6,226,39,1,7,226,39,1,8,226,39,1,9,204,0,2,3,255,255,2,4,187,0,2,5,204,0,3,4,255,0],"secondary":false},{"width":6,"bonus":100,"chr":"s","pixels":[0,4,187,255,1,3,255,255,1,5,250,243,1,8,255,255,2,3,255,255,2,4,255,0,2,5,155,196,2,6,246,123,2,8,255,255,2,9,255,0,3,3,255,255,3,4,255,0,3,6,245,247,3,7,164,132,3,8,255,255,3,9,255,0,4,4,255,17,4,7,250,191,4,9,255,0,5,8,187,0],"secondary":false},{"width":5,"bonus":80,"chr":"t","pixels":[1,2,221,255,1,3,255,255,1,4,235,240,1,5,221,255,1,6,221,255,1,7,169,255,2,3,255,255,2,4,255,34,2,5,226,39,2,6,226,39,2,7,232,93,2,8,249,243,3,4,255,0,3,8,187,209,3,9,238,0,4,9,153,0],"secondary":false},{"width":6,"bonus":135,"chr":"u","pixels":[0,3,203,255,0,4,221,255,0,5,221,255,0,6,221,255,0,7,169,255,1,4,211,41,1,5,226,39,1,6,226,39,1,7,232,93,1,8,249,243,2,8,255,255,2,9,238,0,3,8,203,255,3,9,255,0,4,3,203,255,4,4,221,255,4,5,221,255,4,6,203,255,4,7,255,255,4,8,228,247,4,9,204,0,5,4,211,41,5,5,226,39,5,6,226,39,5,7,211,41,5,8,255,34,5,9,221,0],"secondary":false},{"width":6,"bonus":95,"chr":"v","pixels":[0,3,237,255,1,4,247,141,1,5,245,247,1,6,203,255,2,6,241,54,2,7,255,255,2,8,255,255,3,5,153,255,3,6,255,255,3,7,173,226,3,8,255,51,3,9,255,0,4,3,237,255,4,4,203,255,4,6,153,0,4,7,255,0,4,8,153,0,5,4,238,0,5,5,204,0],"secondary":false},{"width":10,"bonus":170,"chr":"w","pixels":[1,3,153,255,1,4,243,249,1,5,187,255,2,4,153,0,2,5,243,71,2,6,228,171,2,7,243,249,2,8,187,255,3,6,217,239,3,7,248,244,3,8,248,157,3,9,187,0,4,3,169,255,4,4,255,255,4,7,204,0,4,8,238,0,4,9,153,0,5,4,244,231,5,5,255,221,5,6,191,159,6,5,223,19,6,6,237,128,6,7,255,255,6,8,223,253,7,6,239,254,7,7,227,229,7,8,255,119,7,9,221,0,8,3,237,255,8,4,203,255,8,7,238,0,8,8,204,0,9,4,238,0,9,5,204,0],"secondary":false},{"width":6,"bonus":95,"chr":"x","pixels":[0,8,169,255,1,3,169,255,1,4,224,232,1,7,221,255,1,9,170,0,2,4,193,90,2,5,255,255,2,6,240,253,2,8,221,0,3,4,255,255,3,5,155,196,3,6,255,187,3,7,250,191,4,3,221,255,4,5,255,0,4,7,209,104,4,8,255,255,5,4,221,0,5,9,255,0],"secondary":false},{"width":6,"bonus":110,"chr":"y","pixels":[0,3,255,255,0,4,153,255,0,11,221,255,1,4,255,85,1,5,234,222,1,6,228,247,1,11,196,243,2,6,207,21,2,7,246,194,2,8,255,255,2,9,237,255,3,6,237,255,3,7,191,250,3,8,205,85,3,9,255,0,3,10,238,0,4,3,203,255,4,4,221,255,4,7,238,0,4,8,187,0,5,4,204,0,5,5,221,0],"secondary":false},{"width":6,"bonus":130,"chr":"z","pixels":[0,3,153,255,0,8,203,255,1,3,255,255,1,4,153,0,1,7,221,255,1,8,255,255,1,9,204,0,2,3,255,255,2,4,255,0,2,6,255,255,2,8,255,255,2,9,255,0,3,3,255,255,3,4,254,171,3,5,169,255,3,7,255,0,3,8,255,255,3,9,255,0,4,3,255,255,4,4,255,119,4,5,170,0,4,6,170,0,4,8,255,255,4,9,255,0,5,4,255,0,5,9,255,0],"secondary":false},{"width":8,"bonus":155,"chr":"A","pixels":[0,8,153,255,1,6,221,255,1,7,237,255,1,9,153,0,2,3,169,255,2,4,255,255,2,5,187,255,2,6,255,255,2,7,221,0,2,8,238,0,3,1,255,255,3,2,255,255,3,4,170,0,3,5,255,0,3,6,255,255,3,7,255,0,4,2,255,255,4,3,254,239,4,4,184,189,4,6,255,255,4,7,255,0,5,3,255,34,5,4,247,141,5,5,255,255,5,6,255,255,5,7,255,102,6,6,255,85,6,7,255,187,6,8,255,255,7,8,187,0,7,9,255,0],"secondary":false},{"width":7,"bonus":225,"chr":"B","pixels":[0,1,203,255,0,2,221,255,0,3,221,255,0,4,221,255,0,5,221,255,0,6,221,255,0,7,221,255,0,8,203,255,1,1,255,255,1,2,211,41,1,3,226,39,1,4,255,255,1,5,226,39,1,6,226,39,1,7,226,39,1,8,255,255,1,9,204,0,2,1,255,255,2,2,255,0,2,4,255,255,2,5,255,0,2,8,255,255,2,9,255,0,3,1,255,255,3,2,255,0,3,4,255,255,3,5,255,0,3,8,255,255,3,9,255,0,4,1,221,255,4,2,255,85,4,4,255,255,4,5,254,171,4,8,203,255,4,9,255,0,5,2,243,178,5,3,198,219,5,5,255,102,5,6,232,205,5,7,180,217,5,9,204,0,6,3,170,0,6,4,170,0,6,7,187,0,6,8,153,0],"secondary":false},{"width":9,"bonus":155,"chr":"C","pixels":[0,4,187,255,0,5,187,255,1,2,221,255,1,3,153,255,1,4,155,112,1,5,205,85,1,6,228,171,1,7,224,232,2,1,169,255,2,3,221,0,2,4,153,0,2,7,194,135,2,8,237,183,3,1,255,255,3,2,170,0,3,8,255,255,3,9,170,0,4,1,255,255,4,2,255,0,4,8,255,255,4,9,255,0,5,1,255,255,5,2,255,0,5,8,255,255,5,9,255,0,6,1,169,255,6,2,255,102,6,8,169,255,6,9,255,0,7,2,181,48,7,9,170,0],"secondary":false},{"width":8,"bonus":200,"chr":"D","pixels":[0,1,203,255,0,2,221,255,0,3,221,255,0,4,221,255,0,5,221,255,0,6,221,255,0,7,221,255,0,8,203,255,1,1,255,255,1,2,211,41,1,3,226,39,1,4,226,39,1,5,226,39,1,6,226,39,1,7,226,39,1,8,255,255,1,9,204,0,2,1,255,255,2,2,255,0,2,8,255,255,2,9,255,0,3,1,255,255,3,2,255,0,3,8,255,255,3,9,255,0,4,1,203,255,4,2,255,68,4,8,203,255,4,9,255,0,5,2,248,227,5,3,168,207,5,7,221,255,5,9,204,0,6,3,237,128,6,4,223,214,6,5,205,233,6,6,155,196,6,8,221,0,7,5,187,0,7,6,187,0],"secondary":false},{"width":6,"bonus":180,"chr":"E","pixels":[0,1,203,255,0,2,221,255,0,3,221,255,0,4,221,255,0,5,221,255,0,6,221,255,0,7,221,255,0,8,203,255,1,1,255,255,1,2,211,41,1,3,226,39,1,4,226,39,1,5,255,255,1,6,226,39,1,7,226,39,1,8,255,255,1,9,204,0,2,1,255,255,2,2,255,0,2,5,255,255,2,6,255,0,2,8,255,255,2,9,255,0,3,1,255,255,3,2,255,0,3,5,255,255,3,6,255,0,3,8,255,255,3,9,255,0,4,1,153,255,4,2,255,0,4,6,255,0,4,8,221,255,4,9,255,0,5,2,153,0,5,9,221,0],"secondary":false},{"width":6,"bonus":135,"chr":"F","pixels":[0,1,203,255,0,2,221,255,0,3,221,255,0,4,221,255,0,5,221,255,0,6,221,255,0,7,221,255,0,8,203,255,1,1,255,255,1,2,211,41,1,3,226,39,1,4,226,39,1,5,255,255,1,6,226,39,1,7,226,39,1,8,226,39,1,9,204,0,2,1,255,255,2,2,255,0,2,5,255,255,2,6,255,0,3,1,255,255,3,2,255,0,3,5,255,255,3,6,255,0,4,2,255,0,4,6,255,0],"secondary":false},{"width":9,"bonus":200,"chr":"G","pixels":[0,4,169,255,0,5,187,255,1,2,203,255,1,3,153,255,1,5,193,90,1,6,224,155,1,7,237,238,2,1,169,255,2,3,204,0,2,4,153,0,2,7,175,124,2,8,246,194,3,1,255,255,3,2,170,0,3,8,255,255,3,9,187,0,4,1,255,255,4,2,255,0,4,8,255,255,4,9,255,0,5,1,255,255,5,2,255,0,5,8,237,255,5,9,255,0,6,1,169,255,6,2,255,85,6,5,255,255,6,7,153,255,6,8,169,255,6,9,238,0,7,2,175,25,7,5,153,255,7,6,255,221,7,7,225,251,7,8,234,222,7,9,170,0,8,6,153,0,8,7,221,0,8,8,221,0,8,9,204,0],"secondary":false},{"width":8,"bonus":200,"chr":"H","pixels":[0,1,203,255,0,2,221,255,0,3,221,255,0,4,221,255,0,5,221,255,0,6,221,255,0,7,221,255,0,8,203,255,1,2,211,41,1,3,226,39,1,4,226,39,1,5,255,255,1,6,226,39,1,7,226,39,1,8,226,39,1,9,204,0,2,5,255,255,2,6,255,0,3,5,255,255,3,6,255,0,4,5,255,255,4,6,255,0,5,5,255,255,5,6,255,34,6,1,203,255,6,2,225,251,6,3,225,251,6,4,225,251,6,5,225,251,6,6,255,221,6,7,225,251,6,8,210,247,7,2,204,0,7,3,221,0,7,4,221,0,7,5,221,0,7,6,221,0,7,7,221,0,7,8,221,0,7,9,204,0],"secondary":false},{"width":4,"bonus":110,"chr":"I","pixels":[0,1,191,255,0,8,191,255,1,1,255,255,1,2,255,255,1,3,255,255,1,4,255,255,1,5,255,255,1,6,255,255,1,7,255,255,1,8,255,255,1,9,191,0,2,1,191,255,2,2,255,0,2,3,255,0,2,4,255,0,2,5,255,0,2,6,255,0,2,7,255,0,2,8,255,191,2,9,255,0,3,2,192,0,3,9,191,0],"secondary":false},{"width":6,"bonus":130,"chr":"J","pixels":[0,6,153,255,0,7,153,255,1,7,194,135,1,8,234,222,2,1,221,255,2,8,255,255,2,9,204,0,3,1,255,255,3,2,226,39,3,8,203,255,3,9,255,0,4,1,203,255,4,2,255,221,4,3,225,251,4,4,225,251,4,5,225,251,4,6,225,251,4,7,166,235,4,9,204,0,5,2,204,0,5,3,221,0,5,4,221,0,5,5,221,0,5,6,221,0,5,7,221,0,5,8,153,0],"secondary":false},{"width":7,"bonus":155,"chr":"K","pixels":[0,1,203,255,0,2,221,255,0,3,221,255,0,4,221,255,0,5,221,255,0,6,221,255,0,7,221,255,0,8,203,255,1,2,211,41,1,3,226,39,1,4,255,255,1,5,226,39,1,6,226,39,1,7,226,39,1,8,226,39,1,9,204,0,2,4,255,255,2,5,255,102,3,3,221,255,3,5,254,171,3,6,224,232,4,1,203,255,4,2,153,255,4,4,221,0,4,6,193,90,4,7,251,242,4,8,173,226,5,2,204,0,5,3,153,0,5,8,247,141,5,9,153,0],"secondary":false},{"width":6,"bonus":115,"chr":"L","pixels":[0,1,203,255,0,2,221,255,0,3,221,255,0,4,221,255,0,5,221,255,0,6,221,255,0,7,221,255,0,8,203,255,1,2,211,41,1,3,226,39,1,4,226,39,1,5,226,39,1,6,226,39,1,7,226,39,1,8,255,255,1,9,204,0,2,8,255,255,2,9,255,0,3,8,255,255,3,9,255,0,4,8,255,255,4,9,255,0,5,9,255,0],"secondary":false},{"width":9,"bonus":240,"chr":"M","pixels":[0,1,245,255,0,2,255,255,0,3,255,255,0,4,255,255,0,5,255,255,0,6,255,255,0,7,255,255,0,8,255,255,1,2,251,173,1,3,255,225,1,4,255,85,1,5,255,0,1,6,255,0,1,7,255,0,1,8,255,0,1,9,255,0,2,3,191,83,2,4,249,212,2,5,212,229,3,5,226,119,3,6,249,237,3,7,165,227,4,6,241,245,4,7,245,155,4,8,155,32,5,4,207,255,5,5,191,254,5,7,232,0,6,2,169,255,6,3,223,255,6,5,207,0,6,6,190,0,7,1,245,255,7,2,255,255,7,3,255,255,7,4,255,255,7,5,255,255,7,6,255,255,7,7,255,255,7,8,255,255,8,2,245,0,8,3,255,0,8,4,255,0,8,5,255,0,8,6,255,0,8,7,255,0,8,8,255,0,8,9,255,0],"secondary":false},{"width":8,"bonus":200,"chr":"N","pixels":[0,1,203,255,0,2,221,255,0,3,221,255,0,4,221,255,0,5,221,255,0,6,221,255,0,7,221,255,0,8,203,255,1,2,255,255,1,3,235,111,1,4,226,39,1,5,226,39,1,6,226,39,1,7,226,39,1,8,226,39,1,9,204,0,2,3,255,221,2,4,163,160,3,4,246,194,3,5,214,223,4,5,214,122,4,6,246,229,5,6,163,160,5,7,255,255,6,1,203,255,6,2,225,251,6,3,225,251,6,4,225,251,6,5,225,251,6,6,225,251,6,7,235,240,6,8,254,204,7,2,204,0,7,3,221,0,7,4,221,0,7,5,221,0,7,6,221,0,7,7,221,0,7,8,221,0,7,9,204,0],"secondary":false},{"width":10,"bonus":200,"chr":"O","pixels":[0,4,187,255,0,5,169,255,1,2,203,255,1,3,153,255,1,5,205,85,1,6,226,192,1,7,224,232,2,1,153,255,2,3,204,0,2,4,153,0,2,7,209,145,2,8,234,167,3,1,255,255,3,2,153,0,3,8,255,255,3,9,153,0,4,1,255,255,4,2,255,0,4,8,255,255,4,9,255,0,5,1,255,255,5,2,255,0,5,8,255,255,5,9,255,0,6,1,153,255,6,2,255,102,6,8,153,255,6,9,255,0,7,2,234,222,7,3,194,201,7,6,169,255,7,7,203,255,7,9,153,0,8,3,225,116,8,4,228,209,8,5,192,225,8,7,170,0,8,8,204,0,9,5,187,0,9,6,170,0],"secondary":false},{"width":7,"bonus":165,"chr":"P","pixels":[0,1,203,255,0,2,221,255,0,3,221,255,0,4,221,255,0,5,221,255,0,6,221,255,0,7,221,255,0,8,203,255,1,1,255,255,1,2,211,41,1,3,226,39,1,4,226,39,1,5,255,255,1,6,226,39,1,7,226,39,1,8,226,39,1,9,204,0,2,1,255,255,2,2,255,0,2,5,255,255,2,6,255,0,3,1,255,255,3,2,255,0,3,5,255,255,3,6,255,0,4,1,187,255,4,2,255,136,4,5,187,255,4,6,255,0,5,2,224,155,5,3,239,236,5,6,187,0,6,4,221,0],"secondary":false},{"width":9,"bonus":185,"chr":"Q","pixels":[0,4,187,255,0,5,187,255,1,2,221,255,1,4,155,112,1,5,205,85,1,6,228,171,1,7,235,240,2,1,187,255,2,3,221,0,2,7,187,116,2,8,243,178,3,1,255,255,3,2,187,0,3,8,255,255,3,9,170,0,4,1,255,255,4,2,255,0,4,8,255,255,4,9,255,0,5,1,237,255,5,2,255,0,5,8,237,255,5,9,255,0,6,2,251,207,6,7,255,255,6,9,238,0,7,3,255,255,7,4,203,255,7,5,221,255,7,6,255,255,7,7,155,196,7,8,254,204,8,4,255,17,8,5,207,21,8,6,221,0,8,7,255,0,8,9,204,0],"secondary":false},{"width":7,"bonus":180,"chr":"R","pixels":[0,1,203,255,0,2,221,255,0,3,221,255,0,4,221,255,0,5,221,255,0,6,221,255,0,7,221,255,0,8,203,255,1,1,255,255,1,2,211,41,1,3,226,39,1,4,226,39,1,5,255,255,1,6,226,39,1,7,226,39,1,8,226,39,1,9,204,0,2,1,255,255,2,2,255,0,2,5,255,255,2,6,255,0,3,1,255,255,3,2,255,0,3,5,255,255,3,6,255,187,4,2,254,239,4,3,203,255,4,4,255,255,4,6,255,68,4,7,250,243,4,8,181,239,5,3,239,18,5,4,204,0,5,5,255,0,5,8,245,107,5,9,170,0],"secondary":false},{"width":6,"bonus":130,"chr":"S","pixels":[0,2,153,255,0,3,169,255,1,1,203,255,1,3,187,116,1,4,244,231,1,8,243,249,2,1,255,255,2,2,204,0,2,4,198,219,2,5,232,93,2,8,255,255,2,9,238,0,3,1,255,255,3,2,255,0,3,5,255,255,3,8,255,255,3,9,255,0,4,1,169,255,4,2,255,68,4,5,160,217,4,6,255,221,4,7,237,255,4,9,255,0,5,2,170,0,5,7,223,19,5,8,238,0],"secondary":false},{"width":8,"bonus":125,"chr":"T","pixels":[0,1,255,255,1,1,255,255,1,2,255,0,2,1,255,255,2,2,255,34,3,1,255,255,3,2,255,221,3,3,225,251,3,4,225,251,3,5,225,251,3,6,225,251,3,7,225,251,3,8,210,247,4,1,255,255,4,2,255,0,4,3,221,0,4,4,221,0,4,5,221,0,4,6,221,0,4,7,221,0,4,8,221,0,4,9,204,0,5,1,255,255,5,2,255,0,6,2,255,0],"secondary":false},{"width":8,"bonus":165,"chr":"U","pixels":[0,1,203,255,0,2,221,255,0,3,221,255,0,4,221,255,0,5,221,255,0,6,187,255,1,2,211,41,1,3,226,39,1,4,226,39,1,5,226,39,1,6,230,75,1,7,232,187,1,8,184,189,2,8,255,255,3,8,255,255,3,9,255,0,4,8,221,255,4,9,255,0,5,1,203,255,5,2,221,255,5,3,221,255,5,4,221,255,5,5,221,255,5,6,255,255,5,7,237,255,5,9,221,0,6,2,211,41,6,3,226,39,6,4,226,39,6,5,226,39,6,6,223,19,6,7,255,0,6,8,238,0],"secondary":false},{"width":7,"bonus":125,"chr":"V","pixels":[0,1,255,255,0,2,187,255,1,2,255,68,1,3,228,171,1,4,255,255,1,5,153,255,2,4,153,0,2,5,255,85,2,6,228,209,2,7,242,251,3,6,164,185,3,7,255,255,3,8,251,207,4,4,203,255,4,5,237,255,4,8,255,0,4,9,204,0,5,1,169,255,5,2,255,255,5,3,153,255,5,5,204,0,5,6,238,0,6,2,170,0,6,3,255,0,6,4,153,0],"secondary":false},{"width":10,"bonus":245,"chr":"W","pixels":[0,1,255,255,0,2,221,255,1,2,255,17,1,3,237,128,1,4,223,214,1,5,255,255,1,6,203,255,2,5,191,23,2,6,255,136,2,7,255,255,2,8,255,255,3,3,153,255,3,4,237,255,3,5,221,255,3,7,168,103,3,8,255,0,3,9,255,0,4,1,255,255,4,2,255,255,4,3,187,209,4,4,153,0,4,5,238,0,4,6,221,0,5,2,255,102,5,3,254,171,5,4,248,244,5,5,203,255,6,4,170,0,6,5,241,54,6,6,231,150,6,7,255,255,6,8,255,255,7,4,153,255,7,5,237,255,7,6,241,252,7,7,207,188,7,8,255,85,7,9,255,0,8,1,237,255,8,2,237,255,8,3,153,255,8,4,153,171,8,5,153,0,8,6,238,0,8,7,238,0,8,8,153,0,9,2,238,0,9,3,238,0,9,4,153,0],"secondary":false},{"width":7,"bonus":130,"chr":"X","pixels":[0,8,169,255,1,1,187,255,1,2,220,236,1,7,237,255,1,9,170,0,2,2,205,85,2,3,248,227,2,4,166,235,2,5,255,255,2,6,153,255,2,8,238,0,3,3,155,196,3,4,255,255,3,5,248,244,3,6,255,51,3,7,153,0,4,2,237,255,4,5,255,51,4,6,251,207,4,7,186,233,5,1,203,255,5,3,238,0,5,7,225,116,5,8,255,255,6,2,204,0,6,9,255,0],"secondary":false},{"width":7,"bonus":90,"chr":"Y","pixels":[0,1,169,255,1,2,249,243,2,3,248,157,2,4,255,255,3,4,241,234,3,5,254,204,3,6,232,243,3,7,225,251,3,8,210,247,4,3,255,255,4,5,221,0,4,6,204,0,4,7,221,0,4,8,221,0,4,9,204,0,5,1,237,255,5,4,255,0,6,2,238,0],"secondary":false},{"width":7,"bonus":140,"chr":"Z","pixels":[0,8,187,255,1,1,255,255,1,7,221,255,1,8,255,255,1,9,187,0,2,1,255,255,2,2,255,0,2,5,203,255,2,8,255,255,2,9,255,0,3,1,255,255,3,2,255,0,3,4,203,255,3,6,204,0,3,8,255,255,3,9,255,0,4,1,255,255,4,2,255,221,4,5,204,0,4,8,255,255,4,9,255,0,5,1,187,255,5,2,255,34,5,3,221,0,5,8,153,255,5,9,255,0,6,2,187,0,6,9,153,0],"secondary":false},{"width":7,"bonus":170,"chr":"0","pixels":[0,2,153,255,0,3,221,255,0,4,255,255,0,5,255,255,0,6,237,255,0,7,169,255,1,1,187,255,1,3,153,0,1,4,221,0,1,5,255,0,1,6,255,0,1,7,243,71,1,8,237,219,2,1,187,255,2,2,187,0,2,8,205,233,2,9,211,41,3,1,221,255,3,2,205,85,3,8,203,255,3,9,187,0,4,2,243,178,4,3,255,255,4,4,187,255,4,5,187,255,4,6,237,255,4,7,169,255,4,9,204,0,5,3,170,0,5,4,255,0,5,5,187,0,5,6,187,0,5,7,238,0,5,8,170,0],"secondary":false},{"width":7,"bonus":100,"chr":"1","pixels":[1,8,187,255,2,1,203,255,2,2,224,232,2,3,219,218,2,4,187,255,2,5,187,255,2,6,187,255,2,7,187,255,2,8,237,255,2,9,187,0,3,2,218,80,3,3,218,80,3,4,205,85,3,5,205,85,3,6,205,85,3,7,205,85,3,8,241,215,3,9,238,0,4,8,168,207,4,9,204,0],"secondary":false},{"width":7,"bonus":105,"chr":"2","pixels":[1,8,255,255,2,1,187,255,2,6,153,255,2,8,223,214,2,9,255,0,3,1,203,255,3,2,187,0,3,5,153,255,3,7,153,0,3,8,219,218,3,9,187,0,4,1,187,255,4,2,234,167,4,4,203,255,4,6,153,0,4,8,187,255,4,9,187,0,5,2,214,122,5,3,200,152,5,5,204,0,5,9,187,0],"secondary":false},{"width":7,"bonus":105,"chr":"3","pixels":[0,8,203,255,1,1,187,255,1,8,191,250,1,9,204,0,2,1,187,255,2,2,196,45,2,4,187,255,2,5,174,150,2,8,203,255,2,9,187,0,3,2,246,229,3,3,210,247,3,5,241,215,3,6,173,175,3,7,169,255,3,9,204,0,4,3,227,57,4,4,204,0,4,6,228,133,4,7,174,150,4,8,170,0],"secondary":false},{"width":7,"bonus":150,"chr":"4","pixels":[0,6,237,255,1,4,187,255,1,6,219,218,1,7,238,0,2,3,169,255,2,5,187,0,2,6,219,218,2,7,187,0,3,1,187,255,3,2,153,255,3,3,155,112,3,4,193,90,3,6,203,255,3,7,205,85,4,1,187,255,4,2,237,201,4,3,228,209,4,4,205,233,4,5,205,233,4,6,242,251,4,7,241,198,4,8,205,233,5,2,187,0,5,3,187,0,5,4,187,0,5,5,187,0,5,6,224,155,5,7,238,0,5,8,187,0,5,9,187,0],"secondary":false},{"width":7,"bonus":130,"chr":"5","pixels":[1,1,237,255,1,2,187,255,1,3,187,255,1,4,187,255,1,8,207,251,2,1,187,255,2,2,238,0,2,3,187,0,2,4,237,201,2,5,187,0,2,8,187,255,2,9,204,0,3,1,187,255,3,2,187,0,3,4,203,255,3,5,191,23,3,8,203,255,3,9,187,0,4,2,187,0,4,5,251,242,4,6,191,250,4,7,221,255,4,9,204,0,5,6,243,71,5,7,191,23,5,8,221,0],"secondary":false},{"width":7,"bonus":150,"chr":"6","pixels":[0,3,169,255,0,4,255,255,0,5,255,255,0,6,237,255,0,7,153,255,1,2,187,255,1,4,209,145,1,5,255,68,1,6,255,0,1,7,246,123,1,8,228,209,2,1,203,255,2,3,187,0,2,4,200,238,2,8,219,218,2,9,187,0,3,1,187,255,3,2,204,0,3,4,203,255,3,5,205,85,3,8,187,255,3,9,187,0,4,2,187,0,4,5,248,227,4,6,255,255,4,7,187,255,4,9,187,0,5,6,221,0,5,7,255,0,5,8,187,0],"secondary":false},{"width":7,"bonus":105,"chr":"7","pixels":[0,1,187,255,1,1,187,255,1,2,187,0,1,8,203,255,2,1,187,255,2,2,187,0,2,6,237,255,2,7,153,255,2,9,204,0,3,1,187,255,3,2,205,85,3,3,153,255,3,4,221,255,3,7,238,0,3,8,153,0,4,1,255,255,4,2,237,201,4,4,153,0,4,5,221,0,5,2,255,0,5,3,187,0],"secondary":false},{"width":7,"bonus":165,"chr":"8","pixels":[1,2,237,255,1,3,221,255,1,6,203,255,1,7,228,247,2,1,203,255,2,3,241,54,2,4,248,209,2,5,186,233,2,7,207,21,2,8,250,226,3,1,187,255,3,2,204,0,3,4,186,233,3,5,221,98,3,6,170,0,3,8,191,250,3,9,221,0,4,1,221,255,4,2,209,104,4,4,169,255,4,5,237,219,4,8,187,255,4,9,187,0,5,2,243,178,5,3,187,209,5,5,204,128,5,6,251,242,5,7,240,253,5,9,187,0,6,3,170,0,6,4,153,0,6,7,238,0,6,8,238,0],"secondary":false},{"width":7,"bonus":160,"chr":"9","pixels":[1,2,221,255,1,3,191,250,1,4,242,251,1,8,153,255,2,1,203,255,2,3,221,0,2,4,191,23,2,5,253,223,2,8,191,250,2,9,153,0,3,1,187,255,3,2,204,0,3,5,191,250,3,6,221,0,3,8,203,255,3,9,187,0,4,1,187,255,4,2,218,139,4,6,200,65,4,7,169,255,4,9,204,0,5,2,228,171,5,3,245,247,5,4,255,255,5,5,255,255,5,6,223,214,5,8,170,0,6,3,153,0,6,4,238,0,6,5,255,0,6,6,255,0,6,7,187,0],"secondary":false},{"width":8,"bonus":130,"chr":"%","pixels":[0,3,255,255,0,8,255,255,1,2,255,255,1,4,255,255,1,7,255,255,1,9,255,0,2,3,255,255,2,5,255,41,2,6,255,255,2,8,255,0,3,4,255,41,3,5,255,255,3,7,255,0,4,4,255,255,4,6,255,92,4,7,255,255,5,3,255,255,5,5,255,0,5,6,255,255,5,8,255,255,6,2,255,255,6,4,255,0,6,7,255,255,6,9,255,0,7,3,255,0,7,8,255,0],"secondary":false},{"width":4,"bonus":80,"chr":"/","pixels":[0,7,153,255,0,8,237,255,0,9,221,255,1,4,187,255,1,5,237,255,1,6,169,255,1,8,153,0,1,9,238,0,1,10,221,0,2,1,221,255,2,2,221,255,2,5,187,0,2,6,238,0,2,7,170,0,3,2,221,0,3,3,221,0],"secondary":false},{"width":7,"bonus":110,"chr":"+","pixels":[0,5,221,255,1,5,255,255,1,6,221,0,2,5,255,255,2,6,255,34,3,2,153,255,3,3,223,253,3,4,225,251,3,5,255,255,3,6,255,221,3,7,225,251,3,8,210,247,4,3,153,0,4,4,221,0,4,5,255,255,4,6,255,0,4,7,221,0,4,8,221,0,4,9,204,0,5,5,255,255,5,6,255,0,6,6,255,0],"secondary":false},{"width":5,"bonus":75,"chr":"?","pixels":[0,1,169,255,1,1,255,255,1,2,170,0,1,6,221,255,1,8,255,255,2,1,255,255,2,2,255,0,2,5,169,255,2,7,221,0,2,9,255,0,3,2,255,255,3,3,221,255,3,6,170,0,4,3,255,17,4,4,221,0],"secondary":false},{"width":2,"bonus":70,"chr":"!","pixels":[0,1,169,255,0,2,187,255,0,3,187,255,0,4,187,255,0,5,187,255,0,6,169,255,0,8,255,255,1,2,181,48,1,3,196,45,1,4,196,45,1,5,196,45,1,6,196,45,1,7,170,0,1,9,255,0],"secondary":false},{"width":8,"bonus":230,"chr":"@","pixels":[0,4,255,255,0,5,255,255,0,6,221,255,0,7,255,255,0,8,187,255,1,3,221,255,1,5,255,0,1,6,255,34,1,7,221,0,1,8,255,68,1,9,250,243,2,2,221,255,2,4,232,93,2,5,255,255,2,6,237,255,2,7,255,255,2,10,248,157,3,2,255,255,3,3,221,0,3,4,255,255,3,6,255,0,3,7,241,54,3,8,254,204,3,10,214,223,3,11,153,0,4,2,237,255,4,3,255,0,4,4,255,255,4,5,255,0,4,8,255,255,4,9,204,0,4,11,187,0,5,3,253,240,5,4,255,255,5,5,255,221,5,6,221,255,5,7,221,255,5,8,237,255,5,9,255,0,6,4,240,36,6,5,255,34,6,6,226,39,6,7,226,39,6,8,250,226,6,9,238,0,7,9,221,0],"secondary":false},{"width":8,"bonus":200,"chr":"#","pixels":[0,6,255,255,1,3,255,255,1,6,255,255,1,7,254,171,1,8,237,255,2,1,169,255,2,2,237,255,2,3,255,255,2,4,255,221,2,5,175,247,2,6,255,255,2,7,255,85,2,8,170,0,2,9,238,0,3,2,170,0,3,3,255,255,3,4,255,0,3,5,221,0,3,6,255,255,3,7,255,0,4,3,255,255,4,4,255,153,4,5,203,255,4,6,255,255,4,7,254,239,4,8,187,255,5,1,255,255,5,2,187,255,5,3,255,255,5,4,255,85,5,5,159,27,5,6,255,255,5,7,255,0,5,8,238,0,5,9,187,0,6,2,255,0,6,3,255,255,6,4,255,0,6,7,255,0,7,4,255,0],"secondary":false},{"width":6,"bonus":130,"chr":"$","pixels":[0,2,153,255,0,3,169,255,1,1,203,255,1,3,187,116,1,4,244,231,1,8,243,249,2,0,203,255,2,1,237,255,2,2,204,0,2,4,176,197,2,5,237,128,2,8,240,253,2,9,251,207,3,1,251,242,3,2,239,18,3,5,247,245,3,6,164,132,3,8,255,255,3,9,240,36,3,10,204,0,4,2,240,36,4,6,249,174,4,7,198,219,4,9,255,0,5,7,170,0,5,8,170,0],"secondary":false},{"width":6,"bonus":75,"chr":"^","pixels":[0,4,153,255,0,5,237,255,1,2,203,255,1,3,221,255,1,5,153,0,1,6,238,0,2,1,221,255,2,2,230,245,2,3,218,80,2,4,221,0,3,2,227,57,3,3,246,194,3,4,230,245,4,4,187,0,4,5,239,145],"secondary":false},{"width":6,"bonus":35,"chr":"~","pixels":[1,5,255,255,2,5,221,255,2,6,255,51,3,6,250,226,4,5,203,255,4,7,221,0,5,6,204,0],"secondary":false},{"width":7,"bonus":175,"chr":"&","pixels":[0,6,187,255,1,2,237,255,1,3,255,255,1,4,191,250,1,5,187,255,1,7,224,155,1,8,223,214,2,1,255,255,2,3,238,0,2,4,255,255,2,5,191,23,2,6,187,0,2,8,255,255,2,9,187,0,3,1,255,255,3,2,255,0,3,4,255,255,3,5,255,0,3,8,255,255,3,9,255,0,4,2,255,0,4,4,255,255,4,5,255,34,4,8,187,255,4,9,255,0,5,3,203,255,5,4,255,255,5,5,255,221,5,6,196,243,5,7,155,196,5,9,187,0,6,4,234,167,6,5,255,0,6,6,221,0,6,7,187,0],"secondary":false},{"width":6,"bonus":70,"chr":"*","pixels":[0,2,169,255,1,2,169,255,1,3,237,219,1,4,255,255,2,1,203,255,2,2,240,253,2,3,255,255,2,4,228,133,2,5,255,0,3,2,237,183,3,3,245,107,3,4,255,153,4,3,170,0,4,5,153,0],"secondary":false},{"width":4,"bonus":100,"chr":"(","pixels":[0,3,173,255,0,4,239,255,0,5,253,255,0,6,229,255,0,7,171,255,1,1,193,255,1,2,203,255,1,4,188,64,1,5,241,25,1,6,252,46,1,7,240,112,1,8,238,218,1,9,210,232,2,0,209,255,2,2,194,2,2,3,204,0,2,9,223,111,2,10,245,224,3,1,210,0,3,11,216,0],"secondary":false},{"width":4,"bonus":75,"chr":")","pixels":[1,0,211,255,1,10,215,255,2,1,244,203,2,2,222,234,2,8,203,255,2,9,191,255,2,11,216,0,3,2,213,94,3,3,238,186,3,4,246,248,3,5,253,255,3,6,231,253,3,7,186,234,3,9,203,1,3,10,191,0],"secondary":false},{"width":7,"bonus":60,"chr":"_","pixels":[0,9,153,255,1,9,255,255,1,10,153,0,2,9,255,255,2,10,255,0,3,9,255,255,3,10,255,0,4,9,255,255,4,10,255,0,5,9,255,255,5,10,255,0,6,10,255,0],"secondary":false},{"width":4,"bonus":30,"chr":"-","pixels":[0,5,255,255,1,5,255,255,1,6,255,0,2,5,255,255,2,6,255,0,3,6,255,0],"secondary":true},{"width":8,"bonus":100,"chr":"=","pixels":[0,4,255,255,0,6,255,255,1,4,255,255,1,5,255,0,1,6,255,255,1,7,255,0,2,4,255,255,2,5,255,0,2,6,255,255,2,7,255,0,3,4,255,255,3,5,255,0,3,6,255,255,3,7,255,0,4,4,255,255,4,5,255,0,4,6,255,255,4,7,255,0,5,5,255,0,5,7,255,0],"secondary":false},{"width":3,"bonus":105,"chr":"[","pixels":[0,0,203,255,0,1,221,255,0,2,221,255,0,3,221,255,0,4,221,255,0,5,221,255,0,6,221,255,0,7,221,255,0,8,203,255,1,0,237,255,1,1,211,41,1,2,226,39,1,3,226,39,1,4,226,39,1,5,226,39,1,6,226,39,1,7,226,39,1,8,252,241,1,9,204,0,2,1,238,0,2,9,238,0],"secondary":false},{"width":3,"bonus":105,"chr":"]","pixels":[0,0,237,255,0,8,237,255,1,0,203,255,1,1,253,223,1,2,225,251,1,3,225,251,1,4,225,251,1,5,225,251,1,6,225,251,1,7,225,251,1,8,210,247,1,9,238,0,2,1,204,0,2,2,221,0,2,3,221,0,2,4,221,0,2,5,221,0,2,6,221,0,2,7,221,0,2,8,221,0,2,9,204,0],"secondary":false},{"width":5,"bonus":90,"chr":"{","pixels":[0,5,153,255,1,2,169,255,1,3,221,255,1,4,221,255,1,5,203,255,1,6,255,255,1,7,221,255,1,8,169,255,2,1,237,255,2,3,181,48,2,4,223,19,2,5,221,0,2,6,207,21,2,7,255,34,2,8,232,93,2,9,249,243,3,2,238,0,3,10,238,0],"secondary":false},{"width":5,"bonus":90,"chr":"}","pixels":[1,1,237,255,1,9,237,255,2,2,249,174,2,3,232,243,2,4,225,251,2,5,207,251,2,6,255,255,2,7,223,253,2,8,181,239,2,10,238,0,3,3,170,0,3,4,221,0,3,5,241,162,3,6,204,0,3,7,255,0,3,8,221,0,3,9,170,0,4,6,153,0],"secondary":false},{"width":3,"bonus":20,"chr":":","pixels":[1,3,255,255,1,7,255,255,2,4,255,0,2,8,255,0],"secondary":true},{"width":3,"bonus":40,"chr":";","pixels":[0,9,201,255,1,3,255,255,1,7,241,255,1,8,255,255,1,10,201,0,2,4,255,0,2,8,241,0,2,9,255,0],"secondary":true},{"width":3,"bonus":30,"chr":"\\"","pixels":[0,1,255,255,0,2,255,255,1,2,255,0,1,3,255,0,2,1,255,255,2,2,255,255],"secondary":true},{"width":2,"bonus":20,"chr":"\'","pixels":[0,1,255,255,0,2,177,255,1,2,255,30,1,3,177,0],"secondary":true},{"width":7,"bonus":70,"chr":"<","pixels":[0,5,203,255,1,5,255,255,1,6,228,133,2,4,237,255,2,6,254,239,3,4,169,255,3,5,238,0,3,6,175,247,3,7,243,89,4,3,221,255,4,5,170,0,4,7,244,231,5,4,221,0,5,8,221,0],"secondary":false},{"width":7,"bonus":80,"chr":">","pixels":[0,3,203,255,0,7,203,255,1,4,228,133,1,7,187,255,1,8,204,0,2,4,247,245,2,6,255,255,2,8,187,0,3,4,175,247,3,5,248,157,3,6,203,255,3,7,255,0,4,5,255,255,4,6,173,75,4,7,204,0,5,6,255,0],"secondary":false},{"width":5,"bonus":70,"chr":"\\\\","pixels":[1,1,153,255,1,2,255,255,1,3,203,255,2,2,153,0,2,3,255,51,2,4,231,150,2,5,255,255,2,6,203,255,3,6,255,34,3,7,231,150,3,8,255,255,3,9,207,251,4,9,255,0,4,10,204,0],"secondary":false},{"width":2,"bonus":10,"chr":".","pixels":[0,8,255,255,1,9,255,0],"secondary":true},{"width":3,"bonus":30,"chr":",","pixels":[0,9,205,255,1,7,205,255,1,8,255,255,1,10,205,0,2,8,205,0,2,9,255,0],"secondary":true},{"width":3,"bonus":100,"chr":"|","pixels":[0,1,221,255,0,2,221,255,0,3,221,255,0,4,221,255,0,5,221,255,0,6,221,255,0,7,221,255,0,8,221,255,0,9,221,255,0,10,203,255,1,2,226,39,1,3,226,39,1,4,226,39,1,5,226,39,1,6,226,39,1,7,226,39,1,8,226,39,1,9,226,39,1,10,226,39,1,11,204,0],"secondary":false}],"width":10,"spacewidth":3,"shadow":true,"height":12,"basey":8}');

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The module cache
/******/ 	var __webpack_module_cache__ = {};
/******/ 	
/******/ 	// The require function
/******/ 	function __nested_webpack_require_37481__(moduleId) {
/******/ 		// Check if module is in cache
/******/ 		var cachedModule = __webpack_module_cache__[moduleId];
/******/ 		if (cachedModule !== undefined) {
/******/ 			return cachedModule.exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = __webpack_module_cache__[moduleId] = {
/******/ 			// no module.id needed
/******/ 			// no module.loaded needed
/******/ 			exports: {}
/******/ 		};
/******/ 	
/******/ 		// Execute the module function
/******/ 		__webpack_modules__[moduleId].call(module.exports, module, module.exports, __nested_webpack_require_37481__);
/******/ 	
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/ 	
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module is referenced by other modules so it can't be inlined
/******/ 	var __nested_webpack_exports__ = __nested_webpack_require_37481__("./src/targetmob/index.ts");
/******/ 	
/******/ 	return __nested_webpack_exports__;
/******/ })()
;
});

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The module cache
/******/ 	var __webpack_module_cache__ = {};
/******/ 	
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/ 		// Check if module is in cache
/******/ 		var cachedModule = __webpack_module_cache__[moduleId];
/******/ 		if (cachedModule !== undefined) {
/******/ 			return cachedModule.exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = __webpack_module_cache__[moduleId] = {
/******/ 			id: moduleId,
/******/ 			// no module.loaded needed
/******/ 			exports: {}
/******/ 		};
/******/ 	
/******/ 		// Execute the module function
/******/ 		__webpack_modules__[moduleId](module, module.exports, __webpack_require__);
/******/ 	
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/ 	
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = __webpack_modules__;
/******/ 	
/************************************************************************/
/******/ 	/* webpack/runtime/compat get default export */
/******/ 	(() => {
/******/ 		// getDefaultExport function for compatibility with non-harmony modules
/******/ 		__webpack_require__.n = (module) => {
/******/ 			var getter = module && module.__esModule ?
/******/ 				() => (module['default']) :
/******/ 				() => (module);
/******/ 			__webpack_require__.d(getter, { a: getter });
/******/ 			return getter;
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/define property getters */
/******/ 	(() => {
/******/ 		// define getter functions for harmony exports
/******/ 		__webpack_require__.d = (exports, definition) => {
/******/ 			for(var key in definition) {
/******/ 				if(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {
/******/ 					Object.defineProperty(exports, key, { enumerable: true, get: definition[key] });
/******/ 				}
/******/ 			}
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/global */
/******/ 	(() => {
/******/ 		__webpack_require__.g = (function() {
/******/ 			if (typeof globalThis === 'object') return globalThis;
/******/ 			try {
/******/ 				return this || new Function('return this')();
/******/ 			} catch (e) {
/******/ 				if (typeof window === 'object') return window;
/******/ 			}
/******/ 		})();
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/hasOwnProperty shorthand */
/******/ 	(() => {
/******/ 		__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/make namespace object */
/******/ 	(() => {
/******/ 		// define __esModule on exports
/******/ 		__webpack_require__.r = (exports) => {
/******/ 			if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 				Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 			}
/******/ 			Object.defineProperty(exports, '__esModule', { value: true });
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/publicPath */
/******/ 	(() => {
/******/ 		var scriptUrl;
/******/ 		if (__webpack_require__.g.importScripts) scriptUrl = __webpack_require__.g.location + "";
/******/ 		var document = __webpack_require__.g.document;
/******/ 		if (!scriptUrl && document) {
/******/ 			if (document.currentScript)
/******/ 				scriptUrl = document.currentScript.src;
/******/ 			if (!scriptUrl) {
/******/ 				var scripts = document.getElementsByTagName("script");
/******/ 				if(scripts.length) {
/******/ 					var i = scripts.length - 1;
/******/ 					while (i > -1 && !scriptUrl) scriptUrl = scripts[i--].src;
/******/ 				}
/******/ 			}
/******/ 		}
/******/ 		// When supporting browsers where an automatic publicPath is not supported you must specify an output.publicPath manually via configuration
/******/ 		// or pass an empty string ("") and set the __webpack_public_path__ variable from your code to use your own logic.
/******/ 		if (!scriptUrl) throw new Error("Automatic publicPath is not supported in this browser");
/******/ 		scriptUrl = scriptUrl.replace(/#.*$/, "").replace(/\?.*$/, "").replace(/\/[^\/]+$/, "/");
/******/ 		__webpack_require__.p = scriptUrl;
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/jsonp chunk loading */
/******/ 	(() => {
/******/ 		__webpack_require__.b = document.baseURI || self.location.href;
/******/ 		
/******/ 		// object to store loaded and loading chunks
/******/ 		// undefined = chunk not loaded, null = chunk preloaded/prefetched
/******/ 		// [resolve, reject, Promise] = chunk loading, 0 = chunk loaded
/******/ 		var installedChunks = {
/******/ 			"main": 0
/******/ 		};
/******/ 		
/******/ 		// no chunk on demand loading
/******/ 		
/******/ 		// no prefetching
/******/ 		
/******/ 		// no preloaded
/******/ 		
/******/ 		// no HMR
/******/ 		
/******/ 		// no HMR manifest
/******/ 		
/******/ 		// no on chunks loaded
/******/ 		
/******/ 		// no jsonp function
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/nonce */
/******/ 	(() => {
/******/ 		__webpack_require__.nc = undefined;
/******/ 	})();
/******/ 	
/************************************************************************/
var __webpack_exports__ = {};
// This entry need to be wrapped in an IIFE because it need to be in strict mode.
(() => {
"use strict";
/*!******************!*\
  !*** ./index.ts ***!
  \******************/
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   startBetterBuffsBar: () => (/* binding */ startBetterBuffsBar)
/* harmony export */ });
/* harmony import */ var alt1__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! alt1 */ "../node_modules/alt1/dist/base/index.js");
/* harmony import */ var alt1__WEBPACK_IMPORTED_MODULE_9___default = /*#__PURE__*/__webpack_require__.n(alt1__WEBPACK_IMPORTED_MODULE_9__);
/* harmony import */ var alt1_buffs__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! alt1/buffs */ "../node_modules/alt1/dist/buffs/index.js");
/* harmony import */ var alt1_buffs__WEBPACK_IMPORTED_MODULE_7___default = /*#__PURE__*/__webpack_require__.n(alt1_buffs__WEBPACK_IMPORTED_MODULE_7__);
/* harmony import */ var alt1_targetmob__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! alt1/targetmob */ "../node_modules/alt1/dist/targetmob/index.js");
/* harmony import */ var alt1_targetmob__WEBPACK_IMPORTED_MODULE_8___default = /*#__PURE__*/__webpack_require__.n(alt1_targetmob__WEBPACK_IMPORTED_MODULE_8__);
/* harmony import */ var _a1sauce__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./a1sauce */ "./a1sauce.ts");
/* harmony import */ var sortablejs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! sortablejs */ "../node_modules/sortablejs/modular/sortable.esm.js");
/* harmony import */ var html_to_image__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! html-to-image */ "../node_modules/html-to-image/es/index.js");
/* harmony import */ var _index_html__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./index.html */ "./index.html");
/* harmony import */ var _appconfig_json__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./appconfig.json */ "./appconfig.json");
/* harmony import */ var _icon_png__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./icon.png */ "./icon.png");
/* harmony import */ var _css_betterbuffsbar_css__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./css/betterbuffsbar.css */ "./css/betterbuffsbar.css");
var __awaiter = (undefined && undefined.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (undefined && undefined.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (g && (g = 0, op[0] && (_ = 0)), _) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var _a, _b, _c, _d, _e, _f, _g;
// alt1 base libs, provides all the commonly used methods for image matching and capture
// also gives your editor info about the window.alt1 api






sortablejs__WEBPACK_IMPORTED_MODULE_1__.Sortable.mount(new sortablejs__WEBPACK_IMPORTED_MODULE_1__.MultiDrag());
// tell webpack that this file relies index.html, appconfig.json and icon.png, this makes webpack
// add these files to the output directory
// this works because in /webpack.config.js we told webpack to treat all html, json and imageimports
// as assets




var buffs = new (alt1_buffs__WEBPACK_IMPORTED_MODULE_7___default())();
var debuffs = new (alt1_buffs__WEBPACK_IMPORTED_MODULE_7___default())();
debuffs.debuffs = true;
var targetDisplay = new (alt1_targetmob__WEBPACK_IMPORTED_MODULE_8___default())();
var debugMode = _a1sauce__WEBPACK_IMPORTED_MODULE_0__.getSetting('debugMode');
var betaTesting = _a1sauce__WEBPACK_IMPORTED_MODULE_0__.getSetting('beta');
var currentOverlayPosition = _a1sauce__WEBPACK_IMPORTED_MODULE_0__.getSetting('overlayPosition');
var currentOverlay2Position = _a1sauce__WEBPACK_IMPORTED_MODULE_0__.getSetting('overlay2Position');
var currentOverlay3Position = _a1sauce__WEBPACK_IMPORTED_MODULE_0__.getSetting('overlay3Position');
function getByID(id) {
    return document.getElementById(id);
}
var config = {
    appName: 'betterBuffBar',
};
var helperItems = {
    Output: getByID('output'),
    settings: getByID('Settings'),
    BetterBuffsBar: getByID('BetterBuffsBar'),
    TrackedBuffs: getByID('Buffs'),
    UntrackedBuffs: getByID('UntrackedBuffs'),
    ToggleOverlayButton: getByID('ToggleOverlayButton'),
    NameOutput: getByID('NameOutput'),
};
var buffsList = {
    AnimateDeadBuff: getByID('AnimateDeadBuff'),
    BalanceByForceBuff: getByID('BalanceByForceBuff'),
    BolgStacksBuff: getByID('BolgStacksBuff'),
    DarknessBuff: getByID('DarknessBuff'),
    ElderOverloadBuff: getByID('ElderOverloadBuff'),
    FsoaSpecBuff: getByID('FsoaSpecBuff'),
    GladiatorsRageBuff: getByID('GladiatorsRageBuff'),
    NecrosisBuff: getByID('NecrosisBuff'),
    OverloadBuff: getByID('OverloadBuff'),
    TimeRiftBuff: getByID('TimeRiftBuff'),
    WeaponPoisonBuff: getByID('WeaponPoisonBuff'),
    Aura: getByID('Aura'),
    BonfireBoost: getByID('BonfireBoost'),
    ErethdorsGrimoire: getByID('ErethdorsGrimoire'),
    LantadymeIncense: getByID('LantadymeIncense'),
    DwarfWeedIncense: getByID('DwarfWeedIncense'),
    FellstalkIncense: getByID('FellstalkIncense'),
    KwuarmIncense: getByID('KwuarmIncense'),
    Anticipation: getByID('Anticipation'),
    Barricade: getByID('Barricade'),
    Devotion: getByID('Devotion'),
    Divert: getByID('Divert'),
    Freedom: getByID('Freedom'),
    Immortality: getByID('Immortality'),
    Reflect: getByID('Reflect'),
    Resonance: getByID('Resonance'),
    SplitSoulBuff: getByID('SplitSoulBuff'),
    AntiFire: getByID('AntifireBuff'),
    PrayerRenewal: getByID('PrayerRenewalBuff'),
    DeathSpark: getByID('DeathSparkBuff'),
    ThreadsOfFate: getByID('ThreadsOfFateBuff'),
};
var debuffsList = {
    AdrenalinePotionDebuff: getByID('AdrenalinePotionDebuff'),
    AncientElvenRitualShardDebuff: getByID('AncientElvenRitualShardDebuff'),
    CrystalRainDebuff: getByID('CrystalRainDebuff'),
    DeathGuardDebuff: getByID('DeathGuardDebuff'),
    EnhancedExcaliburDebuff: getByID('EnhancedExcaliburDebuff'),
    OmniGuardDebuff: getByID('OmniGuardDebuff'),
    StunnedDebuff: getByID('StunnedDebuff'),
    SignOfLifeDebuff: getByID('SignOfLifeDebuff'),
    Virus: getByID('VirusDebuff'),
    PowerburstPrevention: getByID('PowerburstPreventionDebuff'),
};
var sigilsList = {
    DemonSlayer: getByID('DemonSlayerSigil'),
    DragonSlayer: getByID('DragonSlayerSigil'),
    IngenuityOfTheHumans: getByID('IngenuityOfTheHumansSigil'),
    LimitlessSigil: getByID('LimitlessSigil'),
    UndeadSlayer: getByID('UndeadSlayerSigil'),
};
var prayersList = {
    DpsPrayer: getByID('DpsPrayer'),
    OverheadPrayer: getByID('OverheadPrayer'),
};
var ultimatesList = {
    Berserk: getByID('BerserkUltimate'),
    DeathsSwiftness: getByID('DeathsSwiftnessUltimate'),
    GreaterDeathsSwiftness: getByID('GreaterDeathsSwiftnessUltimate'),
    GreaterSunshine: getByID('GreaterSunshineUltimate'),
    LivingDeath: getByID('LivingDeathUltimate'),
    Sunshine: getByID('SunshineUltimate'),
};
// loads all images as raw pixel data async, images have to be saved as *.data.png
// this also takes care of metadata headers in the image that make browser load the image
// with slightly wrong colors
// this function is async, so you cant acccess the images instantly but generally takes <20ms
// use `await imgs.promise` if you want to use the images as soon as they are loaded
var buffImages = alt1__WEBPACK_IMPORTED_MODULE_9__.webpackImages({
    animateDead: __webpack_require__(/*! ./asset/data/Animate_Dead-noborder.data.png */ "./asset/data/Animate_Dead-noborder.data.png"),
    antipoisonActive: __webpack_require__(/*! ./asset/data/Anti-poison_Active-noborder.data.png */ "./asset/data/Anti-poison_Active-noborder.data.png"),
    chronicleAttraction: __webpack_require__(/*! ./asset/data/Chronicle_Attraction-noborder.data.png */ "./asset/data/Chronicle_Attraction-noborder.data.png"),
    darkness: __webpack_require__(/*! ./asset/data/Darkness-noborder.data.png */ "./asset/data/Darkness-noborder.data.png"),
    elderOverload: __webpack_require__(/*! ./asset/data/Elder_Overload-noborder.data.png */ "./asset/data/Elder_Overload-noborder.data.png"),
    fsoaWeaponSpec: __webpack_require__(/*! ./asset/data/fsoaSpecBuff-noborder.data.png */ "./asset/data/fsoaSpecBuff-noborder.data.png"),
    gladiatorsRage: __webpack_require__(/*! ./asset/data/Gladiators_Rage-noborder.data.png */ "./asset/data/Gladiators_Rage-noborder.data.png"),
    necrosis: __webpack_require__(/*! ./asset/data/Necrosis-noborder.data.png */ "./asset/data/Necrosis-noborder.data.png"),
    overloaded: __webpack_require__(/*! ./asset/data/Overloaded-noborder.data.png */ "./asset/data/Overloaded-noborder.data.png"),
    overloadedNoBorder: __webpack_require__(/*! ./asset/data/Overloaded-noborder.data.png */ "./asset/data/Overloaded-noborder.data.png"),
    perfectEquilibrium: __webpack_require__(/*! ./asset/data/Perfect_Equilibrium-noborder.data.png */ "./asset/data/Perfect_Equilibrium-noborder.data.png"),
    perfectEquilibriumNoBorder: __webpack_require__(/*! ./asset/data/Perfect_Equilibrium-noborder.data.png */ "./asset/data/Perfect_Equilibrium-noborder.data.png"),
    poisonous: __webpack_require__(/*! ./asset/data/Poisonous-top-noborder.data.png */ "./asset/data/Poisonous-top-noborder.data.png"),
    prayerRenewActive: __webpack_require__(/*! ./asset/data/Prayer_Renew_Active-noborder.data.png */ "./asset/data/Prayer_Renew_Active-noborder.data.png"),
    superAntifireActive: __webpack_require__(/*! ./asset/data/Super_Anti-Fire_Active-noborder.data.png */ "./asset/data/Super_Anti-Fire_Active-noborder.data.png"),
    supremeOverloadActive: __webpack_require__(/*! ./asset/data/Supreme_Overload_Potion_Active-noborder.data.png */ "./asset/data/Supreme_Overload_Potion_Active-noborder.data.png"),
    timeRift: __webpack_require__(/*! ./asset/data/Time_Rift-noborder.data.png */ "./asset/data/Time_Rift-noborder.data.png"),
    aura: __webpack_require__(/*! ./asset/data/Aura-noborder.data.png */ "./asset/data/Aura-noborder.data.png"),
    bonfireBoost: __webpack_require__(/*! ./asset/data/Bonfire_Boost-noborder.data.png */ "./asset/data/Bonfire_Boost-noborder.data.png"),
    grimoire: __webpack_require__(/*! ./asset/data/Erethdor's_grimoire-noborder.data.png */ "./asset/data/Erethdor's_grimoire-noborder.data.png"),
    Anticipation: __webpack_require__(/*! ./asset/data/Anticipation.data.png */ "./asset/data/Anticipation.data.png"),
    Barricade: __webpack_require__(/*! ./asset/data/Barricade.data.png */ "./asset/data/Barricade.data.png"),
    Devotion: __webpack_require__(/*! ./asset/data/Devotion.data.png */ "./asset/data/Devotion.data.png"),
    Divert: __webpack_require__(/*! ./asset/data/Divert.data.png */ "./asset/data/Divert.data.png"),
    Freedom: __webpack_require__(/*! ./asset/data/Freedom.data.png */ "./asset/data/Freedom.data.png"),
    Immortality: __webpack_require__(/*! ./asset/data/Immortality.data.png */ "./asset/data/Immortality.data.png"),
    Reflect: __webpack_require__(/*! ./asset/data/Reflect.data.png */ "./asset/data/Reflect.data.png"),
    Resonance: __webpack_require__(/*! ./asset/data/Resonance.data.png */ "./asset/data/Resonance.data.png"),
    SplitSoul: __webpack_require__(/*! ./asset/data/Split_Soul.data.png */ "./asset/data/Split_Soul.data.png"),
    Antifire: __webpack_require__(/*! ./asset/data/antifire_top.data.png */ "./asset/data/antifire_top.data.png"),
    PrayerRenewal: __webpack_require__(/*! ./asset/data/Prayer_Renew_Active-noborder.data.png */ "./asset/data/Prayer_Renew_Active-noborder.data.png"),
    DeathSpark: __webpack_require__(/*! ./asset/data/Death_Spark.data.png */ "./asset/data/Death_Spark.data.png"),
    ThreadsOfFate: __webpack_require__(/*! ./asset/data/Threads_Of_Fate.data.png */ "./asset/data/Threads_Of_Fate.data.png"),
});
var incenseImages = alt1__WEBPACK_IMPORTED_MODULE_9__.webpackImages({
    lantadyme: __webpack_require__(/*! ./asset/data/Lantadyme.data.png */ "./asset/data/Lantadyme.data.png"),
    dwarfWeed: __webpack_require__(/*! ./asset/data/Dwarf_Weed.data.png */ "./asset/data/Dwarf_Weed.data.png"),
    fellstalk: __webpack_require__(/*! ./asset/data/Fellstalk.data.png */ "./asset/data/Fellstalk.data.png"),
    kwuarm: __webpack_require__(/*! ./asset/data/Kwuarm.data.png */ "./asset/data/Kwuarm.data.png"),
});
var debuffImages = alt1__WEBPACK_IMPORTED_MODULE_9__.webpackImages({
    adrenalinePotion: __webpack_require__(/*! ./asset/data/Adrenaline_Potion-noborder.data.png */ "./asset/data/Adrenaline_Potion-noborder.data.png"),
    crystalRainMinimal: __webpack_require__(/*! ./asset/data/Crystal_Rain-minimal-noborder.data.png */ "./asset/data/Crystal_Rain-minimal-noborder.data.png"),
    deathEssenceDebuff: __webpack_require__(/*! ./asset/data/Omni_Guard_Special-top-noborder.data.png */ "./asset/data/Omni_Guard_Special-top-noborder.data.png"),
    deathGraspDebuff: __webpack_require__(/*! ./asset/data/Death_Guard_Special-top-noborder.data.png */ "./asset/data/Death_Guard_Special-top-noborder.data.png"),
    elvenRitualShard: __webpack_require__(/*! ./asset/data/Ancient_Elven_Ritual_Shard-noborder.data.png */ "./asset/data/Ancient_Elven_Ritual_Shard-noborder.data.png"),
    enhancedExcaliburDebuff: __webpack_require__(/*! ./asset/data/EE_scuffed-top-noborder.data.png */ "./asset/data/EE_scuffed-top-noborder.data.png"),
    stunnedDebuff: __webpack_require__(/*! ./asset/data/Stunned.data.png */ "./asset/data/Stunned.data.png"),
    signOfLifeDebuff: __webpack_require__(/*! ./asset/data/Sign_of_Life-top.data.png */ "./asset/data/Sign_of_Life-top.data.png"),
    blackVirus: __webpack_require__(/*! ./asset/data/Black_virus.data.png */ "./asset/data/Black_virus.data.png"),
    redVirus: __webpack_require__(/*! ./asset/data/Red_virus.data.png */ "./asset/data/Red_virus.data.png"),
    blueVirus: __webpack_require__(/*! ./asset/data/Blue_virus.data.png */ "./asset/data/Blue_virus.data.png"),
    greenVirus: __webpack_require__(/*! ./asset/data/Green_virus.data.png */ "./asset/data/Green_virus.data.png"),
    powerburstPrevention: __webpack_require__(/*! ./asset/data/Powerburst_prevention.data.png */ "./asset/data/Powerburst_prevention.data.png"),
});
var ultimateImages = alt1__WEBPACK_IMPORTED_MODULE_9__.webpackImages({
    berserk: __webpack_require__(/*! ./asset/data/Berserk-noborder.data.png */ "./asset/data/Berserk-noborder.data.png"),
    deathsSwiftness: __webpack_require__(/*! ./asset/data/Deaths_Swiftness-top.data.png */ "./asset/data/Deaths_Swiftness-top.data.png"),
    greaterDeathsSwiftness: __webpack_require__(/*! ./asset/data/Greater_Death's_Swiftness-noborder.data.png */ "./asset/data/Greater_Death's_Swiftness-noborder.data.png"),
    greaterSunshine: __webpack_require__(/*! ./asset/data/Greater_Sunshine-noborder.data.png */ "./asset/data/Greater_Sunshine-noborder.data.png"),
    livingDeath: __webpack_require__(/*! ./asset/data/Living_Death-noborder.data.png */ "./asset/data/Living_Death-noborder.data.png"),
    sunshine: __webpack_require__(/*! ./asset/data/Sunshine-noborder.data.png */ "./asset/data/Sunshine-noborder.data.png"),
});
var sigilImages = alt1__WEBPACK_IMPORTED_MODULE_9__.webpackImages({
    demonSlayer: __webpack_require__(/*! ./asset/data/Demon_Slayer-noborder.data.png */ "./asset/data/Demon_Slayer-noborder.data.png"),
    dragonSlayer: __webpack_require__(/*! ./asset/data/Dragon_Slayer-noborder.data.png */ "./asset/data/Dragon_Slayer-noborder.data.png"),
    ingenuityOfTheHumans: __webpack_require__(/*! ./asset/data/Ingenuity_of_the_Humans-noborder.data.png */ "./asset/data/Ingenuity_of_the_Humans-noborder.data.png"),
    limitless: __webpack_require__(/*! ./asset/data/Limitless-noborder.data.png */ "./asset/data/Limitless-noborder.data.png"),
    undeadSlayer: __webpack_require__(/*! ./asset/data/Undead_Slayer-noborder.data.png */ "./asset/data/Undead_Slayer-noborder.data.png"),
});
var prayerImages = alt1__WEBPACK_IMPORTED_MODULE_9__.webpackImages({
    affliction: __webpack_require__(/*! ./asset/data/Affliction-noborder.data.png */ "./asset/data/Affliction-noborder.data.png"),
    anguish: __webpack_require__(/*! ./asset/data/Anguish-noborder.data.png */ "./asset/data/Anguish-noborder.data.png"),
    deflectMagic: __webpack_require__(/*! ./asset/data/Deflect_Magic-noborder.data.png */ "./asset/data/Deflect_Magic-noborder.data.png"),
    deflectMelee: __webpack_require__(/*! ./asset/data/Deflect_Melee-noborder.data.png */ "./asset/data/Deflect_Melee-noborder.data.png"),
    deflectNecromancy: __webpack_require__(/*! ./asset/data/Deflect_Necromancy-noborder.data.png */ "./asset/data/Deflect_Necromancy-noborder.data.png"),
    deflectRanged: __webpack_require__(/*! ./asset/data/Deflect_Ranged-noborder.data.png */ "./asset/data/Deflect_Ranged-noborder.data.png"),
    desolation: __webpack_require__(/*! ./asset/data/Desolation-noborder.data.png */ "./asset/data/Desolation-noborder.data.png"),
    malevolence: __webpack_require__(/*! ./asset/data/Malevolence-noborder.data.png */ "./asset/data/Malevolence-noborder.data.png"),
    prayerActive: __webpack_require__(/*! ./asset/data/Prayer_active-noborder.data.png */ "./asset/data/Prayer_active-noborder.data.png"),
    protectFromMagic: __webpack_require__(/*! ./asset/data/Protect_from_Magic-noborder.data.png */ "./asset/data/Protect_from_Magic-noborder.data.png"),
    protectFromMelee: __webpack_require__(/*! ./asset/data/Protect_from_Melee-noborder.data.png */ "./asset/data/Protect_from_Melee-noborder.data.png"),
    protectFromNecromancy: __webpack_require__(/*! ./asset/data/Protect_from_Necromancy-noborder.data.png */ "./asset/data/Protect_from_Necromancy-noborder.data.png"),
    protectFromRanged: __webpack_require__(/*! ./asset/data/Protect_from_Ranged-noborder.data.png */ "./asset/data/Protect_from_Ranged-noborder.data.png"),
    ruination: __webpack_require__(/*! ./asset/data/Ruination-noborder.data.png */ "./asset/data/Ruination-noborder.data.png"),
    sorrow: __webpack_require__(/*! ./asset/data/Sorrow-noborder.data.png */ "./asset/data/Sorrow-noborder.data.png"),
    soulSplit: __webpack_require__(/*! ./asset/data/Soul_Split-noborder.data.png */ "./asset/data/Soul_Split-noborder.data.png"),
    torment: __webpack_require__(/*! ./asset/data/Torment-noborder.data.png */ "./asset/data/Torment-noborder.data.png"),
    turmoil: __webpack_require__(/*! ./asset/data/Turmoil-noborder.data.png */ "./asset/data/Turmoil-noborder.data.png"),
});
var enemyImages = alt1__WEBPACK_IMPORTED_MODULE_9__.webpackImages({
    DeathMark: __webpack_require__(/*! ./asset/data/Death_Mark.data.png */ "./asset/data/Death_Mark.data.png"),
    Vulnerability: __webpack_require__(/*! ./asset/data/Vulnerability_bordered.data.png */ "./asset/data/Vulnerability_bordered.data.png"),
});
function startBetterBuffsBar() {
    if (!window.alt1) {
        helperItems.Output.insertAdjacentHTML('beforeend', "<div>You need to run this page in alt1 to capture the screen</div>");
        return;
    }
    if (!alt1.permissionPixel) {
        helperItems.Output.insertAdjacentHTML('beforeend', "<div><p>Page is not installed as app or capture permission is not enabled</p></div>");
        return;
    }
    if (!alt1.permissionOverlay) {
        helperItems.Output.insertAdjacentHTML('beforeend', "<div><p>Attempted to use Overlay but app overlay permission is not enabled. Please enable \"Show Overlay\" permission in Alt1 settinsg (wrench icon in corner).</p></div>");
        return;
    }
    watchBuffs();
    if (_a1sauce__WEBPACK_IMPORTED_MODULE_0__.getSetting('activeOverlay')) {
        startOverlay();
        if (_a1sauce__WEBPACK_IMPORTED_MODULE_0__.getSetting('beta')) {
            startOverlay2();
            startOverlay3();
        }
    }
    else {
        helperItems.BetterBuffsBar.classList.add('overlay-disabled');
    }
}
var maxAttempts = 0;
function watchBuffs() {
    var loopSpeed = _a1sauce__WEBPACK_IMPORTED_MODULE_0__.getSetting('loopSpeed');
    var interval = setInterval(function () {
        var buffs = getActiveBuffs();
        var debuffs = getActiveDebuffs();
        if (_a1sauce__WEBPACK_IMPORTED_MODULE_0__.getSetting('buffsLocation')) {
            maxAttempts = 0;
            //TODO: Create buffs object that passes buffImage, element, threshold, expirationPulse, minRange, maxrange, cooldown, and cooldownTimer then loop over the object calling findStatus() on each object
            findStatus(buffs, buffImages.overloaded, buffsList.OverloadBuff, {
                threshold: 300,
                expirationPulse: true,
            });
            findStatus(buffs, buffImages.elderOverload, buffsList.ElderOverloadBuff, {
                threshold: 60,
                expirationPulse: true,
            });
            findStatus(buffs, buffImages.poisonous, buffsList.WeaponPoisonBuff, {
                threshold: 300,
                expirationPulse: true,
            });
            findStatus(buffs, buffImages.darkness, buffsList.DarknessBuff, {
                threshold: 400,
                maxRange: 43260,
            });
            findStatus(buffs, buffImages.animateDead, buffsList.AnimateDeadBuff, {
                threshold: 90,
            });
            findStatus(buffs, buffImages.fsoaWeaponSpec, buffsList.FsoaSpecBuff, {
                threshold: 80,
                maxRange: 31,
            });
            findStatus(buffs, buffImages.timeRift, buffsList.TimeRiftBuff, {
                threshold: 450,
            });
            findStatus(buffs, buffImages.gladiatorsRage, buffsList.GladiatorsRageBuff, {
                threshold: 50,
                expirationPulse: false,
                minRange: 0,
                maxRange: 16,
            });
            findStatus(buffs, buffImages.necrosis, buffsList.NecrosisBuff, {
                threshold: 150,
            });
            findStatus(buffs, buffImages.aura, buffsList.Aura, {
                threshold: 400,
            });
            findStatus(buffs, buffImages.bonfireBoost, buffsList.BonfireBoost, {
                threshold: 400,
            });
            findStatus(buffs, buffImages.grimoire, buffsList.ErethdorsGrimoire, {
                threshold: 55,
            });
            findStatus(buffs, incenseImages.lantadyme, buffsList.LantadymeIncense, {
                threshold: 119,
            });
            findStatus(buffs, incenseImages.dwarfWeed, buffsList.DwarfWeedIncense, {
                threshold: 150,
            });
            findStatus(buffs, incenseImages.fellstalk, buffsList.FellstalkIncense, {
                threshold: 150,
            });
            findStatus(buffs, incenseImages.kwuarm, buffsList.KwuarmIncense, {
                threshold: 150,
            });
            findStatus(buffs, buffImages.Antifire, buffsList.AntiFire, {
                threshold: 225,
            });
            findStatus(buffs, buffImages.prayerRenewActive, buffsList.PrayerRenewal, { threshold: 225 });
            findStatus(buffs, buffImages.DeathSpark, buffsList.DeathSpark, {
                threshold: 300,
            });
            findStatus(buffs, buffImages.Anticipation, buffsList.Anticipation, {
                threshold: 300,
                showCooldown: true,
                cooldownTimer: 12,
            });
            findStatus(buffs, buffImages.Barricade, buffsList.Barricade, {
                threshold: 300,
                showCooldown: true,
                cooldownTimer: 48,
            });
            findStatus(buffs, buffImages.Devotion, buffsList.Devotion, {
                threshold: 300,
                showCooldown: true,
                cooldownTimer: 48,
            });
            findStatus(buffs, buffImages.Divert, buffsList.Divert, {
                threshold: 300,
                showCooldown: true,
                cooldownTimer: 22,
            });
            findStatus(buffs, buffImages.Freedom, buffsList.Freedom, {
                threshold: 300,
                showCooldown: true,
                cooldownTimer: 22,
            });
            findStatus(buffs, buffImages.Immortality, buffsList.Immortality, {
                threshold: 300,
                showCooldown: true,
                cooldownTimer: 88,
            });
            findStatus(buffs, buffImages.Reflect, buffsList.Reflect, {
                threshold: 300,
                showCooldown: true,
                cooldownTimer: 18,
            });
            findStatus(buffs, buffImages.Resonance, buffsList.Resonance, {
                threshold: 300,
                showCooldown: true,
                cooldownTimer: 22,
            });
            findStatus(buffs, buffImages.SplitSoul, buffsList.SplitSoulBuff, {
                threshold: 350,
                showCooldown: true,
                cooldownTimer: 38,
            });
            findStatus(buffs, sigilImages.limitless, sigilsList.LimitlessSigil, {
                threshold: 250,
                showCooldown: true,
                cooldownTimer: 82,
            });
            findStatus(buffs, sigilImages.demonSlayer, sigilsList.DemonSlayer, {
                threshold: 400,
                showCooldown: true,
                cooldownTimer: 49,
            });
            findStatus(buffs, sigilImages.dragonSlayer, sigilsList.DragonSlayer, {
                threshold: 400,
                showCooldown: true,
                cooldownTimer: 49,
            });
            findStatus(buffs, sigilImages.undeadSlayer, sigilsList.UndeadSlayer, {
                threshold: 400,
                showCooldown: true,
                cooldownTimer: 49,
            });
            findStatus(buffs, sigilImages.ingenuityOfTheHumans, sigilsList.IngenuityOfTheHumans, {
                threshold: 400,
                showCooldown: true,
                cooldownTimer: 82,
            });
            /* BOLG is currently still special */
            if (document.querySelectorAll('#Buffs #BolgStacksBuff').length ||
                document.querySelectorAll('#Buffs2 #BolgStacksBuff').length ||
                document.querySelectorAll('#Buffs3 #BolgStacksBuff').length) {
                findBolgStacks(buffs);
            }
            findStatus(buffs, ultimateImages.berserk, ultimatesList.Berserk, {
                threshold: 200,
                showCooldown: true,
                cooldownTimer: 39,
            });
            findStatus(buffs, ultimateImages.deathsSwiftness, ultimatesList.DeathsSwiftness, {
                threshold: 270,
                showCooldown: true,
                cooldownTimer: 29,
            });
            findStatus(buffs, ultimateImages.greaterDeathsSwiftness, ultimatesList.GreaterDeathsSwiftness, {
                threshold: 450,
                showCooldown: true,
                cooldownTimer: 22,
            });
            findStatus(buffs, ultimateImages.sunshine, ultimatesList.Sunshine, {
                threshold: 500,
                showCooldown: true,
                cooldownTimer: 29,
            });
            findStatus(buffs, ultimateImages.greaterSunshine, ultimatesList.GreaterSunshine, {
                threshold: 100,
                showCooldown: true,
                cooldownTimer: 22,
            });
            findStatus(buffs, ultimateImages.livingDeath, ultimatesList.LivingDeath, {
                threshold: 400,
                showCooldown: true,
                cooldownTimer: 58,
            });
            findStatus(buffs, buffImages.ThreadsOfFate, buffsList.ThreadsOfFate, {
                threshold: 300,
                showCooldown: true,
                cooldownTimer: 36,
            });
            checkBuffsForHidingOverlay(buffs);
            if ((buffs === null || buffs === void 0 ? void 0 : buffs.length) == 0) {
                for (var _i = 0, _a = Object.entries(buffsList); _i < _a.length; _i++) {
                    var _b = _a[_i], _key = _b[0], buff = _b[1];
                    setInactive(buff);
                }
            }
        }
        else {
            noDetection(maxAttempts, interval, 'buff');
        }
        if (_a1sauce__WEBPACK_IMPORTED_MODULE_0__.getSetting('debuffsLocation')) {
            maxAttempts = 0;
            findStatus(debuffs, debuffImages.elvenRitualShard, debuffsList.AncientElvenRitualShardDebuff, {
                threshold: 90,
            });
            findStatus(debuffs, debuffImages.adrenalinePotion, debuffsList.AdrenalinePotionDebuff, { threshold: 300 });
            findStatus(debuffs, debuffImages.deathGraspDebuff, debuffsList.DeathGuardDebuff, { threshold: 90 });
            findStatus(debuffs, debuffImages.deathEssenceDebuff, debuffsList.OmniGuardDebuff, { threshold: 60 });
            findStatus(debuffs, debuffImages.enhancedExcaliburDebuff, debuffsList.EnhancedExcaliburDebuff, { threshold: 15 });
            findStatus(debuffs, debuffImages.crystalRainMinimal, debuffsList.CrystalRainDebuff, { threshold: 60 });
            findStatus(debuffs, debuffImages.stunnedDebuff, debuffsList.StunnedDebuff, { threshold: 60 });
            findStatus(debuffs, debuffImages.signOfLifeDebuff, debuffsList.SignOfLifeDebuff, { threshold: 20 });
            findStatus(debuffs, debuffImages.powerburstPrevention, debuffsList.PowerburstPrevention, { threshold: 20 });
            findVirus(debuffs);
            findPrayer(buffs, debuffs);
            if ((debuffs === null || debuffs === void 0 ? void 0 : debuffs.length) == 0) {
                for (var _c = 0, _d = Object.entries(debuffsList); _c < _d.length; _c++) {
                    var _e = _d[_c], _key = _e[0], debuff = _e[1];
                    setInactive(debuff);
                }
            }
        }
        else {
            noDetection(maxAttempts, interval, 'debuff');
        }
        findDeathMark();
        findVulnerability();
    }, loopSpeed);
}
function checkBuffsForHidingOverlay(buffsReader) {
    return __awaiter(this, void 0, void 0, function () {
        return __generator(this, function (_a) {
            // If we don't have an overlay visible - hide it
            if (buffsReader == undefined) {
                helperItems.BetterBuffsBar.classList.add('hide-overlay');
            }
            else if (Object.entries(buffsReader).length == 0) {
                helperItems.BetterBuffsBar.classList.add('hide-overlay');
            }
            else if (helperItems.BetterBuffsBar.classList.contains('hide-overlay')) {
                helperItems.BetterBuffsBar.classList.remove('hide-overlay');
            }
            return [2 /*return*/];
        });
    });
}
function noDetection(maxAttempts, interval, bar) {
    return __awaiter(this, void 0, void 0, function () {
        return __generator(this, function (_a) {
            if (maxAttempts == 10) {
                helperItems.Output.insertAdjacentHTML('beforeend', "<p>Unable to find ".concat(bar, " bar location.\nPlease login to the game or make sure that Alt1 can detect your ").concat(bar, " bar then reload the app.\nRemember - the Buffs setting must be set to \"Small\" and you must have at least 1 ").concat(bar, ". \nTo reload, right click this interface and select Reload.</p>"));
                clearInterval(interval);
                return [2 /*return*/];
            }
            if (maxAttempts < 10) {
                setTimeout(function () { }, 1000 * Math.pow(maxAttempts, 2));
                maxAttempts++;
            }
            console.log("Failed to read buffs - attempting again. Attempts left: ".concat(maxAttempts, "."));
            return [2 /*return*/];
        });
    });
}
function showTooltip(msg, duration) {
    return __awaiter(this, void 0, void 0, function () {
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    alt1.setTooltip(msg);
                    return [4 /*yield*/, new Promise(function (done) { return setTimeout(done, duration); })];
                case 1:
                    _a.sent();
                    alt1.clearTooltip();
                    return [2 /*return*/];
            }
        });
    });
}
/*
 * I'm usually against argument flags and believe they should generally be a separate function
 * but of the buffs we currently check it's really only Overloads & Weapon Poison that do this.
 * If more get added in the future then we can revisit and maybe extract it out into its own function.
 *
 * "The everything function"
 * coolDownTimer should be the remaining cooldown in SECONDS after Active Duration & 1s have elapsed
 */
function findStatus(buffsReader, buffImage, element, options) {
    var _a, _b, _c, _d, _e, _f;
    return __awaiter(this, void 0, void 0, function () {
        var _g, threshold, _h, expirationPulse, _j, minRange, _k, maxRange, _l, showCooldown, _m, cooldownTimer, _o, debug, timearg, foundBuff, onCooldown, cooldownAdjustment, highlander, _i, _p, _q, _key, value, findBuffImage, _r, _s, _t, _key, value, findBuffImage, buffTimeRemaining;
        return __generator(this, function (_u) {
            switch (_u.label) {
                case 0:
                    _g = options.threshold, threshold = _g === void 0 ? (_a = options.threshold) !== null && _a !== void 0 ? _a : 100 : _g, _h = options.expirationPulse, expirationPulse = _h === void 0 ? (_b = options.expirationPulse) !== null && _b !== void 0 ? _b : false : _h, _j = options.minRange, minRange = _j === void 0 ? (_c = options.minRange) !== null && _c !== void 0 ? _c : 0 : _j, _k = options.maxRange, maxRange = _k === void 0 ? (_d = options.maxRange) !== null && _d !== void 0 ? _d : Infinity : _k, _l = options.showCooldown, showCooldown = _l === void 0 ? (_e = options.showCooldown) !== null && _e !== void 0 ? _e : false : _l, _m = options.cooldownTimer, cooldownTimer = _m === void 0 ? options.cooldownTimer : _m, _o = options.debug, debug = _o === void 0 ? (_f = options.debug) !== null && _f !== void 0 ? _f : false : _o;
                    // Exit early if our buff isn't in the Tracked Buffs list
                    if (!getByID('Buffs').contains(element) &&
                        !getByID('Buffs2').contains(element) &&
                        !getByID('Buffs3').contains(element) ||
                        !buffsReader) {
                        return [2 /*return*/];
                    }
                    foundBuff = false;
                    onCooldown = false;
                    cooldownAdjustment = parseInt(_a1sauce__WEBPACK_IMPORTED_MODULE_0__.getSetting('delayAdjustment'), 10);
                    highlander = [];
                    if (buffImage == buffImages.gladiatorsRage) {
                        for (_i = 0, _p = Object.entries(buffsReader); _i < _p.length; _i++) {
                            _q = _p[_i], _key = _q[0], value = _q[1];
                            findBuffImage = value.countMatch(buffImage, false);
                            if (findBuffImage.passed > threshold) {
                                highlander.push(foundBuff);
                            }
                        }
                    }
                    _r = 0, _s = Object.entries(buffsReader);
                    _u.label = 1;
                case 1:
                    if (!(_r < _s.length)) return [3 /*break*/, 17];
                    _t = _s[_r], _key = _t[0], value = _t[1];
                    // If the buff has been found do an early return
                    if (foundBuff) {
                        return [2 /*return*/];
                    }
                    // If Ful book is being used and there is not also a proc found set the proc to inactive
                    if (highlander.length == 1) {
                        setInactive(buffsList.GladiatorsRageBuff);
                    }
                    // Only bother scanning for proc if we have both the book and proc active
                    if (highlander.length != 2 && buffImage == buffImages.gladiatorsRage) {
                        return [2 /*return*/];
                    }
                    findBuffImage = value.countMatch(buffImage, false);
                    // Death Spark doesn't have a readarg so if it is found set it to active and stop evaluating it
                    if (findBuffImage.passed > threshold &&
                        buffImage == buffImages.DeathSpark) {
                        setActive(element);
                        return [2 /*return*/];
                    }
                    if (!(findBuffImage.passed > threshold ||
                        (findBuffImage.failed == 0 && buffImage !== buffImages.DeathSpark))) return [3 /*break*/, 14];
                    // If we find a match for the buff it will always exceed the threshold
                    // the threshold depends largely on which buff is being matched against
                    if (_a1sauce__WEBPACK_IMPORTED_MODULE_0__.getSetting('debugMode') && debug) {
                        console.log("Debugging ".concat(element.id.toString(), " | Threshold: ").concat(JSON.stringify(findBuffImage)));
                    }
                    // If a buff has exceeded the threshold or has a 0px failure rate we have a match and want to set it to active
                    foundBuff = true;
                    return [4 /*yield*/, setActive(element)];
                case 2:
                    _u.sent();
                    timearg = value.readArg('timearg');
                    // If the time remaining is 1 and the buff is supposed to show a cooldown - start the cooldown timer and stop evaluating
                    if (element.dataset.time == '0' ||
                        element.dataset.time == '1' &&
                            showCooldown &&
                            element.dataset.startedTimer == 'false') {
                        if (debugMode) {
                            console.log("Starting cooldown timer for ".concat(element.id));
                        }
                        element.dataset.startedTimer = 'true';
                        startCooldownTimer(element, cooldownTimer - cooldownAdjustment);
                        return [2 /*return*/];
                    }
                    if (!(timearg.time > 59 && timearg.time < maxRange)) return [3 /*break*/, 4];
                    element.dataset.time =
                        Math.floor(value.readArg('timearg').time / 60).toString() +
                            'm';
                    // Pause the check for a tick since we don't need to rapidly update
                    //a buff that won't have a more precise value for 1 minute
                    return [4 /*yield*/, new Promise(function (done) { return setTimeout(done, 600); })];
                case 3:
                    // Pause the check for a tick since we don't need to rapidly update
                    //a buff that won't have a more precise value for 1 minute
                    _u.sent();
                    return [3 /*break*/, 13];
                case 4:
                    if (!(expirationPulse && timearg.time == 11 && !onCooldown)) return [3 /*break*/, 8];
                    element.dataset.time = '<10s';
                    return [4 /*yield*/, setActive(element)];
                case 5:
                    _u.sent();
                    // This can be desynced from in-game 10s but it's accurate enough
                    return [4 /*yield*/, new Promise(function (done) { return setTimeout(done, 10000); })];
                case 6:
                    // This can be desynced from in-game 10s but it's accurate enough
                    _u.sent();
                    return [4 /*yield*/, setInactive(element)];
                case 7:
                    _u.sent();
                    if (_a1sauce__WEBPACK_IMPORTED_MODULE_0__.getSetting('showTooltipReminders')) {
                        showTooltip('Overload expired', 3000);
                    }
                    return [3 /*break*/, 13];
                case 8:
                    if (!(timearg.time > minRange && timearg.time < maxRange)) return [3 /*break*/, 11];
                    buffTimeRemaining = timearg.time - cooldownAdjustment;
                    // And the buff has time remaining and is not Necrosis or BOLG Stacks - display the remaining time
                    if (buffTimeRemaining > 0 &&
                        buffImage != buffImages.necrosis &&
                        element != buffsList.BolgStacksBuff) {
                        element.dataset.time = buffTimeRemaining.toString();
                    }
                    // Otherwise if the buff is Necrosis or BolgStacks display the stacks
                    else if (buffTimeRemaining > 0 &&
                        (buffImage == buffImages.necrosis ||
                            element == buffsList.BolgStacksBuff)) {
                        element.dataset.time = timearg.time;
                    }
                    if (!(timearg.time - 1 == 0 && !showCooldown)) return [3 /*break*/, 10];
                    return [4 /*yield*/, setInactive(element)];
                case 9:
                    _u.sent();
                    _u.label = 10;
                case 10: return [3 /*break*/, 13];
                case 11:
                    if (!!showCooldown) return [3 /*break*/, 13];
                    return [4 /*yield*/, setInactive(element)];
                case 12:
                    _u.sent();
                    _u.label = 13;
                case 13: return [3 /*break*/, 16];
                case 14:
                    if (!!showCooldown) return [3 /*break*/, 16];
                    return [4 /*yield*/, setInactive(element)];
                case 15:
                    _u.sent();
                    _u.label = 16;
                case 16:
                    _r++;
                    return [3 /*break*/, 1];
                case 17:
                    if (cooldownTimer > 0 && element.dataset.cooldown == '0' && !element.classList.contains('active')) {
                        setInactive(element);
                    }
                    if (!(timearg == undefined && foundBuff && !showCooldown)) return [3 /*break*/, 21];
                    if (!expirationPulse) return [3 /*break*/, 19];
                    return [4 /*yield*/, new Promise(function (done) { return setTimeout(done, 10000); })];
                case 18:
                    _u.sent();
                    _u.label = 19;
                case 19: return [4 /*yield*/, setInactive(element)];
                case 20:
                    _u.sent();
                    _u.label = 21;
                case 21: 
                // Give a very brief pause before checking again
                return [4 /*yield*/, new Promise(function (done) { return setTimeout(done, 10); })];
                case 22:
                    // Give a very brief pause before checking again
                    _u.sent();
                    return [2 /*return*/, timearg];
            }
        });
    });
}
function startCooldownTimer(element, cooldownTimer) {
    return __awaiter(this, void 0, void 0, function () {
        var timer_1;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0: 
                /*
                 * Wait the final 1s then set buff to 'cooldown' state
                 * After its cooldown has finished set it back to 'inactive' state (actually 'readyToBeUsed')
                 */
                return [4 /*yield*/, new Promise(function (done) { return setTimeout(done, 1050); })];
                case 1:
                    /*
                     * Wait the final 1s then set buff to 'cooldown' state
                     * After its cooldown has finished set it back to 'inactive' state (actually 'readyToBeUsed')
                     */
                    _a.sent();
                    return [4 /*yield*/, setCooldown(element, cooldownTimer)];
                case 2:
                    _a.sent();
                    if (element.dataset.cooldown != '0' && element.dataset.startedTimer !== 'true') {
                        element.dataset.startedTimer = 'true';
                        element.dataset.cooldown = cooldownTimer.toString();
                        timer_1 = setInterval(function () {
                            countdown(element, cooldownTimer, timer_1);
                        }, 1000);
                    }
                    return [2 /*return*/];
            }
        });
    });
}
function countdown(element, cooldownTimer, timer) {
    if (parseInt(element.dataset.cooldown, 10) > 0) {
        element.dataset.cooldown = (parseInt(element.dataset.cooldown, 10) - 1).toString();
    }
    else if (element.dataset.cooldown == '0') {
        element.dataset.startedTimer = 'false';
        element.dataset.cooldown = '';
        setInactive(element);
        clearInterval(timer);
    }
}
function findVirus(debuffs) {
    return __awaiter(this, void 0, void 0, function () {
        var virusActive, currentVirus, _i, _a, _b, _key, value, checkBlackVirus, checkBlueVirus, checkRedVirus, checkGreenVirus;
        return __generator(this, function (_c) {
            if (!debuffs) {
                return [2 /*return*/];
            }
            virusActive = 0;
            currentVirus = '';
            for (_i = 0, _a = Object.entries(debuffs); _i < _a.length; _i++) {
                _b = _a[_i], _key = _b[0], value = _b[1];
                checkBlackVirus = value.countMatch(debuffImages.blackVirus, false);
                checkBlueVirus = value.countMatch(debuffImages.blueVirus, false);
                checkRedVirus = value.countMatch(debuffImages.redVirus, false);
                checkGreenVirus = value.countMatch(debuffImages.greenVirus, false);
                if (checkBlackVirus.failed == 0 || checkBlackVirus.passed > 275) {
                    currentVirus = 'BLK';
                    virusActive++;
                }
                if (checkBlueVirus.failed == 0 || checkBlueVirus.passed > 275) {
                    currentVirus = 'BLU';
                    virusActive++;
                }
                if (checkRedVirus.failed == 0 || checkRedVirus.passed > 275) {
                    currentVirus = 'RED';
                    virusActive++;
                }
                if (checkGreenVirus.failed == 0 || checkGreenVirus.passed > 275) {
                    currentVirus = 'GRN';
                    virusActive++;
                }
            }
            if (!virusActive) {
                debuffsList.Virus.dataset.virus = '';
                debuffsList.Virus.classList.add('inactive');
            }
            else {
                debuffsList.Virus.dataset.virus = currentVirus;
                debuffsList.Virus.classList.add('active');
            }
            return [2 /*return*/];
        });
    });
}
function findDeathMark() {
    targetDisplay.read();
    if (targetDisplay.lastpos === null) {
        return;
    }
    if (!getByID('Buffs').contains(getByID('DeathMarkDebuff')) &&
        !getByID('Buffs2').contains(getByID('DeathMarkDebuff')) &&
        !getByID('Buffs3').contains(getByID('DeathMarkDebuff'))) {
        return;
    }
    var target_display_loc = {
        x: (targetDisplay === null || targetDisplay === void 0 ? void 0 : targetDisplay.lastpos.x) - 120,
        y: (targetDisplay === null || targetDisplay === void 0 ? void 0 : targetDisplay.lastpos.y) + 20,
        w: 150,
        h: 60,
    };
    var targetDebuffs = alt1__WEBPACK_IMPORTED_MODULE_9__.captureHold(target_display_loc.x, target_display_loc.y, target_display_loc.w, target_display_loc.h);
    var targetIsDeathMarked = targetDebuffs.findSubimage(enemyImages.DeathMark).length;
    if (targetIsDeathMarked) {
        setActive(getByID('DeathMarkDebuff'));
    }
    else if (!targetIsDeathMarked) {
        setInactive(getByID('DeathMarkDebuff'));
    }
}
function findVulnerability() {
    targetDisplay.read();
    if (targetDisplay.lastpos === null) {
        setInactive(getByID('VulnerabilityDebuff'));
        return;
    }
    if (!getByID('Buffs').contains(getByID('VulnerabilityDebuff')) &&
        !getByID('Buffs2').contains(getByID('VulnerabilityDebuff')) &&
        !getByID('Buffs3').contains(getByID('VulnerabilityDebuff'))) {
        return;
    }
    var target_display_loc = {
        x: (targetDisplay === null || targetDisplay === void 0 ? void 0 : targetDisplay.lastpos.x) - 120,
        y: (targetDisplay === null || targetDisplay === void 0 ? void 0 : targetDisplay.lastpos.y) + 20,
        w: 150,
        h: 60,
    };
    var targetDebuffs = alt1__WEBPACK_IMPORTED_MODULE_9__.captureHold(target_display_loc.x, target_display_loc.y, target_display_loc.w, target_display_loc.h);
    var targetIsVulnerable = targetDebuffs.findSubimage(enemyImages.Vulnerability).length;
    var targetIsVulnerable = targetDebuffs.findSubimage(enemyImages.Vulnerability).length;
    if (targetIsVulnerable) {
        setActive(getByID('VulnerabilityDebuff'));
        setTimeout(function () {
            setInactive(getByID('VulnerabilityDebuff'));
        }, 60000);
    }
}
function findPrayer(buffsList, debuffsList) {
    return __awaiter(this, void 0, void 0, function () {
        var prayersActive, lastActiveOverhead, lastActiveDPS, _i, _a, _b, _key, value, prayerDraining, _c, _d, _e, _key, value, _f, _g, _h, _key, value;
        return __generator(this, function (_j) {
            if (!buffsList || !debuffsList) {
                return [2 /*return*/];
            }
            prayersActive = 0;
            for (_i = 0, _a = Object.entries(debuffsList); _i < _a.length; _i++) {
                _b = _a[_i], _key = _b[0], value = _b[1];
                prayerDraining = value.countMatch(prayerImages.prayerActive, false);
                if (prayerDraining.failed == 0 || prayerDraining.passed > 44) {
                    prayersActive++;
                }
            }
            if ((prayersActive > 0 &&
                getByID('Buffs').contains(prayersList.DpsPrayer)) ||
                getByID('Buffs2').contains(prayersList.DpsPrayer) ||
                getByID('Buffs3').contains(prayersList.DpsPrayer)) {
                for (_c = 0, _d = Object.entries(buffsList); _c < _d.length; _c++) {
                    _e = _d[_c], _key = _e[0], value = _e[1];
                    lastActiveDPS = testDpsPrayers(value);
                }
            }
            else {
                prayersList.DpsPrayer.dataset.prayer = '';
                prayersList.DpsPrayer.classList.add('inactive');
            }
            if ((prayersActive > 0 &&
                getByID('Buffs').contains(prayersList.OverheadPrayer)) ||
                getByID('Buffs2').contains(prayersList.OverheadPrayer) ||
                getByID('Buffs3').contains(prayersList.OverheadPrayer)) {
                for (_f = 0, _g = Object.entries(buffsList); _f < _g.length; _f++) {
                    _h = _g[_f], _key = _h[0], value = _h[1];
                    lastActiveOverhead = testOverheadPrayers(value);
                }
            }
            else {
                prayersList.OverheadPrayer.dataset.prayer = '';
                prayersList.OverheadPrayer.classList.add('inactive');
            }
            return [2 /*return*/];
        });
    });
}
function testDpsPrayers(buff) {
    return __awaiter(this, void 0, void 0, function () {
        var affliction, anguish, desolation, malevolence, ruination, sorrow, torment, turmoil, prayerTests, _i, _a, _b, key, value;
        return __generator(this, function (_c) {
            if (getByID('Buffs').contains(prayersList.DpsPrayer) ||
                getByID('Buffs2').contains(prayersList.DpsPrayer) ||
                getByID('Buffs3').contains(prayersList.DpsPrayer)) {
                affliction = buff.countMatch(prayerImages.affliction, false);
                anguish = buff.countMatch(prayerImages.anguish, false);
                desolation = buff.countMatch(prayerImages.desolation, false);
                malevolence = buff.countMatch(prayerImages.malevolence, false);
                ruination = buff.countMatch(prayerImages.ruination, false);
                sorrow = buff.countMatch(prayerImages.sorrow, false);
                torment = buff.countMatch(prayerImages.torment, false);
                turmoil = buff.countMatch(prayerImages.turmoil, false);
                prayerTests = {
                    affliction: affliction.passed,
                    anguish: anguish.passed,
                    desolation: desolation.passed,
                    malevolence: malevolence.passed,
                    ruination: ruination.passed,
                    sorrow: sorrow.passed,
                    torment: torment.passed,
                    turmoil: turmoil.passed,
                };
                for (_i = 0, _a = Object.entries(prayerTests); _i < _a.length; _i++) {
                    _b = _a[_i], key = _b[0], value = _b[1];
                    if (value > 180) {
                        prayersList.DpsPrayer.dataset.prayer = key
                            .toString()
                            .toLowerCase();
                        prayersList.DpsPrayer.classList.remove('inactive');
                        return [2 /*return*/, prayerTests[key].toString()];
                    }
                }
            }
            return [2 /*return*/];
        });
    });
}
function testOverheadPrayers(buff) {
    return __awaiter(this, void 0, void 0, function () {
        var deflectMagic, deflectMelee, deflectNecromancy, deflectRanged, protectFromMagic, protectFromMelee, protectFromNecromancy, protectFromRanged, soulSplit, prayerTests, _i, _a, _b, key, value;
        return __generator(this, function (_c) {
            if (getByID('Buffs').contains(prayersList.OverheadPrayer) ||
                getByID('Buffs2').contains(prayersList.OverheadPrayer) ||
                getByID('Buffs3').contains(prayersList.OverheadPrayer)) {
                deflectMagic = buff.countMatch(prayerImages.deflectMagic, false);
                deflectMelee = buff.countMatch(prayerImages.deflectMelee, false);
                deflectNecromancy = buff.countMatch(prayerImages.deflectNecromancy, false);
                deflectRanged = buff.countMatch(prayerImages.deflectRanged, false);
                protectFromMagic = buff.countMatch(prayerImages.protectFromMagic, false);
                protectFromMelee = buff.countMatch(prayerImages.protectFromMelee, false);
                protectFromNecromancy = buff.countMatch(prayerImages.protectFromNecromancy, false);
                protectFromRanged = buff.countMatch(prayerImages.protectFromRanged, false);
                soulSplit = buff.countMatch(prayerImages.soulSplit, false);
                prayerTests = {
                    deflectMagic: deflectMagic.passed,
                    deflectMelee: deflectMelee.passed,
                    deflectNecromancy: deflectNecromancy.passed,
                    deflectRanged: deflectRanged.passed,
                    protectFromMagic: protectFromMagic.passed,
                    protectFromMelee: protectFromMelee.passed,
                    protectFromNecromancy: protectFromNecromancy.passed,
                    protectFromRanged: protectFromRanged.passed,
                    soulSplit: soulSplit.passed,
                };
                for (_i = 0, _a = Object.entries(prayerTests); _i < _a.length; _i++) {
                    _b = _a[_i], key = _b[0], value = _b[1];
                    if (value > 300) {
                        prayersList.OverheadPrayer.dataset.prayer = key
                            .toString()
                            .toLowerCase();
                        prayersList.OverheadPrayer.classList.remove('inactive');
                    }
                }
            }
            return [2 /*return*/];
        });
    });
}
function getMaxValueKey(obj) {
    return Object.keys(obj).reduce(function (a, b) { return (obj[a] > obj[b] ? a : b); });
}
function setCooldown(element, cooldownTimer) {
    return __awaiter(this, void 0, void 0, function () {
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    element.classList.add('cooldown');
                    element.classList.remove('inactive');
                    element.classList.remove('active');
                    element.dataset.time = '';
                    element.dataset.startedTimer = 'false';
                    element.dataset.cooldown = cooldownTimer.toString();
                    return [4 /*yield*/, new Promise(function (done) { return setTimeout(done, 2000); })];
                case 1:
                    _a.sent();
                    return [2 /*return*/];
            }
        });
    });
}
function setInactive(element) {
    return __awaiter(this, void 0, void 0, function () {
        return __generator(this, function (_a) {
            if (!(element.dataset.startedTimer == 'true')) {
                element.classList.add('inactive');
                element.classList.remove('active');
                element.dataset.time = '';
            }
            else if (element.dataset.startedFimer == 'false') {
                element.classList.remove('cooldown');
                element.dataset.cooldown = '';
            }
            return [2 /*return*/];
        });
    });
}
function setActive(element) {
    return __awaiter(this, void 0, void 0, function () {
        return __generator(this, function (_a) {
            element.classList.remove('cooldown');
            element.classList.remove('inactive');
            element.classList.add('active');
            return [2 /*return*/];
        });
    });
}
var bolgSpecActive = false;
function findBolgStacks(buffs) {
    return __awaiter(this, void 0, void 0, function () {
        var bolgStacksData, bolgFound, canvas, ctx, a, buffsImage, bolgBuffImage, _i, _a, _b, _key, value, bolgStacksBuff, bolgData, bolgTime, bolgStacks;
        return __generator(this, function (_c) {
            switch (_c.label) {
                case 0:
                    bolgFound = false;
                    if (!!_a1sauce__WEBPACK_IMPORTED_MODULE_0__.getSetting('singleBOLG')) return [3 /*break*/, 1];
                    canvas = document.getElementById('bolgCanvas');
                    ctx = canvas.getContext('2d');
                    ctx.drawImage(buffImages.perfectEquilibriumNoBorder.toImage(), 0, 0, canvas.width, canvas.height);
                    for (a in buffs.reverse()) {
                        if (buffs[a].compareBuffer(buffImages.perfectEquilibriumNoBorder) &&
                            bolgFound == false) {
                            bolgFound = true;
                            buffsImage = buffs[a].buffer.toImage();
                            ctx.drawImage(buffsImage, buffs[a].bufferx, buffs[a].buffery, 27, 27, 0, 0, canvas.width, canvas.height);
                            bolgBuffImage = ctx.getImageData(0, 0, canvas.width, canvas.height);
                            setActive(buffsList.BolgStacksBuff);
                            buffsList.BolgStacksBuff.style.backgroundImage =
                                'url("data:image/png;base64,' +
                                    bolgBuffImage.toPngBase64() +
                                    '")';
                        }
                    }
                    return [3 /*break*/, 9];
                case 1:
                    if (!_a1sauce__WEBPACK_IMPORTED_MODULE_0__.getSetting('singleBOLG')) return [3 /*break*/, 9];
                    _i = 0, _a = Object.entries(buffs).reverse();
                    _c.label = 2;
                case 2:
                    if (!(_i < _a.length)) return [3 /*break*/, 6];
                    _b = _a[_i], _key = _b[0], value = _b[1];
                    bolgStacksBuff = value.countMatch(buffImages.perfectEquilibrium, false);
                    if (!(bolgStacksBuff.passed > 200)) return [3 /*break*/, 5];
                    bolgFound = true;
                    bolgStacksData = value.readArg('arg').arg;
                    return [4 /*yield*/, parseBolgBuff(bolgStacksData)];
                case 3:
                    bolgData = _c.sent();
                    console.log(bolgData);
                    bolgTime = bolgData[0];
                    bolgStacks = bolgData[1];
                    buffsList.BolgStacksBuff.dataset.time = bolgStacks;
                    buffsList.BalanceByForceBuff.dataset.time = bolgTime;
                    return [4 /*yield*/, new Promise(function (done) { return setTimeout(done, 600); })];
                case 4:
                    _c.sent();
                    _c.label = 5;
                case 5:
                    _i++;
                    return [3 /*break*/, 2];
                case 6:
                    if (!(bolgStacksData == undefined)) return [3 /*break*/, 8];
                    buffsList.BolgStacksBuff.classList.add('inactive');
                    buffsList.BalanceByForceBuff.classList.add('inactive');
                    return [4 /*yield*/, new Promise(function (done) { return setTimeout(done, 600); })];
                case 7:
                    _c.sent();
                    buffsList.BolgStacksBuff.dataset.time = '';
                    buffsList.BalanceByForceBuff.dataset.time = '';
                    return [3 /*break*/, 9];
                case 8:
                    buffsList.BolgStacksBuff.classList.remove('inactive');
                    buffsList.BalanceByForceBuff.classList.remove('inactive');
                    _c.label = 9;
                case 9: return [4 /*yield*/, new Promise(function (done) { return setTimeout(done, 10); })];
                case 10:
                    _c.sent();
                    return [2 /*return*/, bolgStacksData];
            }
        });
    });
}
function parseBolgBuff(data) {
    var _a, _b;
    return __awaiter(this, void 0, void 0, function () {
        var bolgSpecTime, bolgStacks, buffRegexp, results;
        return __generator(this, function (_c) {
            switch (_c.label) {
                case 0:
                    buffRegexp = /(?<time>\d{1,2})(.*\((?<stacks>\d)\))?/g;
                    results = Array.from(data.matchAll(buffRegexp));
                    if (!results[0]) return [3 /*break*/, 7];
                    console.log("Results: ".concat(data));
                    if (!(data.indexOf('(') > -1)) return [3 /*break*/, 1];
                    bolgSpecActive = true;
                    bolgSpecTime = results[0].groups.time;
                    bolgStacks = results[0].groups.stacks;
                    return [3 /*break*/, 7];
                case 1:
                    if (!(parseInt(data, 10) == 30)) return [3 /*break*/, 3];
                    bolgSpecActive = true;
                    bolgSpecTime = '30';
                    bolgStacks = results[0].groups.stacks;
                    return [4 /*yield*/, new Promise(function (done) { return setTimeout(done, 30000); })];
                case 2:
                    _c.sent();
                    bolgSpecActive = false;
                    return [3 /*break*/, 7];
                case 3:
                    if (!bolgSpecActive) return [3 /*break*/, 4];
                    bolgSpecTime = (_a = results[0].groups.time) !== null && _a !== void 0 ? _a : 0;
                    bolgStacks = '0';
                    return [3 /*break*/, 7];
                case 4:
                    if (!!bolgSpecActive) return [3 /*break*/, 7];
                    if (!(parseInt(results[0].groups.time, 10) > 8)) return [3 /*break*/, 6];
                    bolgSpecTime = results[0].groups.time;
                    bolgStacks = '0';
                    bolgSpecActive = true;
                    return [4 /*yield*/, new Promise(function (done) {
                            return setTimeout(done, parseInt(results[0].groups.time, 10) * 1000);
                        })];
                case 5:
                    _c.sent();
                    bolgSpecActive = false;
                    return [3 /*break*/, 7];
                case 6:
                    bolgSpecTime = '';
                    bolgStacks = (_b = results[0].groups.time) !== null && _b !== void 0 ? _b : 0;
                    _c.label = 7;
                case 7:
                    if (bolgSpecTime == undefined || bolgStacks == undefined) {
                        return [2 /*return*/, ['', '']];
                    }
                    return [2 /*return*/, [bolgSpecTime, bolgStacks]];
            }
        });
    });
}
function setOverlayPosition() {
    return __awaiter(this, void 0, void 0, function () {
        var oldPosition, bbb;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    alt1__WEBPACK_IMPORTED_MODULE_9__.once('alt1pressed', updateLocation);
                    oldPosition = _a1sauce__WEBPACK_IMPORTED_MODULE_0__.getSetting('overlayPosition');
                    _a1sauce__WEBPACK_IMPORTED_MODULE_0__.updateSetting('oldOverlayPosition', oldPosition);
                    _a1sauce__WEBPACK_IMPORTED_MODULE_0__.updateSetting('updatingOverlayPosition', true);
                    _a.label = 1;
                case 1:
                    if (!_a1sauce__WEBPACK_IMPORTED_MODULE_0__.getSetting('updatingOverlayPosition')) return [3 /*break*/, 3];
                    alt1.setTooltip('Press Alt+1 to save position');
                    bbb = getByID('Buffs');
                    _a1sauce__WEBPACK_IMPORTED_MODULE_0__.updateSetting('overlayPosition', {
                        x: Math.floor(alt1__WEBPACK_IMPORTED_MODULE_9__.getMousePosition().x -
                            (_a1sauce__WEBPACK_IMPORTED_MODULE_0__.getSetting('uiScale') / 100) * (bbb.offsetWidth / 2)),
                        y: Math.floor(alt1__WEBPACK_IMPORTED_MODULE_9__.getMousePosition().y -
                            (_a1sauce__WEBPACK_IMPORTED_MODULE_0__.getSetting('uiScale') / 100) * (bbb.offsetHeight / 2)),
                    });
                    currentOverlayPosition = _a1sauce__WEBPACK_IMPORTED_MODULE_0__.getSetting('overlayPosition');
                    alt1.overLayRefreshGroup('group1');
                    return [4 /*yield*/, new Promise(function (done) { return setTimeout(done, 200); })];
                case 2:
                    _a.sent();
                    return [3 /*break*/, 1];
                case 3:
                    alt1.clearTooltip();
                    return [2 /*return*/];
            }
        });
    });
}
function setOverlayPosition2() {
    return __awaiter(this, void 0, void 0, function () {
        var oldPosition, bbb;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    alt1__WEBPACK_IMPORTED_MODULE_9__.once('alt1pressed', updateLocation2);
                    oldPosition = _a1sauce__WEBPACK_IMPORTED_MODULE_0__.getSetting('overlay2Position');
                    _a1sauce__WEBPACK_IMPORTED_MODULE_0__.updateSetting('oldOverlay2Position', oldPosition);
                    _a1sauce__WEBPACK_IMPORTED_MODULE_0__.updateSetting('updatingOverlayPosition', true);
                    _a.label = 1;
                case 1:
                    if (!_a1sauce__WEBPACK_IMPORTED_MODULE_0__.getSetting('updatingOverlayPosition')) return [3 /*break*/, 3];
                    alt1.setTooltip('Press Alt+1 to save position');
                    bbb = getByID('Buffs2');
                    _a1sauce__WEBPACK_IMPORTED_MODULE_0__.updateSetting('overlay2Position', {
                        x: Math.floor(alt1__WEBPACK_IMPORTED_MODULE_9__.getMousePosition().x -
                            (_a1sauce__WEBPACK_IMPORTED_MODULE_0__.getSetting('uiScale') / 100) * (bbb.offsetWidth / 2)),
                        y: Math.floor(alt1__WEBPACK_IMPORTED_MODULE_9__.getMousePosition().y -
                            (_a1sauce__WEBPACK_IMPORTED_MODULE_0__.getSetting('uiScale') / 100) * (bbb.offsetHeight / 2)),
                    });
                    currentOverlay2Position = _a1sauce__WEBPACK_IMPORTED_MODULE_0__.getSetting('overlay2Position');
                    alt1.overLayRefreshGroup('group2');
                    return [4 /*yield*/, new Promise(function (done) { return setTimeout(done, 200); })];
                case 2:
                    _a.sent();
                    return [3 /*break*/, 1];
                case 3:
                    alt1.clearTooltip();
                    return [2 /*return*/];
            }
        });
    });
}
function setOverlayPosition3() {
    return __awaiter(this, void 0, void 0, function () {
        var oldPosition, bbb;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    alt1__WEBPACK_IMPORTED_MODULE_9__.once('alt1pressed', updateLocation3);
                    oldPosition = _a1sauce__WEBPACK_IMPORTED_MODULE_0__.getSetting('overlay3Position');
                    _a1sauce__WEBPACK_IMPORTED_MODULE_0__.updateSetting('oldOverlay3Position', oldPosition);
                    _a1sauce__WEBPACK_IMPORTED_MODULE_0__.updateSetting('updatingOverlayPosition', true);
                    _a.label = 1;
                case 1:
                    if (!_a1sauce__WEBPACK_IMPORTED_MODULE_0__.getSetting('updatingOverlayPosition')) return [3 /*break*/, 3];
                    alt1.setTooltip('Press Alt+1 to save position');
                    bbb = getByID('Buffs3');
                    _a1sauce__WEBPACK_IMPORTED_MODULE_0__.updateSetting('overlay3Position', {
                        x: Math.floor(alt1__WEBPACK_IMPORTED_MODULE_9__.getMousePosition().x -
                            (_a1sauce__WEBPACK_IMPORTED_MODULE_0__.getSetting('uiScale') / 100) * (bbb.offsetWidth / 2)),
                        y: Math.floor(alt1__WEBPACK_IMPORTED_MODULE_9__.getMousePosition().y -
                            (_a1sauce__WEBPACK_IMPORTED_MODULE_0__.getSetting('uiScale') / 100) * (bbb.offsetHeight / 2)),
                    });
                    currentOverlay3Position = _a1sauce__WEBPACK_IMPORTED_MODULE_0__.getSetting('overlay3Position');
                    alt1.overLayRefreshGroup('group3');
                    return [4 /*yield*/, new Promise(function (done) { return setTimeout(done, 200); })];
                case 2:
                    _a.sent();
                    return [3 /*break*/, 1];
                case 3:
                    alt1.clearTooltip();
                    return [2 /*return*/];
            }
        });
    });
}
function updateLocation(e) {
    var bbb = getByID('Buffs');
    _a1sauce__WEBPACK_IMPORTED_MODULE_0__.updateSetting('overlayPosition', {
        x: Math.floor(e.x - (_a1sauce__WEBPACK_IMPORTED_MODULE_0__.getSetting('uiScale') / 100) * (bbb.offsetWidth / 2)),
        y: Math.floor(e.y - (_a1sauce__WEBPACK_IMPORTED_MODULE_0__.getSetting('uiScale') / 100) * (bbb.offsetHeight / 2)),
    });
    _a1sauce__WEBPACK_IMPORTED_MODULE_0__.updateSetting('updatingOverlayPosition', false);
}
function updateLocation2(e) {
    var bbb = getByID('Buffs2');
    _a1sauce__WEBPACK_IMPORTED_MODULE_0__.updateSetting('overlay2Position', {
        x: Math.floor(e.x - (_a1sauce__WEBPACK_IMPORTED_MODULE_0__.getSetting('uiScale') / 100) * (bbb.offsetWidth / 2)),
        y: Math.floor(e.y - (_a1sauce__WEBPACK_IMPORTED_MODULE_0__.getSetting('uiScale') / 100) * (bbb.offsetHeight / 2)),
    });
    _a1sauce__WEBPACK_IMPORTED_MODULE_0__.updateSetting('updatingOverlayPosition', false);
}
function updateLocation3(e) {
    var bbb = getByID('Buffs3');
    _a1sauce__WEBPACK_IMPORTED_MODULE_0__.updateSetting('overlay3Position', {
        x: Math.floor(e.x - (_a1sauce__WEBPACK_IMPORTED_MODULE_0__.getSetting('uiScale') / 100) * (bbb.offsetWidth / 2)),
        y: Math.floor(e.y - (_a1sauce__WEBPACK_IMPORTED_MODULE_0__.getSetting('uiScale') / 100) * (bbb.offsetHeight / 2)),
    });
    _a1sauce__WEBPACK_IMPORTED_MODULE_0__.updateSetting('updatingOverlayPosition', false);
}
function startOverlay() {
    return __awaiter(this, void 0, void 0, function () {
        var overlay, styles, totalTrackeDItems, buffsPerRow, refreshRate, _loop_1;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    overlay = getByID('Buffs');
                    styles = getComputedStyle(overlay);
                    totalTrackeDItems = _a1sauce__WEBPACK_IMPORTED_MODULE_0__.getSetting('totalTrackedItems');
                    buffsPerRow = _a1sauce__WEBPACK_IMPORTED_MODULE_0__.getSetting('buffsPerrow');
                    refreshRate = parseInt(_a1sauce__WEBPACK_IMPORTED_MODULE_0__.getSetting('overlayRefreshRate'), 10);
                    return [4 /*yield*/, new Promise(function (done) { return setTimeout(done, 1000); })];
                case 1:
                    _a.sent();
                    _loop_1 = function () {
                        var uiScale, overlayPosition;
                        return __generator(this, function (_b) {
                            switch (_b.label) {
                                case 0:
                                    uiScale = _a1sauce__WEBPACK_IMPORTED_MODULE_0__.getSetting('uiScale');
                                    overlayPosition = currentOverlayPosition;
                                    html_to_image__WEBPACK_IMPORTED_MODULE_2__.toCanvas(overlay, {
                                        backgroundColor: 'transparent',
                                        width: parseInt(styles.minWidth, 10),
                                        height: parseInt(styles.minHeight, 10) +
                                            Math.floor(totalTrackeDItems / buffsPerRow + 1) *
                                                27 *
                                                (uiScale / 100),
                                        quality: 1,
                                        pixelRatio: uiScale / 100 - 0.00999999999999999999,
                                        skipAutoScale: true,
                                    })
                                        .then(function (dataUrl) {
                                        var base64ImageString = dataUrl
                                            .getContext('2d')
                                            .getImageData(0, 0, dataUrl.width, dataUrl.height);
                                        alt1.overLaySetGroup('region1');
                                        alt1.overLayFreezeGroup('region1');
                                        alt1.overLayClearGroup('region1');
                                        alt1.overLayImage(overlayPosition.x, overlayPosition.y, alt1__WEBPACK_IMPORTED_MODULE_9__.encodeImageString(base64ImageString), base64ImageString.width, refreshRate);
                                        alt1.overLayRefreshGroup('region1');
                                    })
                                        .catch(function (e) {
                                        console.error("html-to-image failed to capture", e);
                                    });
                                    return [4 /*yield*/, new Promise(function (done) { return setTimeout(done, refreshRate); })];
                                case 1:
                                    _b.sent();
                                    return [2 /*return*/];
                            }
                        });
                    };
                    _a.label = 2;
                case 2:
                    if (false) {}
                    return [5 /*yield**/, _loop_1()];
                case 3:
                    _a.sent();
                    return [3 /*break*/, 2];
                case 4: return [2 /*return*/];
            }
        });
    });
}
function startOverlay2() {
    return __awaiter(this, void 0, void 0, function () {
        var overlay, styles, totalTrackeDItems, buffsPerRow, refreshRate, _loop_2;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    overlay = getByID('Buffs2');
                    styles = getComputedStyle(overlay);
                    totalTrackeDItems = _a1sauce__WEBPACK_IMPORTED_MODULE_0__.getSetting('totalTrackedItems');
                    buffsPerRow = _a1sauce__WEBPACK_IMPORTED_MODULE_0__.getSetting('buffsPerrow');
                    refreshRate = parseInt(_a1sauce__WEBPACK_IMPORTED_MODULE_0__.getSetting('overlayRefreshRate'), 10);
                    return [4 /*yield*/, new Promise(function (done) { return setTimeout(done, 1000); })];
                case 1:
                    _a.sent();
                    _loop_2 = function () {
                        var uiScale, overlayPosition;
                        return __generator(this, function (_b) {
                            switch (_b.label) {
                                case 0:
                                    uiScale = _a1sauce__WEBPACK_IMPORTED_MODULE_0__.getSetting('uiScale');
                                    overlayPosition = currentOverlay2Position;
                                    html_to_image__WEBPACK_IMPORTED_MODULE_2__.toCanvas(overlay, {
                                        backgroundColor: 'transparent',
                                        width: parseInt(styles.minWidth, 10),
                                        height: parseInt(styles.minHeight, 10) +
                                            Math.floor(totalTrackeDItems / buffsPerRow + 1) *
                                                27 *
                                                (uiScale / 100),
                                        quality: 1,
                                        pixelRatio: uiScale / 100 - 0.00999999999999999999,
                                        skipAutoScale: true,
                                    })
                                        .then(function (dataUrl) {
                                        var base64ImageString = dataUrl
                                            .getContext('2d')
                                            .getImageData(0, 0, dataUrl.width, dataUrl.height);
                                        alt1.overLaySetGroup('region2');
                                        alt1.overLayFreezeGroup('region2');
                                        alt1.overLayClearGroup('region2');
                                        alt1.overLayImage(overlayPosition.x + 300, overlayPosition.y, alt1__WEBPACK_IMPORTED_MODULE_9__.encodeImageString(base64ImageString), base64ImageString.width, refreshRate);
                                        alt1.overLayRefreshGroup('region2');
                                    })
                                        .catch(function (e) {
                                        console.error("html-to-image failed to capture", e);
                                    });
                                    return [4 /*yield*/, new Promise(function (done) { return setTimeout(done, refreshRate); })];
                                case 1:
                                    _b.sent();
                                    return [2 /*return*/];
                            }
                        });
                    };
                    _a.label = 2;
                case 2:
                    if (false) {}
                    return [5 /*yield**/, _loop_2()];
                case 3:
                    _a.sent();
                    return [3 /*break*/, 2];
                case 4: return [2 /*return*/];
            }
        });
    });
}
function startOverlay3() {
    return __awaiter(this, void 0, void 0, function () {
        var overlay, styles, totalTrackeDItems, buffsPerRow, refreshRate, _loop_3;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    overlay = getByID('Buffs3');
                    styles = getComputedStyle(overlay);
                    totalTrackeDItems = _a1sauce__WEBPACK_IMPORTED_MODULE_0__.getSetting('totalTrackedItems');
                    buffsPerRow = _a1sauce__WEBPACK_IMPORTED_MODULE_0__.getSetting('buffsPerrow');
                    refreshRate = parseInt(_a1sauce__WEBPACK_IMPORTED_MODULE_0__.getSetting('overlayRefreshRate'), 10);
                    return [4 /*yield*/, new Promise(function (done) { return setTimeout(done, 1000); })];
                case 1:
                    _a.sent();
                    _loop_3 = function () {
                        var uiScale, overlayPosition;
                        return __generator(this, function (_b) {
                            switch (_b.label) {
                                case 0:
                                    uiScale = _a1sauce__WEBPACK_IMPORTED_MODULE_0__.getSetting('uiScale');
                                    overlayPosition = currentOverlay3Position;
                                    html_to_image__WEBPACK_IMPORTED_MODULE_2__.toCanvas(overlay, {
                                        backgroundColor: 'transparent',
                                        width: parseInt(styles.minWidth, 10),
                                        height: parseInt(styles.minHeight, 10) +
                                            Math.floor(totalTrackeDItems / buffsPerRow + 1) *
                                                27 *
                                                (uiScale / 100),
                                        quality: 1,
                                        pixelRatio: uiScale / 100 - 0.00999999999999999999,
                                        skipAutoScale: true,
                                    })
                                        .then(function (dataUrl) {
                                        var base64ImageString = dataUrl
                                            .getContext('2d')
                                            .getImageData(0, 0, dataUrl.width, dataUrl.height);
                                        alt1.overLaySetGroup('region3');
                                        alt1.overLayFreezeGroup('region3');
                                        alt1.overLayClearGroup('region3');
                                        alt1.overLayImage(overlayPosition.x + 300, overlayPosition.y, alt1__WEBPACK_IMPORTED_MODULE_9__.encodeImageString(base64ImageString), base64ImageString.width, refreshRate);
                                        alt1.overLayRefreshGroup('region3');
                                    })
                                        .catch(function (e) {
                                        console.error("html-to-image failed to capture", e);
                                    });
                                    return [4 /*yield*/, new Promise(function (done) { return setTimeout(done, refreshRate); })];
                                case 1:
                                    _b.sent();
                                    return [2 /*return*/];
                            }
                        });
                    };
                    _a.label = 2;
                case 2:
                    if (false) {}
                    return [5 /*yield**/, _loop_3()];
                case 3:
                    _a.sent();
                    return [3 /*break*/, 2];
                case 4: return [2 /*return*/];
            }
        });
    });
}
function initSettings() {
    if (!localStorage[config.appName]) {
        setDefaultSettings();
    }
    if (_a1sauce__WEBPACK_IMPORTED_MODULE_0__.getSetting('betaUpgrade' == undefined)) {
        _a1sauce__WEBPACK_IMPORTED_MODULE_0__.updateSetting('betaUpgrade', 'upgraded to 2.0.0');
        _a1sauce__WEBPACK_IMPORTED_MODULE_0__.updateSetting('delayAdjustment', 1);
    }
    if (_a1sauce__WEBPACK_IMPORTED_MODULE_0__.getSetting('beta') == true) {
        helperItems.BetterBuffsBar.classList.add('beta-tester');
        document.querySelector('html').classList.add('beta');
    }
    loadSettings();
}
function setDefaultSettings() {
    localStorage.setItem(config.appName, JSON.stringify({
        activeOverlay: true,
        bigHeadMode: false,
        bigHeadPosition: 'start',
        buffsLocation: findPlayerBuffs,
        buffsPerRow: 10,
        delayAdjustment: 1,
        debuffsLocation: findPlayerDebuffs,
        fadeInactiveBuffs: true,
        loopSpeed: 150,
        singleBOLG: false,
        showMaintainableBlinking: true,
        showTooltipReminders: true,
        overlayPosition: { x: 100, y: 100 },
        overlay2Position: { x: 300, y: 100 },
        overlay3Position: { x: 500, y: 100 },
        uiScale: 100,
        updatingOverlayPosition: false,
    }));
}
function loadSettings() {
    getByID('Buffs').style.setProperty('--maxcount', _a1sauce__WEBPACK_IMPORTED_MODULE_0__.getSetting('buffsPerRow'));
    getByID('Buffs').style.setProperty('--totalitems', helperItems.TrackedBuffs.children.length.toString());
    getByID('Buffs2').style.setProperty('--maxcount', _a1sauce__WEBPACK_IMPORTED_MODULE_0__.getSetting('buffsPerRow'));
    getByID('Buffs2').style.setProperty('--totalitems', helperItems.TrackedBuffs.children.length.toString());
    getByID('Buffs3').style.setProperty('--maxcount', _a1sauce__WEBPACK_IMPORTED_MODULE_0__.getSetting('buffsPerRow'));
    getByID('Buffs3').style.setProperty('--totalitems', helperItems.TrackedBuffs.children.length.toString());
    getByID('Buffs').style.setProperty('--scale', _a1sauce__WEBPACK_IMPORTED_MODULE_0__.getSetting('uiScale'));
    getByID('Buffs2').style.setProperty('--scale', _a1sauce__WEBPACK_IMPORTED_MODULE_0__.getSetting('uiScale'));
    getByID('Buffs3').style.setProperty('--scale', _a1sauce__WEBPACK_IMPORTED_MODULE_0__.getSetting('uiScale'));
    helperItems.BetterBuffsBar.classList.toggle('fade', _a1sauce__WEBPACK_IMPORTED_MODULE_0__.getSetting('fadeInactiveBuffs'));
    helperItems.BetterBuffsBar.classList.toggle('big-head-mode', _a1sauce__WEBPACK_IMPORTED_MODULE_0__.getSetting('bigHeadMode'));
    helperItems.BetterBuffsBar.classList.toggle('blink-maintainables', _a1sauce__WEBPACK_IMPORTED_MODULE_0__.getSetting('showMaintainableBlinking'));
    if (parseInt(settingsObject.UIScale.querySelector('input').value, 10) < 100) {
        helperItems.TrackedBuffs.classList.add('scaled');
    }
    setBuffsPerRow();
    setBigHeadMode();
    setSortables();
    findPlayerBuffs();
    findPlayerDebuffs();
    setGridSize();
    setBigHeadGrid();
    disableNameSetting();
}
function setSortables() {
    var sortables = ['Buffs', 'Buffs2', 'Buffs3', 'UntrackedBuffs'];
    // Create the sortables
    sortables.forEach(function (sortable) {
        var el = getByID(sortable);
        sortablejs__WEBPACK_IMPORTED_MODULE_1__.Sortable.create(el, {
            group: 'trackedBuffs',
            multiDrag: true,
            dataIdAttr: 'id',
            swapThreshold: 0.85,
            store: {
                set: function (sortable) {
                    var order = sortable.toArray();
                    localStorage.setItem(sortable.el.id, order.join('|'));
                },
            },
            onSort: function (evt) {
                var currentSortable = evt.to[Object.keys(evt.to)[0]];
                var order = currentSortable.toArray();
                localStorage[currentSortable.el.id] = order.join('|');
            },
        });
    });
    // Re-sort into their saved areas on load
    sortables.forEach(function (sortable) {
        var parent = getByID(sortable);
        var itemOrder = localStorage.getItem(sortable);
        var itemOrderArr = itemOrder ? itemOrder.split('|') : [];
        var prevItem;
        itemOrderArr.forEach(function (item) {
            var child = getByID(item);
            if (!prevItem) {
                parent.insertBefore(child, parent.firstChild);
            }
            else {
                var prevChild = getByID(prevItem);
                prevChild.parentNode.insertBefore(child, prevChild.nextSibling);
            }
            prevItem = item;
        });
    });
    var allItems = helperItems.BetterBuffsBar.querySelectorAll('[data-name]');
    allItems.forEach(function (item) {
        item.addEventListener('mouseenter', function (e) {
            var name = item.dataset.name;
            helperItems.NameOutput.innerHTML = name;
        });
        item.addEventListener('mouseleave', function (e) {
            helperItems.NameOutput.innerHTML = '';
        });
    });
}
function setBuffsPerRow() {
    getByID('Buffs').style.setProperty('--maxcount', _a1sauce__WEBPACK_IMPORTED_MODULE_0__.getSetting('buffsPerRow'));
    getByID('Buffs2').style.setProperty('--maxcount', _a1sauce__WEBPACK_IMPORTED_MODULE_0__.getSetting('buffsPerRow'));
    getByID('Buffs3').style.setProperty('--maxcount', _a1sauce__WEBPACK_IMPORTED_MODULE_0__.getSetting('buffsPerRow'));
    setGridSize();
    helperItems.TrackedBuffs.addEventListener('change', function () {
        getByID('Buffs').style.setProperty('--totalitems', helperItems.TrackedBuffs.children.length.toString());
        getByID('Buffs2').style.setProperty('--totalitems', helperItems.TrackedBuffs.children.length.toString());
        getByID('Buffs3').style.setProperty('--totalitems', helperItems.TrackedBuffs.children.length.toString());
        _a1sauce__WEBPACK_IMPORTED_MODULE_0__.updateSetting('totalTrackedItems', helperItems.TrackedBuffs.children.length.toString);
    });
}
function setGridSize() {
    var buffsCount = helperItems.TrackedBuffs.querySelectorAll('li').length;
    var maxLength = parseInt(helperItems.TrackedBuffs.style.getPropertyValue('--maxcount'), 10);
    var rowsToGenerate = parseInt(roundedToFixed(buffsCount / maxLength, 1) + 1, 10);
    helperItems.TrackedBuffs.style.gridTemplateAreas = "\"".concat('. '.repeat(_a1sauce__WEBPACK_IMPORTED_MODULE_0__.getSetting('buffsPerRow')), "\"").repeat(rowsToGenerate);
    helperItems.TrackedBuffs.style.gridTemplateRows = "repeat(".concat(rowsToGenerate + 1, ", calc(30px * clamp(1, (var(--scale) / 100) / 2, 2)))");
}
function setBigHeadMode() {
    var bigHeadMode = _a1sauce__WEBPACK_IMPORTED_MODULE_0__.getSetting('bigHeadMode');
    helperItems.TrackedBuffs.classList.toggle('scaled', bigHeadMode);
    helperItems.BetterBuffsBar.classList.toggle('big-head-mode', bigHeadMode);
    setBigHeadGrid();
}
function setBigHeadGrid() {
    var bigHeadModeActive = _a1sauce__WEBPACK_IMPORTED_MODULE_0__.getSetting('bigHeadMode');
    var bigHeadPosition = _a1sauce__WEBPACK_IMPORTED_MODULE_0__.getSetting('bigHeadPosition');
    var buffsPerRow = _a1sauce__WEBPACK_IMPORTED_MODULE_0__.getSetting('buffsPerRow');
    if (bigHeadModeActive && bigHeadPosition == 'start') {
        helperItems.TrackedBuffs.style.gridTemplateAreas = "\n\t\t\"first first ".concat('. '.repeat(buffsPerRow), "\"\n\t\t\"first first ").concat('. '.repeat(buffsPerRow), "\"\n\t\t\". . ").concat('. '.repeat(buffsPerRow), "\"\n\t\t\". . ").concat('. '.repeat(buffsPerRow), "\"\n\t\t\". . ").concat('. '.repeat(buffsPerRow), "\"\n\t\t");
    }
    if (bigHeadModeActive && bigHeadPosition == 'end') {
        helperItems.TrackedBuffs.style.gridTemplateAreas = "\n\t\t\"".concat('. '.repeat(buffsPerRow), "first first\"\n\t\t\"").concat('. '.repeat(buffsPerRow), "first first\"\n\t\t\". . ").concat('. '.repeat(buffsPerRow), "\"\n\t\t\". . ").concat('. '.repeat(buffsPerRow), "\"\n\t\t\". . ").concat('. '.repeat(buffsPerRow), "\"\n\t\t");
    }
    if (!bigHeadModeActive) {
        helperItems.TrackedBuffs.style.gridTemplateAreas = "\n\t\t\"".concat('. '.repeat(buffsPerRow), "\"\n\t\t\"").concat('. '.repeat(buffsPerRow), "\"\n\t\t\"").concat('. '.repeat(buffsPerRow), "\"\n\t\t\"").concat('. '.repeat(buffsPerRow), "\"\n\t\t\"").concat('. '.repeat(buffsPerRow), "\"\n\t\t");
    }
}
function disableNameSetting() {
    if (_a1sauce__WEBPACK_IMPORTED_MODULE_0__.getSetting('showBuffNames')) {
        _a1sauce__WEBPACK_IMPORTED_MODULE_0__.updateSetting('showBuffNames', false);
    }
}
var foundBuffs = false;
function getActiveBuffs() {
    if (foundBuffs && _a1sauce__WEBPACK_IMPORTED_MODULE_0__.getSetting('buffsLocation')) {
        return buffs.read();
    }
    else {
        findPlayerBuffs();
    }
}
function findPlayerBuffs() {
    if (buffs.find()) {
        foundBuffs = true;
        setTimeout(function () {
            alt1.overLaySetGroup('buffsArea');
            alt1.overLayRect(alt1__WEBPACK_IMPORTED_MODULE_9__.mixColor(120, 255, 120), buffs.getCaptRect().x, buffs.getCaptRect().y, buffs.getCaptRect().width, buffs.getCaptRect().height, 3000, 1);
        }, 1000);
        setTimeout(function () {
            alt1.overLayClearGroup('buffsArea');
        }, 4000);
        return _a1sauce__WEBPACK_IMPORTED_MODULE_0__.updateSetting('buffsLocation', [buffs.pos.x, buffs.pos.y]);
    }
}
var foundDebuffs = false;
function getActiveDebuffs() {
    if (foundDebuffs && _a1sauce__WEBPACK_IMPORTED_MODULE_0__.getSetting('debuffsLocation')) {
        return debuffs.read();
    }
    else {
        findPlayerDebuffs();
    }
}
function findPlayerDebuffs() {
    if (debuffs.find()) {
        foundDebuffs = true;
        return _a1sauce__WEBPACK_IMPORTED_MODULE_0__.updateSetting('debuffsLocation', [
            debuffs.pos.x,
            debuffs.pos.y,
        ]);
    }
}
function roundedToFixed(input, digits) {
    var rounder = Math.pow(10, digits);
    return (Math.round(input * rounder) / rounder).toFixed(digits);
}
/* Settings */
var currentVersion = "2.0.2";
var settingsObject = {
    settingsHeader: _a1sauce__WEBPACK_IMPORTED_MODULE_0__.createHeading('h2', 'Settings - v' + currentVersion),
    settingDiscord: _a1sauce__WEBPACK_IMPORTED_MODULE_0__.createText("Please <a href=\"https://discord.gg/KJ2SgWyJFF\" target=\"_blank\" rel=\"nofollow\">join the Discord</a> for any suggestions or support"),
    beginGeneral: _a1sauce__WEBPACK_IMPORTED_MODULE_0__.createHeading('h3', 'General'),
    BuffsPerRow: _a1sauce__WEBPACK_IMPORTED_MODULE_0__.createNumberSetting('buffsPerRow', 'Number of buffs displayed per row', { defaultValue: 10, min: 1, max: 20 }),
    FadeInactiveBuffs: _a1sauce__WEBPACK_IMPORTED_MODULE_0__.createCheckboxSetting('fadeInactiveBuffs', '<u>Explicitly Inactive</u> Instead of hiding inactive buffs - displays them darker and desaturated', (_a = _a1sauce__WEBPACK_IMPORTED_MODULE_0__.getSetting('fadeInactiveBuffs')) !== null && _a !== void 0 ? _a : true),
    BigHeadMode: _a1sauce__WEBPACK_IMPORTED_MODULE_0__.createCheckboxSetting('bigHeadMode', '<u>Big Head Mode</u> The first buff tracked  is made x4 larger.', (_b = _a1sauce__WEBPACK_IMPORTED_MODULE_0__.getSetting('bigHeadMode')) !== null && _b !== void 0 ? _b : false),
    BigHeadPosition: _a1sauce__WEBPACK_IMPORTED_MODULE_0__.createDropdownSetting('bigHeadPosition', '<u>Big Head Position</u> Set display position to Left or Right side', 'start', [
        { value: 'start', name: 'Left Side' },
        { value: 'end', name: 'Right Side' },
    ]),
    OverloadReminder: _a1sauce__WEBPACK_IMPORTED_MODULE_0__.createCheckboxSetting('overloadReminder', '<u>Overload Reminder</u> Display a tooltip after Overloads expires which lasts 3 seconds', (_c = _a1sauce__WEBPACK_IMPORTED_MODULE_0__.getSetting('overloadReminder')) !== null && _c !== void 0 ? _c : true),
    BlinkExpiredBuffs: _a1sauce__WEBPACK_IMPORTED_MODULE_0__.createCheckboxSetting('showMaintainableBlinking', '<u>100% Uptime</u> Adds a blinking "!!" effect for inactive buffs that can and should be maintained with 100% uptime', (_d = _a1sauce__WEBPACK_IMPORTED_MODULE_0__.getSetting('showMaintainableBlinking')) !== null && _d !== void 0 ? _d : true),
    SingleBOLG: _a1sauce__WEBPACK_IMPORTED_MODULE_0__.createCheckboxSetting('singleBOLG', '<u>Split BOLG Weapon Special / Stacks</u> Tracks Balance by Force and Perfect Equlibrium stacks as separate buffs', (_e = _a1sauce__WEBPACK_IMPORTED_MODULE_0__.getSetting('singleBOLG')) !== null && _e !== void 0 ? _e : false),
    endGeneral: _a1sauce__WEBPACK_IMPORTED_MODULE_0__.createSeperator(),
    OverlayHeader: _a1sauce__WEBPACK_IMPORTED_MODULE_0__.createHeading('h3', 'Overlay'),
    OverlayActive: _a1sauce__WEBPACK_IMPORTED_MODULE_0__.createCheckboxSetting('activeOverlay', "<u>Enable Overlay</u> When the overlay is toggled off - the app will hide the entire UI unless your mouse is over the app. This is for users who don't mind having a background and want to avoid the delay the overlay has", (_f = _a1sauce__WEBPACK_IMPORTED_MODULE_0__.getSetting('activeOverlay')) !== null && _f !== void 0 ? _f : false),
    OverlaySmallText: _a1sauce__WEBPACK_IMPORTED_MODULE_0__.createSmallText("If the overlay does not show - check the \"Show overlay\" permission is enabled for this plugin in Alt1's settings or try setting the position using the button below."),
    OverlayPositionButton: _a1sauce__WEBPACK_IMPORTED_MODULE_0__.createButton('Set Overlay Position', setOverlayPosition, { classes: 'nisbutton' }),
    Overlay2PositionButton: _a1sauce__WEBPACK_IMPORTED_MODULE_0__.createButton('Set Overlay 2 Position', setOverlayPosition2, { classes: 'nisbutton' }),
    Overlay3PositionButton: _a1sauce__WEBPACK_IMPORTED_MODULE_0__.createButton('Set Overlay 3 Position', setOverlayPosition3, { classes: 'nisbutton' }),
    ScaleHeader: _a1sauce__WEBPACK_IMPORTED_MODULE_0__.createHeading('h3', 'Scale'),
    UIScale: _a1sauce__WEBPACK_IMPORTED_MODULE_0__.createRangeSetting('uiScale', 'Adjusts the size of the Overlay', {
        defaultValue: '100',
        min: 50,
        max: 200,
    }),
    delayHeader: _a1sauce__WEBPACK_IMPORTED_MODULE_0__.createHeading('h3', 'Delay Compensation'),
    DelayAdjustment: _a1sauce__WEBPACK_IMPORTED_MODULE_0__.createRangeSetting('delayAdjustment', "Subtracts time from visible countdowns to adjust for overlay delay", {
        defaultValue: (_g = _a1sauce__WEBPACK_IMPORTED_MODULE_0__.getSetting('delayAdjustment')) !== null && _g !== void 0 ? _g : '1',
        min: 0,
        max: 5,
        unit: 's',
    }),
    OverlayRefreshHeader: _a1sauce__WEBPACK_IMPORTED_MODULE_0__.createHeading('h3', 'Refresh Rate'),
    OverlayRefreshRate: _a1sauce__WEBPACK_IMPORTED_MODULE_0__.createRangeSetting('overlayRefreshRate', 'The rate that the overlay should refresh - in milliseconds. Requires reloading to take effect.', { defaultValue: '50', min: 20, max: 500, unit: 'ms' }),
    endOverlay: _a1sauce__WEBPACK_IMPORTED_MODULE_0__.createSeperator(),
    SearchHeader: _a1sauce__WEBPACK_IMPORTED_MODULE_0__.createHeading('h3', 'Interface Search Speed'),
    SearchSpeed: _a1sauce__WEBPACK_IMPORTED_MODULE_0__.createRangeSetting('loopSpeed', 'Lower value will detect changes faster but may cause hits to overall performance. Adjust at your own risk - the default value should generally be fine. Requires reloading to take effect.', {
        defaultValue: '150',
        min: 50,
        max: 300,
        unit: 'ms',
    }),
    endSearch: _a1sauce__WEBPACK_IMPORTED_MODULE_0__.createSeperator(),
    ProfileManager: _a1sauce__WEBPACK_IMPORTED_MODULE_0__.createProfileManager(),
    ResetHeader: _a1sauce__WEBPACK_IMPORTED_MODULE_0__.createHeading('h3', 'Reset Config'),
    ResetText: _a1sauce__WEBPACK_IMPORTED_MODULE_0__.createText("This will reset your configuration and reload the plugin in an attempt to solve any problems caused by missing or bad values"),
    resetButton: _a1sauce__WEBPACK_IMPORTED_MODULE_0__.createButton('Reset All Settings', _a1sauce__WEBPACK_IMPORTED_MODULE_0__.setDefaultSettings, { classes: 'nisbutton' }),
    endreset: _a1sauce__WEBPACK_IMPORTED_MODULE_0__.createSeperator(),
    troubleshootingHeader: _a1sauce__WEBPACK_IMPORTED_MODULE_0__.createHeading('h3', 'Here is trouble (Make it double!)'),
    debugMode: _a1sauce__WEBPACK_IMPORTED_MODULE_0__.createCheckboxSetting('debugMode', 'Debug mode', false),
    beta: _a1sauce__WEBPACK_IMPORTED_MODULE_0__.createCheckboxSetting('beta', 'Beta Testing', false),
};
settingsObject.BuffsPerRow.addEventListener('click', function () {
    getByID('Buffs').style.setProperty('--maxcount', _a1sauce__WEBPACK_IMPORTED_MODULE_0__.getSetting('buffsPerRow'));
    setGridSize();
    setBigHeadGrid();
});
settingsObject.FadeInactiveBuffs.addEventListener('change', function () {
    helperItems.BetterBuffsBar.classList.toggle('fade', settingsObject.FadeInactiveBuffs.querySelector('input').checked);
});
settingsObject.BigHeadMode.addEventListener('change', function () {
    helperItems.BetterBuffsBar.classList.toggle('big-head-mode', settingsObject.BigHeadMode.querySelector('input').checked);
    setBigHeadMode();
    setBigHeadGrid();
});
settingsObject.BigHeadPosition.addEventListener('change', function () {
    setBigHeadMode();
    setBigHeadGrid();
});
settingsObject.BlinkExpiredBuffs.addEventListener('change', function () {
    helperItems.BetterBuffsBar.classList.toggle('blink-maintainables', settingsObject.BlinkExpiredBuffs.querySelector('input').checked);
});
settingsObject.UIScale.addEventListener('change', function () {
    getByID('Buffs').style.setProperty('--scale', _a1sauce__WEBPACK_IMPORTED_MODULE_0__.getSetting('uiScale'));
    if (parseInt(settingsObject.UIScale.querySelector('input').value, 10) < 100) {
        helperItems.TrackedBuffs.classList.add('scaled');
    }
});
settingsObject.ProfileManager.querySelector('.profile-list').addEventListener('change', function () {
    var name = settingsObject.ProfileManager.querySelector('.profile-name');
    var dropdown = settingsObject.ProfileManager.querySelector('.profile-list select');
    name.value = dropdown.value;
});
settingsObject.ProfileManager.querySelector('.load-btn').addEventListener('click', function () {
    setTimeout(function () { }, 100);
    location.reload();
});
settingsObject.OverlayActive.querySelector('input').addEventListener('click', function () {
    setTimeout(function () { }, 100);
    location.reload();
});
settingsObject.debugMode
    .querySelector('input')
    .addEventListener('change', function () {
    setTimeout(function () { }, 100);
    location.reload();
});
settingsObject.beta.querySelector('input').addEventListener('change', function () {
    setTimeout(function () { }, 100);
    location.reload();
});
window.onload = function () {
    //check if we are running inside alt1 by checking if the alt1 global exists
    if (window.alt1) {
        //tell alt1 about the app
        //this makes alt1 show the add app button when running inside the embedded browser
        //also updates app settings if they are changed
        alt1.identifyAppUrl('./appconfig.json');
        var settings_1 = document.querySelector('#Settings .container');
        Object.values(settingsObject).forEach(function (val) {
            settings_1.before(val);
        });
        initSettings();
        startBetterBuffsBar();
    }
    else {
        var addappurl = "alt1://addapp/".concat(new URL('./appconfig.json', document.location.href).href);
        helperItems.Output.insertAdjacentHTML('beforeend', "\n\t\t\tAlt1 not detected, click <a href='".concat(addappurl, "'>here</a> to add this app to Alt1\n\t\t"));
    }
};

})();

/******/ 	return __webpack_exports__;
/******/ })()
;
});