(function webpackUniversalModuleDefinition(root, factory) {
	if(typeof exports === 'object' && typeof module === 'object')
		module.exports = factory((function webpackLoadOptionalExternalModule() { try { return require("sharp"); } catch(e) {} }()), (function webpackLoadOptionalExternalModule() { try { return require("canvas"); } catch(e) {} }()), (function webpackLoadOptionalExternalModule() { try { return require("electron/common"); } catch(e) {} }()));
	else if(typeof define === 'function' && define.amd)
		define(["sharp", "canvas", "electron/common"], factory);
	else if(typeof exports === 'object')
		exports["NyusNecroJobGauge"] = factory((function webpackLoadOptionalExternalModule() { try { return require("sharp"); } catch(e) {} }()), (function webpackLoadOptionalExternalModule() { try { return require("canvas"); } catch(e) {} }()), (function webpackLoadOptionalExternalModule() { try { return require("electron/common"); } catch(e) {} }()));
	else
		root["NyusNecroJobGauge"] = factory(root["sharp"], root["canvas"], root["electron/common"]);
})(self, (__WEBPACK_EXTERNAL_MODULE_sharp__, __WEBPACK_EXTERNAL_MODULE_canvas__, __WEBPACK_EXTERNAL_MODULE_electron_common__) => {
return /******/ (() => { // webpackBootstrap
/******/ 	var __webpack_modules__ = ({

/***/ "./asset/data/Adrenaline_Potion-noborder.data.png":
/*!********************************************************!*\
  !*** ./asset/data/Adrenaline_Potion-noborder.data.png ***!
  \********************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

module.exports=(__webpack_require__(/*! alt1/base */ "../node_modules/alt1/dist/base/index.js").ImageDetect.imageDataFromBase64)("iVBORw0KGgoAAAANSUhEUgAAABsAAAAbCAMAAAC6CgRnAAAAllBMVEUAAAFkQgeTXRGbZBVqh55CVWJQMgNRLQ9THR1ee41hZG0NCAJqRAc7SlVtIyN0SQl7TQqJVg6MWQ4tExI4PECxIiLPNTWDUgxCUlsxNzpKSUxKYG0MCwt0l64tLS89Q0dUVFRddYFBExxfIx+dh0RfX2HFLy9CJgjkLy9ePAVmWS6FdzpRcH8zIg2RhEQ7OTx6QRr1PDxULym1AAABTElEQVR4XmXSB3KEMAwFUNmm9872XtNz/8vlSzbJzkYzYOAhoTGiaxAEd4TKXCjFt3h6JQg/Lx8DL7ASiKWqxpE4xgoBBcIgANAr4oVwBSwzGNKE6oZOJ7amqaElypIQpNF0+mDTEzqDaNohFtstaS3IBqpBhs7nM3BOBmhN/VqSAJMNGYOyKKrEmIyh9dqLc5CRqrCstGn/LWNDnnkwwclqMfI8mC95T4ZWPA/WrTQjmplqar0qisSL94ui+NJSs3J5TMNQJG87LMAnOw7fw7GTM8z2oqQmxQmj0Jz4c2KynWhyGV1ut9sl6nKY7IvdT4rRYhfBok9/llNTW8uA5CHv0MP6w9aHyV47s9TL0eU5uf+nBJfvoLZr+bwRUnc3L1Xa9n3r72e8pG5epjkr07ZNiYiXUogtcHMbhiW/H4bZNJ9/c63sZCuEm+sfqIYvyWcegNYAAAAASUVORK5CYII=")

/***/ }),

/***/ "./asset/data/Affliction-noborder.data.png":
/*!*************************************************!*\
  !*** ./asset/data/Affliction-noborder.data.png ***!
  \*************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

module.exports=(__webpack_require__(/*! alt1/base */ "../node_modules/alt1/dist/base/index.js").ImageDetect.imageDataFromBase64)("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")

/***/ }),

/***/ "./asset/data/Ancient_Elven_Ritual_Shard-noborder.data.png":
/*!*****************************************************************!*\
  !*** ./asset/data/Ancient_Elven_Ritual_Shard-noborder.data.png ***!
  \*****************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

module.exports=(__webpack_require__(/*! alt1/base */ "../node_modules/alt1/dist/base/index.js").ImageDetect.imageDataFromBase64)("iVBORw0KGgoAAAANSUhEUgAAABsAAAAbCAYAAACN1PRVAAADQklEQVR4nO3VSU8TYRzH8Wc6UwNFxRgORA0SRVJCiGihqMCwlALSUoGWPSxBkLVUoAilBcqmFQSLuMS6YyRuiWLiqzAePXgwHkw86MH4Cn7OPGRGqg1MMXryn3x7/cz/mWdSQv7PPx317pJDCWkX/j7EaQ7YylpgsZxBRrr5pTbJuJySUrRyJPXk0187pjevbsnQkgzWyOfBau2GzdajqI4OHwhRvQsLimZJJNkWM5OamgW9vgA11XbU1Z6Vq6/rC6qx4RxaWrxwOPxhYmxUKWGjHWtQHvisIrS39GHAMSU32Dcj5/Us4pLvIXp65uFy3QkD4zTG43oeFErPhSGvBMWFp3C6sVNAJoMQsfERP675H2N8NEAxsuvYaxVD6hVIEfE5J3IppDvKIz/3JAryTTAazLCV1aLPPh4EuQZnsbSwghtXnlGIYtzOL4qW0qdlU0hM3EiEpESwvqpJhqYnAsJGTyh0P7BKIafzuoDt+rwpxBL1vuRkPYX47KIgSKraWk+P0jcdoIjUg8Cr8DBh3kVEaOTNQmGlphoM9LrpO5Kgm1efY/nWFjCOUyMhIYViWZnGIMhsqkZvtxcz3iXMnQ/g+uLaEd658YLeRLv9MoaHbynHhBAbG7d2QXQ5MmQqtqK/dwJjrgXh9l3GhMePed9tGRt0LtHvq6KiC4ThuhVjLMshKUlHwcwTBRRzOX0UWZ/X7Yd/7i49Qgnj+TIwKpKsGBNLTDwsYNkwmxvhHrr0GyQ1NXYF455r9H253feQw1vAMSRpY4ZR7Rd+P0qYWG6OBe1tY8JWcyGhydFF4UHmUWHt/9TWNg1bRTsYQpo3XUlFiHc9FB93EPVV7eg644GjewrDzll41m04NHBRaJZCmVmVH9LSCkAIM6Lk+GQsMlIDvS4bVksDam2taKjpgr3TS8H+3hmMDi/Qo6uqHnovQuXlnSDcjmWGIa2KoPWY+ISG/MqgigrrUHqq/42YiDQ1jXwTITHCRr1Vs2SvYkjCdLp88Hx5yAyGGkjAT2j7Vy3Zw4UFyRN1cF7cLFQiWFLSjMqqge+GPCv9C2FYkrA1SB7mUcg08UtabToyMopBGDL7h8jGwxJ1DGGYIdr/CTE/ACbXa9EFNYy+AAAAAElFTkSuQmCC")

/***/ }),

/***/ "./asset/data/Anguish-noborder.data.png":
/*!**********************************************!*\
  !*** ./asset/data/Anguish-noborder.data.png ***!
  \**********************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

module.exports=(__webpack_require__(/*! alt1/base */ "../node_modules/alt1/dist/base/index.js").ImageDetect.imageDataFromBase64)("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")

/***/ }),

/***/ "./asset/data/Animate_Dead-noborder.data.png":
/*!***************************************************!*\
  !*** ./asset/data/Animate_Dead-noborder.data.png ***!
  \***************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

module.exports=(__webpack_require__(/*! alt1/base */ "../node_modules/alt1/dist/base/index.js").ImageDetect.imageDataFromBase64)("iVBORw0KGgoAAAANSUhEUgAAABkAAAAZCAYAAADE6YVjAAAFE0lEQVR4Xq2VeUxUVxTGv/u2GUActMIwLMLAKKOyKBC0qQZM0dZot9hnSKVt2mq1Ck3sqo3N60SNNWqipUnTpom2Jk0D1tBqtDUxw4SaVoora1pRNpeMLIMww8C8d28fVDbjqKn+kpfcv87vO+/enIPxlJbKPFMUDg+EEbm0lFcURcCj4HQqwpAUAIGOosuHipbqxTERrnBNkVWWZR7BGCmycKEtctfWpe//fPC1dDyA/HzZtMWxb4nj86/37Np/6OKKF95uBhA6Wu9e3EnMbX5ncXnt6U9YfdW2PytPfOT48cCaBQCGE8qr16cUbdq27tNtJT9t3/3tjT0lP7Bvvj/GPt5awlLsS712+yJLEMmolQNAAcTv3PJiw4aNS8IoBTzdt9HUMljjPGfyGYyGzPDJU0VB4BFQA2CaRgOqRsvLjpPuzm6OCdr8v+tO/QUMBS7TMI6RS6a5ubkCgLYKZ9OX5YeroWragCRKyJjzRFqqfcp88GGiGvCrPp9XGxwYZIIochfO1ggd7g4YjCGEURIJHVnGKHdL4HK5KAASFZ2823nqyq0zp/8xiAaR+v0++mRqlxZpUpk/AAFgvCRJ5Hr7TVw6Xwf9zAACDlw0dNxuNwkq0aGlsswdKi/vDJVMO50nm9DYcI1JRgMn8gE+L9NLQgwMGiVgVMUflVUIBAIgHAHAwFggGaMEl2BVWdlwN6cvWw94vZM9vx2t59vbuhjHS4gI92NReh9ESULVmTpca78Go1EEY2z44yBYHkoCKMOxPJ4WS00rF9Z3OxTHjlxCT48PlPFIjBlEWvx1uNtqIYgS+rwU/gGNUMbAi8TMGEheXh69r0SW6wl0YiJMSb39qnjuqk+73SWQX45cgBpQoTERIWoNigsoNr0egpfyRcxK4gnPaQgMDFoJAcN/kCCSsUtTGU0xiBzaOvpY43WGW20qfj1RhxttzfD1ujHZZMTMRBEr8gwoLgzhPnhDomvkSfatRTmbHA4HdSq5fBDJGIRglsYojKKAxjYP2j0CrjSGY1+JB64zBjS1qOj1DXUGCCKPmCiB5GSEsLlzzHs3r89+frHDpSpKrnBPictVoUGHESRrTAXREQUONS29qLzYgSutIqovTsfRk9EoO2rAqd8HtKbmfurrV6mmMc0SPUnNybR8t+XN7FSHLpJl8NARJs4wwp61FRtuoctGqTrckyCI6O/3oLW9HpJ+DjGaEBEWT7t6zLjhNvPnazsx1dSLhDgfnxDHISUpPCIzy+z8wrIo590dlVcVBRzBKAoHOGhOeqFV47QGv9pjGJLqMtLZ2QwwBhCRcQjXRCFWkIQYXWo8HD1NPaBR96S+PneCaOiJt0SxiOy0cKvX5208WaVuqK4+q2KEkVGdPffV/OzMV9js2cu0tPTnWGxcBpsWaWPR5nlqfOwzbIZ1HZtpfe9yivVDGffFHDb6u+5+WYyQZAKA43nq9XZyA/5+JomR1ChN5zkyRSXMuN9P+3e0tn7VDSjc0LMfP0ryAHxWUaERQrxlZZjInQGJzPSCkqysAjbT/nTAHJWqp1/KbNa39A6KnDPiinIwSvAlFXSvKHfWblZ6wfF581ZqcXFPDSbGv8xsiWtv2hI2rh8XRwi6mB7GmqsXyJq7qsFuX8kS4wv0DtYdtMUWx40lG9v//1uyIGN5bMacQmadvro2KWHtsgnpH5WRhLNnLM+xJRVst2BF6Nh/ZwSPGRLkYh8jY8Ufa/p/AQ1WJkdnbm1SAAAAAElFTkSuQmCC")

/***/ }),

/***/ "./asset/data/Anti-poison_Active-noborder.data.png":
/*!*********************************************************!*\
  !*** ./asset/data/Anti-poison_Active-noborder.data.png ***!
  \*********************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

module.exports=(__webpack_require__(/*! alt1/base */ "../node_modules/alt1/dist/base/index.js").ImageDetect.imageDataFromBase64)("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")

/***/ }),

/***/ "./asset/data/Anticipation.data.png":
/*!******************************************!*\
  !*** ./asset/data/Anticipation.data.png ***!
  \******************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

module.exports=(__webpack_require__(/*! alt1/base */ "../node_modules/alt1/dist/base/index.js").ImageDetect.imageDataFromBase64)("iVBORw0KGgoAAAANSUhEUgAAABkAAAAZCAIAAABLixI0AAAHLElEQVR4XhVUeXAT9xnV7urYQysfWp22LPmQLSwbI2zHxsaBkNo1kCbpFAeSNNMkLdM0pIlh2iSUQNtJoTNJIZmxnZSW0gkDDE2Gq5ByGSdO3YA5Qm1jwBL41H2utJJ2tWe3v9/MN/P98+Z973vfA9QIqkVghmFomsZ1RRoEFbiCJIooijjrG7s6O+tsht71PXpTucAXhHwA5HxUKBhMC/8cmTv31X8hPmezV73yysvrnngCQBBErVHzLA9CIIpiGlitkACCKNGguLvK2r+j393ULgkMk/BzSa8ydVOSJFCNIkZEEJE/Hg1eu3G7xdNkMlu1WhyAIAiGNSColEEBQCE/s9lU4ahsXunZ8+s3AA1AJwMKEZFJKSLfALkQhBOFLMvyTKkR+uzbkplwVp2Li0o4GvJDkFIlI2AYKgMJgiD3GIbpMOT9PbtmIxQgCDphKZ98BMauK+iYqqRMUPLXRycJParTl3x7N2ksq/Y01n/x+QmeF0EZRRaLoihJRpQbDBYVQC6X5/nMd9eG27u655jKYmcvaPBAuFkFCRe/GM3zEGExsfFwezX8989ODA0NEQaz1+sFQQWgK9ZxHCdrL4oCz3FZKpuistvf/cMzT3V3r+lsf6z1+InTkL0XsniunB2emok1uA2gyFFi6RJr69v0tN1uj0bD0WgMwnGdXq/nWFYWDgBAmZQoirAKghFcgtDfvv3Li+fP7R846HE77WbTsYN/rq2xt3iqqfhs3LJpjhSuHD9Y7VmVk4lQpMJgMtntFeU2G0EQVdXVsvAGgjBbLJs3b/pw/8eZueH3f9GnAMDXX94i5UP7Xmre+cLj1wY2z40dHDj8j4ZlVfKufrzes++9bXZng0Kn01mtZS6XC8dxubrdbqvV2tzc8sKLWzZvef6TwQOnB3frQMCMqO9dv3D1yJ6XVugO7d5y/f6srcZdaSw+f+g3BdJLxub7X98KKpVKkkzKA8qgbIFxOp2uOlcikZicmBIknuRhhVrdUlki0NzVL08tczmiCcbRu+13O9+xcAvjZ3et7e6Y/+bzfHDiwEd/ghyVlRiqDQT8jcuXgyAozzg5OalUghs3bsizUo3TmV144F96iMPwqjbX7dGr9p5Xff7E7TNHRsYusIm5uyMXeYby3vrSVFkJyYaora3VarUKSTKaLQWOtZVZmppW1LrcZSZT3482phduTo7fKHNUOIuyJObS1fcc/dWLZy4d05aU++6Myvbk4CKGV0j5HCgvz+ebaWtrt1fY5RmbVzStbOuoa1zZ92zPmz/fYFQ8SC/NFABtx3Krs3ldztp16ePtQ0O7VeSj7059WJCNxIqCAITmA/qKekWpXq/FsPIK+969ewcHBj45fPTk+eGFmXHae4IceSc1+t6ODe7tvQ3hC/1f/W3XRzs2Pfj6MJucvn3s7cuDr14e3Dp6uP/4zvUXP31j1jsOyU5zVNVoUbUEqds6uprKVasbiRJtJjkxRudynApRguoNT3Ua6ro1KrFzXVculZi6fFxUwyLLqRF4wec1l1XUb3zze+ufB1av7nI4yt0NTXpLxZN1ghSb/s+VYUu1Z82W1wo0Ryf9hMVIM0BoYUZXhMUCS0u+WxpEx3MAJ3ALi2FXg6v+8b7evrdysUXIZrPJOVFqrVq7DHG3tMKOHgS3/mXwUGj2Tse6HjJFLk58nUun8qlI2O+T2EKeEyVRjKYyBYbrWtMBGKuf+8m73omJHz7XB3Gs/AUtrv1Ba6nIMIVowLGq10hAB/Z92vtkrcDTsXlflsnCSpjOZ7N5KpWV9S7UuuyEqfr8yL3tOz6I+UOrGpcZXI3KVDpdVKyLxTN0Oo2ywYyIU2PheqNoK7OePD267adPB9VogedTqRgj8PEMZTWZVWrVvy5NHT93K53OPLa8dm5mnqitCwTCst1xi9nkqK4VMEMDkeTIWMq/KInsyhbn7g9OVZixxmXmUJDieI6TBFyL3rrl2//XkTtTc+0tjre2fp/J56Z9oRWdnXen70FFeHFxqT4R8T+YjUIlDXpdMafRJyOhqjLs3xPx3x8ejkbTbqcRUKpiseypszevjk13LK985tnWGrth2hs+eeZGCQwTDsdiJKrEdfijhz4Iglwu+Nr9pQTrbF+9lgTvX47kenppKwGSArToT9/3RR4uhsotRa/9rAeElPFEhmK4m+PzgCiwEJTjAQUv/P+GVColiqHyNWTjYYO+SMFQIFIajMYI9m73moa6KqLAczCmsjmM5VZTgeUjFJUXOUCUSovg4HwcUsF6h2NhYQHEdcVyxjM0ncmQMIqHQpFkKiUxZCISBDBiemouGCU5ANCXaDVqdTpLB5PpDJVns3wsQE7eC1A0g+owmmbkXFUyTE6SFBoYAUAlRWXscGVza9uRI0cIs0OhQNWYKpwoRMOpHC0AKjGVJBNxlsvzLM+lCwWR5YuLcEuNKxRPSJL4P2PGj/8NmsIrAAAAAElFTkSuQmCC")

/***/ }),

/***/ "./asset/data/Aura-noborder.data.png":
/*!*******************************************!*\
  !*** ./asset/data/Aura-noborder.data.png ***!
  \*******************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

module.exports=(__webpack_require__(/*! alt1/base */ "../node_modules/alt1/dist/base/index.js").ImageDetect.imageDataFromBase64)("iVBORw0KGgoAAAANSUhEUgAAABkAAAAZCAMAAADzN3VRAAAAPFBMVEUAAAFrUh+qizeQcjRjLRLDmjmDDiiJVBAUFx9oCAYyKz1PNQ8zPjYjJS9vPRmzJSA4QERPFyovLjAYIy7OChkYAAAA7klEQVR4Xm3S2W6FMAxFUZ9jOyN0/P9/rZ2k0233QxAsmUgEmdPs6SuRdTGbU2Y+l10VVYmWyQJ3aCQKKMikJUI4grAWgi4pCbQe1LLQ5+5S43FCsc5712jWO2QLrBg5ruwmS6G7hFQBEfCyGkF0IEUAbSPhUAOgS1TRroRD7+1b9KdcISp17fMg+boj7r/krTVfIup/ZtzPPu1R9MwAbfwrAMhvGiSA/Q2I1550ZYO9U/YMUax3v3fs6y5ngkoxbydaMfiWKjQ69MQCSA7YIgIKEdF92nWfdlIESBUkB6TMoLAa+rns/+r8b4+ZzQ99MROBbEHrQgAAAABJRU5ErkJggg==")

/***/ }),

/***/ "./asset/data/Barricade.data.png":
/*!***************************************!*\
  !*** ./asset/data/Barricade.data.png ***!
  \***************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

module.exports=(__webpack_require__(/*! alt1/base */ "../node_modules/alt1/dist/base/index.js").ImageDetect.imageDataFromBase64)("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")

/***/ }),

/***/ "./asset/data/Berserk-noborder.data.png":
/*!**********************************************!*\
  !*** ./asset/data/Berserk-noborder.data.png ***!
  \**********************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

module.exports=(__webpack_require__(/*! alt1/base */ "../node_modules/alt1/dist/base/index.js").ImageDetect.imageDataFromBase64)("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")

/***/ }),

/***/ "./asset/data/Black_virus.data.png":
/*!*****************************************!*\
  !*** ./asset/data/Black_virus.data.png ***!
  \*****************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

module.exports=(__webpack_require__(/*! alt1/base */ "../node_modules/alt1/dist/base/index.js").ImageDetect.imageDataFromBase64)("iVBORw0KGgoAAAANSUhEUgAAABkAAAAZCAMAAADzN3VRAAAAgVBMVEUUFx8VLTDFuaEYIy5MQjcYQDGolX4zPjZkZFwPDgwjJS8WGi2LdWDX0cLd5Mrw6NcZP0D27One1auMi4Susp8vLjAZLT2usIUAAAEQBh7u68VIV1vluKALKykPAhASLQZjSjU4QEQHGTNAR00mPUtoXjcwIi9jcG6xk1eOiFi80b0iICleAAABRklEQVR4XlXOh27dMAwFUA7N4b3fStI5/v8DS8qpgdKWIPDoEgKAzKsWIrIuPXP+r4/Pp+7rSV8gV+ilj954+7xI5duKFvG7I6It4KdlYAlIwjtqtMj5k1hEyCq0Xde1bbP5M1QFsSgMUl0zFlRiyAoqGhkkNLprmoqb5lZMFjnCGgJ9gMUS/gwtEXVDE65MpWVq5rat/7SgPUVBQktc5tv8Iy4F0fZVcE3WmhBhL0PZYQ93a/teJGdm5EIpBvpJITI5zXAWUTMPmruwh26mm7H9R58YNISIpjgyYMhNd0RMa8J/wpA2klpAh8scAKEkUe/YbCN9ZedRsAIk1o2mHTzs05YQASqd/GZG5/ljfph6tdZxCMj5fbzJ9/7GQlm7hy4NgfkVfkviuh8PtUoQISrUQIRXvEzpU2IUeb3iIVg7IodWlO5fr9wa74AGjGMAAAAASUVORK5CYII=")

/***/ }),

/***/ "./asset/data/Blue_virus.data.png":
/*!****************************************!*\
  !*** ./asset/data/Blue_virus.data.png ***!
  \****************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

module.exports=(__webpack_require__(/*! alt1/base */ "../node_modules/alt1/dist/base/index.js").ImageDetect.imageDataFromBase64)("iVBORw0KGgoAAAANSUhEUgAAABkAAAAZCAMAAADzN3VRAAAAolBMVEUJBZMWNVAGPzkOXGkMOGQITYQGTJ1kZFyolX7FuaEMKjsLHVYUQ08KW1oENJSusIULa4ozPjbd5Mrw6NeLdWD27One1asZP0CMi4Susp8PDgwUFx9MQjcLKyk4QEQHGTPX0cIAAAEYIy4jJS/u68VIV1sVLTAvLjAQBh5LYDcHdaIYQDHluKCOiFixk1djcG4BKTW80b1jSjUMbVARhqhCa1XRHVIKAAABgklEQVR4XjWRha7kMAxFY4dTZIZBeLS8//9ra3dmb1MrytFxXFWIlGJoaZ2mmooxho92YChaSgUQJ1Lr/4jOGSiF3fq2dhjLFyJnN7Czznuf2Q4VI/N0chkXzh843hU7ejk6YVBWVVWWh2wFlphwr5pBQ6kO7dcPkl5EMWGlIal1QWruxt+gguuHkhi93vluH10Y857LrrY/m5Jmq5qDdd2rG4+WfPSHoSz31ReJJKKFNjkRrO/jebgM97GoMZG5Ns97ZHK143Ssm/o4He1fIu/kqDRVPNt5tP67t+PJO5S50alQHCg+/VDZo60Gf7n+zv/kTyLpnrl2fp5m7/or8gRaM9FSIi7nzFPuCxJRFBERyWVY3W3OWn+9uTUBpZWKiGj+Zx++n5Zimfrsxgo7VEgDnFu3ntbhcw5ByigiAlwhxuVXe6FnxhhAqiiKxBaBogW4vH2zX/OCCMB9NrFtxBWQhbfltIQAQAYwodAGQoIYOAB0TBEPKmELEOKwZ+NC4PEP0WUh1/0pm1oAAAAASUVORK5CYII=")

/***/ }),

/***/ "./asset/data/Bonfire_Boost-noborder.data.png":
/*!****************************************************!*\
  !*** ./asset/data/Bonfire_Boost-noborder.data.png ***!
  \****************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

module.exports=(__webpack_require__(/*! alt1/base */ "../node_modules/alt1/dist/base/index.js").ImageDetect.imageDataFromBase64)("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")

/***/ }),

/***/ "./asset/data/Chronicle_Attraction-noborder.data.png":
/*!***********************************************************!*\
  !*** ./asset/data/Chronicle_Attraction-noborder.data.png ***!
  \***********************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

module.exports=(__webpack_require__(/*! alt1/base */ "../node_modules/alt1/dist/base/index.js").ImageDetect.imageDataFromBase64)("iVBORw0KGgoAAAANSUhEUgAAABkAAAAZCAYAAADE6YVjAAAHCUlEQVR4XkWRbYjlZR2Gr9/z/N/P25wzM2dmdnN2Yl3dVLEyqVKXdTNdLaTVnEQUAqLvaxQYlhl9imLBPgUFEEGBFfjNMAqqCJGCXVCz3VR3nJ2ZnXPOnPf/6/M8LYZ4wcXN/ekGbuFDNGABd+zYkY+t3XnbZi9SZ1a03RDn/JDKa1xTAZlTjAgq40lFZatpxmVlixd2/nrp19tvvXURAFCABRDgg3SnIawefeCRohmfrfn5p9YCjavGlOLTmQ25jgNGSYvKCQeSoJxioAIK5TM06pr61TyNzq3/8je/fwlyQANGPlhcXqbeOnn/2U4nfOq2IF0wVcmKm7rIahoMWXCZhJ6jDhgsW8Ynpe5mSjFWMZdoCyLsmmhYTu2P+NU/nr/gdueIiMez8I3nSP553wNnw7p8p6nKyK/m9ihDldhU1n041vBYjOo4C04sguLWwjApU9lOM67MPcRB6nuWyC5stZPv8eSnHSLngELxHPaVzdNnVCt+6nqf6LPe2K4XB2p1fsDnOz4nugkd36PKMqbjEQeDEjub4WnNeuxx5+EuJ5ZDPiO7rHmF+kQ5sccZRa7lf+uuJx464wDv1E3rN1Ut/W3f5gvlbGY7YU+tknPH+hINKej1exyUlhU9I3COpgqo8pJJOiY1hlqUsLLQ4dSGj//egF0jqmTZvhc0O/2Ip285cuS8nHz8Sz/wFvzvLpmhu228J+uMOXl8EaUc/a3LNPySxaTCUw6lALHgFK5yZGimmdArI1aXutiozsuv7dBvdPkjK27sAimn7ll96JM3PX9jJMvLDDkSTeTutZiGBwc7W7Sjkk6tQgcO6QSwGkEzgLoGBdo56toQacv+MKVeS2jXNG/nGkkNfhCwk3QWvVZs15u2Jxt25A7rklatzqDfp+4XLMUlJtGow03ylaMQhyjtg/gw2MPf+S+mV1DPDMbmzAZ9up0l1iZT8lrIQFdSI99QRlfezMVoK2w0A1yWsT/LqYcWowTp1sjXjuPax9Cd29ErJ9Hdu7FrH6fsHEWv1nHOkQSOspwjznJLTZNXc2qqImHmeS1KvzUbo1Qu7TCgKkrWwjm+cqi2ouxuICu3EjaPgm7gXAlO47WOY476VBcNqjnDH5UoDQe5oRP7bAwz6Y9SkiTwVIr2GsmcZpQjCLOiwAn42mCbC5hWFy9q4nQNZzOct4rzF1BhHb+2jF1dfP8vJUIpABYExAnJuMQ3xlN+Ubl8VMOoEOccnoByDucEHIjWoGJAYYMjOK+N0x2c83CmxKkAxzXFsGA9dCogQGCprWp8H9RUAkxWEmQViAAQagMIInOUKsAJAGJG4ErEjBExgAJTIVUJCFagdBaHw5RCtp1i+havYcpqu2oGN5gJOEsc10iHPo4cKRxu0KOMLhMGdZASKUsAxM4ps330aA9GOa4SMlVSbwdY4ygOFGlcw19QRuVOV3VX8U5fu8HYoMSSlTAvNHY3x996B3beJB+8gZu/B9kebnrx//3Km+gr2zCvKFDYHGLPe/98XY+drx1To0pvJkFVVTlhzefSaE63HeP5CdNiSs2vMHtTwvANimpG2W4jWsBaZDLH3/oPbnuCs4rBzIMwAU8znBdcuOpjFzU1aVVeasqtUXfh5nw24O0s56PDgvXlJa5sp8S+R1MZ7NYEb/916DQgVEiRw8zgBjmCsD/3mRqflaUOO8Oc85Mmy92IYT12w7G7rIp+8bt5PWa70eKqW+D1/YpZJbRXDtNLI3bHHulcoccGdXmIvtS/lnO4mlEWwv7UY1ooWstdlBdxfnfO/kyzs1/y71ksV4ryt7pJbbda6Z4oCrUaTObWKBGbTTm8WKeWxMxzyyh1jKyPLSyDaUAOzErNVt5EhS1anQ4WzV/enbCdxszLpt1faKudVF84cv61H+pe72r/Fz+7flJPylN5EsSe9e1gbmS/P6Tb9Ol0OgRRBH6dsvQovBboGipq0mk2WG7W6E8L/v52wVvjkHfz2F5dWlO9SdKf9kfP/OGLD/1ZP/d9J/L04xc70YYMkuRzvUL5wbSyEZ7sHWTksykYRxIGhPWIONLoICRQioPM8Oo7Ja/PE7ZnIT0T2V7UVNOZy/ey8sevXLz4c158sfLY3FRbWy7rSvfczffeLDqOv9lbWW1OxbAyGLrd0QTp5VwXZ+LFgssqGuLITcAVE7rLuYdOGvT8RKjXVVXlw0la/aS5/9JPeZcMEAEAfKC8HsLufae/ohr6rFoOb0/mjo9cPUCUZblmWZSCwpXMUVSpJpWInlUECzHTSnNQBf9Kx8Nzf3v5Ty8AOeABFR+C+qAcbxy64Y6Hv/zMnU88cuGex86MHtp8cHrm3nvyJx/7gv36k3fZRx84aTcfPJF/9eH7p2e+9vjg9BObF+54+MFnFg8dupEPEQCA/wFzx4gJMbFzogAAAABJRU5ErkJggg==")

/***/ }),

/***/ "./asset/data/Crystal_Rain-minimal-noborder.data.png":
/*!***********************************************************!*\
  !*** ./asset/data/Crystal_Rain-minimal-noborder.data.png ***!
  \***********************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

module.exports=(__webpack_require__(/*! alt1/base */ "../node_modules/alt1/dist/base/index.js").ImageDetect.imageDataFromBase64)("iVBORw0KGgoAAAANSUhEUgAAABkAAAAZCAMAAADzN3VRAAAA/FBMVEUAAABhb4AdMUEiLT9VaX9LYXo+T2gbLTonSmFGXXkeKTg4PUsODxIRFRozS2s8QlgECg4cNUcGCg04UVw7VnFNcJI+Qk9aVkcsRlVPZHksN0YTFxsQEAoKCQofJDE6RE9NWnM2fYFPgY10cn40V3kyO0xofGw3e4K9vc4dHA45SF0UExQ7WV22tMMNDQc3OksrXWBUf6lUZIQcRV0hKS0+jZVQsr0eR2AvTWY8g45YlJ5XYFspSGJHWnFPc5I5TFx4iJsRExFAV3NRco9OX3lNW2oTJC92fYApM0JjaGpveIEzPEpfhKVATVRDXG1PaYA/W3gQFx8UGiYtNT8Ek0krAAAAAXRSTlMAQObYZgAAAJxJREFUeF6tyTUSwzAABdHvMDMzMzMzM9z/Lhk5TSxLhWeyxTYPyhJYoCJTa6Sg1ekNRhMRs8X6Cza7w+lye7yAD1R+IBAMhSOQFSWLxSlIIJlKg1Emi1y+UGRICShXqjWG1MkaTTm02uSdbk8m/QFIw9GYlsl0JtJ8QctytYbYZiuFHfYHfDuC6gReZyjscr1x5P54gtMLvN74Vx8VUg2fj0CU2AAAAABJRU5ErkJggg==")

/***/ }),

/***/ "./asset/data/Darkness-noborder.data.png":
/*!***********************************************!*\
  !*** ./asset/data/Darkness-noborder.data.png ***!
  \***********************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

module.exports=(__webpack_require__(/*! alt1/base */ "../node_modules/alt1/dist/base/index.js").ImageDetect.imageDataFromBase64)("iVBORw0KGgoAAAANSUhEUgAAABkAAAAZCAIAAABLixI0AAAFoklEQVR4XiWUzY8cVxXF773vvap6XT3dPd3T3ePx2DNmnLE148R4ATiAnE0SgE0WCIkI2MCSDSCyQCDBgj8hyoY9WWSVJcqX5EgoCAGaEMaxcPwRjzPTY/dMf1VXV9V773IV35JOXZ17fkeqTWFveVeRJdCMFSIpSBTa1PRJBQ26pjZi6gcIgQsHExeGizDJ3WhRTRAIgBxnjqfMEqhUPe0pTKROYwoAiWl37EXFEPvVDn1nCZ+3cDmFyzW4lIQtE/rOnSpyTbsBAV3IA5YIhCBD8jIISKCksZ1sd+ILo/FnttjeiH+8El9p6ib447zYZzdomtZKvLMZ/yQtnx2P77eSc2ncIzACElqDKQEyoig07dlULR8M/n4x+eFu+9VWXEc/vD1+/ePFb2/jn0Q/Hb0ujvhX2j/asj94MLgp+bbdUiBFS4QRrHe/ud791u76q9c3f9mNdl9Z//Nru0e/2rn70wt/3e69dHHr2s72ja+sXRfd2rq23XtRfLlKRpLdaOf5zV9/9dzPNrsvSw8ZqKd6tRWt3T1871LjxWvtVyLM8+LBh5M/hsYoVsvj4fTw+KForJquPvxw/Ae5SkaSlxov3T18t266RscAgQCxYy8MR3c06xf6P9eQL2m7N/7LwjzxZchn2TQb6VhNstNyXlLQRTT8ePKmZCQpecX68Wi/lZxXEFOkLXt3OP7kauf7Z+x63cRH839/Vt00KiJQs9nMo0OmgH4yGSMoyd8Lfzuc/0uSZ+zZq53vHY3/q4JKTJusaU6yAwS+0rmhja/F8a3pexXlmpLF1M3LKSExsOi8nM1HBaGqMPt0+oEktQnPtm8gwDQ7rEerlFBzkn/RjPpnm1sqhqAWB+V+nCR+TvJ9iAgMTwcJZvnMZxTH8aNy36uF5NdaW8JO8kcKgCBgXo6bttdIm0kSTXkw4gOszHh2XKkTZgYZEQbZKzoZZ0/QxSN4NA2DxEZCCSsNzIF8WLhQJromRbaWDMuH8i1FkdXD9XPudwm3AJgBRZPQEqfurxfFbFFlw+pzaxOhrKlJAwSkwBUwBHBRTMpwr3k2oaUAnnHaDr9Y9b9XLHcUlV0c8eUaU73fXNMGhPLsgBkACFEr0rPy1Kkismqtfd7qWgh6Snv39MtjehshAfCisoszVXuBlWTW2hvGklDCKjIAQIriSNthdjRyAzThjY9+c1IODMeMZk73R+oDhyUyisouDoNRLhpVgzc+eg2NF0pYaSAyxBisac6q0Z3h3jA/+sfBO1GkBQYOgQE4iaFW0/UYrewBkCEQUpRE//zi3SfzgVDCSgOSpoozm3QijN6/9Van2Xum99yizAkVAyOjJUtJCFGpErCqJg5z0GRKV17sXu0ur76//1ZEUS3pOS4pq07r9kwat/432Lt5++3VpU3JsQoxpzW1xJFzXLEHF0qMfd00LNZBc1mVK7Uz73zy5p3j/6RRq2ZXZuUAL3S/26/vjCf3Ho9vaWUrNfdUAYJizRQYGOHpIIhJCsUFJwZXCIUhDCuNy0uN9aPZnmqm56swb6cX8sXQhwWB9lgyh4CBmUEeEPlyGAJ7OX3povGpAoxNs79y7XRx3wnrOc/dcFw9Wut+TVEs8cQ3kFXgQEEL9ZR92kteiw+eTFkPziPp9e43cnda+BmDIw9FgCIrHldcbvRfiHTduzLxS1GoSZfnILCMqCwYtPY2qlLvFrFZ2uh/e8ZHp/l9ZGQGVbPLGmKFVrpBcafxDAHm5Rg9IyCBAiAAVKxVMCoQOCSiTmN7beXrc38yKj4vYcJcAjD2288ZSgkiQAYAo1L5haugJ9nDbHFcVXPPFQMTEKE2Jk2TXq22DMosiunCnziel2FccUZsNAD7UAUsABBBBV89ye5Y04rTlq13FGsI6Llg8EolihLH+bg8yPLjCOoE2kMFTMDymv4f9OkYMaHTtssAAAAASUVORK5CYII=")

/***/ }),

/***/ "./asset/data/Death_Guard_Special-top-noborder.data.png":
/*!**************************************************************!*\
  !*** ./asset/data/Death_Guard_Special-top-noborder.data.png ***!
  \**************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

module.exports=(__webpack_require__(/*! alt1/base */ "../node_modules/alt1/dist/base/index.js").ImageDetect.imageDataFromBase64)("iVBORw0KGgoAAAANSUhEUgAAABkAAAAOCAYAAADaOrdAAAABeklEQVR4nNXUXU/aABjFcW+3LDHZvUu2GCuTIgK0Ut7RUloGEyw6QQXpXiQO45iBaMRIMG5qprvYPu/fUq+8Wyy78PkAzy/n4pyJiadwki/Pf3seEjVkG4j4C/jD78YLeb0pFjxLhMWcg8gjxKuOGZmOEnAQDcln2Mg9NFbEJyQJvFUfIEuKxk45Mx5IeC2RlHMonhqRmQa6skk8XKRrLWJqOi8nX7iD1HQUcSZBdcVkf6ND0ziiHDinvb3L2Z5MWTV4/mzSHSLOxoiGcvQPLH6e7HLdb7OjDqkErlnXVQppwR2gp2TmPWlOvze5OP7Cr7M9/v7o8HtwwKp4Sz5RwEi8cplCiLO4kKXfsbg8aTnAzaDNn4tDatIVZm6FTMxFEs+biJ0iQ7VU5sP7CsNui/PeZ473W3xtfKT3SaFW8j8e0PQ8PsEu39wyQVGjsValmF2jbm6xrFRsuEgsOPV4YMOqY63HnE6MJkSaN5wJiQZLxEMm3+rJf35+B8FEvcKmI2clAAAAAElFTkSuQmCC")

/***/ }),

/***/ "./asset/data/Death_Mark.data.png":
/*!****************************************!*\
  !*** ./asset/data/Death_Mark.data.png ***!
  \****************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

module.exports=(__webpack_require__(/*! alt1/base */ "../node_modules/alt1/dist/base/index.js").ImageDetect.imageDataFromBase64)("iVBORw0KGgoAAAANSUhEUgAAABQAAAAUCAMAAAC6V+0/AAACJVBMVEXMAAAYEzIcFDsdFDsfFUEjF0koGVUjHEZKeIcdFz8nHlQiGEYiGEcjFUgdFTsYEy0WEigaFDIkF00kGEs0R2ZJeoZJd4gaEDgYDjU1R2kmGFIeFT0cFDkaFDYaFDQgFkQoGVZHdoNKeIg2IMobET0ZDzckGE4iFkkeFUEgFUVHdoRHdIozGNAgFFIbEjsbETscETsmGVMfFj8mF081RmlIdYczGdAwF8keFD4eFT80RmUiF0gkGExHd4Y2IMkzGNEgF0EdFjsgGDsdFT4eFkIlGE4kHUtJfI4tGLEeFzkZFCeRhnC5sp0qJDElHU9KhZNJdJ0zGNIgGTsZFS0bFDdAmrJlXVPMxrRNkp5AVrcxGM4dGDIYFDFNSU1W1+NQtsnMyLZPnapBXrorGKgbFzgfGT28tZ5waV8xK0LQy7lwaWBRq7hTocEfGTQdF0PMxbHSyrXGv6XCuqPX0sAlIlFbw9EgGToeF0woIj94b1qimH22rJfRyrcpIj8nI1YjGExg2OMoJ3IdFjgYFDIoIjyxp5CQhWqMgWYmGFElF05FfJ1o0+sbFjYbFjSro4peVUoZFTFFfJ4fFT9qu+hnneIZFTRPR1NBOUYnGVQeFkAoGVdvkuNxe98gGkIZFDEjGEYjFksZEzIfFUMiF0pKRZN0Zd92V91rR85LLpNNRpkpGVkZFTMZEjMcFTojF0wnGVMnGlF7Tt18St4qHFcfF0EZFDMUEiR0Rw+vAAAAyklEQVQY022QsQrCMBCGr6G1l4SqdRXcCk7ufQBHwcEnEGd3fRafQp+iUOjcyUFdVXCTQrwkDVbJNx0f/13uAuAhgMABitniGcLw1XdSqbCViXOgrYqoCkFeJt8kEWsppsaYJJgoSf59yII6GTxGHXlPY5MU3SRXytf+J1njpOgke54kXfSmqXr5n5mRXomBIGreUguRnkjyI2JeIZYlYpUjxgVdt5rb5huM7T9tGgYLzq+IyLOMIyaDg1xSu9zvZsKSbOW5EGvw8gEL/GObfhoqMQAAAABJRU5ErkJggg==")

/***/ }),

/***/ "./asset/data/Death_Spark.data.png":
/*!*****************************************!*\
  !*** ./asset/data/Death_Spark.data.png ***!
  \*****************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

module.exports=(__webpack_require__(/*! alt1/base */ "../node_modules/alt1/dist/base/index.js").ImageDetect.imageDataFromBase64)("iVBORw0KGgoAAAANSUhEUgAAABkAAAAZCAIAAABLixI0AAAEIUlEQVR4XkWQv6smWRGG3/etOt1f3zv3zjjIzMiuiihoIOisiLAmmgkbKJgKmvpvaL7JJgqqYKBgYGpgIIiBiKIgGCgYqIg64M7Ozsz90X3q9Z6+H1r9UF1ddD+nqvmxj3wFCr0MwIBl0iIBg4AQIAkBJAkQMPYgBNFVRgfKcEJiCPfIHrwgOgjLIGGLEEFSgI4uAvbeDIBWt2UYQFJEDB1n4px8krBpsv4/2i4SIYEmRrJIjQphFlzDZVICU2xCyB9QleKfQkccdaRJhhwkCQKARMiQUOUyDTgeLq9hFiYig1NyTp/F9SsxPZ2hRuawsAVCCnGK22OZ/F+hIEOMZFnPiJfhV4BGzzeEl3zxuuJ5W/5IXBe6URJSFaQIwBwFBXgEynTCHEV3/KOtH4Qbaw5M8mlsD/X0o7r/08WX5U5vAUcUaUEgGJQNs2wDiId3PgkqTIL5PONZu34fcCewhG/yebv4TK4fnue/zmJGpJCpDEQq5BYanX1xJQh5NxnswGWd/f7w4tPq9+VZdaBP2B/o+Wtx982p3qkktTEUKkgCBNk24KRBgtgxaGHDye8m/nl++8vdi/qiZWEuWr9Z8ZcJ30q9g1iVghAAC6ZJWjp6SGigAIMZBJe/H/pBeYiYqRm5KD7l9gMn5hZz6NA4TXFosUzRUnMaJo42t+DULh/PF58gztHPzEO0A7MxknFA+8USP5lzZrvKwHHNBGAbThMkQV1+qF09PvBuq3PiLPqp6kTTSWTj/IfT9vMTXSrebXmp1iOpUIZEkoCBciW9q8z5b6XTevk6MH65amEs0WblviaRupYciRaMlBIRCJAEAdsWAewPXD3/aXvPj/r976Ea2XKa1RZNS8Rnr+a3nrWHjVOyJTOjzdmmzDZHa8pUS2U8OnssSkgoxAxI1p1fT2e/nVqf9HHcuKaTmJpO3tjwm3t5GelsyHQkB6EQx5UAbICWzb5ngO6qmn5m/mrhg0N846qdKMPLm0/4y7v49nk9FdYIZ5oEYHRXmiYMF1xysSq2LoxaVdzMF6Wvn+G9U/8i4kvPD5979/D5i8uvvj/+FdHJUhZBE0gAPmIc6ehF90CptqjGKl2A35le/PjRemc6+/6T0+/++/prr8Z/1K4jA71sI+0iyyiPKHAkqGizrI60w45e6o4r5Nt++saj5STvfuFyelD9rXteYQJkGj5OxFHaAMHbRiHowVZpp6lyduQKvsT1Dw+VyiqYqLKdxG0QkAfg7jnuXr4VU8WtpzPhsFnuLK3oAGDDHZbhPWCXWXCVC+6+Ab1YhbKryoRR5XVzL9Rgq1rdV9da1d0FF1BG2d3eCjvs5YEx1PunffPWa4Oret/6ttbobLVtHqy9q2C7jM3edl3BvWoYh6hsjP442Gtx27zWkPZhGcZhuR7F+l8aEoV3LhY59AAAAABJRU5ErkJggg==")

/***/ }),

/***/ "./asset/data/Deaths_Swiftness-top.data.png":
/*!**************************************************!*\
  !*** ./asset/data/Deaths_Swiftness-top.data.png ***!
  \**************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

module.exports=(__webpack_require__(/*! alt1/base */ "../node_modules/alt1/dist/base/index.js").ImageDetect.imageDataFromBase64)("iVBORw0KGgoAAAANSUhEUgAAABkAAAALCAIAAAAFlbGkAAACZUlEQVR4Xh3MwYodRRgF4PP/VdVVt7vvvT2ZmQgOKoqIYlDBjcss3CQLXfkSgu/kM4grIStBRhxEhCCaoBtHjRoTvTP3dndV/ccmh8NZnMUnp7fORFVX164xTeRacQTpvbt35KVtz95Etf3lg1L3pjPuzNxVPKH952zvbBIWU7eD2VIPVYoX52RV2bsFwk3R+51qhAUW1nGysQAqLtjnKrczb1bnDVoBT5+FRBEAHrJAAtegK3wGuT/b+NsJQkQl99P0z2U1Awlq7Fs7L3nY4fXqYKBJHTnRCEB0qQSRxmMrOFH3Sxe/vRGaLauGONQ81zKTRhImaslLp4+a+qXKxulQ0VMiNQC6xEMaakdsgvuhc/f7GLf1kFUbDQ1ACggSALDQTlpFo9nlb4hTwxpIkGDqqAvkOpMBOrf6MKVmaxPqXJyPEBXvfFpDFQKIEAJpgusVgU+Fp8YtsBLEZ5yuTDcFRw4PvaKR6lEFBhLVinFW1HVKzgU471etqLnQC7045Q48BjaCJIh0w9udHDtsvV54b5FFCDXCaKKmZfrkte3dFzd9Fx/sqpmRZmWu0wFCY5V3KmaTDBZ6DOCpyqWLsbc9yzRqJERZ5jLVj28dv/xqF2K4W0sO8Yufn3J5c87jqEnwU8B7mSeGyaTAY604d/6v5Js418N49SRi0JS86J1Xtm+9O6SuDcGblY/eb567iJ999/iPx7+X8ZqjNkNXPk1ym/qSIVN5L+mjlVos13k+7PN8vf/78sMXnr9xdeX3h34T201Ky67Cj9//e/HVrx+8cax5LHWueS5XU9CVOx/q1xFH8j8b2ka8n/pE0wAAAABJRU5ErkJggg==")

/***/ }),

/***/ "./asset/data/Deflect_Magic-noborder.data.png":
/*!****************************************************!*\
  !*** ./asset/data/Deflect_Magic-noborder.data.png ***!
  \****************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

module.exports=(__webpack_require__(/*! alt1/base */ "../node_modules/alt1/dist/base/index.js").ImageDetect.imageDataFromBase64)("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")

/***/ }),

/***/ "./asset/data/Deflect_Melee-noborder.data.png":
/*!****************************************************!*\
  !*** ./asset/data/Deflect_Melee-noborder.data.png ***!
  \****************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

module.exports=(__webpack_require__(/*! alt1/base */ "../node_modules/alt1/dist/base/index.js").ImageDetect.imageDataFromBase64)("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")

/***/ }),

/***/ "./asset/data/Deflect_Necromancy-noborder.data.png":
/*!*********************************************************!*\
  !*** ./asset/data/Deflect_Necromancy-noborder.data.png ***!
  \*********************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

module.exports=(__webpack_require__(/*! alt1/base */ "../node_modules/alt1/dist/base/index.js").ImageDetect.imageDataFromBase64)("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")

/***/ }),

/***/ "./asset/data/Deflect_Ranged-noborder.data.png":
/*!*****************************************************!*\
  !*** ./asset/data/Deflect_Ranged-noborder.data.png ***!
  \*****************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

module.exports=(__webpack_require__(/*! alt1/base */ "../node_modules/alt1/dist/base/index.js").ImageDetect.imageDataFromBase64)("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")

/***/ }),

/***/ "./asset/data/Demon_Slayer-noborder.data.png":
/*!***************************************************!*\
  !*** ./asset/data/Demon_Slayer-noborder.data.png ***!
  \***************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

module.exports=(__webpack_require__(/*! alt1/base */ "../node_modules/alt1/dist/base/index.js").ImageDetect.imageDataFromBase64)("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")

/***/ }),

/***/ "./asset/data/Desolation-noborder.data.png":
/*!*************************************************!*\
  !*** ./asset/data/Desolation-noborder.data.png ***!
  \*************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

module.exports=(__webpack_require__(/*! alt1/base */ "../node_modules/alt1/dist/base/index.js").ImageDetect.imageDataFromBase64)("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")

/***/ }),

/***/ "./asset/data/Devotion.data.png":
/*!**************************************!*\
  !*** ./asset/data/Devotion.data.png ***!
  \**************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

module.exports=(__webpack_require__(/*! alt1/base */ "../node_modules/alt1/dist/base/index.js").ImageDetect.imageDataFromBase64)("iVBORw0KGgoAAAANSUhEUgAAABkAAAAZCAIAAABLixI0AAAGh0lEQVQYGQXgSGxcV73lvzd/m/EsHs+Mx/Z4kky84jhNmkJE00JIiUJZeqLiwKUce0TiVCQOIHEoEgKxHBBCQQKVRUAiogANICrHdiI7cRLHseNMxsvYs9nz9/W9h3Aym0YJlMmlS8VSvjx6aqrWM1uqqsuUauO1K0ttBIm1fCdfHcumUwzCkROnBGeKLquKKsmypquqIicSMlZk5Pq2TBU/EEwIRZYo1YcLY4FgGCGlMu0EIFmd03IpRVERhoP5Ao8YREJJ6lTWAOQAYcYBZwyGDCOMWRQPV6oCCRZ6uUIpqQ/0Oocc0U99+6eUanp1wt5ap91tSc/khgq9ziGEKF0YdUwDMiYEh4IDTBDBGDLBgQhD79TUGSIPHLX2zrx6MXJdL5GkX//OlOSbStKy3fz2YuXcpf3tZ5JMz1+6cvjyue8YWCIQk2QqrSiqrCk4UyoCBhzLNPu9i2+9kxsqHOxu10ZK2W9+tyUPvlvgDSN0i5OzxG2sLUZYufD6W/cW/vNy/YkkU8EFRiTwnP7hYa/ThfnyMJUViSZaeztUVz/48NftzRWpdr4//Wbj0ZPvXa4ttO2tKDHMnN0//OyVz13dXFvd2d4aHS35fgQQVTATEANMup0WJLqUGxrSElquOG4abeeo9+Pf/T2uzDzbqiuh9/bZkxt7Bw8PjmZrtZF04gfvf8s4tl67crWoEYClwPcBi/qxlNUSmfQATg3mXNuLw0jiQTZdePP9D/ZH5y/qbL6coonEybyOeTyaSc3llMU+K507WxHG9r2F+vrjncZuHHmeF5iHuzKGAEKMISeERkpm5LNv4/d+aJbmpiVHhNFUXpvIaQoCgyltLJdsHNmtnXaAk+sTV9DYFN7b6Hea3d3dg92GY/Q5IolUBp6+9u7gl97LTr8SEBrGrBo7l4p0OkPLCi4OKAgACAADoNu3Ns1448B4GZI1nI4BUP22s/hvVF8N+2bg2bO1KvzyrXpcGde9oAzcEwo8r4ukLusyGSJQhhBAIACAAAAAeyE3hTD7zqoRb0bEUVKW4yCv0XqyL/77t9MlDY7NzA9ceMMrnVEvXIkyhRGv+4UcmMskzg3J+aTCuIAAIgTrXfNxo/O0Hz1TMnWYircfKc+X0Mon3u4axRQMlWuTs5LZfml8tDaUzU+170bzl0uvXQMkymsSlemB5Zd02Y8igaW0JnOayM6NkdXVT6/fdz650exauZkZNPGOBLGiEKKl4KnZmUKplJB1GHqvn5u31czcV75xtlIy+lZomq+eHjYs50XbqBTzdlL9658+ktYf1VvtwbETqqpSHnEOXMc0/TAmKq5Wq651FHpBaWJycWkxIStTw6WngexK9NjjBZ2ud6xGy9yjyc7D1aCxE9LE5WtfLQzogW0FEffDIPA8J2ZMSuAjy5C0dByLR/cWhioTb3zxa3/8zS8U1zEmP9Nyw5MaXm9ZzeQQ6Wzc/PD7s5+/enr+fLy/fewGIWMACMvsR0HgRiCKQpwrlUPX6vcPqxMzk/Pnbvz259nBQlqKTCm3oozMYm9FpPf298id32crp4aTlFASU9XuHBrHR14YCQADz4kEbNS3kGP3TKuXLZSpmvzXn69zBnLF0oudxsHNX/mI3OmxOklGWysPFxeqE1OyNmC2mtx3uZL0PIdHgds/llOZQqW2tf4UxUGoqnocsK0Hy4CDfKlc39rYb7eC/v7IzspGIi+ae/zR3XR1gvue7YcQQG4fx/0WonLgWlxwgHHv8KVAHEGGAjcw+23AhODAts3mXsM07WazuXX9RyRLkr3nzovHA8UyEaHjOgEDfszcMA5c27TdTLGc1FP/uPEXq28iDoEAQsJSFMeynjGOu75txyE3HcdqboZGdPhic3BAGx8/YVhW7PRDzl0/5DzudtrFsZNEVm7fusljpioKghwiCELfV5NaHBos9FnMeBh4rqsQ6t67t39/+fFuW5VlZSBvelHkHAMIjnrdsdo0oomFu0v3l5bazRYSAhNKWQyxBBjgMIZRxKSEJAT3vEiVZdLetuuPA89Ze/jgZG1ypDxs2S733XShbLveyur9ux//k4cRwpLneFjSCUQQEACEiIXgcYwhjhgjGBOZAMDMXkfCUhwGt2/dPHF6Yny40HZCwzT/9/HtB8tLSHCJkiAIEJIwUQgWEHAAEAYRp4RwAKIgkFVZcO57URwEEEIiU9s0l5fvHlk2A/j6L3/iOY4AIGaMQsS5iLn4P0SYpvTA7mnNAAAAAElFTkSuQmCC")

/***/ }),

/***/ "./asset/data/Divert.data.png":
/*!************************************!*\
  !*** ./asset/data/Divert.data.png ***!
  \************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

module.exports=(__webpack_require__(/*! alt1/base */ "../node_modules/alt1/dist/base/index.js").ImageDetect.imageDataFromBase64)("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")

/***/ }),

/***/ "./asset/data/Dragon_Slayer-noborder.data.png":
/*!****************************************************!*\
  !*** ./asset/data/Dragon_Slayer-noborder.data.png ***!
  \****************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

module.exports=(__webpack_require__(/*! alt1/base */ "../node_modules/alt1/dist/base/index.js").ImageDetect.imageDataFromBase64)("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")

/***/ }),

/***/ "./asset/data/Dwarf_Weed.data.png":
/*!****************************************!*\
  !*** ./asset/data/Dwarf_Weed.data.png ***!
  \****************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

module.exports=(__webpack_require__(/*! alt1/base */ "../node_modules/alt1/dist/base/index.js").ImageDetect.imageDataFromBase64)("iVBORw0KGgoAAAANSUhEUgAAABkAAAAZCAYAAADE6YVjAAACkUlEQVR4nM1WTW/TQBD17nobJ3G2aRzbSZ0P6tA0JR+t2iQogqqVEEKIIwKpHLhw4EAv/P/DwzvOulbVJm7gwFzm7Yff25kdj21Z/6tNrqcwWNYlNu19ltXatYysFtcgyxLeKw9c8t1FxldTHMcjGKxJM1yVaJ21oLoqmWO7iwSnAYQURKBOEjKbofO6AzVIsGAIz0NYjkXrebzRkDMijhT5aBmh2nIpEk0mXIHWeQtW1YLYswl7Lz3CWwUMNHqu796fssQQzkKoIwUtru9i323Qunfs0TM0n+KNInhsXOlX4NTLOLw8hKgKBOMAcl/Ca/i0riMU0obqKHCbZ/PboslELm7msCSjyCq9CvmD0QFYQhZMAhzECeYpTtPL1vONzUK5e4HTcwhHi4h8MAvWa2n6GGMUWThrZaRm/kmRvJb2OhUGP/TNURNcCPinfpba5bsVpL23vcpUoDIiUbKfFGGCo5FUlT6IwWvB7ZY//WLWfVJE79Ok3E7fpTzeaN1hhyrl9tOCiH7drtD2qZ0gaFBJI+wH5PXl2tQF0vzb5YI97O1lTA/dJeSrsz6uLmIi/3h1AsEFfnxekm+OfLp4vfceFzAAaPuKTq/t/WpE/vf3N/DrFdx9W6FRs8AYp4qy1i9gNI/AWYEmCQCa3MpVscaL8YTwzSLGzy9LSNvGi04IKSW9HzplsmiaDKkmmw7bmYiJik7tlolM79Fp8oMm2qN28Q6cbyOq6iA/zkp2nZJeM22cw8EATsnZTeTh2OCvH6Y46rrg62oqlUrP+44UEUlXGK7nMULPff6HqohIL6pg0B3u/hV8SJqrsGyN8ySKy9O/+2kwpGZo9Mx4dd7HzXz8T/5MHiNJO+x0gk7Y30nkD2+qAZWdA29LAAAAAElFTkSuQmCC")

/***/ }),

/***/ "./asset/data/EE_scuffed-top-noborder.data.png":
/*!*****************************************************!*\
  !*** ./asset/data/EE_scuffed-top-noborder.data.png ***!
  \*****************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

module.exports=(__webpack_require__(/*! alt1/base */ "../node_modules/alt1/dist/base/index.js").ImageDetect.imageDataFromBase64)("iVBORw0KGgoAAAANSUhEUgAAABkAAAANCAYAAABcrsXuAAAAgUlEQVR4nGNgGIogMjnpv7uf73+aWRCRmvrfNzSEhhakp/8PT4j7r6hrQBtLIpOT/4fFx/4XEBGhnS9CYqP/G1jb0M6C8IT4/yZ2djSMh8T4/3pGRrS1wMzGmpYWJIBTkrYBjVJSRFIi2AJHL08aJVWoBQ7ubjTyATSzOXq4k2wBAASyOcs71TtLAAAAAElFTkSuQmCC")

/***/ }),

/***/ "./asset/data/Elder_Overload-noborder.data.png":
/*!*****************************************************!*\
  !*** ./asset/data/Elder_Overload-noborder.data.png ***!
  \*****************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

module.exports=(__webpack_require__(/*! alt1/base */ "../node_modules/alt1/dist/base/index.js").ImageDetect.imageDataFromBase64)("iVBORw0KGgoAAAANSUhEUgAAABkAAAAZCAYAAADE6YVjAAACW0lEQVR4nLXUXU/aUBgHcDKZiG5wgNoWocIUwjullNeKoDhQRkEEURkbKkSXbHFbFi+WbNkn2C73NfYV/ztQLr1ApE/y5JyepM+v5zwnNRhmjH+/C3j96QbR7AFmfefRoeaT+PsrBSnj1w/xyTWUL09hCUk6It3PcLeuYQnqhPjECnzf/sB9MoS7/UEfxC9W4Wzdgi2pcNbeUuhm8ZA3R4u/GcC4ZAIbzMJ1fI01s22xkHf4He7GFUwvHfCUunDW3y0e2ZaP4Fb7EE5v4Ol/gdm1tfjjCog1eEc/sH37E9ZQUp/GBzJNCL2vk9tljaQXj4RjhxDOPoKrnOO51UGbfqXDzRrcY6M1BKMcYdnOwtO7A3fYWxzkK7ThfX8PoTOCXdrF8uYWPBd3cKkD2BKFp0NCfQC+NQJfvwRf7cIm5mB8FcTG2R345ghsvgLLU/vD0UKcegmu2gdX7sAYy4JrDLW1gw7YUhNEKmIpEJ8fchQbWD+4AHt4TqEuzGEZvHoFZ70/6Qm3dwJHrgoSz2GFFR4PkXQZRC6BJIqwyWUwuw0w5TaY0jGdq2B26mCyFdjFIlZ9Igzr7ByIvA+SokmLkCRNUaEjRSNZkLiiPUczIKEUlja2YeBc8x0ZSe9PdkJSJa2wVASJ5emaomWUgiGZIl4YGH5OJLlHAZrjUdqZIooGidMMJjXEwc2HsOL+FKHFJUWbR3JTRJkcFQlMkaeE1Z/QdjAumt7Tvn7cl2ge1oCEVX8cz+xzNP2hMLFumJybIOHUpA8kKGN5KwyDxa7PH9m4ZsE4V14wMwP/AQrLFqu9Xs6/AAAAAElFTkSuQmCC")

/***/ }),

/***/ "./asset/data/Erethdor's_grimoire-noborder.data.png":
/*!**********************************************************!*\
  !*** ./asset/data/Erethdor's_grimoire-noborder.data.png ***!
  \**********************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

module.exports=(__webpack_require__(/*! alt1/base */ "../node_modules/alt1/dist/base/index.js").ImageDetect.imageDataFromBase64)("iVBORw0KGgoAAAANSUhEUgAAABsAAAAbCAYAAACN1PRVAAAEt0lEQVQYGc3Ay3MbhR3A8d/KWnslrZ7WW1q9dlfv1ftpy6uV49ijmKRxXQ+koaGkNGXCTIamM3AAppdyKiemPXV6gPbE/8CFnvp/8D9w/HLj0BnTkNQz/cj/LX1f5uG4bHZDYspN0vdlPrn1BvPTM5y5/EXbk6TcBJ8qhYNz+fvZw4ccX10xmY3oV+WfchMCAWl37RyVUow7Dx8wsjIcdfL0yvIP+V+zUwkcI8K4lqRVSLC0s/SrCTyniOcUCarSk1eiH+uhsOQCAWnP6hkqcR8fvz3mT+8u+PTJgtfXTVbdHKt2nrVTJKTJOJWWgejHuvwU0ZBcbFfy/uFQ/taq9JhYGTb9PN6gyp1Fnd/dG/LJW0suvDabfolbwwqTbo17D64oN+WpvDAtuLWMKvfuzbA6bWpmlbpt4naKTDsGH/zK5aNfe3z89obttMH5sslhx2BysGLheSw8j0xensl/oypSiZXkX+NWkol3m+nmNvXBEKs34u6qw8W6Q3cy5RfbA967XPD89RX3D9v0aklMq8Xx2Rnz1YqWM0ORwDvyY3Z2pG03ioQDfga2weHZa2StJqN6gZM3HxFyztGMA5zpkjfPpzy9nHO56eNU92kYCWpWk8F0yu1Ggmd3LVJJacp1FAk1/P4E9WyEXinB0MrQr+Xojaf4zRnl336I+e5HhM0xxz2bi0Wbn296eP0arlMmn47RnEyYOBX6D95AFGMo11ElGzXi8kW3GOOwled4Umczc2g9/j3J195Df/45uZ+9g+PeYjuuc9IzOZnYzJtZBrUkqXScSCzGsp4hmpyjSqws16ka8unCSjO30lyuu1x4A+57Xe5/8BT90YfkZ3coTU+xNls2gxotI82qW2JopqhlooRDQTSfj1qygKKIJ9epmvLJgbdme7LkqFHibNHmZNpkYhZ48taayydX/OHxHZrtNkt3wWZQo1WKM6imaBVjjGtJRNSvZEe/EiW1letkc/Kb6YHH0l3THQ0ZWUVO5m1OZ022szqNTIJqIkLHyPL8l0dYuQSuU2Vip+iUYtSzMYKBJqoiMfkxPp+0FEW+6/T7LD0P72jOolFk2ChwOmtyNra5Wjs8vT/HSujkgxpHfZPDTp6ZncLKRdlTo8gL0R09ostfg8EgzVaTZi6CU07i1NKs+xUenPYZ1YusnSrrQYXHdye4TomxmcbOh4logijGUF6E4pOctiff5PN59HCYTC5NYV/HKcbpVVKcz20mVp5GIc2oVsDtVxmYGZpGnHJKQ1Pl34pPcvKiFJ+MgiGTnGmTshqEkmnSEQ3HiDOuJnG7FYajPrZlsp3ZOJV9qmmNgCrfKj4ZyU+mGMPW6V32qzaxYoWkrhDY3aGRjWA3bMauS6PTwWnbWNkgwV0FUYyhvAx7/YzR1SMqC5cddQ91R4hogiJCybaZuGsa7TZz16VYLiOKNpSXsRuUJ+FMlcHlQ5LmEkXiDUXijXAgTSYsqJqG2esz9zzmqxXFUhlRjKG8LEX8f64drFEU+aP8YPdKFO2r8P4+WihEvd1mul6TyMrXqmTL8ir2ovK+iO7Kf1B88plfVYnFYqSNESK6KzdFlWVUEfnS7/cjorty01RZRkXZycor+B5I6cwgTH4UQQAAAABJRU5ErkJggg==")

/***/ }),

/***/ "./asset/data/Fellstalk.data.png":
/*!***************************************!*\
  !*** ./asset/data/Fellstalk.data.png ***!
  \***************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

module.exports=(__webpack_require__(/*! alt1/base */ "../node_modules/alt1/dist/base/index.js").ImageDetect.imageDataFromBase64)("iVBORw0KGgoAAAANSUhEUgAAABkAAAAZCAYAAADE6YVjAAACaUlEQVR4nM1W227aQBCdNTY2BCcEsE0TA5h7aFq1KkAgjVrlvZfHVmqlpFL7/39w6tllsYUCGNKHzsuc3bXP2bms10T/q81nATQ+PSPsevYgq3oJWdgg2I5Ap0cwTXG8yHzqYRj1oTGTalwoCvSGBL/Ows8QaXQIudUuG80Y5wTGrwga90cEx1HRdfvS7xdDynjs+eqlq2tCpabSw8QnJySjYG9aKqKwqfBeAQ21XrmiRPoxiRUT8G4vQgKLcy3OShW5zgL8Ds+v8E4RPDUO6oSSKzAcE4pFQtQluC6hdl6V67ajiu8FnMZkfl80a5H3N5HMP9vFpYqw3VGkUU9FZhgKq/Qm8zuFUnVBEBgSc13YogGt1gS6MRZCRcZYc+j5rSJpLfZcbI03fStSXcaR6dR+vO3DMvP7u6zsJUT5/HYRw1CF5ppwyhiz8F4BtvTuvbdvtorwc+3UWVI4g0gUubKo469fJNHo8QHFwJfYqdWkD8NT6bm4tp2ceIUz2IvZVL40+vUAf/IO9flEkl/e30PkTIy+f0POyMm0qFMuUjiDAcBJEMjdszXvPkg//vMbhUo1Fn4EuS6EMGSb0uoAjl4SjHgukwCTU6qLGQ+vZxLXl0sMfv6AYVrwGw1YliWLLVPmHBAFOyYrX43WIjoqxpYra0H15UKmyffOEXUK2b/A6c+IVXKRHq/xKiWFMJR+0O3CcZzjRDbHGrc/f4LTaoEMY9VN9mH3SBYRtSIQLBYoeN7hF1UWETsMEYXD42/BTdJUhyVrfD7mt8/7adCkeqj19NifTtC9ufsnfyZPkahuej1H6LePEvkLv977YZBhwmMAAAAASUVORK5CYII=")

/***/ }),

/***/ "./asset/data/Freedom.data.png":
/*!*************************************!*\
  !*** ./asset/data/Freedom.data.png ***!
  \*************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

module.exports=(__webpack_require__(/*! alt1/base */ "../node_modules/alt1/dist/base/index.js").ImageDetect.imageDataFromBase64)("iVBORw0KGgoAAAANSUhEUgAAABkAAAAZCAIAAABLixI0AAAGrUlEQVR4XjVVCWwU5xWe+ee+9pj17FFsx7s+Qi1K3XK4bpNWQWoQLZdoQtIgjpLSIgnUBAhBAYREqyIiFCVEKkoamlCSQIjKEY64hQB2drHBuGDj2g7GJ97d2HvPXjO7O7N9ttrRand2////5r33HYuxgoj9/8IxjGcojmNphnMoLpfb5XA4GIYVJIvNZrNabKIokQQB9xaLVRRFC3xYrCzLipLEixLxzidfbHr5ZV9Tc3XtXLusIJpLqSk9n8WMAsMwAM/AXoYmKYrl2LJpwI3skCkClctliqZJkiwWi/l8nqZpfPWvN5088WGJwkrY7EvDktNTnQH/2c/PdNz4VzKZtFmtcAYgeI4rlkqapsH5UrFolstYuYwIVCqWACiVUtH5Ux8tX7XGyGnTY2MXPjv38V/e9rdeqKt0vX/8eNeD/tff2JvO65FIxGKTMRzlslmrxQJt4jhOUZRpmlgZIwjCME1EEKQoWdu+PLdq+YpQMBQcG5adHqNsEgiHA79cuWrXzh0vrd+wdevWB123XR4PxTA4jqAiNAsH7/BKp9O6pmEYLBglq9UauHGNpqkb7e23A+0P7t3t6gh8euoUQ9GbN/2mPXCr9cqV/QcPhsIhjqFwBAzB3Axok+M4w4CaTJoicRzDZVmWJIuaVgmaff+D4yxN+m/e1Au67HKvXrFCdlQcO/4hT6JXtm87+8XF3a9sM0smFM7yYrlsQsuABbh6sVjQ9RkskkCiZInHYslUyldb+9Onn6qqm5tKxOH36qrqdevX9w8NJ2Lxpc8u+fwf5w++/momr0XjcdlmE3gBqMikM9CrphcwQRBARG6Px+N2gcRWPf8CkN376PGlr/xX229fuNrW2tbxOK7eGxrvGg5OZIr+nsFbPf85cOiwzWYnEALZgcr+J09Qj12WOZYtGYaWzyOENc77QWhyfMNvtzQtaK56wqvp+Ttt1wmKrq6qNEkmn9ee+dlPHAL3o6eehqIS8fjE6MjPf7F83vwmEmQNLAC7kiiClGB2wfFHq1946VcvrpucnIzEIkP3u+fUzbXb7NlspqDGg8HwyCPPCf/XAsudPn/J72/3yHbJrtzp6kYMAzIxsrmcXiiA6nCE5jY2zl/QPNj/cGryMU0gXddrfL5kIqbnMlW+hmUr13Te8h87ctg0S8lo1ONQHIpzKhwUBYYAkYCUwFyAAiNUVVUQpaYfLuJ5zv2dyjJOZrPZxFQwPj3NcbzirGg9d6b7bpdDUQb7+wSL3So7Wi+eq69vqKypJUhwB01B52CrRCKh69qhI2/Bo6aDj3GSKem5CpdbV5OCVa797ryO6//sv38fVkGSqpq+13132YqVdY3f67vXXTQMgmU58BfMC6wADIKg8tl0ZOpbuOE5NqMmQETgDZfbHQ6F7vjb4mkVLBWPxoCltJpqnP/9OXMqEYYVikUSOgTlzviLZkqlosBxy1auhlCITH+bjEVJhEpGHtzC5bWB3n+rmQxFkKOTI2XDDIYmpiPRh319Hqez+25n9RM+hKMZU4BSwBVQ13Mvrk3FY0ffehPgZXe1VigkkykcYalUgkR4OByGeIGAS6oJXrTAhIeHHoKhnBVKTY0XrJ+DBgERNNHQ8OTf/vrBn/948A87d2PFwp3AddAdnNRzOcw0EEnmc7lA4BbCYDsaHRkBC6czqqbr2UxmfHwUgY8EuCQJuO/p6QERnT574eu2Gze/utZQVx+ZCoPDgRnYDdJzulyy3T7wzaBplusbGmD8YKOKCuXRyPDo8DBpsUjQWjo1c0GkAUf797yGEHp1x65PPj7p9fqAdQrhwfGx0FQ4k0nvfG331WtXPz359z8dOgwZA5xMjI06FcXr9RIQwTACcLskQpdiNBb7ZmDg7aPvfnnlciqdeWbJklwuN/RwsLenZ2BgoL7+ycWLFp088VEkEl367NL6hvre3l5Y9dbUEEAihggYPlBAkgSof8ZGFqmv9wH03vLjlonx8Xg0ynK8t8YLq2ufX3v58pXLly4ikmhqasqm0+FQsNbnm6UoSQLrFEkA6zlNg9YKhQJIpLOzo3nxYnhEGccrFMVmt+l6Yc2a5zpvd7733jGIqXg83hEIbNy8GaTOMAzUMzo6gomi5IBFSBC7XVEUSZIgNlwul9PpfGPv3tOfndm3b9+ChQt37Ni5bft2ZvZPSVEqYBoA8c7Rdw8cOLBly5Zde/Zs2LgR43keaOQ5HkBFURBEcTZpYXqS4nQubG6Gr5BNQAsIAaIKtkE0wz5wC4ReS0vL4TePrNuw8Xe/3/pf4pk8Akw1uqgAAAAASUVORK5CYII=")

/***/ }),

/***/ "./asset/data/Gladiators_Rage-noborder.data.png":
/*!******************************************************!*\
  !*** ./asset/data/Gladiators_Rage-noborder.data.png ***!
  \******************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

module.exports=(__webpack_require__(/*! alt1/base */ "../node_modules/alt1/dist/base/index.js").ImageDetect.imageDataFromBase64)("iVBORw0KGgoAAAANSUhEUgAAABkAAAAZCAYAAADE6YVjAAAC5klEQVR4nL2Va08TURCGT7ttt5Tt9gbttrulpdwKFmO0RG6ltBQKVRQIsQogRAkxYmICRozxFiUmJJgYjcZI4ld/5uuc7bYgfGAL1Ukmpz3dznNm5p2zjJmwj8UVfH2UxpavCbv5dZj5T9225RWxJnmQZXH0M+XfQIpCRAeMk/N1jPxtzNNYWIa1UfCYDsmTF8gXRYZXiSD2U+mLw/ipj0O4TxqgnJEV9/tuH76E5fMBMxScQ8ZPlCurQypg/v3N/AjebQ5gL3m1PtCClsMIAcYoWPbYqSvO9zXar/w+LwaxFxIxzTrxZKAOBU5JlzHIolhxqnjpDWFaaKutHHDkMR284dJwgyCDtGcaMkIAHmBHVvBb82LOHtXX14HAXxCe5VpTBAtCO2YJkmQt5iBZeweGKQCveRVSskWxKSn4Fgrgc7AC4n3JCyoeByz4FJQxwdrNAU4qikMOSTnVTLhzUFUIo/RsgSXw3hfEM8VvFhLTG1tVFIfctDdjSwrrgIPWFr03OQOSZiHMsA7cZt3oaUudDSnKV4zpPpqLJVFD0RrDr4gP2wTknyeMwczoWfBedKGfBc8GbAfsmBK0WvDjzkt4T9RqEi4YWfDDlCiLNIucDXjQl8TP1RRmbKohyWgtm9MzEtcz4VlMUi/qUtSG34IfqrsWiEs4a1FPQarXCT8AzyJnVlHchgUJGx4HMlYNJZeCWYeCF1TCIYKN6tnFapCSTcGiI4I5SyeGxIR5yJ2+6xi0ejDg8GFZkUn7VuwQZMyQ6ag+eBXQerMbH1qdeC6rSJpR1EmTmIA4cyNv96Ms+zETCFb6YFXxUJZIYa0oWRJYc0ZQcDVf7KrvDfWg2+rCsMOrl3G3y4eD2QS+R9z6HXWLZOtmYmNeXpeYhDILYcjOsK84UbbFdUX1mlWUGVtlGpZYGOteO8pON7oFRmJQGwd4eu0uMox6wyIIuLyY7+hHyMoQdjX4Hc9t2ZtCT/QcKvpf9gfUuZEnxiKLeAAAAABJRU5ErkJggg==")

/***/ }),

/***/ "./asset/data/Greater_Death's_Swiftness-noborder.data.png":
/*!****************************************************************!*\
  !*** ./asset/data/Greater_Death's_Swiftness-noborder.data.png ***!
  \****************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

module.exports=(__webpack_require__(/*! alt1/base */ "../node_modules/alt1/dist/base/index.js").ImageDetect.imageDataFromBase64)("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")

/***/ }),

/***/ "./asset/data/Greater_Sunshine-noborder.data.png":
/*!*******************************************************!*\
  !*** ./asset/data/Greater_Sunshine-noborder.data.png ***!
  \*******************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

module.exports=(__webpack_require__(/*! alt1/base */ "../node_modules/alt1/dist/base/index.js").ImageDetect.imageDataFromBase64)("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")

/***/ }),

/***/ "./asset/data/Green_virus.data.png":
/*!*****************************************!*\
  !*** ./asset/data/Green_virus.data.png ***!
  \*****************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

module.exports=(__webpack_require__(/*! alt1/base */ "../node_modules/alt1/dist/base/index.js").ImageDetect.imageDataFromBase64)("iVBORw0KGgoAAAANSUhEUgAAABkAAAAZCAMAAADzN3VRAAAAYFBMVEUSLQYwVg4waA5LYDfFuaFKdgwlRgsWQQiolX6usp9AZQpkZFzX0cLd5MqOiFjw6NeLdWD27OlncTpZhAw0SgooJA8dXg5oXjeMi4QAAAEzPjausIXu68W80b1jSjXluKANPCQXAAABKUlEQVR4XlXNV3LDMAwEUKKxFjV3p9z/lgHIxBOvqA/wYYfOBQ+anDMCYB4B8GFAzpJN0GTGSEFF7J6ItCZZBjnQax0Q9piYY7GeqJlkOQQpcrVwJCMtzY5khbYsS2s1EcoU28DVYNu2ZancwWh2ENZZ2awUQYbgkHjjVlvTn2Magk5Bad0/t8bMy1ZLhDwETfKp19SanXrLCi8RKA/nU03ePTq8CV3d+b5u/X52Zc/HcQg6QA2sul1S4eLOfENRAHdBCzGnpdzLx5MryeyYCAL1yHQmjn0He8BklsCfnomZTx7GfLkMEbxQ9PRkvp4i/RdV4O48eXeLXucpFjXiSFajuaoSfil8fVduCjgpuGBk8dTLSn9TeMmw4CdMUTJ7TzBQelmwz47BD6h0F+/y+CKkAAAAAElFTkSuQmCC")

/***/ }),

/***/ "./asset/data/Immortality.data.png":
/*!*****************************************!*\
  !*** ./asset/data/Immortality.data.png ***!
  \*****************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

module.exports=(__webpack_require__(/*! alt1/base */ "../node_modules/alt1/dist/base/index.js").ImageDetect.imageDataFromBase64)("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")

/***/ }),

/***/ "./asset/data/Ingenuity_of_the_Humans-noborder.data.png":
/*!**************************************************************!*\
  !*** ./asset/data/Ingenuity_of_the_Humans-noborder.data.png ***!
  \**************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

module.exports=(__webpack_require__(/*! alt1/base */ "../node_modules/alt1/dist/base/index.js").ImageDetect.imageDataFromBase64)("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")

/***/ }),

/***/ "./asset/data/Kwuarm.data.png":
/*!************************************!*\
  !*** ./asset/data/Kwuarm.data.png ***!
  \************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

module.exports=(__webpack_require__(/*! alt1/base */ "../node_modules/alt1/dist/base/index.js").ImageDetect.imageDataFromBase64)("iVBORw0KGgoAAAANSUhEUgAAABkAAAAZCAYAAADE6YVjAAACtklEQVR4nM1WS1PaUBTOWwgJCe8gFBDUohCVEgABFNHiwlGLnU473XSmu27Kpv//a+4JiYxjJdIuejbnO/cm57vndROO+1/l/mMLPs5aCl569lVS2TMCZ7ZjQIsr6J1lsbUlbk5y93CMxt4BfMyc+thIKBjNitg7NMHz/OYk7YEFWfFO2eq7WBYxm1dw1DXddR7j2TZiMY72x7MCIhFuPRlWhNm1ukn66r6Mcs1Lz/i6ADMluQRFGAaHrYiHW/0M4bUEPvT5ihXdO+V1EVFVweCygEbLBCN33FoYWpL2nVGWoqB1F68jwXP2fjOFdE7FxU0JhimhN8kjkVWQS2doP5FSKIq6bULTxWB9XTQByYd5H4oiUWR1WyPdGqYhKwL6k203TS6WPew3AcONd+mXiVbqgv1GhvDVXZn04DK/3OOpPqrKU2TDq0LglGFBWN9xAQkrto+f6s44B0kW4ZxZ4LTHVMtSiOEsVY3AUTQm/5FEjws46mSg5RRIkkjYGVnhZkbTH09/2ij9kYRF6YwtKMuJX8UvyvSmTp2y+DYhRz/np8gn44TfWDQ36J9XSTfbacR0merD3vVwCJk6u9Qhi4dTDO0KxnYVWVPDTe8tREHE4vMAelxGe5CjuWEE7aGPQwgAbLunZqdncu3USf/6NETGVLFw15M6B1EUqU3ZK2wAL29LEHgh3JXCnHMrXcxw58AmPD2p4sdtF7IkodupQbeiLplA88BqGDoKpqatGo528gHJYj4IsBGLkjNGyNLU6u7g7H01/A28eo3E1QhWbR/zy5SUU9QI3Nfv50hl4puRPLV9/GViY8fUICy7KZHUXvcdCUPi7fCYHFdhJV5JEJaklFexW9zf/Cv41OlKhwV77NI7Pz78u58G36lv+ny+PWpWcHHS/Cd/Js85obXeYRPFbHkjkt8mKRLdDsBAWgAAAABJRU5ErkJggg==")

/***/ }),

/***/ "./asset/data/Lantadyme.data.png":
/*!***************************************!*\
  !*** ./asset/data/Lantadyme.data.png ***!
  \***************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

module.exports=(__webpack_require__(/*! alt1/base */ "../node_modules/alt1/dist/base/index.js").ImageDetect.imageDataFromBase64)("iVBORw0KGgoAAAANSUhEUgAAABkAAAAZCAYAAADE6YVjAAACyUlEQVR4nM1VSW/aUBD2CmYVIWxOANsEA7EJi1kCISE9VURKVVVNE6nqpYde0kP///p13jN2UBTARD10LvPNM5pvdgThfxV3focA5/J57PrtQVKu10JnpnsOLZVC2+tDjcXeT+LOV0hkuggwcxrgVDYLdz7BScOiNxG29/A+omb/AoqqwscOx96HJSzXgazG0L2cQNM0/t25mkJY452CDWG2bhmQFAfD2xuUqlWeSXc2RSqXgXtJmmw1FqeMprB6Xajx+G6SwDGDAV9B1/3ykGM1ocGZjGF0bOimgfagD1E6Qrl+hwZhQUuABdXwnO1EaxK8ZetU92z+GL3FFZLZNDV7iGzuiCKv8O8aw5SR3jKgpFWoWmUvkWAPHoKSoTW8p/qr3K61LK7tnt+rzsiDQVhaY/3MgCCK6Ezo/by9m2ijLygbvuPh8pprVjL/mwhndgkxmeSZOdNx6NSZjamU0t4hCElYswP8WjepF7Kiwh70wtK2Rl9IR9ib4ulp6CieSGwlkTMZWI6/lLKscGz3e3wi95JsRj+9qG0lYb9jWShqbN3LF7xTbIqGzfvjyuOOnh8nqBTSHBeP+MajZplcG502NOoJ6w8PjuMIshiSA1Ei51PM+jVce1UU82msFjZkaubPzyPSMpo0VWwIGMELjiAAoBeyPHomy3GL6z8/Zijkkvj9NEU+I0CkIDqjIc+GLebgZkF4/zRxAuZc2JhihitFl+PbsYlfX0dQFQX1kxJUVYUky37J1oczEglTzFm3WQpJnp8mIc6m/AN4OzJ5mYqlEuyuG/36bp6RTCqOTTvAkuiXpF7IcH1mmtDiES7vWySv7QA/fHRhVVOQKIvVzT3ih/5ZRSH5/ukbL9PSM1E+TkNSzv89Se0kATXW5G8HE7zldGPCXnoiiRjuuq4HEIVmwBfYc1rOXjvCXYrCte3ttOJCkuvvIvkL+7UbYq97BOUAAAAASUVORK5CYII=")

/***/ }),

/***/ "./asset/data/Limitless-noborder.data.png":
/*!************************************************!*\
  !*** ./asset/data/Limitless-noborder.data.png ***!
  \************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

module.exports=(__webpack_require__(/*! alt1/base */ "../node_modules/alt1/dist/base/index.js").ImageDetect.imageDataFromBase64)("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")

/***/ }),

/***/ "./asset/data/Living_Death-noborder.data.png":
/*!***************************************************!*\
  !*** ./asset/data/Living_Death-noborder.data.png ***!
  \***************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

module.exports=(__webpack_require__(/*! alt1/base */ "../node_modules/alt1/dist/base/index.js").ImageDetect.imageDataFromBase64)("iVBORw0KGgoAAAANSUhEUgAAABkAAAAZCAIAAABLixI0AAAGCklEQVR4XjWSfWzVZxXHzznP8/v9envv5d6WvtE3pF2hDGkmdtMZFwaIUAJuiQgmOpCQqLIE5z8uJKIaNckyY7IsW5aocZtGpyOQKNPNZZAgkzG2MoFCx0pZoS1t6bX3/ff2POd4Kdk33+ebJ8nJJ885z8HBZYeIPARCYEJHK6/DbVmdanvizS+e3flhS1kSKCjgM07GZjoKT/k3bsCsAQYAw6G1FcYYxFpmjQAESOQRgEJ1T13HhoaeR44PXHhq6pUr702GC2Wuipglur7Ha1mXWrZvyT1ng5bTZqIoZYIIybGMAoIkGgkR74SD9R1Ow/bGlUMn1oR5/unvj173z8yZqy62iqTrbON1U3rXz/W62cfbBhrD/qPh5RIYQCByBCyL1Qh3DKgS5G1K9Wz5x71IeOO9wuGnd+Vymx//8YFcPE6Y8s1UwX6coGV52/6jm/nDHQ8N2q7TOGaZSKyFuBZqeXYLotaoV6iW+z/dMvx25e3jI/1rO9Z8pemZJ09dmP5nJHnAkkBBoGrF9yUizARWtmd6LkWlAFlABKyIUSsadmhyPfQ2eytOXh156sx3ynk58PSOK68VDz//6ypfZQgQLCCjREIlAHCwORLnwWR72epbULRiBCwCkAASOllMr65LTMSScduO//dXiLjv26+UeCSWIqARtAJW0IAYhltFOz0anLsZle5zGxWiUlQLQCIABhAXXAGuI/nZwedIwxMPn5r0p6xMIvDdgloiNiIuBeAYhgWEAAnIExeAFDqELiEoAAjQJMjJaOfo0Q8BcOvu7pROabUbMbUIEqJeRY8QPaRovcbuRp11EANmINLgEhAAkiZHoQ6VmYxMm3YvTF1++YdXhg58ate6z+0b2J509iAgAGravDbbtX9g55e6tmtc2+X2ZlViniOLIsACNVkCQQISgOGw0qTdRvLmT942Zfn56+sP7X3gG72fR2wgTG/p+MyRJ/f88g8bXvjFju+ufLRdp1OUrIooJLoDQERNFmNGBoACxy26oTWR2ZZsLfy7ihpVs/7WigEXB2u4rQ29kiCv2/G63K1O27v+lak4f6+XauI0olLgLC4Wo6D01aoTmdeLYxVbeSOY//qx5My4z6eqP7nwVpezosv5whv5sY1/bZ3KGxk3J4IZw+bV/PCm9KoMeTOiLDCB0rWjQHfCkqv+3Pni2Pv+s2Zm/3Cwzv4nPD/7fi7MHev4vgf46OQLQ3Pn7596oGTLueoVD3Mlrs0kc4kXLPDdpdECzGIv2Nt76nvK1gA8dq1wbr4UWI4z5PUnH1QxFw3vTK1/qfTMmzevh3y239u1O/u1wXTfSOT/D6sgSDUDaQsxIt2UuZeq9Fln2WNNQ5cqq86FHHGuyjNTtvjHeOx8+QbDgpXbIH6bs2FnZuPaZO874cKomg0lBhGuGUR1Z77MbEKTz9m5Bc9VklnpZi8G+b3ZNVXDc+bapepbU/adWR7ppPSJvuMXK6PbGjadiRZGnLmyBDEbkdiKZTEEQpoSCd0MAD6HE5jv8toQcSjbv71hdYta8q++3yqMOzF1pOdVAtWil1bZjqtCKPHiayxDjRWxRCRgefEGAEYMgyFRLgAzrPI663WTRvW99A9e6/vbn+ZPGoEIM4FEAfuGDS82x7xI5FhbCYQdWBQKe0JJxIqwFUhSXZ1KEaj9bTtOV0aPVY/tk22zxi+YsgMUQwRiGFhELFgBIZFI+I4BQFg6Of1RMF2MTz08d/B3hT87QEa4ZIO/LBxBxr2TL+c5N+qPL+eMEo5tyBwwGBAWsHSnVeS7q09i1+mlZysfZXG56xeOVE5oUZHlr07s+iD+e159MMHP5eXysD++WiUdUSImsr5ZxIkADrYfgk+U1E0D0LPR6wggLNnQl+g3t18swFgJpvvc+76ZOahBBxJ1u00Xo9IZuOazb23RQLjYn2gQJHI/mRdchPGZqNSFjUlwmzFzqPVg7SstmBBkLA4mpKAAR4LrkzgfAYNYQBJrLQQAqBmMsCAwIlWtUVR/S+Zu8awC0OA109J2m3EBP7bzOVWNxFoI2VYZLJGLgiJyF8cQ/x+JlIZQeshaOQAAAABJRU5ErkJggg==")

/***/ }),

/***/ "./asset/data/Malevolence-noborder.data.png":
/*!**************************************************!*\
  !*** ./asset/data/Malevolence-noborder.data.png ***!
  \**************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

module.exports=(__webpack_require__(/*! alt1/base */ "../node_modules/alt1/dist/base/index.js").ImageDetect.imageDataFromBase64)("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")

/***/ }),

/***/ "./asset/data/Necrosis-noborder.data.png":
/*!***********************************************!*\
  !*** ./asset/data/Necrosis-noborder.data.png ***!
  \***********************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

module.exports=(__webpack_require__(/*! alt1/base */ "../node_modules/alt1/dist/base/index.js").ImageDetect.imageDataFromBase64)("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")

/***/ }),

/***/ "./asset/data/Omni_Guard_Special-top-noborder.data.png":
/*!*************************************************************!*\
  !*** ./asset/data/Omni_Guard_Special-top-noborder.data.png ***!
  \*************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

module.exports=(__webpack_require__(/*! alt1/base */ "../node_modules/alt1/dist/base/index.js").ImageDetect.imageDataFromBase64)("iVBORw0KGgoAAAANSUhEUgAAABkAAAANCAYAAABcrsXuAAABR0lEQVR4nO3RYS8CAQDG8TYzH4FXNrzTtJnBhjW0akHBjivXqU7V1UU5blIUOwKmkTbvbGZsvuPfzQfw5uqd5wM8v+15HI7/WDnX13AvC3QMkKQQF0frGNmlziBzPg+5mIemGeW6LHBb2eShKtI4324f6A3MUdkPYhobXJUE6icCd6dbPNYiuMan2gNNjg7x0czwUktzFJUoKRI35U3uz0Qqhmwf8QdX8Mw6+X7VKMm7RCeyxKZVKmnJmm0LQ120jwTmXVQPQny1slwURVILGjuTeyjuLKYeRk8H7CNiaIr3pzSfLdU6OoLq1eju6mGsf4bLooSesYn43CMUU37eHpMWINGoymi+ffoGnb/FeaNgD0jEVsnJXh5KMZ4vo9wfxzmLqxQCOr0DTvsTJZcF8usSh2GFejFOqy7TKCvUEjnMjGohw38iP0GZrckFV9O2AAAAAElFTkSuQmCC")

/***/ }),

/***/ "./asset/data/Overloaded-noborder.data.png":
/*!*************************************************!*\
  !*** ./asset/data/Overloaded-noborder.data.png ***!
  \*************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

module.exports=(__webpack_require__(/*! alt1/base */ "../node_modules/alt1/dist/base/index.js").ImageDetect.imageDataFromBase64)("iVBORw0KGgoAAAANSUhEUgAAABkAAAAZCAMAAADzN3VRAAAAOVBMVEUAAAFflCc/dx1OhSE/R00mVxdGV1thcG6sjUA3ZhhkZFwPDgwvLjAxPjZmRBJoXzqNiVySczpNQjhzqRfzAAAAkElEQVR4Xp3SSQoDMQwFUcl2TxmH+x82X4WNQgYaUiujtxFGNm1ReY3JZGNeq0X1MkzCWHBXV9MLQwC3db1J3GUI4MoEiEMpNqvWHp0kQMhBze0c4kMcWZaQE+JaESE7RgKkSur/AiCUAiTtSkLSrgBJY7fyVQoyIAnZRO/CX38KVEKgT0AGJXTBLCvA9vvenqW9DHInR4uYAAAAAElFTkSuQmCC")

/***/ }),

/***/ "./asset/data/Perfect_Equilibrium-noborder.data.png":
/*!**********************************************************!*\
  !*** ./asset/data/Perfect_Equilibrium-noborder.data.png ***!
  \**********************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

module.exports=(__webpack_require__(/*! alt1/base */ "../node_modules/alt1/dist/base/index.js").ImageDetect.imageDataFromBase64)("iVBORw0KGgoAAAANSUhEUgAAABkAAAAZCAIAAABLixI0AAAFLElEQVR4Xl2VXYgkVxXH/+eee6uqu+eje2Z6d2aYZVdUCLK66LIvPgUFDBoDJAqBILqKgFnfZF8WYSORvEQQiBr0ZREkBnAXEgiGQCDPUSGRVaIQTdyZ2dnpna6Z6enuulX3nmPX1KwLwuWcU3XP+d3zP9QHfe7CWRiQEQKIAAYIAIS57K5CohnvUVWpS2VumQy5fIdiJAAKRKjWXoUQydQgPgYxYKGs9XIqcx1wsKOt0Suj0a1i9PsDe7SpVqXTgdMmDRZgEEBGa86Fi2dOQKYGgY63SYvVczzc8r8bERlDpAqFJt9aiN3VbOdjVYUQBIiNhYLs/0CwSgTlWm/NTclwSFtqSQgkUAXAZcgYVkhICQQoFLUHRbVEDQgxa8duT1JH4u1kSFbVmlZGNoJIRSEWU2awxLlWaC2BUxTB5kNTTJvxmRpkNCZZtbKGaW6Hd4zfr5ZOK5G6LP6WM6epRctpuMGStACqeqfY53bvDk3zcmUtJi0lBcHWLEJYXOaDnXB1SJfE/pPoOV8trIpL42vU/h4YCMDwdZKOM35q93fM80X4tMR3x+ZFExa67CdNVwBBE2fEm4uSGWqdl/QH02R/2wQPNUvAGnQZgBgO3uV3kyu+/ZmYEfFFGC00SekYY5r2KPiYJvwBMWvCWHosdC6XPD6koJ2IT0DbUSkqjw/a362WvhIsg1nMP1TSjKIHAaSGjp0d78XeKX2hVzyZFH/lFtFnnwobV1Wdm95OzwDF7UydXf+RnH8ypET+fVM8legLS9Lru8me1pBGI8ChmIkKvVNld33yk4WPHnf33uXHvlR+7Tfl/X8tnoHc/3Dx678OX/1ytfsn/s/j6fj5btk7E3v9NN/iUDSDos9/cQNW4URThZqYtqqFFZLojvYoTn/4h+oLSWiDxtD3SvuLb1qxc2X9Mhm3v2t8QSQoCaVBJNMgQQoAKlyMs8EmBV/NLSPal56e/+U76y3gV++svfR0RzWpOsvsi3RwxxQTqDRljTjzIKbjKyOtTtHfUGPd4YA4XHn18NlHtyfAs4/evfLqmKhyo4E451c2JGuflIMesppAXcefOltl80m+O5vd2R+PL79efDxMrt9aG0Cv31z9aM995zV/7tpRMtyy+W7V7vq1c5LURAU9ZEWX+e6qze8lhzut50bn3qjWLslbb6dvfN/2P3mwCdP/1OEsfuttd/pSnO12ro/cwRbn98rF9WizBxoVUArt5dlRuHaQ3vTJhThRvX3Tbr5oKIT2+fIOKD3vZ/HWz/hvt+xUJb0QWzcrc23f5PdnEyQFpGYRFGpTKqrwiAahEDV/k0c3sthZUKYx679BR6zKFDuLoxvp8I9cikYx8REY79WkTUOmtgryldhM/mzKiOnf2b/cqbqnhRM1MgDuAjlIWaJLqu6qf7k9vc1eJP6FlDOqvCoAWBLAwB4Oy/46/xyQomqlod+Hkpns8xM6ETWAqNonJL5ZxrnFqr8hP71PU2+4HedX3e4W5EQjIGT8NBlsI1kMvQ1NFtK9bUPRVAV/OxQVFaFe9rLM7kDFDXf0QWYy2ORySkIQWBVQ82z5SToYK1Otm7XqGUQUHnzy/aQY1ERBNHZc2MNtVaKoGqkGKVRhFUBssqENVglKVEDE+qkxBKDmqSKRhApFMKogAYSajjRCAatCMIoInIAUCgg4z0PWb32jzF8pievs7jNZWFqxwxwRTQ4egqBiLIRUCSwUAQGYagvw0Ti6+XJ+Y/GZnEIlzlXzK1SKGY8RCf//fzQQ/Be77+mT88v1nwAAAABJRU5ErkJggg==")

/***/ }),

/***/ "./asset/data/Poisonous-top-noborder.data.png":
/*!****************************************************!*\
  !*** ./asset/data/Poisonous-top-noborder.data.png ***!
  \****************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

module.exports=(__webpack_require__(/*! alt1/base */ "../node_modules/alt1/dist/base/index.js").ImageDetect.imageDataFromBase64)("iVBORw0KGgoAAAANSUhEUgAAABkAAAAOCAIAAABVWCAXAAADRUlEQVR4nG2S2U8TURTG59W4Y1Ox0Om0zLTTWTtLZ1hEkWiUuoEhloRSKlBkNdSqUaMPatweJKICmohEI0KNBIgImIhBRSXBBSRVUoyEGk1AeeA/8JQJRIPJyZ0759zzy/edexFGVFhJ5SSV3GWgshOZXJRzmxzOFC14OXk+VG2zmI+VFqrQCwTgIBoIUsSO+NI56eCcBDhBSdVAnOS08RTOEbDCXsPFqvMHFokaDtFAkE3aqi+eEYt/CaAOfqEziSMCgdzhnusjfQ1j/bcunyuGDOQ1nBaL8oGDxEurE9Q16MY4bLPOF+V9UYdmls1Febdp7NmdiTdtk+/apz52RN8/mhi8jcdwiqD8B4fo+ZWeCOeJsEsDzI4Ptk6+7/jx6fF0uHfm85Ofo+1fXzfaedYhq6KSKqppi7gYS0cvzxulF4L5ewPqIm9D0ZGumXDP70jv7ETvdLhjavguzhKcKC+VhsSRywCn51eA2dwhOwSWoYPZwVWA2fFXLdEPnaBoNtIz+6V7uPva+ECDhbEwDtHhTBb+lYbMDzJGBbPZA7acARJmh1O4Z29aV+OJUN3RcH/z9w/t34ZaXjy4ONJXV+3NhCrDC7ykCgu92orA24FZwpWDut1PrRAJ6lqCtCqqVaSSWAJNF8mx3lsZMiXYTCm8dVsmS9isNMfz8EQkRXs0QAAOworyxq1pVRU1a8EsA2ZXxkurLKSlufZQMmsT7Oaawj1bZPp4yT6FwdMlqv/hGahSDMcKEjhNyVSrKw8DgREkhOTZoqKynTZ9jmyEodpZzkZRZiu2PUtuvRrsrD/RfL5Kpi1ttYGXoYvP286Wl7rMBGal7HaWhfMFTuNuUu/3V9p4GqEdAs7hqlm/HV+X70y00GaP1+v2uBOxDYlEfN4Otfvmqa76k/33zh054IKMETPs97g9BT446XMaoUvCNwABODGPdo6DwaSgOm+et7Ls2JW6JhOJQs+NsyWuzeKlQH6oNlh7rHBXhnD/WsBoMZhI4+kzl8r8Qa+7UDavx1krEIATmz18SIZJ4vCK0qM1weutLYOYHUVNhoqSrKYLVa50x7ZUxrVJCF0NBquyUcyAUej9lpfVh66U+4PQRbIMEIDzB0uFQSw0RvwnAAAAAElFTkSuQmCC")

/***/ }),

/***/ "./asset/data/Powerburst_prevention.data.png":
/*!***************************************************!*\
  !*** ./asset/data/Powerburst_prevention.data.png ***!
  \***************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

module.exports=(__webpack_require__(/*! alt1/base */ "../node_modules/alt1/dist/base/index.js").ImageDetect.imageDataFromBase64)("iVBORw0KGgoAAAANSUhEUgAAABkAAAAZCAMAAADzN3VRAAAB3VBMVEUAAAA8RVQzSEcHDQ43T1I8T1A2RlIUHyElPEEQHB4dNToLFBYSKTEGDA4QKDAIDxkIEiQCBCoCBCoAAAAHGyENF/M+U1QXMDcCBCoQJzANI0AWJSkWKy8ECS8RLDcYLzYXLTUXMToXLjQXMDk+U1VAVlcRLjcUPUkQPUsHHCM9UVQ8UVI2SkwpQEQwSUw3UFQ2UFQ2UVU4VFc6Vlo+WVw9V1o6VFg3UlY1UFQ1T1MxSUpvRS1GTk0oQ0crSU8tS1AuTFEwT1MwUVYyUlYuT1MtTFEqS08tS08XKjMXNT4rUFUxTk8RKjIWMDpGYmYqSk1AVFY+UVIpGRAzRkkXNT1RaWs7TlAxTFAnQUQ/SkoyQEAkP0MkP0QkQEQmQkcoQ0koREklQkcjP0UiPkMiPUIiOT5RXlRWamoSLjQTLDQYLjUZMTgZMzsYMjg4UVQVKjFZb3FbcXMWLDIUKjIXKjQ6UVQ7UlQ7UlIQKC5VbW8XKzMXLjYXMDgULDUSKzMNICcIEiQ5T1EzRlBUNSM9UVMFBywsUlYoTVBAVFdxRy46JBcsSkwtTlEvUFMtTU9TMyM+UVMQKjI/U1Q/VFURKjE/VFZDVllEV1kWRVJIZmoHGyE+VFcUP01IZmtCYmX4RXzkAAAAFnRSTlMA6/34/f765ffj+fH98f7x/vz+z/wBxySheQAAAPdJREFUeF5jIAZYd3bhkOlvDsIuwWgTGYVVIi29oLAyFJsMk9/MufO8sWry92prZ8Yq093T24dVgiWvtKy8EUOiibVFTKVDNUBMLJANRSI4bMKkyVOnTVedraKlrYMso6unb2BoZGxiamZuYWnFjiTDYWtn7+Do5Ozi6uYeHsGJrIkrOiY2Lj4hMSk5JZUb1Qk8GZlZ2Tm58vL5vOiu4ysqLlHw8Kngx/SPQlV1TW1dPRafNogrhiiKC2CRaVVS9lRWEsQiIyGj5qsmI4RNRlpyoqS0BBYZWTnJKZJyslhkpNQ1ZmioS2GREZ6lOUdTBFVCVBRrhAEAJ9wz/WubCOYAAAAASUVORK5CYII=")

/***/ }),

/***/ "./asset/data/Prayer_Renew_Active-noborder.data.png":
/*!**********************************************************!*\
  !*** ./asset/data/Prayer_Renew_Active-noborder.data.png ***!
  \**********************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

module.exports=(__webpack_require__(/*! alt1/base */ "../node_modules/alt1/dist/base/index.js").ImageDetect.imageDataFromBase64)("iVBORw0KGgoAAAANSUhEUgAAABkAAAAZCAMAAADzN3VRAAABZVBMVEUAAAAAAACSw+RCVWtcdpBejKubwdycxeOkzurE5Pnd8v7i9P79/v9BXnlhfZR6tNuKutxdeZRdg6IzQ1NggZ02S2NqhJxuqc1zpMVBSFx8steDstSGqsWKrsojLUKRtdApNkaTs82TvNqWyemayupLbIVOXG1SbYSn0O212vS43PS94fhacovV7v1bboNbfpvp9v/r+P8sPlVwj6xkeI9lmb9oe409U2hrncNrpclsj6hslLRum7hAQ0omMkJwp88oNEl0k693mLR5m7kbIzN7lax7pMFCW3V9qciApcOBn7mBr9GDrc5DVWeEt9uFutxETmOGv+KJvOBFZH5JU2iLsc6Nw+WOtdAfIy4tOEpPaH0tQlNSdpWYvNmavNVTfpRTfphVcISgyeVZhqkxNUmo0u6p1vIyRFgfKTg1TF6+4PXA4PU1T1fJ5/rN6PoYHirZ7/03WWk8SmA9UWdhf5jz+/9il7cKt0LjAAAAAXRSTlMAQObYZgAAARZJREFUeF5t0GVvxDAMBuA5ZTpmZuYbMzMzMzP//klrc0u68xdbfvTKkjvIArBUAfCCApdgK7UjcKG6sn3WXhR5xU4KAOiNRTY7AAkVTJZPGvZ3bjDRMOPjL97xigQtkcqj8bt/BFlfSq4/rQ1mzVSJCoUvVc4dzftNp6DnO/ksFwOnMYBf8CwZBMBMrOcCY6MGOKP9ty1qDCQO9zA4+NmNyF8qhKGzOiIGu0r+FmUMaDiukCSeh7VHTAa4OW+yXFPurd70EPVXT5wXpZqqlvN8fCpDCtNctF0rqiqh4Bx7SQrETvrEh1epaOXeXoB+4QG7ZS2g5bB7ErBgWtV6hQWO2cRAUCR9PP2BEzQNhyy7GEzU7dThB1pnInoOZsa8AAAAAElFTkSuQmCC")

/***/ }),

/***/ "./asset/data/Prayer_active-noborder.data.png":
/*!****************************************************!*\
  !*** ./asset/data/Prayer_active-noborder.data.png ***!
  \****************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

module.exports=(__webpack_require__(/*! alt1/base */ "../node_modules/alt1/dist/base/index.js").ImageDetect.imageDataFromBase64)("iVBORw0KGgoAAAANSUhEUgAAABkAAAAZCAMAAADzN3VRAAABC1BMVEUAAAB+uP9+uP9+uP9+uP9+uP9+uP9+uP9+uP9+uP9xquVvod5vod5vod5xquV5s/N+uP+Duv5+uP9+uP9xquWDuv6Pv/uDuv5+uP9+uP9+uP9vod6Duv6Pv/t+uP9+uP9+uP9vod6Pv/uPv/uPv/uDuv5+uP+Duv5xquWdxvqt0Pt+uP9+uP9+uP9vod5vod5vod5vod5vod5vod5xquWdxvqt0Pu/2vydxvqDuv5+uP9+uP+Duv6dxvqt0Pu/2vzO5PzO5Pzd7fudxvrp9P2Duv6Pv/uDuv6Pv/uDuv7d7ft+uP+Duv6Duv5+uP+Duv5+uP+Duv7p9P1HGRZdHh0uExPoMTH1PT1uIyL3WDNQAAAAUnRSTlMAAgMFCAQGCg4XGCAiJiUcGz4VBzs7aDwnGgFZcpJBLQx+s76ybEkXutribioWJCo0RV+Btej2+Oetb0ip6ff6+/z95v5zkz2xa/5tq6csqgkYC+htSgAAAWJJREFUeF51kn9TgkAQhsHrvKOs1CsVUyBEDMF+pylqGpmaaqRWff9P0h1eN4MzPf8+s7O77670h5wAYA+AhCztApMI1zBKQiH2DyJSh0fH6Uw6i4ko+hGcnObyBRWDIjebb87mrFQuabpqQG7WX5z1uVmxqrauIK4+BRdO3TFd22sgWNxOkLq8ur65vbt/aLaaj+2O7ykGYGPIkGBVtzvdXv9p8NTvdTu2rmICZSkRCbdNxfB5SFXbjVRCAihb0KpmwMQLU4FZ1QpZBKQkTudHltNkYsVU07FG+TQGEqllcq+VemtAxYqqQateKefGNcJqxjs1k9GY1UR9phbr87btM5lGfbaz+bO5mG0+86PZxD4Lvs/C9ZdUwGhXYCie35kHNIPg3RUZUIowbHj2zGS5zWhuIcuNA0NF96sWzdpfKiGM3dpQdS1+H04RYLUgbhpDJjgr/iAOJAh/YEREk///7RcxYUl0wTqWpgAAAABJRU5ErkJggg==")

/***/ }),

/***/ "./asset/data/Protect_from_Magic-noborder.data.png":
/*!*********************************************************!*\
  !*** ./asset/data/Protect_from_Magic-noborder.data.png ***!
  \*********************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

module.exports=(__webpack_require__(/*! alt1/base */ "../node_modules/alt1/dist/base/index.js").ImageDetect.imageDataFromBase64)("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")

/***/ }),

/***/ "./asset/data/Protect_from_Melee-noborder.data.png":
/*!*********************************************************!*\
  !*** ./asset/data/Protect_from_Melee-noborder.data.png ***!
  \*********************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

module.exports=(__webpack_require__(/*! alt1/base */ "../node_modules/alt1/dist/base/index.js").ImageDetect.imageDataFromBase64)("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")

/***/ }),

/***/ "./asset/data/Protect_from_Necromancy-noborder.data.png":
/*!**************************************************************!*\
  !*** ./asset/data/Protect_from_Necromancy-noborder.data.png ***!
  \**************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

module.exports=(__webpack_require__(/*! alt1/base */ "../node_modules/alt1/dist/base/index.js").ImageDetect.imageDataFromBase64)("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")

/***/ }),

/***/ "./asset/data/Protect_from_Ranged-noborder.data.png":
/*!**********************************************************!*\
  !*** ./asset/data/Protect_from_Ranged-noborder.data.png ***!
  \**********************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

module.exports=(__webpack_require__(/*! alt1/base */ "../node_modules/alt1/dist/base/index.js").ImageDetect.imageDataFromBase64)("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")

/***/ }),

/***/ "./asset/data/Red_virus.data.png":
/*!***************************************!*\
  !*** ./asset/data/Red_virus.data.png ***!
  \***************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

module.exports=(__webpack_require__(/*! alt1/base */ "../node_modules/alt1/dist/base/index.js").ImageDetect.imageDataFromBase64)("iVBORw0KGgoAAAANSUhEUgAAABkAAAAZCAMAAADzN3VRAAAAclBMVEUsAhJvDC6DDije1aucCClOCCc/ByW0CCausIXFuaFgCyru68UPAhCCEzrd5Mp/LUGLdWCOiFiolX6LW1291KFeLTdBFijw6NfVGSJjSjWxk1eMSUJoCAZoXjdtIS93RzuQcjTD730sCyf27OlMQjdkZFz29OhMAAABT0lEQVR4XkWSV3LEMAxDRVJd7mX7puf+VwxIZxL6R+ITAI5k52IMtVbi3yKiGkKMACFY2/vkU0ree9CqKFYi6yffj71B7hW5UCFAg5+5bFt+syPqCELqwllkQElmiJiVwMvA0KwOBJFDDNwnBWdUG2S2IUAsfwZRZCKvIiNY5aW0w64sxSfTKEhpfpVzE5F2HtY/DTMI3YYytAxJWygpoUNzSdOpO2UpH91pxu4/5zI+u9hNn1MX3TReTOSCIj8V161llbVzsiQQqiCa9CJS2tqtLcswKmElNvY4ZdndLvl298nu+yAmfy9FNiJskK/3FipyfJ9pzLLdKfdJFQEEMZU8b8uDe34smVVPqoFQ/XZZeu7ztnv2HIK5IYmQeZUB3xdWpGbRfhB7I77O3/OVQaqaHb+IzWfBbE+DjpGoDMgDAerE6DmUsVrVno7z1v8BbL8SIXmF05MAAAAASUVORK5CYII=")

/***/ }),

/***/ "./asset/data/Reflect.data.png":
/*!*************************************!*\
  !*** ./asset/data/Reflect.data.png ***!
  \*************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

module.exports=(__webpack_require__(/*! alt1/base */ "../node_modules/alt1/dist/base/index.js").ImageDetect.imageDataFromBase64)("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")

/***/ }),

/***/ "./asset/data/Resonance.data.png":
/*!***************************************!*\
  !*** ./asset/data/Resonance.data.png ***!
  \***************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

module.exports=(__webpack_require__(/*! alt1/base */ "../node_modules/alt1/dist/base/index.js").ImageDetect.imageDataFromBase64)("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")

/***/ }),

/***/ "./asset/data/Ruination-noborder.data.png":
/*!************************************************!*\
  !*** ./asset/data/Ruination-noborder.data.png ***!
  \************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

module.exports=(__webpack_require__(/*! alt1/base */ "../node_modules/alt1/dist/base/index.js").ImageDetect.imageDataFromBase64)("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")

/***/ }),

/***/ "./asset/data/Sign_of_Life-top.data.png":
/*!**********************************************!*\
  !*** ./asset/data/Sign_of_Life-top.data.png ***!
  \**********************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

module.exports=(__webpack_require__(/*! alt1/base */ "../node_modules/alt1/dist/base/index.js").ImageDetect.imageDataFromBase64)("iVBORw0KGgoAAAANSUhEUgAAABkAAAAMCAMAAACgLOZ5AAABAlBMVEUAAAAyen08kJMubnE0foEwdnkfU1UOGSAvdHc7jZAiVVcQMjMjJzc3TWAqZWg6jI8pZGc0T18ucXQHHx8lKTlES2gnX2IvcXQucHIgUFItcHMBEhIpY2Y5iYwze30dSUsXGyUdIi4yaXErbG8FGxsoYWQ2gYQzfH4eTE4fKTQybnMjWlwDFxcqWF8TOTogJTQVJCswdXggVFYIFhk0fYA4iIsjWVsMHh82TWAsVl4OGiApW18xdnkhVFYRKyxFUWwxeHsyeXwYQkMGExYvWWM9kpYhVlgZPD9DO1k5WGkzfYAPMDEWJCw4foNBm59Eo6cdU1UUFyAsbG42g4YlWVxCR2E2DEXLAAAAAXRSTlMAQObYZgAAAI5JREFUeF5jQABLdgbsQFBcTx+rhAUzJwc3DxYJXj5+AUYhYREMCVExJglJKUZGaQwZGVk5eQVFJUZlFTQJVTV1DU0grcWorYMiocvCwmUAZhkyGhkje8TE1MwcymZlZLOCS1jbMNnawTj2Do5OzlC2C7Orm7sHXJ0nq5e3D4Tp6+cfEMiAAEFMwSGhQBoApboOl7qZZCEAAAAASUVORK5CYII=")

/***/ }),

/***/ "./asset/data/Sorrow-noborder.data.png":
/*!*********************************************!*\
  !*** ./asset/data/Sorrow-noborder.data.png ***!
  \*********************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

module.exports=(__webpack_require__(/*! alt1/base */ "../node_modules/alt1/dist/base/index.js").ImageDetect.imageDataFromBase64)("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")

/***/ }),

/***/ "./asset/data/Soul_Split-noborder.data.png":
/*!*************************************************!*\
  !*** ./asset/data/Soul_Split-noborder.data.png ***!
  \*************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

module.exports=(__webpack_require__(/*! alt1/base */ "../node_modules/alt1/dist/base/index.js").ImageDetect.imageDataFromBase64)("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")

/***/ }),

/***/ "./asset/data/Split_Soul.data.png":
/*!****************************************!*\
  !*** ./asset/data/Split_Soul.data.png ***!
  \****************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

module.exports=(__webpack_require__(/*! alt1/base */ "../node_modules/alt1/dist/base/index.js").ImageDetect.imageDataFromBase64)("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")

/***/ }),

/***/ "./asset/data/Stunned.data.png":
/*!*************************************!*\
  !*** ./asset/data/Stunned.data.png ***!
  \*************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

module.exports=(__webpack_require__(/*! alt1/base */ "../node_modules/alt1/dist/base/index.js").ImageDetect.imageDataFromBase64)("iVBORw0KGgoAAAANSUhEUgAAABkAAAAZCAMAAADzN3VRAAACDVBMVEWVahXkzRGVahUAAAA7LhE7LhE7LhEPDgwPDgwAAAE7LhE7LhEnGBE7LhE7LhFrUh9vPRkPDgw7LhEnGBEPDgw7LhFpkxJrUh9PNQ8PDgw7LhEPDgwPDgwPDgwPDgwnGBEPDgwPDgwAAAEPDgwnGBEoJA8PDgwPDgw7LhEnGBEoJA8nGBGVahVkQwcoJA9PNQ9PNQ9PNQ8oJA87LhE7LhEnGBFMQjdPNQ87LhFPNQ8nGBE7LhEPDgwoJA9PNQ9PNQ87LhFkQwcPDgwPDgw7LhE7LhFkQwc7LhEoJA8PDgwAAAFkQwcPDgwoJA8oJA87LhFkQwdPNQ8PDgwPDgwPDgyukBE7LhE7LhGQcjRoXjfRpAtPNQ87LhFPNQ9MQjfnyFuOiFgPDgwoJA9oXjcPDgwoJA8oJA9MQjeukBE7LhE7LhE7LhGukBFvPRknGBEoJA87LhFPNQ9vPRk7LhEPDgwnGBEoJA9MQjc7LhEPDgxvPRlrUh87LhEPDgwPDgwPDgxkQwcPDgxPNQ8oJA9kQwc7LhEAAAEPDgwnGBEoJA8oJA87LhFPNQ9MQjcnGBE7LhGVahWukBHRpAtrUh/73ww7LhHkzRFoXjeqizf+uQ3j7oXnyFuQcjRPNQ/2z05jSjVvPRngsBTwwzbAs1pkQwfDmjlpkxJMQjexk1eOiFh2TAnmtGL+xiEnGBFncTrhcVE1AAAAkHRSTlOyZi0ABFSXLRy4SBwxD62W8HaWqxcCfezAMqTjYwsRxnQNLQlYSI+AW4Qu55ABYflar/n5ogz6iQEPAgak5gYEbclrBhIDLRDTAhxISDgNga0CTwRtdBqp3IaSCFOST+OeGsI2WBHRywsKEdzaFRvt9+fn5xvyH+f7Zc/VNXwHoG7vxx7fS5EMlhkg9Ei4BiXxkzzYAAAB3UlEQVR4Xl3PZXNUQRCG0QtNQgjqEhI8qAS3De4Ed3d3d3ene/SqrCdBfiMzWait4vl66q2ecQKnW1Zhd+hR4wZ+/FMpRlQLJidWSpDsCb2lbvdjl5MQ2GtLnZGQCCnqA337abPh/QeQoIIcaGQQ57/k4CEAQ8P2fEzDhjORpREjjUDDqMbGJoDRYyLZEQumhIdyLFgZNx5sEybWTwrzqBhlWTS5S6pN0Tol4ojpVCvTps+Y+VdmzZs9h/O5LS3zF1hZyGnR4iVgW5qB1mhZ0/IVYHOCvOhcuWr1GqjUuhZg3foNVvxAsBJt3GRgc3Nb21aAbdtxhyGnXZMSpZ27dgPskYi4t2afdIv768A5cFCSoEOFwwBHOJKXxaPlMHaPgXP8RMH+OsrAyVMJT9HzyC36+dP2jhICozNw9hwyRszzcnHs++cvOB2BIsUKFy9dZlnPVIE4d8VJ3CLnyK9eS1GHdhG4ofsjJ4RzXfMbN2/dvnOXJ4l2zSLkJjJy7/6DhwCQkY8eY9ZAkKSpISYcePIUTM+ewwsLsa9fNrxKUyv/es1ZGOZ9P3jz9p1EVZX3H7jWyW/zKkWdJSWq8lGm5XISBjlRqSqfPn9prv/qmgX7T759N1zLPeSoBCGyP4fI66GnasnxAAAAAElFTkSuQmCC")

/***/ }),

/***/ "./asset/data/Sunshine-noborder.data.png":
/*!***********************************************!*\
  !*** ./asset/data/Sunshine-noborder.data.png ***!
  \***********************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

module.exports=(__webpack_require__(/*! alt1/base */ "../node_modules/alt1/dist/base/index.js").ImageDetect.imageDataFromBase64)("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")

/***/ }),

/***/ "./asset/data/Super_Anti-Fire_Active-noborder.data.png":
/*!*************************************************************!*\
  !*** ./asset/data/Super_Anti-Fire_Active-noborder.data.png ***!
  \*************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

module.exports=(__webpack_require__(/*! alt1/base */ "../node_modules/alt1/dist/base/index.js").ImageDetect.imageDataFromBase64)("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")

/***/ }),

/***/ "./asset/data/Supreme_Overload_Potion_Active-noborder.data.png":
/*!*********************************************************************!*\
  !*** ./asset/data/Supreme_Overload_Potion_Active-noborder.data.png ***!
  \*********************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

module.exports=(__webpack_require__(/*! alt1/base */ "../node_modules/alt1/dist/base/index.js").ImageDetect.imageDataFromBase64)("iVBORw0KGgoAAAANSUhEUgAAABsAAAAbCAYAAACN1PRVAAADPUlEQVR4nM3W60uTYRgG8Hu6vUoltbZMly6dp7Zmzpl5qiDKKhWsqLIyyXUusylWaicMjVTTQZlCZVqaVboyEwxqReGxoeXM08bUIPoT6tvVM6WAPsX0hW64AB6AH89zvdy8RP/j+PuTv0xFceIwCuMde/iA0u4ac5FdUQQibg2vmEZLyvaaNBw4q4NAQJd5xZbsoy3xBSUITMviFxN7kyDkAm0NvXgDAelnHNgl3rA5fhQcU9sCdb4BqtybkOtIR+4n5/ODeVNw6OVbkCWkwic5HaqccnBSyuIFW/WQ9oZkXoPbQi9wYspT6kvASegbL1jcAyOUWSVwk3hBkV6DoBOFEInpOy8YJydNsP4qNGX10FY1QxKzEST0XM0L5so6095qQ0R1O/z26/n99L22U5K68B78dLkIOHIewgWUwwskjadEzfVHUBy+BE7sCXXBbfjrKVvkQYtmHQs4eh+qi1WQp5yC0EMMjcGIoIwiSBLoyqwhLgspQHGoEjlGMzLq2lhXmRAqQhBW2oSQrFL47jyMuT50d1aw+OJatA5MovWTHY2vu1FZb4T+XD5URfWIaLZCWfwUS7YdhLsvZbN15jIjrH3wK1o/M6zfjuddA7j9+AV2Vz9BlGkc4c++QF3biWUM9Ek7C5cFtNtpiD1Pcu/IBEyDLBY7Wj4Oo6yuGYmdg4jttCHSNAZtiwWhdb1Q5FVDpI4EkSDVKUyWQuXm0QmYh+1TMX22orS2GZt7LIjtt2FVB8NeDSOscQCBVxrgER7LMOGQc9gOqjCPTcI8Mo11WUZRcacBCT2fEDNgQ1Qvu907KzRNQwgqeQbJyrXOY6xw4R9sdJxhIzD8xiwM+8iwDzbW3TTGaVc7jznmRUcfg+xT6R4cg6GmEVv+wjRNXxBY2AjR8pUgAffSaUydQnlNb7unbud4xrI79Vjf1YcY1l9Ujw3aN6NY0dAPub4Mrh5iOA05RjiPpBt2UcHxQgOOF1ciKTMfce97Ed1nRWSHFeFtI1BVmSDdtAfkSsUzwhwjoqVKtgPXcVIZ3BZ5wzdFh6UH9ZAdOA3vnccwd1kEW2FURe7Rs/iL4K6RO8K50mKBkH6w/HRk+vzfoV/mMrbDWE4DKQAAAABJRU5ErkJggg==")

/***/ }),

/***/ "./asset/data/Threads_Of_Fate.data.png":
/*!*********************************************!*\
  !*** ./asset/data/Threads_Of_Fate.data.png ***!
  \*********************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

module.exports=(__webpack_require__(/*! alt1/base */ "../node_modules/alt1/dist/base/index.js").ImageDetect.imageDataFromBase64)("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")

/***/ }),

/***/ "./asset/data/Time_Rift-noborder.data.png":
/*!************************************************!*\
  !*** ./asset/data/Time_Rift-noborder.data.png ***!
  \************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

module.exports=(__webpack_require__(/*! alt1/base */ "../node_modules/alt1/dist/base/index.js").ImageDetect.imageDataFromBase64)("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")

/***/ }),

/***/ "./asset/data/Torment-noborder.data.png":
/*!**********************************************!*\
  !*** ./asset/data/Torment-noborder.data.png ***!
  \**********************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

module.exports=(__webpack_require__(/*! alt1/base */ "../node_modules/alt1/dist/base/index.js").ImageDetect.imageDataFromBase64)("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")

/***/ }),

/***/ "./asset/data/Turmoil-noborder.data.png":
/*!**********************************************!*\
  !*** ./asset/data/Turmoil-noborder.data.png ***!
  \**********************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

module.exports=(__webpack_require__(/*! alt1/base */ "../node_modules/alt1/dist/base/index.js").ImageDetect.imageDataFromBase64)("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")

/***/ }),

/***/ "./asset/data/Undead_Slayer-noborder.data.png":
/*!****************************************************!*\
  !*** ./asset/data/Undead_Slayer-noborder.data.png ***!
  \****************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

module.exports=(__webpack_require__(/*! alt1/base */ "../node_modules/alt1/dist/base/index.js").ImageDetect.imageDataFromBase64)("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")

/***/ }),

/***/ "./asset/data/Vulnerability_bordered.data.png":
/*!****************************************************!*\
  !*** ./asset/data/Vulnerability_bordered.data.png ***!
  \****************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

module.exports=(__webpack_require__(/*! alt1/base */ "../node_modules/alt1/dist/base/index.js").ImageDetect.imageDataFromBase64)("iVBORw0KGgoAAAANSUhEUgAAABQAAAAUCAMAAAC6V+0/AAAATlBMVEUAAADy7/z7/f1XU4Lf4Oby7/zAxtOQlMbu7vDe3/aoqdnMAADP2/g4LFjP1+eRi7h6bagtMD92Y5euvNpeZodpToCBh7FiaZYxIkC6vsGNeFRnAAAAAnRSTlMAnxYjQ+0AAAB7SURBVHheldDpCgJBDAPgMe3ce3ke7/+iuoZixUUwv4aPEJiGvpHQw1d+Ypbxth/l+MbJ1wYizRIHNqvHapsJQNEpArjb5uKbB2JrHnNjMz/hdBaRF9pmrIm1pNE2LyugAKtfibvZb87BNl0a8eOf6q9UFdDC91/33MgDsRcFgY9uxHoAAAAASUVORK5CYII=")

/***/ }),

/***/ "./asset/data/antifire_top.data.png":
/*!******************************************!*\
  !*** ./asset/data/antifire_top.data.png ***!
  \******************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

module.exports=(__webpack_require__(/*! alt1/base */ "../node_modules/alt1/dist/base/index.js").ImageDetect.imageDataFromBase64)("iVBORw0KGgoAAAANSUhEUgAAABkAAAANCAYAAABcrsXuAAADSElEQVQ4T3WSXWhbZRjHz40ycHRa1y7NliZLcpqc74/3nKSr1ZXa5iQz3ehWZ6yFdabJqmXA8MbBcDdWEFBFvBO8FLxzDsS7bQi4IQjeyRTVNl3ztVIju/77vO+aLFAEfnnej+f9//KQSLqbgcGyMImD0adwMEaI+jRs/wQcP4tpT8aMn0DOS2AuE8cs1RmCn7t+RvRxLI43LuB5PJfnS10Bv3g2eQDVfxiqHYZD8gEKS2LWT+JH6zyaZhkN6yJ2Tpto2BfEnp/nScR7Jnxrn6wrkroCfnlYewblloNy08HztG4YFNzHw6KDh2fTaAfj++5KTKcvJcPJTDyR7YmkEBtAiB0ieB3A8oaN5U27t+9SpKlunYrgzisRfDEzihyT8Yk9hdb0FJovFlA338RPZgk5b79IirwwiKX7JmH00d3zaiIyOYjf5+OoLxwXLE7YcFgGL7ka5ij0XpBC62QO23oZWzRVjo31REISf3kYpV+0/0EXNT4zjAfnYqgT24RnOyhkLaye1OAzhu+CY2hM0jTOEolWcM8oIWCp3jRSqhhGPwt3FUIV63TfeX0hisYek7aBq0Ea8+M6ik4SD7QK6tl5qiuCLdpXHQ8nPPZYwj8CV8GWWoF+LoL52ymBvjCKu3MJmKYNSzfQLI2i/UYE7aUI7tP6gzNjCMw4auoKURHBeSeFis1QozWH5wqJ440j76ioKRXYizHMfT8msBePo/ZqFO9Py2C6gp1qGLtrI9i9TFO9FcY3Z8LiTZeiJcNzGQJbwSZJ+VneUZD1PEg5W8MP6uvYSFfBLiTg9eEYBrZ5+DtH0Lk2hH/Xh9Bafw43lkawQSEbSlVQ0BP4+WwUU76LSdfGx8asOOe5PF8qWBr+JgEnb6niX1N7LYrN5WNQVR1aOo3Oh0N49PlhtD8axLerI71+zvpsBK6uoV0+it/Ox2DT+wLl9DIfS3T8laoKCqYGl5paJLgeyFAUDelUCo++HEb7s0HcqISo71KPm2shMEWGpavYvRJCk945zCeJttdDmZQvFUwdf4xdwp8EXzNq2nl7BO+dToJZCn799Ah2v6bfYPWo6Oly890YOl8N0BQyDJJ0rg9hZy0Ml/k4Zeiih+cWTB3/AevtgvCsrUp3AAAAAElFTkSuQmCC")

/***/ }),

/***/ "./asset/data/bloated.data.png":
/*!*************************************!*\
  !*** ./asset/data/bloated.data.png ***!
  \*************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

module.exports=(__webpack_require__(/*! alt1/base */ "../node_modules/alt1/dist/base/index.js").ImageDetect.imageDataFromBase64)("iVBORw0KGgoAAAANSUhEUgAAABIAAAASCAIAAADZrBkAAAAAAW5vUEUAYtdMlAAAAAlub1BFAAAAAAAAAAAAoYpy1QAAA69JREFUeJwVkUlsG2Ucxb/5lvGMPTOOYzu2szhKk7hriGgiIgStkBoQSlqJIHHocuAAAg4gQIUKoXKgoQeoVAl6KZGQEKIlAhUVkFhiQBCJEFoIxGlaJUrqLHUdb7E99sx4lu9j8s7/p/f+v4fH33hNPpBdWyK3JvssKR9/6iuEOchBwAG2I+AwMzj5yZw6L4l8otcM9ZTUrB8nv1RGMgf8rSueUK3j2DWECUIQchyAADBAKaMUOUc+Hp5+iw/ltlBqZprdz2zjWkNf/iewL3O0ZeyEB3shhghDiDjXuGNjzLGoFV/giFHX2B9LBnWExME85olXs017O+AhXsIj5Ia5JTG342NuFHMwdBBlJpHM+H5FGz3/U/zhTdzf2RGv7wENHvNo8LDSu9d7717jv5s6hO5jsCmAB4e8m+vGHfHVyF+nn3zmZ9Wwr7z0GF617kAsB0enfAoGkH37RTHWQ1pa0fKCIXi45h4y/sL606ebkWLV18O3zozJTApRCYdqfe1Cp7knRTH6bDxvaA6g3Njbwdya2T0kXvmgYFTp5LniE8+FQK49yHTEqEY1fJAfNA2HYQth5NguAJcepTs8WP6uqavUsRhEQFII4IjCoYy1XqRZDFxxABl+qVNFPEQNFx/XFrbTYd7gWKADlzftpjbiImXugrAclKHoIdj2bgNNEL9/sf/SRfN5f3Kisn/U1xNChQHy6dncsxeC33xYfeBxKRpzspCt6rmSWladAp7KzPGcNJwaDgsTh/rM/ovgUOAYRxftnrT/QmgwIXe9z9zla1WPw1kAQIfZgEFs2HrUF4Oi8edibbivJWFHZjO/PBSR3z1bOnxKbitZl8/XTpwJVF65LEAB8Q2LalpDxw92KlltjYrtzsvfTV0a8XnQzV9r16q54qp2/T1r70dScd3avOtIqr9mN2TCG2SVj2zjem8ynh5J5/VeoVZMG927RVGGw0eVud91TGC5YYW7SMduJw9MQqxC1XA8sLlLxZXbvUI5ussX5ZAlz55UO74WRBiNejGhHpHXHCfxiKi+OZGlG8uNhYGmoUqpOztj4a0NmOf+bVci7jU/e9xz8nphk4ZJEJM04aGqOd2z7xRXIkFfYYlVUiB5pHV0pdaCdUf3e2UlpGfafiCpscyP+bWrx4Ov2+c+L2RL5i45dOMqa+BtTTebBPG+5+/bxHrUdwo3x+hQwreFp2/M5zu1jXpZtypeTt83IERoWxSDSNI3E4jFkvMpxavYQVrt+m0R1P8HgULKvA0RLa0AAAAASUVORK5CYII=")

/***/ }),

/***/ "./asset/data/fsoaSpecBuff-noborder.data.png":
/*!***************************************************!*\
  !*** ./asset/data/fsoaSpecBuff-noborder.data.png ***!
  \***************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

module.exports=(__webpack_require__(/*! alt1/base */ "../node_modules/alt1/dist/base/index.js").ImageDetect.imageDataFromBase64)("iVBORw0KGgoAAAANSUhEUgAAABkAAAAZCAYAAADE6YVjAAACIklEQVR4nMWUXW/SYBiGyzAGVRgbSlgKK0BZS+k3A7oW2PgsGwOQCBiXzRiNzARxfmbxFP01Ro899L8Yf4GHHtwCRpMlnjDaeCXv4XNfvd8nbwliCTxDHcmvY3CfHiL05SmcDQHL5F2gb7ZwNRtG5SSJ0yGH8UiA8USFw3vdOokh6UjLNAb9GB4/YsBIt+EzAiA2iLkkUauikruzvJBXt6Ad8aBe50FcWwGRvgLCICAneGTPNBDrNxaX8BHpwlAlJ+LegMZqjwXR9oKouHByGse7cxX1SQneSQvfPv6kFxbdNQ/+ivJ5Cey0iTM73UPXB1fTgwdDBm/fyKi9L8P9oQ0mxC/ehg4H0SsN5oOyQONwn4N6TMGl+7E/TOLFmTiXmJMinF3l8juJUiQUnoGW4tHvZKbBCsolEvX7HF6epzB6pWJzZMDhu7nc4tNiAvVdDc1aBs+fKRiPZITjQZAhNzaCbhB+z3KCFM+iWkiDi1MoG9toVXMoaKJ174ONUYhRJIKBdagiA01JopCVQZGkdRJ+KwJN5VHcUSBxcejyjnXhf5h99baUQIIOWx8+w8zr4GnOnvDfAgO+tVV7BN8//1BEJgo2FrWvQbtYQ1FP2SeY0SzvISNI9krqu3mw1CV+cv9i2D2eB3WKTRwd9NAo5dA1TQT8PmtbGGkSncMo1rwuOBwr82OpYIZgbOKWGbfv/ht7GlICjVIhYp9ESFp89/+DX5nr3Kxd0jHZAAAAAElFTkSuQmCC")

/***/ }),

/***/ "./asset/data/putrid_zombie-top.data.png":
/*!***********************************************!*\
  !*** ./asset/data/putrid_zombie-top.data.png ***!
  \***********************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

module.exports=(__webpack_require__(/*! alt1/base */ "../node_modules/alt1/dist/base/index.js").ImageDetect.imageDataFromBase64)("iVBORw0KGgoAAAANSUhEUgAAABkAAAANCAIAAADTzFK5AAAAAW5vUEUAYtdMlAAAAAlub1BFAAAAAAAAAAAAoYpy1QAAAulJREFUeJw1U81rVUcUP+fMzHv3XRNNoFThCSl+oPhJ6aKF0kVcCEp1UylFrF256MqNqy4E40JQ/DNcaRNESEDaRSnNIgQEFUys+IW1pYbYF1/ey71v5pz+5ol3cS93Zs7v/D7O+EPbzzELSxAKxESmahEfYSfkmRvYJVIroztcFie2Ppq/w8/rvWdOPbp9k2uamJxMc+8GD7uUzIsIGcociomZ2NjETIU9DxeZPRZld1l/FZdmf+barEw4x5F2Hj/my1b8LHB06cWGJxSIsKHGoThTIyVORKCDncAU2Jm0i1e/z368a9/4nj1LN27Gbh/9/plfHNh6f9Dd/8Op6pcOmgs6c35QmQkaJ1NAgyHeYUjQeIV2HT3+9Nbs5k92UNLl6Rlphd7rN9SgA6e/q9e6blPDf9Dis2vZoACF5pJZZkXkHRaN9KUGHd18cOLJwl0GV29klJoclKlnNF3Hf5N30sCq4zBk4d1718gp7IdgHloJ3Qk+yH9/vXRvUmwZWiIPGVg0xWFaEX6r4IWkUCwue5wtAxyAoEvEaPgLKAnkRgNv2I5vTj6+PaOxQvboZRq7b18VW8ZpNWMV0KZQREPvcpzAhWeEo5Lhsc9pQLQKXfZs7i5FnGbVhI5WDUJzRBrOTPx7p+CAEUvTudJz4Tiy9CzVubXL4aDG9KECNq33Mz5gXdKNCoqK8TGrqsSSE8yMmuy3edof3L6GttRHz3+qPVD3N0uVp84jjAd0aPdZ+lJ6IyvLd27pan+okXzVHHQ3AIP5Ii45HGzKidbCpSvut4JCsHITjPr8/DmZi+6ecT9bZx21e8RL7NoffXrmx4Xr13ighNhfJ+sjI/AKAi72dWPx8lXMl0VkU3O/p+XIHxcufjH1k7OGLDnqWE4bw4EJeJbsPuT61F2jpqeWeI8ZwfiMeTlSLE5dHd5Fi1UN53xZqHft779dG606259ubR8Iv3ruWL5hMBxj0FFRiqq0Xknb2aizdfsfhQlMvDg+e7cAAAAASUVORK5CYII=")

/***/ }),

/***/ "./asset/data/skeleton_warrior-top.data.png":
/*!**************************************************!*\
  !*** ./asset/data/skeleton_warrior-top.data.png ***!
  \**************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

module.exports=(__webpack_require__(/*! alt1/base */ "../node_modules/alt1/dist/base/index.js").ImageDetect.imageDataFromBase64)("iVBORw0KGgoAAAANSUhEUgAAABkAAAANCAIAAADTzFK5AAAAAW5vUEUAYtdMlAAAAAlub1BFAAAAAAAAAAAAoYpy1QAAA1xJREFUeJxFk39oW1UUx8/98X7kpdmabE1WbVPWdVpdNzVqUafunyFChf2zUf1DZQOZhiHdP1a3gGxqB/NHddB/nBMEqZrN2RQn+0Nw3UTmDyiCOCpmNbVbkza0TZuXvJf37j3epMOdy7tcHud87vfccw7f3n6AICOEEqpT4EAAUEj0iTKgMtKcP/Q0fvEhTE+B+oHIXh9evPQ5cG5EtzbXYsZCleVu6DPzKo4T4LQexlQkJQ0WUHX2Q+bCS7vF+McwlIH/DdG5Px548B3N98pvHKSPvJz7anBLd1JEI9r8imKpxZUuJaquDhhqtLD/sdq3I3Dqu9sQw+i49HPUk7/tvA9On6N2jTS3QCxi3tGTXcl0bdhHlmoqXuFoY1fyeLG/177yKZwZv01xnXsv/sLtWul4ZuLFXnNbT9PMKlg8+tzgXGpfJDniDPat7uVUtnJGdYKoKO7mWDERFOkUNPJsGOk5/wMUbTeZxrmSgaJlY3Dh+PCmU5e1VddtCcpImBhW7MTFQqov8PwnnCoWIcU9CfubY5Bjt0CaET+d0Rcrlf2f6WWhEwaUg4Sm7KK4PK2XvEC+QgVuuru/cKSvdWDU6Njxz9WTvPzkPU7Mqpx7GyhDxPW9T9x5+BhbrtaSZ4kndEQgjCqWSpZC+PeCNWdb+SrzfD+oB9s6oLOLSLbx2bduDD3DF91J/H4y/OiubcmjpmnMfvmrM5jhwLhpoiZRFVUS5sq6WgX1pD5bVQVSMs0lt4yEhcI339vT9tqFDXtTPDF0solR+DE7e3RcSsXg0rdL7k2DhtZp7dL1VJ+otqFVn6FEVWgECmoD7vjWvLPlrlf+nv7LL2StrTt56al3y9SQoaCIhq5PfmBXclJ4t55eldc0H9/8PkVAS6cVl9QhjXZWGSMGiq4IW7yrq5A+0vbqWXUpQU6d+PrrV96sucuoQCjrzkDiiYc7e7ZPjB7a9cAZXhWUCrJGAiJQ6Kq3VzzIVzofSuXbLzjxdZwRJgOaszpT95JrFFgbl4Nfj6nhmrn2p9fdql0r8KrfQBGpfNSnhs4HXPaWNAh299m6z4FqMhRYmkqj56J6EeUmRP/A4fRHw0OJHQOjo9mrP/2be2H3gTEyNsV8URdc5zSSFEqb7oV0/48J58TIf8iTdyIW+EFBAAAAAElFTkSuQmCC")

/***/ }),

/***/ "./asset/data/supreme_overload.data.png":
/*!**********************************************!*\
  !*** ./asset/data/supreme_overload.data.png ***!
  \**********************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

module.exports=(__webpack_require__(/*! alt1/base */ "../node_modules/alt1/dist/base/index.js").ImageDetect.imageDataFromBase64)("iVBORw0KGgoAAAANSUhEUgAAABkAAAAZCAMAAADzN3VRAAAAAW5vUEUAYtdMlAAAAAlub1BFAAAAAAAAAAAAoYpy1QAAAXRQTFRFAAAAbJeK1rhVSU42YYp6FzpEKnOMFTpGOqS0KnWMKHeSKXONH1ptJWiBKXeRJWuGKHKLMY2eJ3CJJm2GJW6FKHmQLYWcDicxMZKzMJWzFT1IK4KfJ3WOFD9OKX2XImR/BxYbJXOMLYmqJ3aOHVRpCBofK4KdImmCb63IR4qfGkhXCCgzKn+eJnCIosjarMjYl7LAgZCYVGduLZO5LZvFJHWQtNLis8/fsszbrcPPlZ6lSpGrNLjeLqbPKpa9Jn+fFEBQwtbguNDfuNHdrMTQfoyTP8/gNcHbM7naMKzSHmyIOmd1zNjfzNfeytbessXQdJSkPtPfN8rbNcDaMbPVKpvFH3WUBhohN2V0zNnfvcbMP9bcOM/bNsfcMbraLKXQIXucDR8meouVONDcN8ncMr3bLafRInyeAx4kNL/bLaXPIneXAB4jNcbcMbnYK5/IGV53M8LbLrDVJYuwDjJACyAoJ4GLH3eLG2d/DzpLBRAUBBAUkqXT3gAAAHx0Uk5TAP///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////9uim3EAAADRSURBVHicY2BAAEYGXICJGZcMCysuGTZ2HBIcnFw4ZLh5ePmwy/AzMAhglRAUYmAQxq5HRFRMHLuMhKQUDhdIy8hil5CTV1DEKqGkrKKqpo5NRkNTS1tHF4uEnr6BoZGxiSmGhJm5haWVtY2tnb0Dmoyjk7OLq5u7h6edF6qEt4+vn39AYFBwSGhYOIpMRKQvQxRDdExsXHxCIqqmSAYfhiSG5JTUtPQMVBkfCJWSmZWdg81PDLl5+QVYJRgKi4pLMEVLGcoYyisqsWupqkbiAAC3kh+rvrqfOQAAAABJRU5ErkJggg==")

/***/ }),

/***/ "./asset/data/vengeful_ghost-top.data.png":
/*!************************************************!*\
  !*** ./asset/data/vengeful_ghost-top.data.png ***!
  \************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

module.exports=(__webpack_require__(/*! alt1/base */ "../node_modules/alt1/dist/base/index.js").ImageDetect.imageDataFromBase64)("iVBORw0KGgoAAAANSUhEUgAAABkAAAANCAIAAADTzFK5AAAAAW5vUEUAYtdMlAAAAAlub1BFAAAAAAAAAAAAoYpy1QAAAypJREFUeJwlU91rFFcUv+ecO/fO7Gay25jSkCr4RWIbwUawFdKUisU+FEGQiiD9A4ogCLF9LIW8tA8+tQ/tYwuBUgyG9qVNzVNQC1W0sR+RTGyNiRpdEzeb3Z3Z+9Fz03kY7tx7zm9+H+fK4Z4xEAiC+C3ACwACSUIjKgAQwlvfsbbjfM4LIcIOhDofFkBCCOfaxhe8kHy8hcWNhEgSS7GsKFEuBqsPz++Awvd/tmgePGqZJ846RuBiBkIARWVN3asXBuLxK+idF06ikBAIEGMRKI3p4uQbGHMLovUFwsLXg9s/T9VM2znrmRCjeRdhnFLfX7Mje0anN1iJYIIgESPhA1tkwoBcPXQ6u32xP+qSDoEpgveL4wNDo0sd23bCemEZTFL8x/Tr6eQ9xo4wkagK25TAvDDY8L9SxkWHolb4JPD1TeNiorVGbNNcbuR2UwQ5ofilr5Yevl/dSRUN6fLE4cqpydDAvw9YEBIgVC6JmOHWnmhNzbTn5ljuv598+OJ43djcCSeCCFXOWvTCTqdx/vJhqD3r8xUZuLA3ILcES3b01kfdURQME8YWd34PVjtXe6vUT0luJGGkMNVRpVbFuFyZ/+UIzf7tXu0ljGWQFh4kCCFyNORZNDsoGj9Oh+iDVN+ZuELwMpFWWM5uH4OCOE9qehl5+/bA5vez2c+H2PtgmQSlqJTInvor2oogL6rbrvfeWVuY5/nh8/LJI9HEkqYu5UpkMV/4J9m9AyIwzfbmpesHvzTZcc0obE9Jy25N6Y2xGjTWkvu22LvfJZ5ndtuFc81rN+OhfRzwrQ9WD3zbw86zkNfOrFw/O8cFoJODX9i2Xe8bmZKMUpa9v42t6U4hnqMzKiejVjKn9+I2gYTp6CGbyk62XGDr7sn1wUu9/R/fzbXRMRVPiuFvSvViJbd1JwoZy+rVwe9KzaN5HiFHJMB56TfWbdMA51flT9icumpbDZsXzxORjfrdM/7PT63ycf7Y5PZZ7hrW5zx3zJKGs3fvmMvw5gnH3eEOMLmKmv/VHBhxT6H+0w8ijjwz9ODajVq1+fTYUgoDft3supZ07GoY9a2L9R+ee2lPH77d2gAAAABJRU5ErkJggg==")

/***/ }),

/***/ "../node_modules/css-loader/dist/cjs.js!./css/betterbuffsbar.css":
/*!***********************************************************************!*\
  !*** ../node_modules/css-loader/dist/cjs.js!./css/betterbuffsbar.css ***!
  \***********************************************************************/
/***/ ((module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _node_modules_css_loader_dist_runtime_noSourceMaps_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../node_modules/css-loader/dist/runtime/noSourceMaps.js */ "../node_modules/css-loader/dist/runtime/noSourceMaps.js");
/* harmony import */ var _node_modules_css_loader_dist_runtime_noSourceMaps_js__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_node_modules_css_loader_dist_runtime_noSourceMaps_js__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _node_modules_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../node_modules/css-loader/dist/runtime/api.js */ "../node_modules/css-loader/dist/runtime/api.js");
/* harmony import */ var _node_modules_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(_node_modules_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1__);
/* harmony import */ var _node_modules_css_loader_dist_runtime_getUrl_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../node_modules/css-loader/dist/runtime/getUrl.js */ "../node_modules/css-loader/dist/runtime/getUrl.js");
/* harmony import */ var _node_modules_css_loader_dist_runtime_getUrl_js__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(_node_modules_css_loader_dist_runtime_getUrl_js__WEBPACK_IMPORTED_MODULE_2__);
// Imports



var ___CSS_LOADER_URL_IMPORT_0___ = new URL(/* asset import */ __webpack_require__(/*! ../../../asset/nis/bg.png */ "./asset/nis/bg.png"), __webpack_require__.b);
var ___CSS_LOADER_URL_IMPORT_1___ = new URL(/* asset import */ __webpack_require__(/*! ../../../asset/buffs/desat/virus-desat.png */ "./asset/buffs/desat/virus-desat.png"), __webpack_require__.b);
var ___CSS_LOADER_URL_IMPORT_2___ = new URL(/* asset import */ __webpack_require__(/*! ../../../asset/buffs/virus_black.webp */ "./asset/buffs/virus_black.webp"), __webpack_require__.b);
var ___CSS_LOADER_URL_IMPORT_3___ = new URL(/* asset import */ __webpack_require__(/*! ../../../asset/buffs/virus_blue.webp */ "./asset/buffs/virus_blue.webp"), __webpack_require__.b);
var ___CSS_LOADER_URL_IMPORT_4___ = new URL(/* asset import */ __webpack_require__(/*! ../../../asset/buffs/virus_red.webp */ "./asset/buffs/virus_red.webp"), __webpack_require__.b);
var ___CSS_LOADER_URL_IMPORT_5___ = new URL(/* asset import */ __webpack_require__(/*! ../../../asset/buffs/virus_green.webp */ "./asset/buffs/virus_green.webp"), __webpack_require__.b);
var ___CSS_LOADER_URL_IMPORT_6___ = new URL(/* asset import */ __webpack_require__(/*! ../../../asset/buffs/affliction.png */ "./asset/buffs/affliction.png"), __webpack_require__.b);
var ___CSS_LOADER_URL_IMPORT_7___ = new URL(/* asset import */ __webpack_require__(/*! ../../../asset/buffs/anguish.png */ "./asset/buffs/anguish.png"), __webpack_require__.b);
var ___CSS_LOADER_URL_IMPORT_8___ = new URL(/* asset import */ __webpack_require__(/*! ../../../asset/buffs/desolation.png */ "./asset/buffs/desolation.png"), __webpack_require__.b);
var ___CSS_LOADER_URL_IMPORT_9___ = new URL(/* asset import */ __webpack_require__(/*! ../../../asset/buffs/malevolence.png */ "./asset/buffs/malevolence.png"), __webpack_require__.b);
var ___CSS_LOADER_URL_IMPORT_10___ = new URL(/* asset import */ __webpack_require__(/*! ../../../asset/buffs/ruination.png */ "./asset/buffs/ruination.png"), __webpack_require__.b);
var ___CSS_LOADER_URL_IMPORT_11___ = new URL(/* asset import */ __webpack_require__(/*! ../../../asset/buffs/sorrow.png */ "./asset/buffs/sorrow.png"), __webpack_require__.b);
var ___CSS_LOADER_URL_IMPORT_12___ = new URL(/* asset import */ __webpack_require__(/*! ../../../asset/buffs/torment.png */ "./asset/buffs/torment.png"), __webpack_require__.b);
var ___CSS_LOADER_URL_IMPORT_13___ = new URL(/* asset import */ __webpack_require__(/*! ../../../asset/buffs/turmoil.png */ "./asset/buffs/turmoil.png"), __webpack_require__.b);
var ___CSS_LOADER_URL_IMPORT_14___ = new URL(/* asset import */ __webpack_require__(/*! ../../../asset/buffs/deflect_magic.png */ "./asset/buffs/deflect_magic.png"), __webpack_require__.b);
var ___CSS_LOADER_URL_IMPORT_15___ = new URL(/* asset import */ __webpack_require__(/*! ../../../asset/buffs/deflect_melee.png */ "./asset/buffs/deflect_melee.png"), __webpack_require__.b);
var ___CSS_LOADER_URL_IMPORT_16___ = new URL(/* asset import */ __webpack_require__(/*! ../../../asset/buffs/deflect_necromancy.png */ "./asset/buffs/deflect_necromancy.png"), __webpack_require__.b);
var ___CSS_LOADER_URL_IMPORT_17___ = new URL(/* asset import */ __webpack_require__(/*! ../../../asset/buffs/deflect_ranged.png */ "./asset/buffs/deflect_ranged.png"), __webpack_require__.b);
var ___CSS_LOADER_URL_IMPORT_18___ = new URL(/* asset import */ __webpack_require__(/*! ../../../asset/buffs/protect_from_magic.png */ "./asset/buffs/protect_from_magic.png"), __webpack_require__.b);
var ___CSS_LOADER_URL_IMPORT_19___ = new URL(/* asset import */ __webpack_require__(/*! ../../../asset/buffs/protect_from_melee.png */ "./asset/buffs/protect_from_melee.png"), __webpack_require__.b);
var ___CSS_LOADER_URL_IMPORT_20___ = new URL(/* asset import */ __webpack_require__(/*! ../../../asset/buffs/protect_from_necromancy.png */ "./asset/buffs/protect_from_necromancy.png"), __webpack_require__.b);
var ___CSS_LOADER_URL_IMPORT_21___ = new URL(/* asset import */ __webpack_require__(/*! ../../../asset/buffs/protect_from_ranged.png */ "./asset/buffs/protect_from_ranged.png"), __webpack_require__.b);
var ___CSS_LOADER_URL_IMPORT_22___ = new URL(/* asset import */ __webpack_require__(/*! ../../../asset/buffs/soul_split.png */ "./asset/buffs/soul_split.png"), __webpack_require__.b);
var ___CSS_LOADER_URL_IMPORT_23___ = new URL(/* asset import */ __webpack_require__(/*! ../../../asset/buffs/blank.png */ "./asset/buffs/blank.png"), __webpack_require__.b);
var ___CSS_LOADER_URL_IMPORT_24___ = new URL(/* asset import */ __webpack_require__(/*! ../../../asset/nis/checkmark.png */ "./asset/nis/checkmark.png"), __webpack_require__.b);
var ___CSS_LOADER_URL_IMPORT_25___ = new URL(/* asset import */ __webpack_require__(/*! ../../../asset/nis/imgbutton.png */ "./asset/nis/imgbutton.png"), __webpack_require__.b);
var ___CSS_LOADER_URL_IMPORT_26___ = new URL(/* asset import */ __webpack_require__(/*! data:font/opentype;base64, */ "data:font/opentype;base64,"), __webpack_require__.b);
var ___CSS_LOADER_URL_IMPORT_27___ = new URL(/* asset import */ __webpack_require__(/*! ../../../asset/nis/scroll.png */ "./asset/nis/scroll.png"), __webpack_require__.b);
var ___CSS_LOADER_URL_IMPORT_28___ = new URL(/* asset import */ __webpack_require__(/*! ../../../asset/nis/scrollhor.png */ "./asset/nis/scrollhor.png"), __webpack_require__.b);
var ___CSS_LOADER_URL_IMPORT_29___ = new URL(/* asset import */ __webpack_require__(/*! ../../../asset/nis/button.png */ "./asset/nis/button.png"), __webpack_require__.b);
var ___CSS_LOADER_EXPORT___ = _node_modules_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1___default()((_node_modules_css_loader_dist_runtime_noSourceMaps_js__WEBPACK_IMPORTED_MODULE_0___default()));
var ___CSS_LOADER_URL_REPLACEMENT_0___ = _node_modules_css_loader_dist_runtime_getUrl_js__WEBPACK_IMPORTED_MODULE_2___default()(___CSS_LOADER_URL_IMPORT_0___);
var ___CSS_LOADER_URL_REPLACEMENT_1___ = _node_modules_css_loader_dist_runtime_getUrl_js__WEBPACK_IMPORTED_MODULE_2___default()(___CSS_LOADER_URL_IMPORT_1___);
var ___CSS_LOADER_URL_REPLACEMENT_2___ = _node_modules_css_loader_dist_runtime_getUrl_js__WEBPACK_IMPORTED_MODULE_2___default()(___CSS_LOADER_URL_IMPORT_2___);
var ___CSS_LOADER_URL_REPLACEMENT_3___ = _node_modules_css_loader_dist_runtime_getUrl_js__WEBPACK_IMPORTED_MODULE_2___default()(___CSS_LOADER_URL_IMPORT_3___);
var ___CSS_LOADER_URL_REPLACEMENT_4___ = _node_modules_css_loader_dist_runtime_getUrl_js__WEBPACK_IMPORTED_MODULE_2___default()(___CSS_LOADER_URL_IMPORT_4___);
var ___CSS_LOADER_URL_REPLACEMENT_5___ = _node_modules_css_loader_dist_runtime_getUrl_js__WEBPACK_IMPORTED_MODULE_2___default()(___CSS_LOADER_URL_IMPORT_5___);
var ___CSS_LOADER_URL_REPLACEMENT_6___ = _node_modules_css_loader_dist_runtime_getUrl_js__WEBPACK_IMPORTED_MODULE_2___default()(___CSS_LOADER_URL_IMPORT_6___);
var ___CSS_LOADER_URL_REPLACEMENT_7___ = _node_modules_css_loader_dist_runtime_getUrl_js__WEBPACK_IMPORTED_MODULE_2___default()(___CSS_LOADER_URL_IMPORT_7___);
var ___CSS_LOADER_URL_REPLACEMENT_8___ = _node_modules_css_loader_dist_runtime_getUrl_js__WEBPACK_IMPORTED_MODULE_2___default()(___CSS_LOADER_URL_IMPORT_8___);
var ___CSS_LOADER_URL_REPLACEMENT_9___ = _node_modules_css_loader_dist_runtime_getUrl_js__WEBPACK_IMPORTED_MODULE_2___default()(___CSS_LOADER_URL_IMPORT_9___);
var ___CSS_LOADER_URL_REPLACEMENT_10___ = _node_modules_css_loader_dist_runtime_getUrl_js__WEBPACK_IMPORTED_MODULE_2___default()(___CSS_LOADER_URL_IMPORT_10___);
var ___CSS_LOADER_URL_REPLACEMENT_11___ = _node_modules_css_loader_dist_runtime_getUrl_js__WEBPACK_IMPORTED_MODULE_2___default()(___CSS_LOADER_URL_IMPORT_11___);
var ___CSS_LOADER_URL_REPLACEMENT_12___ = _node_modules_css_loader_dist_runtime_getUrl_js__WEBPACK_IMPORTED_MODULE_2___default()(___CSS_LOADER_URL_IMPORT_12___);
var ___CSS_LOADER_URL_REPLACEMENT_13___ = _node_modules_css_loader_dist_runtime_getUrl_js__WEBPACK_IMPORTED_MODULE_2___default()(___CSS_LOADER_URL_IMPORT_13___);
var ___CSS_LOADER_URL_REPLACEMENT_14___ = _node_modules_css_loader_dist_runtime_getUrl_js__WEBPACK_IMPORTED_MODULE_2___default()(___CSS_LOADER_URL_IMPORT_14___);
var ___CSS_LOADER_URL_REPLACEMENT_15___ = _node_modules_css_loader_dist_runtime_getUrl_js__WEBPACK_IMPORTED_MODULE_2___default()(___CSS_LOADER_URL_IMPORT_15___);
var ___CSS_LOADER_URL_REPLACEMENT_16___ = _node_modules_css_loader_dist_runtime_getUrl_js__WEBPACK_IMPORTED_MODULE_2___default()(___CSS_LOADER_URL_IMPORT_16___);
var ___CSS_LOADER_URL_REPLACEMENT_17___ = _node_modules_css_loader_dist_runtime_getUrl_js__WEBPACK_IMPORTED_MODULE_2___default()(___CSS_LOADER_URL_IMPORT_17___);
var ___CSS_LOADER_URL_REPLACEMENT_18___ = _node_modules_css_loader_dist_runtime_getUrl_js__WEBPACK_IMPORTED_MODULE_2___default()(___CSS_LOADER_URL_IMPORT_18___);
var ___CSS_LOADER_URL_REPLACEMENT_19___ = _node_modules_css_loader_dist_runtime_getUrl_js__WEBPACK_IMPORTED_MODULE_2___default()(___CSS_LOADER_URL_IMPORT_19___);
var ___CSS_LOADER_URL_REPLACEMENT_20___ = _node_modules_css_loader_dist_runtime_getUrl_js__WEBPACK_IMPORTED_MODULE_2___default()(___CSS_LOADER_URL_IMPORT_20___);
var ___CSS_LOADER_URL_REPLACEMENT_21___ = _node_modules_css_loader_dist_runtime_getUrl_js__WEBPACK_IMPORTED_MODULE_2___default()(___CSS_LOADER_URL_IMPORT_21___);
var ___CSS_LOADER_URL_REPLACEMENT_22___ = _node_modules_css_loader_dist_runtime_getUrl_js__WEBPACK_IMPORTED_MODULE_2___default()(___CSS_LOADER_URL_IMPORT_22___);
var ___CSS_LOADER_URL_REPLACEMENT_23___ = _node_modules_css_loader_dist_runtime_getUrl_js__WEBPACK_IMPORTED_MODULE_2___default()(___CSS_LOADER_URL_IMPORT_23___);
var ___CSS_LOADER_URL_REPLACEMENT_24___ = _node_modules_css_loader_dist_runtime_getUrl_js__WEBPACK_IMPORTED_MODULE_2___default()(___CSS_LOADER_URL_IMPORT_24___);
var ___CSS_LOADER_URL_REPLACEMENT_25___ = _node_modules_css_loader_dist_runtime_getUrl_js__WEBPACK_IMPORTED_MODULE_2___default()(___CSS_LOADER_URL_IMPORT_25___);
var ___CSS_LOADER_URL_REPLACEMENT_26___ = _node_modules_css_loader_dist_runtime_getUrl_js__WEBPACK_IMPORTED_MODULE_2___default()(___CSS_LOADER_URL_IMPORT_26___);
var ___CSS_LOADER_URL_REPLACEMENT_27___ = _node_modules_css_loader_dist_runtime_getUrl_js__WEBPACK_IMPORTED_MODULE_2___default()(___CSS_LOADER_URL_IMPORT_27___);
var ___CSS_LOADER_URL_REPLACEMENT_28___ = _node_modules_css_loader_dist_runtime_getUrl_js__WEBPACK_IMPORTED_MODULE_2___default()(___CSS_LOADER_URL_IMPORT_28___);
var ___CSS_LOADER_URL_REPLACEMENT_29___ = _node_modules_css_loader_dist_runtime_getUrl_js__WEBPACK_IMPORTED_MODULE_2___default()(___CSS_LOADER_URL_IMPORT_29___);
// Module
___CSS_LOADER_EXPORT___.push([module.id, `:root {
  --brightness: ,75;
}

body {
  display: block;
  padding: 0 .5rem;
  background-color: #0F0F0F;
  background-image: url(${___CSS_LOADER_URL_REPLACEMENT_0___});
  color: #FFFFFF;
  overflow-x: hidden;
  overflow-y: auto;
  margin: 0;
  opacity: 1;
}

#Settings {
  display: block;
  color: #F1F1F1;
}

#Settings {
  padding: .5rem;
}

#Settings a {
  color: #CEFC92;
}

#Settings a:visited,
#Settings a:hover {
  color: #57799e;
}

#Settings h2 {
  text-transform: uppercase;
  letter-spacing: 2px;
  text-align: center;
}

#Settings h2 + p {
  text-align: center;
}

#Settings h3 {
  letter-spacing: 1px;
}

#Settings h2,
#Settings h3 {
  color: #ffcb05;
  text-shadow: 1px 1px #000000;
}

#Settings label {
  font-family: sans-serif;
  font-size: 14px;
  color: #94afbd;
  text-shadow: 1px 1px #000000;
}

#Settings .setting:nth-child(2n+0) {
  background-color: #1c2c34;
  padding: 4px;
}

#Settings .setting:nth-child(2n+0):hover {
  background-color: #1c3b40;
}

#Settings .setting:nth-child(2n+1) {
  background-color: #071820;
  padding: 4px;
}

#Settings .setting:nth-child(2n+1):hover {
  background-color: #03282d;
}

#Settings .reverse-setting {
  flex-direction: row-reverse;
  align-items: center;
  justify-content: space-between;
}

#Settings .flex u,
#Settings .reverse-setting u {
  display: block;
  text-decoration: none;
  color: #a4c2d1;
  margin-bottom: 2px;
}

#OverlayCanvasOutput {
  display: none;
}

#BetterBuffsBar {
  width: 100%;
  text-align: center;
}

#BetterBuffsBar.overlay-disabled {
  padding: 5px;
}

#BetterBuffsBar.overlay-disabled p,
#BetterBuffsBar.overlay-disabled h2 {
  display: none;
}

#BetterBuffsBar.overlay-disabled > *:not(.tracked-regions) {
  opacity: 0;
  height: 0;
}

#BetterBuffsBar.overlay-disabled:hover > *:not(.tracked-regions) {
  opacity: 1;
  height: initial;
}

#BetterBuffsBar.overlay-disabled ~ #Settings {
  opacity: 0;
}

#BetterBuffsBar.overlay-disabled:hover ~ #Settings,
#BetterBuffsBar.overlay-disabled ~ #Settings:hover {
  opacity: 1;
}

#BetterBuffsBar.big-head-mode .tracked-region {
  display: grid;
  width: 100%;
  grid-template-areas:
    "first first . . . . . "
    "first first . . . . . "
    ". . . . . . ."
    ". . . . . . ."
    ". . . . . . ."
    ". . . . . . ."
}

#BetterBuffsBar.big-head-mode .tracked-region li:nth-child(1) {
  grid-area: first;
  width: 58px;
  height: 58px;
  background-size: cover;
}

#NameOutput {
  display: block;
  height: 20px;
  margin-top: 1rem;
}

.tracked-region {
  --maxcount: 5;
  --scale: 100;
  --totalitems: 10;
  width: auto;
  min-height: calc(((var(--totalitems) / var(--maxcount)) + 1) * (clamp(1, var(--scale) / 100, 2) * 27px) + (clamp(1, var(--scale) / 100, 2) * 27px));
  display: grid;
  justify-content: flex-start;
  align-items: flex-start;
  list-style: none;
  margin: 0;
  padding:0;
  gap: 2px;
  grid-template-columns: repeat(var(--maxcount),30px);
  grid-template-rows: repeat(8, 30px);
  position: relative;
}

html:not(.beta) .beta-only {
  display: none !important;
}

.tracked-region .spacer {
  background-color: transparent !important;
}

#UntrackedBuffs .spacer {
  background-color: #3e3e3e !important;
}

.tracked-region:hover .spacer {
  background-color: red !important;
}

.tracked-region::before {
  width: calc(100% + 4px);
  height: calc(100% + 4px);
  content:'';
  display: block;
  position: absolute;
  top: -2px;
  left: -2px;
  border: solid 2px green;
}

#BetterBuffsBar.big-head-mode .tracked-region li:nth-child(1) img {
  width: 100% !important;
  height: 100% !important;
}

#BetterBuffsBar.hide-overlay .tracked-region {
  opacity: 0;
}

#UntrackedBuffs {
  display: flex;
  align-items: flex-start;
  justify-content: flex-start;
  width: 350px;
  max-width: 100%;
  padding: 0;
  margin: 0 auto;
  list-style: none;
  flex-wrap: wrap;
}

.tracked-region li,
#UntrackedBuffs li {
  position: relative;
  display: flex;
  width: 27px;
  height: 27px;
  margin: 1px;
}

.tracked-region li img,
#UntrackedBuffs li img {
  background-color: #3e3e3e;
}

.tracked-region li::after,
#UntrackedBuffs li::after {
  display: block;
  content: attr(data-time);
  z-index: 3;
  font-family: 'trajan-pro-3', sans-serif;
  position: absolute;
  left: 2px;
  bottom: 0;
  font-size: 10px;
  color: #FFFFFF;
  font-weight: 300;
}

.tracked-region li::before,
#UntrackedBuffs li::before {
  display: block;
  content: attr(data-time);
  z-index: 3;
  font-family: 'trajan-pro-3', sans-serif;
  position: absolute;
  left: 3px;
  bottom: -1px;
  font-size: 10px;
  color: #000000;
  font-weight: 300;
}

.tracked-region .spacoer {
  background-color: transparent !important;
}

#LantadymeIncense.inactive::before,
#LantadymeIncense.inactive::after {
  font-size: 8px;
  content: 'Lant';
}

#DwarfWeedIncense.inactive::before,
#DwarfWeedIncense.inactive::after {
  font-size: 8px;
  content: 'Dwrf'
}

#FellstalkIncense.inactive::before,
#FellstalkIncense.inactive::after {
  font-size: 8px;
  content: 'Fell'
}

#KwuarmIncense.inactive::before,
#KwuarmIncense.inactive::after {
  font-size: 8px;
  content: 'Kwrm'
}


#AncientElvenRitualShardDebuff.inactive::before,
#AncientElvenRitualShardDebuff.inactive::after {
  content: 'use'
}

#EnhancedExcaliburDebuff.inactive::before,
#EnhancedExcaliburDebuff.inactive::after {
  content: 'use'
}

#AdrenalinePotionDebuff.inactive::before,
#AdrenalinePotionDebuff.inactive::after {
  content: 'adr'
}

#VirusDebuff[data-virus=""] {
  background-image: url(${___CSS_LOADER_URL_REPLACEMENT_1___});
}

#VirusDebuff[data-virus="BLK"] {
  background-image: url(${___CSS_LOADER_URL_REPLACEMENT_2___});
}

#VirusDebuff[data-virus="BLK"]::before,
#VirusDebuff[data-virus="BLK"]::after {
  content: 'BLK'
}

#VirusDebuff[data-virus="BLU"] {
  background-image: url(${___CSS_LOADER_URL_REPLACEMENT_3___});
}

#VirusDebuff[data-virus="BLU"]::before,
#VirusDebuff[data-virus="BLU"]::after {
  content: 'BLU'
}

#VirusDebuff[data-virus="RED"] {
  background-image: url(${___CSS_LOADER_URL_REPLACEMENT_4___});
}

#VirusDebuff[data-virus="RED"]::before,
#VirusDebuff[data-virus="RED"]::after {
  content: 'RED'
}

#VirusDebuff[data-virus="GRN"] {
  background-image: url(${___CSS_LOADER_URL_REPLACEMENT_5___});
}

#VirusDebuff[data-virus="GRN"]::before,
#VirusDebuff[data-virus="GRN"]::after {
  content: 'GRN'
}

#VulnerabilityDebuff.inactive::before,
#VulnerabilityDebuff.inactive::after {
  content:  'vuln' !important;
  font-size: 8px !important;
  left: 1px !important;
}

#DpsPrayer[data-prayer="affliction"] {
  background-image: url(${___CSS_LOADER_URL_REPLACEMENT_6___});
}

#DpsPrayer[data-prayer="anguish"] {
  background-image: url(${___CSS_LOADER_URL_REPLACEMENT_7___});
}

#DpsPrayer[data-prayer="desolation"] {
  background-image: url(${___CSS_LOADER_URL_REPLACEMENT_8___});
}

#DpsPrayer[data-prayer="malevolence"] {
  background-image: url(${___CSS_LOADER_URL_REPLACEMENT_9___});
}

#DpsPrayer[data-prayer="ruination"] {
  background-image: url(${___CSS_LOADER_URL_REPLACEMENT_10___});
}

#DpsPrayer[data-prayer="sorrow"] {
  background-image: url(${___CSS_LOADER_URL_REPLACEMENT_11___});
}

#DpsPrayer[data-prayer="torment"] {
  background-image: url(${___CSS_LOADER_URL_REPLACEMENT_12___});
}

#DpsPrayer[data-prayer="turmoil"] {
  background-image: url(${___CSS_LOADER_URL_REPLACEMENT_13___});
}

#OverheadPrayer[data-prayer="deflectmagic"] {
  background-image: url(${___CSS_LOADER_URL_REPLACEMENT_14___});
}

#OverheadPrayer[data-prayer="deflectmelee"] {
  background-image: url(${___CSS_LOADER_URL_REPLACEMENT_15___});
}

#OverheadPrayer[data-prayer="deflectnecromancy"] {
  background-image: url(${___CSS_LOADER_URL_REPLACEMENT_16___});
}

#OverheadPrayer[data-prayer="deflectranged"] {
  background-image: url(${___CSS_LOADER_URL_REPLACEMENT_17___});
}

#OverheadPrayer[data-prayer="protectfrommagic"] {
  background-image: url(${___CSS_LOADER_URL_REPLACEMENT_18___});
}

#OverheadPrayer[data-prayer="protectfrommelee"] {
  background-image: url(${___CSS_LOADER_URL_REPLACEMENT_19___});
}

#OverheadPrayer[data-prayer="protectfromnecromancy"] {
  background-image: url(${___CSS_LOADER_URL_REPLACEMENT_20___});
}

#OverheadPrayer[data-prayer="protectfromranged"] {
  background-image: url(${___CSS_LOADER_URL_REPLACEMENT_21___});
}

#OverheadPrayer[data-prayer="soulsplit"] {
  background-image: url(${___CSS_LOADER_URL_REPLACEMENT_22___});
}

#DpsPrayer[data-prayer=""] {
  background-image: url(${___CSS_LOADER_URL_REPLACEMENT_23___});
}

#OverheadPrayer[data-prayer=""] {
  background-image: url(${___CSS_LOADER_URL_REPLACEMENT_23___});
}

.tracked-region li.cooldown::before,
.tracked-region li.cooldown::after {
  content:  attr(data-cooldown) !important;
}

.blink-maintainables .tracked-region li.inactive.maintainable::before,
.blink-maintainables .tracked-region li.inactive.maintainable::after {
  width: 100%;
  height: 100%;
  background-color: rgba(0,0,0,.15);
  display: flex;
  align-items: center;
  justify-content: center;
  content:  '!!' !important;
  color: red;
  font-size: 20px;
  top: 50%;
  left: 50%;
  right: auto !important;;
  bottom: auto !important;
  transform: translate(-50%, -50%);
  animation: blink-animation 1.8s steps(3, start) infinite;
  border: solid 1px red;
}

@keyframes blink-animation {
  to {
    visibility: hidden;
  }
}

.tracked-region .inactive img,
.tracked-region .cooldown img {
  filter: brightness(var(--brightness)) grayscale(1);
}

#DpsPrayer[data-prayer=""]::before,
#DpsPrayer[data-prayer=""]::after {
  width: 100%;
  height: 100%;
  display: flex;
  align-items: center;
  justify-content: center;
  white-space: pre;
  content:  'DPS\\aPray' !important;
  line-height: .95;
  font-size: 8px;
  font-family: 'trajan-pro-3', sans-serif;
  top: 50%;
  left: 50%;
  right: auto !important;
  bottom: auto !important;
  transform: translate(-50%, -50%);
}

#DpsPrayer[data-prayer=""]::after {
  color: #FFF;
}

#DpsPrayer[data-prayer=""]::before {
  color: #000;
  top: calc(50% + 1px);
  left: calc(50% + 1px);
}

#OverheadPrayer[data-prayer=""]::before,
#OverheadPrayer[data-prayer=""]::after {
  width: 100%;
  height: 100%;
  display: flex;
  align-items: center;
  justify-content: center;
  white-space: pre;
  content:  'Over\\aHead' !important;
  line-height: .95;
  font-size: 8px;
  font-family: 'trajan-pro-3', sans-serif;
  top: 50%;
  left: 50%;
  right: auto !important;
  bottom: auto !important;
  transform: translate(-50%, -50%);
}

#OverheadPrayer[data-prayer=""]::after {
  color: #FFF;
}

#OverheadPrayer[data-prayer=""]::before {
  color: #000;
  top: calc(50% + 1px);
  left: calc(50% + 1px);
}

#BetterBuffsBar:not(.fade) .tracked-region li.inactive,
#BetterBuffsBar:not(.fade) .tracked-region li.cooldown {
  opacity: 0;
}
#BetterBuffsBar.positioning .tracked-region li.inactive,
#BetterBuffsBar.positioning .tracked-region li.cooldown,
#BetterBuffsBar:not(.fade):hover .tracked-region li.inactive,
#BetterBuffsBar:not(.fade):hover .tracked-region li.cooldown {
  opacity: 1;
}

#UntrackedBuffs {
  border: solid 1px red;
  min-height: 10px;
  padding: 4px;
}

#ToggleOverlayButton {
  position: fixed;
  top: 3px;
  right: 0px;
  font-size: 20px;
}

#ToggleOverlayButton:hover {
  cursor: pointer;
}

#ToggleOverlayButton:hover::before {
  content: 'Toggle Overlay';
}

li:not(.sortable-selected) {
  border: solid 1px transparent;
}

li.sortable-selected {
  border: solid 1px #92cefe;
}

li.disabled {
  display: none !important;
  height: 0 !important;
  width: 0 !important;
  visibility: hidden;
  opacity: 0;
  border: none !important;
  pointer-events: none;
}

hr {
  opacity: .5;
}

h3 {
  margin-top: .75rem;
  margin-bottom: .35rem;
}

.flex {
  display: flex;
  align-items: center;
  justify-content: flex-start;
}

.flex-wrap { flex-wrap: wrap; }
.full { width: 100%; }

#Settings .setting {
  margin-bottom: .65rem;
}

#Settings input[type="range"] {
  margin-top: .4rem !important;
}

#Settings input[type="range"] ~ output {
  font-size: 14px;
  color: #94afbd;
  text-shadow: 1px 1px #000000;
  margin-top: .4rem;
}

input[type="color"] {
  margin-right: .5rem;
  width: 21px;
  height: 24px;
  background-color: transparent;
  padding: 0;
  border: none;
}

input[type="text"],
input[type="checkbox"],
select {
  margin-right: .5rem;
}

input[type="checkbox"] {
  display: none;
}

.reverse-setting label {
  position: relative;
}

input[type="checkbox"] ~ span.checkbox {
  display: block;
  content: '';
  width: 12px;
  height: 12px;
  background-color: #181616;
  border: solid 2px #3a5462;
  margin-left: 2.5rem;
  border-radius: 2px;
}

.reverse-setting:hover input[type="checkbox"] ~ span.checkbox {
  background-color: #2a2a29;
}

input[type="checkbox"]:checked ~ span.checkbox::after {
  position: absolute;
  content: '';
  display: block;
  width: 12px;
  height: 11px;
  top: 50%;
  right: 2px;
  transform: translateY(-50%);
  background-image: url(${___CSS_LOADER_URL_REPLACEMENT_24___});
  z-index: 2;
}

.reverse-setting:hover input[type="checkbox"]:checked ~ span.checkbox {
  background-color: #232323;
  border-color: #56788b;
}

input[type="color"]:hover {
  cursor: pointer;
}

input[type="number"] {
  margin: 0 .5rem;
  max-width: 40px;
  margin-left: 0;
}

input[type="number"].per-row {
  margin-left: 0;
}

small {
  display: block;
  margin: 1rem 0;
}

.nisimgbutton {
    width: 20px;
    height: 20px;
    border: 3px solid #212B2D;
    box-sizing: border-box;
    border-image: url(${___CSS_LOADER_URL_REPLACEMENT_25___}) 3 fill;
    cursor: pointer;
}

.nisimgbutton:hover {
    filter: brightness(1.2);
}

/*font stolen from jagex*/
@font-face{
	font-family:'trajan-pro-3';
	src:url(${___CSS_LOADER_URL_REPLACEMENT_26___});
}

/*Chromium custom scrollbars, will only work on chromium browsers (such as alt1) */
body::-webkit-scrollbar,
body *:not(.normalscroll)::-webkit-scrollbar
{width:10px; height:10px;}

body::-webkit-scrollbar-button:start:vertical,
body *:not(.normalscroll)::-webkit-scrollbar-button:start:vertical
{background-image:url(${___CSS_LOADER_URL_REPLACEMENT_27___}); background-position:0px 0px; height:15px;}

body::-webkit-scrollbar-button:end:vertical,
body *:not(.normalscroll)::-webkit-scrollbar-button:end:vertical
{background-image:url(${___CSS_LOADER_URL_REPLACEMENT_27___}); background-position:-45px 0px; height:15px;}

body::-webkit-scrollbar-track:vertical,
body *:not(.normalscroll)::-webkit-scrollbar-track:vertical
{background-image:url(${___CSS_LOADER_URL_REPLACEMENT_27___}); background-position:-15px 0px;}

body::-webkit-scrollbar-thumb:vertical,
body *:not(.normalscroll)::-webkit-scrollbar-thumb:vertical
{background-image:url(${___CSS_LOADER_URL_REPLACEMENT_27___}); background-position:-30px 0px; border-radius:5px;}

body::-webkit-scrollbar-button:start:horizontal,
body *:not(.normalscroll)::-webkit-scrollbar-button:start:horizontal
{background-image:url(${___CSS_LOADER_URL_REPLACEMENT_28___}); background-position:0px 0px; width:15px;}

body::-webkit-scrollbar-button:end:horizontal,
body *:not(.normalscroll)::-webkit-scrollbar-button:end:horizontal
{background-image:url(${___CSS_LOADER_URL_REPLACEMENT_28___}); background-position:0px -45px; width:15px;}

body::-webkit-scrollbar-track:horizontal,
body *:not(.normalscroll)::-webkit-scrollbar-track:horizontal
{background-image:url(${___CSS_LOADER_URL_REPLACEMENT_28___}); background-position:0px -15px;}

body::-webkit-scrollbar-thumb:horizontal,
body *:not(.normalscroll)::-webkit-scrollbar-thumb:horizontal
{background-image:url(${___CSS_LOADER_URL_REPLACEMENT_28___}); background-position:0px -30px; border-radius:5px;}

body::-webkit-scrollbar-corner,
body *:not(.normalscroll)::-webkit-scrollbar-corner
{background:#060d11;}

input[type="text"],
input[type="number"],
input[type="input"],
select
	{height:20px; cursor:text; color:#B1AFAE; outline:none; position:relative; padding:0px 4px; box-sizing:border-box; background:linear-gradient(to bottom, #191714,#292222,#100C0C); border:1px solid #514949; font-family:sans-serif; font-size:13px;}

select{height:19px; cursor:pointer; outline:none; box-sizing:border-box; padding:0px 0px 0px 4px;}
select>option{background:#1D190D;}

hr {
  width:100%; height:0px; border-top:1px solid #000; border-bottom:1px solid #41555F;
}

.nisbutton {
    height: 32px;
    position: relative;
    background: url(${___CSS_LOADER_URL_REPLACEMENT_29___}) 0px -100%/24px 400% repeat content-box;
    cursor: pointer;
    text-align: center;
    color: #000;
    font-family: 'trajan-pro-3';
    text-shadow: 1px 1px 2px #ecc622;
    font-size: 18px;
    margin: 5px;
    padding: 0px 12px;
    line-height: 32px;
    user-select: none;
    -webkit-user-select: none;
}

.nisbutton::before {
    width: 12px;
    height: 100%;
    content: "";
    position: absolute;
    top: 0px;
    left: 0px;
    background: url(${___CSS_LOADER_URL_REPLACEMENT_29___}) 0px 0px / 24px 400%;
}

.nisbutton::after {
    width: 12px;
    height: 100%;
    content: "";
    position: absolute;
    top: 0px;
    right: 0px;
    background: url(${___CSS_LOADER_URL_REPLACEMENT_29___}) -12px 0px / 24px 400%;
}

.nisbutton:not([disabled]):hover {
    background-position: 0px -300%;
}

.nisbutton:not([disabled]):hover::before {
    background-position: 0px -200%;
}

.nisbutton:not([disabled]):hover::after {
    background-position: -12px -200%;
}

.nisbutton[disabled] {
  opacity: .5;
  cursor: default;
  pointer-events: none;
}
`, ""]);
// Exports
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (___CSS_LOADER_EXPORT___);


/***/ }),

/***/ "../node_modules/css-loader/dist/runtime/api.js":
/*!******************************************************!*\
  !*** ../node_modules/css-loader/dist/runtime/api.js ***!
  \******************************************************/
/***/ ((module) => {

"use strict";


/*
  MIT License http://www.opensource.org/licenses/mit-license.php
  Author Tobias Koppers @sokra
*/
module.exports = function (cssWithMappingToString) {
  var list = [];

  // return the list of modules as css string
  list.toString = function toString() {
    return this.map(function (item) {
      var content = "";
      var needLayer = typeof item[5] !== "undefined";
      if (item[4]) {
        content += "@supports (".concat(item[4], ") {");
      }
      if (item[2]) {
        content += "@media ".concat(item[2], " {");
      }
      if (needLayer) {
        content += "@layer".concat(item[5].length > 0 ? " ".concat(item[5]) : "", " {");
      }
      content += cssWithMappingToString(item);
      if (needLayer) {
        content += "}";
      }
      if (item[2]) {
        content += "}";
      }
      if (item[4]) {
        content += "}";
      }
      return content;
    }).join("");
  };

  // import a list of modules into the list
  list.i = function i(modules, media, dedupe, supports, layer) {
    if (typeof modules === "string") {
      modules = [[null, modules, undefined]];
    }
    var alreadyImportedModules = {};
    if (dedupe) {
      for (var k = 0; k < this.length; k++) {
        var id = this[k][0];
        if (id != null) {
          alreadyImportedModules[id] = true;
        }
      }
    }
    for (var _k = 0; _k < modules.length; _k++) {
      var item = [].concat(modules[_k]);
      if (dedupe && alreadyImportedModules[item[0]]) {
        continue;
      }
      if (typeof layer !== "undefined") {
        if (typeof item[5] === "undefined") {
          item[5] = layer;
        } else {
          item[1] = "@layer".concat(item[5].length > 0 ? " ".concat(item[5]) : "", " {").concat(item[1], "}");
          item[5] = layer;
        }
      }
      if (media) {
        if (!item[2]) {
          item[2] = media;
        } else {
          item[1] = "@media ".concat(item[2], " {").concat(item[1], "}");
          item[2] = media;
        }
      }
      if (supports) {
        if (!item[4]) {
          item[4] = "".concat(supports);
        } else {
          item[1] = "@supports (".concat(item[4], ") {").concat(item[1], "}");
          item[4] = supports;
        }
      }
      list.push(item);
    }
  };
  return list;
};

/***/ }),

/***/ "../node_modules/css-loader/dist/runtime/getUrl.js":
/*!*********************************************************!*\
  !*** ../node_modules/css-loader/dist/runtime/getUrl.js ***!
  \*********************************************************/
/***/ ((module) => {

"use strict";


module.exports = function (url, options) {
  if (!options) {
    options = {};
  }
  if (!url) {
    return url;
  }
  url = String(url.__esModule ? url.default : url);

  // If url is already wrapped in quotes, remove them
  if (/^['"].*['"]$/.test(url)) {
    url = url.slice(1, -1);
  }
  if (options.hash) {
    url += options.hash;
  }

  // Should url be wrapped?
  // See https://drafts.csswg.org/css-values-3/#urls
  if (/["'() \t\n]|(%20)/.test(url) || options.needQuotes) {
    return "\"".concat(url.replace(/"/g, '\\"').replace(/\n/g, "\\n"), "\"");
  }
  return url;
};

/***/ }),

/***/ "../node_modules/css-loader/dist/runtime/noSourceMaps.js":
/*!***************************************************************!*\
  !*** ../node_modules/css-loader/dist/runtime/noSourceMaps.js ***!
  \***************************************************************/
/***/ ((module) => {

"use strict";


module.exports = function (i) {
  return i[1];
};

/***/ }),

/***/ "../node_modules/html-to-image/es/apply-style.js":
/*!*******************************************************!*\
  !*** ../node_modules/html-to-image/es/apply-style.js ***!
  \*******************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   applyStyle: () => (/* binding */ applyStyle)
/* harmony export */ });
function applyStyle(node, options) {
    const { style } = node;
    if (options.backgroundColor) {
        style.backgroundColor = options.backgroundColor;
    }
    if (options.width) {
        style.width = `${options.width}px`;
    }
    if (options.height) {
        style.height = `${options.height}px`;
    }
    const manual = options.style;
    if (manual != null) {
        Object.keys(manual).forEach((key) => {
            style[key] = manual[key];
        });
    }
    return node;
}
//# sourceMappingURL=apply-style.js.map

/***/ }),

/***/ "../node_modules/html-to-image/es/clone-node.js":
/*!******************************************************!*\
  !*** ../node_modules/html-to-image/es/clone-node.js ***!
  \******************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   cloneNode: () => (/* binding */ cloneNode)
/* harmony export */ });
/* harmony import */ var _clone_pseudos__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./clone-pseudos */ "../node_modules/html-to-image/es/clone-pseudos.js");
/* harmony import */ var _util__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./util */ "../node_modules/html-to-image/es/util.js");
/* harmony import */ var _mimes__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./mimes */ "../node_modules/html-to-image/es/mimes.js");
/* harmony import */ var _dataurl__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./dataurl */ "../node_modules/html-to-image/es/dataurl.js");




async function cloneCanvasElement(canvas) {
    const dataURL = canvas.toDataURL();
    if (dataURL === 'data:,') {
        return canvas.cloneNode(false);
    }
    return (0,_util__WEBPACK_IMPORTED_MODULE_1__.createImage)(dataURL);
}
async function cloneVideoElement(video, options) {
    if (video.currentSrc) {
        const canvas = document.createElement('canvas');
        const ctx = canvas.getContext('2d');
        canvas.width = video.clientWidth;
        canvas.height = video.clientHeight;
        ctx === null || ctx === void 0 ? void 0 : ctx.drawImage(video, 0, 0, canvas.width, canvas.height);
        const dataURL = canvas.toDataURL();
        return (0,_util__WEBPACK_IMPORTED_MODULE_1__.createImage)(dataURL);
    }
    const poster = video.poster;
    const contentType = (0,_mimes__WEBPACK_IMPORTED_MODULE_2__.getMimeType)(poster);
    const dataURL = await (0,_dataurl__WEBPACK_IMPORTED_MODULE_3__.resourceToDataURL)(poster, contentType, options);
    return (0,_util__WEBPACK_IMPORTED_MODULE_1__.createImage)(dataURL);
}
async function cloneIFrameElement(iframe) {
    var _a;
    try {
        if ((_a = iframe === null || iframe === void 0 ? void 0 : iframe.contentDocument) === null || _a === void 0 ? void 0 : _a.body) {
            return (await cloneNode(iframe.contentDocument.body, {}, true));
        }
    }
    catch (_b) {
        // Failed to clone iframe
    }
    return iframe.cloneNode(false);
}
async function cloneSingleNode(node, options) {
    if ((0,_util__WEBPACK_IMPORTED_MODULE_1__.isInstanceOfElement)(node, HTMLCanvasElement)) {
        return cloneCanvasElement(node);
    }
    if ((0,_util__WEBPACK_IMPORTED_MODULE_1__.isInstanceOfElement)(node, HTMLVideoElement)) {
        return cloneVideoElement(node, options);
    }
    if ((0,_util__WEBPACK_IMPORTED_MODULE_1__.isInstanceOfElement)(node, HTMLIFrameElement)) {
        return cloneIFrameElement(node);
    }
    return node.cloneNode(false);
}
const isSlotElement = (node) => node.tagName != null && node.tagName.toUpperCase() === 'SLOT';
async function cloneChildren(nativeNode, clonedNode, options) {
    var _a, _b;
    let children = [];
    if (isSlotElement(nativeNode) && nativeNode.assignedNodes) {
        children = (0,_util__WEBPACK_IMPORTED_MODULE_1__.toArray)(nativeNode.assignedNodes());
    }
    else if ((0,_util__WEBPACK_IMPORTED_MODULE_1__.isInstanceOfElement)(nativeNode, HTMLIFrameElement) &&
        ((_a = nativeNode.contentDocument) === null || _a === void 0 ? void 0 : _a.body)) {
        children = (0,_util__WEBPACK_IMPORTED_MODULE_1__.toArray)(nativeNode.contentDocument.body.childNodes);
    }
    else {
        children = (0,_util__WEBPACK_IMPORTED_MODULE_1__.toArray)(((_b = nativeNode.shadowRoot) !== null && _b !== void 0 ? _b : nativeNode).childNodes);
    }
    if (children.length === 0 ||
        (0,_util__WEBPACK_IMPORTED_MODULE_1__.isInstanceOfElement)(nativeNode, HTMLVideoElement)) {
        return clonedNode;
    }
    await children.reduce((deferred, child) => deferred
        .then(() => cloneNode(child, options))
        .then((clonedChild) => {
        if (clonedChild) {
            clonedNode.appendChild(clonedChild);
        }
    }), Promise.resolve());
    return clonedNode;
}
function cloneCSSStyle(nativeNode, clonedNode) {
    const targetStyle = clonedNode.style;
    if (!targetStyle) {
        return;
    }
    const sourceStyle = window.getComputedStyle(nativeNode);
    if (sourceStyle.cssText) {
        targetStyle.cssText = sourceStyle.cssText;
        targetStyle.transformOrigin = sourceStyle.transformOrigin;
    }
    else {
        (0,_util__WEBPACK_IMPORTED_MODULE_1__.toArray)(sourceStyle).forEach((name) => {
            let value = sourceStyle.getPropertyValue(name);
            if (name === 'font-size' && value.endsWith('px')) {
                const reducedFont = Math.floor(parseFloat(value.substring(0, value.length - 2))) - 0.1;
                value = `${reducedFont}px`;
            }
            if ((0,_util__WEBPACK_IMPORTED_MODULE_1__.isInstanceOfElement)(nativeNode, HTMLIFrameElement) &&
                name === 'display' &&
                value === 'inline') {
                value = 'block';
            }
            if (name === 'd' && clonedNode.getAttribute('d')) {
                value = `path(${clonedNode.getAttribute('d')})`;
            }
            targetStyle.setProperty(name, value, sourceStyle.getPropertyPriority(name));
        });
    }
}
function cloneInputValue(nativeNode, clonedNode) {
    if ((0,_util__WEBPACK_IMPORTED_MODULE_1__.isInstanceOfElement)(nativeNode, HTMLTextAreaElement)) {
        clonedNode.innerHTML = nativeNode.value;
    }
    if ((0,_util__WEBPACK_IMPORTED_MODULE_1__.isInstanceOfElement)(nativeNode, HTMLInputElement)) {
        clonedNode.setAttribute('value', nativeNode.value);
    }
}
function cloneSelectValue(nativeNode, clonedNode) {
    if ((0,_util__WEBPACK_IMPORTED_MODULE_1__.isInstanceOfElement)(nativeNode, HTMLSelectElement)) {
        const clonedSelect = clonedNode;
        const selectedOption = Array.from(clonedSelect.children).find((child) => nativeNode.value === child.getAttribute('value'));
        if (selectedOption) {
            selectedOption.setAttribute('selected', '');
        }
    }
}
function decorate(nativeNode, clonedNode) {
    if ((0,_util__WEBPACK_IMPORTED_MODULE_1__.isInstanceOfElement)(clonedNode, Element)) {
        cloneCSSStyle(nativeNode, clonedNode);
        (0,_clone_pseudos__WEBPACK_IMPORTED_MODULE_0__.clonePseudoElements)(nativeNode, clonedNode);
        cloneInputValue(nativeNode, clonedNode);
        cloneSelectValue(nativeNode, clonedNode);
    }
    return clonedNode;
}
async function ensureSVGSymbols(clone, options) {
    const uses = clone.querySelectorAll ? clone.querySelectorAll('use') : [];
    if (uses.length === 0) {
        return clone;
    }
    const processedDefs = {};
    for (let i = 0; i < uses.length; i++) {
        const use = uses[i];
        const id = use.getAttribute('xlink:href');
        if (id) {
            const exist = clone.querySelector(id);
            const definition = document.querySelector(id);
            if (!exist && definition && !processedDefs[id]) {
                // eslint-disable-next-line no-await-in-loop
                processedDefs[id] = (await cloneNode(definition, options, true));
            }
        }
    }
    const nodes = Object.values(processedDefs);
    if (nodes.length) {
        const ns = 'http://www.w3.org/1999/xhtml';
        const svg = document.createElementNS(ns, 'svg');
        svg.setAttribute('xmlns', ns);
        svg.style.position = 'absolute';
        svg.style.width = '0';
        svg.style.height = '0';
        svg.style.overflow = 'hidden';
        svg.style.display = 'none';
        const defs = document.createElementNS(ns, 'defs');
        svg.appendChild(defs);
        for (let i = 0; i < nodes.length; i++) {
            defs.appendChild(nodes[i]);
        }
        clone.appendChild(svg);
    }
    return clone;
}
async function cloneNode(node, options, isRoot) {
    if (!isRoot && options.filter && !options.filter(node)) {
        return null;
    }
    return Promise.resolve(node)
        .then((clonedNode) => cloneSingleNode(clonedNode, options))
        .then((clonedNode) => cloneChildren(node, clonedNode, options))
        .then((clonedNode) => decorate(node, clonedNode))
        .then((clonedNode) => ensureSVGSymbols(clonedNode, options));
}
//# sourceMappingURL=clone-node.js.map

/***/ }),

/***/ "../node_modules/html-to-image/es/clone-pseudos.js":
/*!*********************************************************!*\
  !*** ../node_modules/html-to-image/es/clone-pseudos.js ***!
  \*********************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   clonePseudoElements: () => (/* binding */ clonePseudoElements)
/* harmony export */ });
/* harmony import */ var _util__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./util */ "../node_modules/html-to-image/es/util.js");

function formatCSSText(style) {
    const content = style.getPropertyValue('content');
    return `${style.cssText} content: '${content.replace(/'|"/g, '')}';`;
}
function formatCSSProperties(style) {
    return (0,_util__WEBPACK_IMPORTED_MODULE_0__.toArray)(style)
        .map((name) => {
        const value = style.getPropertyValue(name);
        const priority = style.getPropertyPriority(name);
        return `${name}: ${value}${priority ? ' !important' : ''};`;
    })
        .join(' ');
}
function getPseudoElementStyle(className, pseudo, style) {
    const selector = `.${className}:${pseudo}`;
    const cssText = style.cssText
        ? formatCSSText(style)
        : formatCSSProperties(style);
    return document.createTextNode(`${selector}{${cssText}}`);
}
function clonePseudoElement(nativeNode, clonedNode, pseudo) {
    const style = window.getComputedStyle(nativeNode, pseudo);
    const content = style.getPropertyValue('content');
    if (content === '' || content === 'none') {
        return;
    }
    const className = (0,_util__WEBPACK_IMPORTED_MODULE_0__.uuid)();
    try {
        clonedNode.className = `${clonedNode.className} ${className}`;
    }
    catch (err) {
        return;
    }
    const styleElement = document.createElement('style');
    styleElement.appendChild(getPseudoElementStyle(className, pseudo, style));
    clonedNode.appendChild(styleElement);
}
function clonePseudoElements(nativeNode, clonedNode) {
    clonePseudoElement(nativeNode, clonedNode, ':before');
    clonePseudoElement(nativeNode, clonedNode, ':after');
}
//# sourceMappingURL=clone-pseudos.js.map

/***/ }),

/***/ "../node_modules/html-to-image/es/dataurl.js":
/*!***************************************************!*\
  !*** ../node_modules/html-to-image/es/dataurl.js ***!
  \***************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   fetchAsDataURL: () => (/* binding */ fetchAsDataURL),
/* harmony export */   isDataUrl: () => (/* binding */ isDataUrl),
/* harmony export */   makeDataUrl: () => (/* binding */ makeDataUrl),
/* harmony export */   resourceToDataURL: () => (/* binding */ resourceToDataURL)
/* harmony export */ });
function getContentFromDataUrl(dataURL) {
    return dataURL.split(/,/)[1];
}
function isDataUrl(url) {
    return url.search(/^(data:)/) !== -1;
}
function makeDataUrl(content, mimeType) {
    return `data:${mimeType};base64,${content}`;
}
async function fetchAsDataURL(url, init, process) {
    const res = await fetch(url, init);
    if (res.status === 404) {
        throw new Error(`Resource "${res.url}" not found`);
    }
    const blob = await res.blob();
    return new Promise((resolve, reject) => {
        const reader = new FileReader();
        reader.onerror = reject;
        reader.onloadend = () => {
            try {
                resolve(process({ res, result: reader.result }));
            }
            catch (error) {
                reject(error);
            }
        };
        reader.readAsDataURL(blob);
    });
}
const cache = {};
function getCacheKey(url, contentType, includeQueryParams) {
    let key = url.replace(/\?.*/, '');
    if (includeQueryParams) {
        key = url;
    }
    // font resource
    if (/ttf|otf|eot|woff2?/i.test(key)) {
        key = key.replace(/.*\//, '');
    }
    return contentType ? `[${contentType}]${key}` : key;
}
async function resourceToDataURL(resourceUrl, contentType, options) {
    const cacheKey = getCacheKey(resourceUrl, contentType, options.includeQueryParams);
    if (cache[cacheKey] != null) {
        return cache[cacheKey];
    }
    // ref: https://developer.mozilla.org/en/docs/Web/API/XMLHttpRequest/Using_XMLHttpRequest#Bypassing_the_cache
    if (options.cacheBust) {
        // eslint-disable-next-line no-param-reassign
        resourceUrl += (/\?/.test(resourceUrl) ? '&' : '?') + new Date().getTime();
    }
    let dataURL;
    try {
        const content = await fetchAsDataURL(resourceUrl, options.fetchRequestInit, ({ res, result }) => {
            if (!contentType) {
                // eslint-disable-next-line no-param-reassign
                contentType = res.headers.get('Content-Type') || '';
            }
            return getContentFromDataUrl(result);
        });
        dataURL = makeDataUrl(content, contentType);
    }
    catch (error) {
        dataURL = options.imagePlaceholder || '';
        let msg = `Failed to fetch resource: ${resourceUrl}`;
        if (error) {
            msg = typeof error === 'string' ? error : error.message;
        }
        if (msg) {
            console.warn(msg);
        }
    }
    cache[cacheKey] = dataURL;
    return dataURL;
}
//# sourceMappingURL=dataurl.js.map

/***/ }),

/***/ "../node_modules/html-to-image/es/embed-images.js":
/*!********************************************************!*\
  !*** ../node_modules/html-to-image/es/embed-images.js ***!
  \********************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   embedImages: () => (/* binding */ embedImages)
/* harmony export */ });
/* harmony import */ var _embed_resources__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./embed-resources */ "../node_modules/html-to-image/es/embed-resources.js");
/* harmony import */ var _util__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./util */ "../node_modules/html-to-image/es/util.js");
/* harmony import */ var _dataurl__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./dataurl */ "../node_modules/html-to-image/es/dataurl.js");
/* harmony import */ var _mimes__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./mimes */ "../node_modules/html-to-image/es/mimes.js");




async function embedProp(propName, node, options) {
    var _a;
    const propValue = (_a = node.style) === null || _a === void 0 ? void 0 : _a.getPropertyValue(propName);
    if (propValue) {
        const cssString = await (0,_embed_resources__WEBPACK_IMPORTED_MODULE_0__.embedResources)(propValue, null, options);
        node.style.setProperty(propName, cssString, node.style.getPropertyPriority(propName));
        return true;
    }
    return false;
}
async function embedBackground(clonedNode, options) {
    if (!(await embedProp('background', clonedNode, options))) {
        await embedProp('background-image', clonedNode, options);
    }
    if (!(await embedProp('mask', clonedNode, options))) {
        await embedProp('mask-image', clonedNode, options);
    }
}
async function embedImageNode(clonedNode, options) {
    const isImageElement = (0,_util__WEBPACK_IMPORTED_MODULE_1__.isInstanceOfElement)(clonedNode, HTMLImageElement);
    if (!(isImageElement && !(0,_dataurl__WEBPACK_IMPORTED_MODULE_2__.isDataUrl)(clonedNode.src)) &&
        !((0,_util__WEBPACK_IMPORTED_MODULE_1__.isInstanceOfElement)(clonedNode, SVGImageElement) &&
            !(0,_dataurl__WEBPACK_IMPORTED_MODULE_2__.isDataUrl)(clonedNode.href.baseVal))) {
        return;
    }
    const url = isImageElement ? clonedNode.src : clonedNode.href.baseVal;
    const dataURL = await (0,_dataurl__WEBPACK_IMPORTED_MODULE_2__.resourceToDataURL)(url, (0,_mimes__WEBPACK_IMPORTED_MODULE_3__.getMimeType)(url), options);
    await new Promise((resolve, reject) => {
        clonedNode.onload = resolve;
        clonedNode.onerror = reject;
        const image = clonedNode;
        if (image.decode) {
            image.decode = resolve;
        }
        if (image.loading === 'lazy') {
            image.loading = 'eager';
        }
        if (isImageElement) {
            clonedNode.srcset = '';
            clonedNode.src = dataURL;
        }
        else {
            clonedNode.href.baseVal = dataURL;
        }
    });
}
async function embedChildren(clonedNode, options) {
    const children = (0,_util__WEBPACK_IMPORTED_MODULE_1__.toArray)(clonedNode.childNodes);
    const deferreds = children.map((child) => embedImages(child, options));
    await Promise.all(deferreds).then(() => clonedNode);
}
async function embedImages(clonedNode, options) {
    if ((0,_util__WEBPACK_IMPORTED_MODULE_1__.isInstanceOfElement)(clonedNode, Element)) {
        await embedBackground(clonedNode, options);
        await embedImageNode(clonedNode, options);
        await embedChildren(clonedNode, options);
    }
}
//# sourceMappingURL=embed-images.js.map

/***/ }),

/***/ "../node_modules/html-to-image/es/embed-resources.js":
/*!***********************************************************!*\
  !*** ../node_modules/html-to-image/es/embed-resources.js ***!
  \***********************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   embed: () => (/* binding */ embed),
/* harmony export */   embedResources: () => (/* binding */ embedResources),
/* harmony export */   parseURLs: () => (/* binding */ parseURLs),
/* harmony export */   shouldEmbed: () => (/* binding */ shouldEmbed)
/* harmony export */ });
/* harmony import */ var _util__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./util */ "../node_modules/html-to-image/es/util.js");
/* harmony import */ var _mimes__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./mimes */ "../node_modules/html-to-image/es/mimes.js");
/* harmony import */ var _dataurl__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./dataurl */ "../node_modules/html-to-image/es/dataurl.js");



const URL_REGEX = /url\((['"]?)([^'"]+?)\1\)/g;
const URL_WITH_FORMAT_REGEX = /url\([^)]+\)\s*format\((["']?)([^"']+)\1\)/g;
const FONT_SRC_REGEX = /src:\s*(?:url\([^)]+\)\s*format\([^)]+\)[,;]\s*)+/g;
function toRegex(url) {
    // eslint-disable-next-line no-useless-escape
    const escaped = url.replace(/([.*+?^${}()|\[\]\/\\])/g, '\\$1');
    return new RegExp(`(url\\(['"]?)(${escaped})(['"]?\\))`, 'g');
}
function parseURLs(cssText) {
    const urls = [];
    cssText.replace(URL_REGEX, (raw, quotation, url) => {
        urls.push(url);
        return raw;
    });
    return urls.filter((url) => !(0,_dataurl__WEBPACK_IMPORTED_MODULE_2__.isDataUrl)(url));
}
async function embed(cssText, resourceURL, baseURL, options, getContentFromUrl) {
    try {
        const resolvedURL = baseURL ? (0,_util__WEBPACK_IMPORTED_MODULE_0__.resolveUrl)(resourceURL, baseURL) : resourceURL;
        const contentType = (0,_mimes__WEBPACK_IMPORTED_MODULE_1__.getMimeType)(resourceURL);
        let dataURL;
        if (getContentFromUrl) {
            const content = await getContentFromUrl(resolvedURL);
            dataURL = (0,_dataurl__WEBPACK_IMPORTED_MODULE_2__.makeDataUrl)(content, contentType);
        }
        else {
            dataURL = await (0,_dataurl__WEBPACK_IMPORTED_MODULE_2__.resourceToDataURL)(resolvedURL, contentType, options);
        }
        return cssText.replace(toRegex(resourceURL), `$1${dataURL}$3`);
    }
    catch (error) {
        // pass
    }
    return cssText;
}
function filterPreferredFontFormat(str, { preferredFontFormat }) {
    return !preferredFontFormat
        ? str
        : str.replace(FONT_SRC_REGEX, (match) => {
            // eslint-disable-next-line no-constant-condition
            while (true) {
                const [src, , format] = URL_WITH_FORMAT_REGEX.exec(match) || [];
                if (!format) {
                    return '';
                }
                if (format === preferredFontFormat) {
                    return `src: ${src};`;
                }
            }
        });
}
function shouldEmbed(url) {
    return url.search(URL_REGEX) !== -1;
}
async function embedResources(cssText, baseUrl, options) {
    if (!shouldEmbed(cssText)) {
        return cssText;
    }
    const filteredCSSText = filterPreferredFontFormat(cssText, options);
    const urls = parseURLs(filteredCSSText);
    return urls.reduce((deferred, url) => deferred.then((css) => embed(css, url, baseUrl, options)), Promise.resolve(filteredCSSText));
}
//# sourceMappingURL=embed-resources.js.map

/***/ }),

/***/ "../node_modules/html-to-image/es/embed-webfonts.js":
/*!**********************************************************!*\
  !*** ../node_modules/html-to-image/es/embed-webfonts.js ***!
  \**********************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   embedWebFonts: () => (/* binding */ embedWebFonts),
/* harmony export */   getWebFontCSS: () => (/* binding */ getWebFontCSS)
/* harmony export */ });
/* harmony import */ var _util__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./util */ "../node_modules/html-to-image/es/util.js");
/* harmony import */ var _dataurl__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./dataurl */ "../node_modules/html-to-image/es/dataurl.js");
/* harmony import */ var _embed_resources__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./embed-resources */ "../node_modules/html-to-image/es/embed-resources.js");



const cssFetchCache = {};
async function fetchCSS(url) {
    let cache = cssFetchCache[url];
    if (cache != null) {
        return cache;
    }
    const res = await fetch(url);
    const cssText = await res.text();
    cache = { url, cssText };
    cssFetchCache[url] = cache;
    return cache;
}
async function embedFonts(data, options) {
    let cssText = data.cssText;
    const regexUrl = /url\(["']?([^"')]+)["']?\)/g;
    const fontLocs = cssText.match(/url\([^)]+\)/g) || [];
    const loadFonts = fontLocs.map(async (loc) => {
        let url = loc.replace(regexUrl, '$1');
        if (!url.startsWith('https://')) {
            url = new URL(url, data.url).href;
        }
        return (0,_dataurl__WEBPACK_IMPORTED_MODULE_1__.fetchAsDataURL)(url, options.fetchRequestInit, ({ result }) => {
            cssText = cssText.replace(loc, `url(${result})`);
            return [loc, result];
        });
    });
    return Promise.all(loadFonts).then(() => cssText);
}
function parseCSS(source) {
    if (source == null) {
        return [];
    }
    const result = [];
    const commentsRegex = /(\/\*[\s\S]*?\*\/)/gi;
    // strip out comments
    let cssText = source.replace(commentsRegex, '');
    // eslint-disable-next-line prefer-regex-literals
    const keyframesRegex = new RegExp('((@.*?keyframes [\\s\\S]*?){([\\s\\S]*?}\\s*?)})', 'gi');
    // eslint-disable-next-line no-constant-condition
    while (true) {
        const matches = keyframesRegex.exec(cssText);
        if (matches === null) {
            break;
        }
        result.push(matches[0]);
    }
    cssText = cssText.replace(keyframesRegex, '');
    const importRegex = /@import[\s\S]*?url\([^)]*\)[\s\S]*?;/gi;
    // to match css & media queries together
    const combinedCSSRegex = '((\\s*?(?:\\/\\*[\\s\\S]*?\\*\\/)?\\s*?@media[\\s\\S]' +
        '*?){([\\s\\S]*?)}\\s*?})|(([\\s\\S]*?){([\\s\\S]*?)})';
    // unified regex
    const unifiedRegex = new RegExp(combinedCSSRegex, 'gi');
    // eslint-disable-next-line no-constant-condition
    while (true) {
        let matches = importRegex.exec(cssText);
        if (matches === null) {
            matches = unifiedRegex.exec(cssText);
            if (matches === null) {
                break;
            }
            else {
                importRegex.lastIndex = unifiedRegex.lastIndex;
            }
        }
        else {
            unifiedRegex.lastIndex = importRegex.lastIndex;
        }
        result.push(matches[0]);
    }
    return result;
}
async function getCSSRules(styleSheets, options) {
    const ret = [];
    const deferreds = [];
    // First loop inlines imports
    styleSheets.forEach((sheet) => {
        if ('cssRules' in sheet) {
            try {
                (0,_util__WEBPACK_IMPORTED_MODULE_0__.toArray)(sheet.cssRules || []).forEach((item, index) => {
                    if (item.type === CSSRule.IMPORT_RULE) {
                        let importIndex = index + 1;
                        const url = item.href;
                        const deferred = fetchCSS(url)
                            .then((metadata) => embedFonts(metadata, options))
                            .then((cssText) => parseCSS(cssText).forEach((rule) => {
                            try {
                                sheet.insertRule(rule, rule.startsWith('@import')
                                    ? (importIndex += 1)
                                    : sheet.cssRules.length);
                            }
                            catch (error) {
                                console.error('Error inserting rule from remote css', {
                                    rule,
                                    error,
                                });
                            }
                        }))
                            .catch((e) => {
                            console.error('Error loading remote css', e.toString());
                        });
                        deferreds.push(deferred);
                    }
                });
            }
            catch (e) {
                const inline = styleSheets.find((a) => a.href == null) || document.styleSheets[0];
                if (sheet.href != null) {
                    deferreds.push(fetchCSS(sheet.href)
                        .then((metadata) => embedFonts(metadata, options))
                        .then((cssText) => parseCSS(cssText).forEach((rule) => {
                        inline.insertRule(rule, sheet.cssRules.length);
                    }))
                        .catch((err) => {
                        console.error('Error loading remote stylesheet', err);
                    }));
                }
                console.error('Error inlining remote css file', e);
            }
        }
    });
    return Promise.all(deferreds).then(() => {
        // Second loop parses rules
        styleSheets.forEach((sheet) => {
            if ('cssRules' in sheet) {
                try {
                    (0,_util__WEBPACK_IMPORTED_MODULE_0__.toArray)(sheet.cssRules || []).forEach((item) => {
                        ret.push(item);
                    });
                }
                catch (e) {
                    console.error(`Error while reading CSS rules from ${sheet.href}`, e);
                }
            }
        });
        return ret;
    });
}
function getWebFontRules(cssRules) {
    return cssRules
        .filter((rule) => rule.type === CSSRule.FONT_FACE_RULE)
        .filter((rule) => (0,_embed_resources__WEBPACK_IMPORTED_MODULE_2__.shouldEmbed)(rule.style.getPropertyValue('src')));
}
async function parseWebFontRules(node, options) {
    if (node.ownerDocument == null) {
        throw new Error('Provided element is not within a Document');
    }
    const styleSheets = (0,_util__WEBPACK_IMPORTED_MODULE_0__.toArray)(node.ownerDocument.styleSheets);
    const cssRules = await getCSSRules(styleSheets, options);
    return getWebFontRules(cssRules);
}
async function getWebFontCSS(node, options) {
    const rules = await parseWebFontRules(node, options);
    const cssTexts = await Promise.all(rules.map((rule) => {
        const baseUrl = rule.parentStyleSheet ? rule.parentStyleSheet.href : null;
        return (0,_embed_resources__WEBPACK_IMPORTED_MODULE_2__.embedResources)(rule.cssText, baseUrl, options);
    }));
    return cssTexts.join('\n');
}
async function embedWebFonts(clonedNode, options) {
    const cssText = options.fontEmbedCSS != null
        ? options.fontEmbedCSS
        : options.skipFonts
            ? null
            : await getWebFontCSS(clonedNode, options);
    if (cssText) {
        const styleNode = document.createElement('style');
        const sytleContent = document.createTextNode(cssText);
        styleNode.appendChild(sytleContent);
        if (clonedNode.firstChild) {
            clonedNode.insertBefore(styleNode, clonedNode.firstChild);
        }
        else {
            clonedNode.appendChild(styleNode);
        }
    }
}
//# sourceMappingURL=embed-webfonts.js.map

/***/ }),

/***/ "../node_modules/html-to-image/es/index.js":
/*!*************************************************!*\
  !*** ../node_modules/html-to-image/es/index.js ***!
  \*************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   getFontEmbedCSS: () => (/* binding */ getFontEmbedCSS),
/* harmony export */   toBlob: () => (/* binding */ toBlob),
/* harmony export */   toCanvas: () => (/* binding */ toCanvas),
/* harmony export */   toJpeg: () => (/* binding */ toJpeg),
/* harmony export */   toPixelData: () => (/* binding */ toPixelData),
/* harmony export */   toPng: () => (/* binding */ toPng),
/* harmony export */   toSvg: () => (/* binding */ toSvg)
/* harmony export */ });
/* harmony import */ var _clone_node__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./clone-node */ "../node_modules/html-to-image/es/clone-node.js");
/* harmony import */ var _embed_images__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./embed-images */ "../node_modules/html-to-image/es/embed-images.js");
/* harmony import */ var _apply_style__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./apply-style */ "../node_modules/html-to-image/es/apply-style.js");
/* harmony import */ var _embed_webfonts__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./embed-webfonts */ "../node_modules/html-to-image/es/embed-webfonts.js");
/* harmony import */ var _util__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./util */ "../node_modules/html-to-image/es/util.js");





async function toSvg(node, options = {}) {
    const { width, height } = (0,_util__WEBPACK_IMPORTED_MODULE_4__.getImageSize)(node, options);
    const clonedNode = (await (0,_clone_node__WEBPACK_IMPORTED_MODULE_0__.cloneNode)(node, options, true));
    await (0,_embed_webfonts__WEBPACK_IMPORTED_MODULE_3__.embedWebFonts)(clonedNode, options);
    await (0,_embed_images__WEBPACK_IMPORTED_MODULE_1__.embedImages)(clonedNode, options);
    (0,_apply_style__WEBPACK_IMPORTED_MODULE_2__.applyStyle)(clonedNode, options);
    const datauri = await (0,_util__WEBPACK_IMPORTED_MODULE_4__.nodeToDataURL)(clonedNode, width, height);
    return datauri;
}
async function toCanvas(node, options = {}) {
    const { width, height } = (0,_util__WEBPACK_IMPORTED_MODULE_4__.getImageSize)(node, options);
    const svg = await toSvg(node, options);
    const img = await (0,_util__WEBPACK_IMPORTED_MODULE_4__.createImage)(svg);
    const canvas = document.createElement('canvas');
    const context = canvas.getContext('2d');
    const ratio = options.pixelRatio || (0,_util__WEBPACK_IMPORTED_MODULE_4__.getPixelRatio)();
    const canvasWidth = options.canvasWidth || width;
    const canvasHeight = options.canvasHeight || height;
    canvas.width = canvasWidth * ratio;
    canvas.height = canvasHeight * ratio;
    if (!options.skipAutoScale) {
        (0,_util__WEBPACK_IMPORTED_MODULE_4__.checkCanvasDimensions)(canvas);
    }
    canvas.style.width = `${canvasWidth}`;
    canvas.style.height = `${canvasHeight}`;
    if (options.backgroundColor) {
        context.fillStyle = options.backgroundColor;
        context.fillRect(0, 0, canvas.width, canvas.height);
    }
    context.drawImage(img, 0, 0, canvas.width, canvas.height);
    return canvas;
}
async function toPixelData(node, options = {}) {
    const { width, height } = (0,_util__WEBPACK_IMPORTED_MODULE_4__.getImageSize)(node, options);
    const canvas = await toCanvas(node, options);
    const ctx = canvas.getContext('2d');
    return ctx.getImageData(0, 0, width, height).data;
}
async function toPng(node, options = {}) {
    const canvas = await toCanvas(node, options);
    return canvas.toDataURL();
}
async function toJpeg(node, options = {}) {
    const canvas = await toCanvas(node, options);
    return canvas.toDataURL('image/jpeg', options.quality || 1);
}
async function toBlob(node, options = {}) {
    const canvas = await toCanvas(node, options);
    const blob = await (0,_util__WEBPACK_IMPORTED_MODULE_4__.canvasToBlob)(canvas);
    return blob;
}
async function getFontEmbedCSS(node, options = {}) {
    return (0,_embed_webfonts__WEBPACK_IMPORTED_MODULE_3__.getWebFontCSS)(node, options);
}
//# sourceMappingURL=index.js.map

/***/ }),

/***/ "../node_modules/html-to-image/es/mimes.js":
/*!*************************************************!*\
  !*** ../node_modules/html-to-image/es/mimes.js ***!
  \*************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   getMimeType: () => (/* binding */ getMimeType)
/* harmony export */ });
const WOFF = 'application/font-woff';
const JPEG = 'image/jpeg';
const mimes = {
    woff: WOFF,
    woff2: WOFF,
    ttf: 'application/font-truetype',
    eot: 'application/vnd.ms-fontobject',
    png: 'image/png',
    jpg: JPEG,
    jpeg: JPEG,
    gif: 'image/gif',
    tiff: 'image/tiff',
    svg: 'image/svg+xml',
    webp: 'image/webp',
};
function getExtension(url) {
    const match = /\.([^./]*?)$/g.exec(url);
    return match ? match[1] : '';
}
function getMimeType(url) {
    const extension = getExtension(url).toLowerCase();
    return mimes[extension] || '';
}
//# sourceMappingURL=mimes.js.map

/***/ }),

/***/ "../node_modules/html-to-image/es/util.js":
/*!************************************************!*\
  !*** ../node_modules/html-to-image/es/util.js ***!
  \************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   canvasToBlob: () => (/* binding */ canvasToBlob),
/* harmony export */   checkCanvasDimensions: () => (/* binding */ checkCanvasDimensions),
/* harmony export */   createImage: () => (/* binding */ createImage),
/* harmony export */   delay: () => (/* binding */ delay),
/* harmony export */   getImageSize: () => (/* binding */ getImageSize),
/* harmony export */   getPixelRatio: () => (/* binding */ getPixelRatio),
/* harmony export */   isInstanceOfElement: () => (/* binding */ isInstanceOfElement),
/* harmony export */   nodeToDataURL: () => (/* binding */ nodeToDataURL),
/* harmony export */   resolveUrl: () => (/* binding */ resolveUrl),
/* harmony export */   svgToDataURL: () => (/* binding */ svgToDataURL),
/* harmony export */   toArray: () => (/* binding */ toArray),
/* harmony export */   uuid: () => (/* binding */ uuid)
/* harmony export */ });
function resolveUrl(url, baseUrl) {
    // url is absolute already
    if (url.match(/^[a-z]+:\/\//i)) {
        return url;
    }
    // url is absolute already, without protocol
    if (url.match(/^\/\//)) {
        return window.location.protocol + url;
    }
    // dataURI, mailto:, tel:, etc.
    if (url.match(/^[a-z]+:/i)) {
        return url;
    }
    const doc = document.implementation.createHTMLDocument();
    const base = doc.createElement('base');
    const a = doc.createElement('a');
    doc.head.appendChild(base);
    doc.body.appendChild(a);
    if (baseUrl) {
        base.href = baseUrl;
    }
    a.href = url;
    return a.href;
}
const uuid = (() => {
    // generate uuid for className of pseudo elements.
    // We should not use GUIDs, otherwise pseudo elements sometimes cannot be captured.
    let counter = 0;
    // ref: http://stackoverflow.com/a/6248722/2519373
    const random = () => 
    // eslint-disable-next-line no-bitwise
    `0000${((Math.random() * 36 ** 4) << 0).toString(36)}`.slice(-4);
    return () => {
        counter += 1;
        return `u${random()}${counter}`;
    };
})();
function delay(ms) {
    return (args) => new Promise((resolve) => {
        setTimeout(() => resolve(args), ms);
    });
}
function toArray(arrayLike) {
    const arr = [];
    for (let i = 0, l = arrayLike.length; i < l; i++) {
        arr.push(arrayLike[i]);
    }
    return arr;
}
function px(node, styleProperty) {
    const win = node.ownerDocument.defaultView || window;
    const val = win.getComputedStyle(node).getPropertyValue(styleProperty);
    return val ? parseFloat(val.replace('px', '')) : 0;
}
function getNodeWidth(node) {
    const leftBorder = px(node, 'border-left-width');
    const rightBorder = px(node, 'border-right-width');
    return node.clientWidth + leftBorder + rightBorder;
}
function getNodeHeight(node) {
    const topBorder = px(node, 'border-top-width');
    const bottomBorder = px(node, 'border-bottom-width');
    return node.clientHeight + topBorder + bottomBorder;
}
function getImageSize(targetNode, options = {}) {
    const width = options.width || getNodeWidth(targetNode);
    const height = options.height || getNodeHeight(targetNode);
    return { width, height };
}
function getPixelRatio() {
    let ratio;
    let FINAL_PROCESS;
    try {
        FINAL_PROCESS = process;
    }
    catch (e) {
        // pass
    }
    const val = FINAL_PROCESS && FINAL_PROCESS.env
        ? FINAL_PROCESS.env.devicePixelRatio
        : null;
    if (val) {
        ratio = parseInt(val, 10);
        if (Number.isNaN(ratio)) {
            ratio = 1;
        }
    }
    return ratio || window.devicePixelRatio || 1;
}
// @see https://developer.mozilla.org/en-US/docs/Web/HTML/Element/canvas#maximum_canvas_size
const canvasDimensionLimit = 16384;
function checkCanvasDimensions(canvas) {
    if (canvas.width > canvasDimensionLimit ||
        canvas.height > canvasDimensionLimit) {
        if (canvas.width > canvasDimensionLimit &&
            canvas.height > canvasDimensionLimit) {
            if (canvas.width > canvas.height) {
                canvas.height *= canvasDimensionLimit / canvas.width;
                canvas.width = canvasDimensionLimit;
            }
            else {
                canvas.width *= canvasDimensionLimit / canvas.height;
                canvas.height = canvasDimensionLimit;
            }
        }
        else if (canvas.width > canvasDimensionLimit) {
            canvas.height *= canvasDimensionLimit / canvas.width;
            canvas.width = canvasDimensionLimit;
        }
        else {
            canvas.width *= canvasDimensionLimit / canvas.height;
            canvas.height = canvasDimensionLimit;
        }
    }
}
function canvasToBlob(canvas, options = {}) {
    if (canvas.toBlob) {
        return new Promise((resolve) => {
            canvas.toBlob(resolve, options.type ? options.type : 'image/png', options.quality ? options.quality : 1);
        });
    }
    return new Promise((resolve) => {
        const binaryString = window.atob(canvas
            .toDataURL(options.type ? options.type : undefined, options.quality ? options.quality : undefined)
            .split(',')[1]);
        const len = binaryString.length;
        const binaryArray = new Uint8Array(len);
        for (let i = 0; i < len; i += 1) {
            binaryArray[i] = binaryString.charCodeAt(i);
        }
        resolve(new Blob([binaryArray], {
            type: options.type ? options.type : 'image/png',
        }));
    });
}
function createImage(url) {
    return new Promise((resolve, reject) => {
        const img = new Image();
        img.decode = () => resolve(img);
        img.onload = () => resolve(img);
        img.onerror = reject;
        img.crossOrigin = 'anonymous';
        img.decoding = 'async';
        img.src = url;
    });
}
async function svgToDataURL(svg) {
    return Promise.resolve()
        .then(() => new XMLSerializer().serializeToString(svg))
        .then(encodeURIComponent)
        .then((html) => `data:image/svg+xml;charset=utf-8,${html}`);
}
async function nodeToDataURL(node, width, height) {
    const xmlns = 'http://www.w3.org/2000/svg';
    const svg = document.createElementNS(xmlns, 'svg');
    const foreignObject = document.createElementNS(xmlns, 'foreignObject');
    svg.setAttribute('width', `${width}`);
    svg.setAttribute('height', `${height}`);
    svg.setAttribute('viewBox', `0 0 ${width} ${height}`);
    foreignObject.setAttribute('width', '100%');
    foreignObject.setAttribute('height', '100%');
    foreignObject.setAttribute('x', '0');
    foreignObject.setAttribute('y', '0');
    foreignObject.setAttribute('externalResourcesRequired', 'true');
    svg.appendChild(foreignObject);
    foreignObject.appendChild(node);
    return svgToDataURL(svg);
}
const isInstanceOfElement = (node, instance) => {
    if (node instanceof instance)
        return true;
    const nodePrototype = Object.getPrototypeOf(node);
    if (nodePrototype === null)
        return false;
    return (nodePrototype.constructor.name === instance.name ||
        isInstanceOfElement(nodePrototype, instance));
};
//# sourceMappingURL=util.js.map

/***/ }),

/***/ "../node_modules/sortablejs/modular/sortable.esm.js":
/*!**********************************************************!*\
  !*** ../node_modules/sortablejs/modular/sortable.esm.js ***!
  \**********************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   MultiDrag: () => (/* binding */ MultiDragPlugin),
/* harmony export */   Sortable: () => (/* binding */ Sortable),
/* harmony export */   Swap: () => (/* binding */ SwapPlugin),
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/**!
 * Sortable 1.15.0
 * @author	RubaXa   <trash@rubaxa.org>
 * @author	owenm    <owen23355@gmail.com>
 * @license MIT
 */
function ownKeys(object, enumerableOnly) {
  var keys = Object.keys(object);

  if (Object.getOwnPropertySymbols) {
    var symbols = Object.getOwnPropertySymbols(object);

    if (enumerableOnly) {
      symbols = symbols.filter(function (sym) {
        return Object.getOwnPropertyDescriptor(object, sym).enumerable;
      });
    }

    keys.push.apply(keys, symbols);
  }

  return keys;
}

function _objectSpread2(target) {
  for (var i = 1; i < arguments.length; i++) {
    var source = arguments[i] != null ? arguments[i] : {};

    if (i % 2) {
      ownKeys(Object(source), true).forEach(function (key) {
        _defineProperty(target, key, source[key]);
      });
    } else if (Object.getOwnPropertyDescriptors) {
      Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));
    } else {
      ownKeys(Object(source)).forEach(function (key) {
        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
      });
    }
  }

  return target;
}

function _typeof(obj) {
  "@babel/helpers - typeof";

  if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") {
    _typeof = function (obj) {
      return typeof obj;
    };
  } else {
    _typeof = function (obj) {
      return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;
    };
  }

  return _typeof(obj);
}

function _defineProperty(obj, key, value) {
  if (key in obj) {
    Object.defineProperty(obj, key, {
      value: value,
      enumerable: true,
      configurable: true,
      writable: true
    });
  } else {
    obj[key] = value;
  }

  return obj;
}

function _extends() {
  _extends = Object.assign || function (target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];

      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }

    return target;
  };

  return _extends.apply(this, arguments);
}

function _objectWithoutPropertiesLoose(source, excluded) {
  if (source == null) return {};
  var target = {};
  var sourceKeys = Object.keys(source);
  var key, i;

  for (i = 0; i < sourceKeys.length; i++) {
    key = sourceKeys[i];
    if (excluded.indexOf(key) >= 0) continue;
    target[key] = source[key];
  }

  return target;
}

function _objectWithoutProperties(source, excluded) {
  if (source == null) return {};

  var target = _objectWithoutPropertiesLoose(source, excluded);

  var key, i;

  if (Object.getOwnPropertySymbols) {
    var sourceSymbolKeys = Object.getOwnPropertySymbols(source);

    for (i = 0; i < sourceSymbolKeys.length; i++) {
      key = sourceSymbolKeys[i];
      if (excluded.indexOf(key) >= 0) continue;
      if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;
      target[key] = source[key];
    }
  }

  return target;
}

function _toConsumableArray(arr) {
  return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread();
}

function _arrayWithoutHoles(arr) {
  if (Array.isArray(arr)) return _arrayLikeToArray(arr);
}

function _iterableToArray(iter) {
  if (typeof Symbol !== "undefined" && iter[Symbol.iterator] != null || iter["@@iterator"] != null) return Array.from(iter);
}

function _unsupportedIterableToArray(o, minLen) {
  if (!o) return;
  if (typeof o === "string") return _arrayLikeToArray(o, minLen);
  var n = Object.prototype.toString.call(o).slice(8, -1);
  if (n === "Object" && o.constructor) n = o.constructor.name;
  if (n === "Map" || n === "Set") return Array.from(o);
  if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen);
}

function _arrayLikeToArray(arr, len) {
  if (len == null || len > arr.length) len = arr.length;

  for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i];

  return arr2;
}

function _nonIterableSpread() {
  throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
}

var version = "1.15.0";

function userAgent(pattern) {
  if (typeof window !== 'undefined' && window.navigator) {
    return !! /*@__PURE__*/navigator.userAgent.match(pattern);
  }
}

var IE11OrLess = userAgent(/(?:Trident.*rv[ :]?11\.|msie|iemobile|Windows Phone)/i);
var Edge = userAgent(/Edge/i);
var FireFox = userAgent(/firefox/i);
var Safari = userAgent(/safari/i) && !userAgent(/chrome/i) && !userAgent(/android/i);
var IOS = userAgent(/iP(ad|od|hone)/i);
var ChromeForAndroid = userAgent(/chrome/i) && userAgent(/android/i);

var captureMode = {
  capture: false,
  passive: false
};

function on(el, event, fn) {
  el.addEventListener(event, fn, !IE11OrLess && captureMode);
}

function off(el, event, fn) {
  el.removeEventListener(event, fn, !IE11OrLess && captureMode);
}

function matches(
/**HTMLElement*/
el,
/**String*/
selector) {
  if (!selector) return;
  selector[0] === '>' && (selector = selector.substring(1));

  if (el) {
    try {
      if (el.matches) {
        return el.matches(selector);
      } else if (el.msMatchesSelector) {
        return el.msMatchesSelector(selector);
      } else if (el.webkitMatchesSelector) {
        return el.webkitMatchesSelector(selector);
      }
    } catch (_) {
      return false;
    }
  }

  return false;
}

function getParentOrHost(el) {
  return el.host && el !== document && el.host.nodeType ? el.host : el.parentNode;
}

function closest(
/**HTMLElement*/
el,
/**String*/
selector,
/**HTMLElement*/
ctx, includeCTX) {
  if (el) {
    ctx = ctx || document;

    do {
      if (selector != null && (selector[0] === '>' ? el.parentNode === ctx && matches(el, selector) : matches(el, selector)) || includeCTX && el === ctx) {
        return el;
      }

      if (el === ctx) break;
      /* jshint boss:true */
    } while (el = getParentOrHost(el));
  }

  return null;
}

var R_SPACE = /\s+/g;

function toggleClass(el, name, state) {
  if (el && name) {
    if (el.classList) {
      el.classList[state ? 'add' : 'remove'](name);
    } else {
      var className = (' ' + el.className + ' ').replace(R_SPACE, ' ').replace(' ' + name + ' ', ' ');
      el.className = (className + (state ? ' ' + name : '')).replace(R_SPACE, ' ');
    }
  }
}

function css(el, prop, val) {
  var style = el && el.style;

  if (style) {
    if (val === void 0) {
      if (document.defaultView && document.defaultView.getComputedStyle) {
        val = document.defaultView.getComputedStyle(el, '');
      } else if (el.currentStyle) {
        val = el.currentStyle;
      }

      return prop === void 0 ? val : val[prop];
    } else {
      if (!(prop in style) && prop.indexOf('webkit') === -1) {
        prop = '-webkit-' + prop;
      }

      style[prop] = val + (typeof val === 'string' ? '' : 'px');
    }
  }
}

function matrix(el, selfOnly) {
  var appliedTransforms = '';

  if (typeof el === 'string') {
    appliedTransforms = el;
  } else {
    do {
      var transform = css(el, 'transform');

      if (transform && transform !== 'none') {
        appliedTransforms = transform + ' ' + appliedTransforms;
      }
      /* jshint boss:true */

    } while (!selfOnly && (el = el.parentNode));
  }

  var matrixFn = window.DOMMatrix || window.WebKitCSSMatrix || window.CSSMatrix || window.MSCSSMatrix;
  /*jshint -W056 */

  return matrixFn && new matrixFn(appliedTransforms);
}

function find(ctx, tagName, iterator) {
  if (ctx) {
    var list = ctx.getElementsByTagName(tagName),
        i = 0,
        n = list.length;

    if (iterator) {
      for (; i < n; i++) {
        iterator(list[i], i);
      }
    }

    return list;
  }

  return [];
}

function getWindowScrollingElement() {
  var scrollingElement = document.scrollingElement;

  if (scrollingElement) {
    return scrollingElement;
  } else {
    return document.documentElement;
  }
}
/**
 * Returns the "bounding client rect" of given element
 * @param  {HTMLElement} el                       The element whose boundingClientRect is wanted
 * @param  {[Boolean]} relativeToContainingBlock  Whether the rect should be relative to the containing block of (including) the container
 * @param  {[Boolean]} relativeToNonStaticParent  Whether the rect should be relative to the relative parent of (including) the contaienr
 * @param  {[Boolean]} undoScale                  Whether the container's scale() should be undone
 * @param  {[HTMLElement]} container              The parent the element will be placed in
 * @return {Object}                               The boundingClientRect of el, with specified adjustments
 */


function getRect(el, relativeToContainingBlock, relativeToNonStaticParent, undoScale, container) {
  if (!el.getBoundingClientRect && el !== window) return;
  var elRect, top, left, bottom, right, height, width;

  if (el !== window && el.parentNode && el !== getWindowScrollingElement()) {
    elRect = el.getBoundingClientRect();
    top = elRect.top;
    left = elRect.left;
    bottom = elRect.bottom;
    right = elRect.right;
    height = elRect.height;
    width = elRect.width;
  } else {
    top = 0;
    left = 0;
    bottom = window.innerHeight;
    right = window.innerWidth;
    height = window.innerHeight;
    width = window.innerWidth;
  }

  if ((relativeToContainingBlock || relativeToNonStaticParent) && el !== window) {
    // Adjust for translate()
    container = container || el.parentNode; // solves #1123 (see: https://stackoverflow.com/a/37953806/6088312)
    // Not needed on <= IE11

    if (!IE11OrLess) {
      do {
        if (container && container.getBoundingClientRect && (css(container, 'transform') !== 'none' || relativeToNonStaticParent && css(container, 'position') !== 'static')) {
          var containerRect = container.getBoundingClientRect(); // Set relative to edges of padding box of container

          top -= containerRect.top + parseInt(css(container, 'border-top-width'));
          left -= containerRect.left + parseInt(css(container, 'border-left-width'));
          bottom = top + elRect.height;
          right = left + elRect.width;
          break;
        }
        /* jshint boss:true */

      } while (container = container.parentNode);
    }
  }

  if (undoScale && el !== window) {
    // Adjust for scale()
    var elMatrix = matrix(container || el),
        scaleX = elMatrix && elMatrix.a,
        scaleY = elMatrix && elMatrix.d;

    if (elMatrix) {
      top /= scaleY;
      left /= scaleX;
      width /= scaleX;
      height /= scaleY;
      bottom = top + height;
      right = left + width;
    }
  }

  return {
    top: top,
    left: left,
    bottom: bottom,
    right: right,
    width: width,
    height: height
  };
}
/**
 * Checks if a side of an element is scrolled past a side of its parents
 * @param  {HTMLElement}  el           The element who's side being scrolled out of view is in question
 * @param  {String}       elSide       Side of the element in question ('top', 'left', 'right', 'bottom')
 * @param  {String}       parentSide   Side of the parent in question ('top', 'left', 'right', 'bottom')
 * @return {HTMLElement}               The parent scroll element that the el's side is scrolled past, or null if there is no such element
 */


function isScrolledPast(el, elSide, parentSide) {
  var parent = getParentAutoScrollElement(el, true),
      elSideVal = getRect(el)[elSide];
  /* jshint boss:true */

  while (parent) {
    var parentSideVal = getRect(parent)[parentSide],
        visible = void 0;

    if (parentSide === 'top' || parentSide === 'left') {
      visible = elSideVal >= parentSideVal;
    } else {
      visible = elSideVal <= parentSideVal;
    }

    if (!visible) return parent;
    if (parent === getWindowScrollingElement()) break;
    parent = getParentAutoScrollElement(parent, false);
  }

  return false;
}
/**
 * Gets nth child of el, ignoring hidden children, sortable's elements (does not ignore clone if it's visible)
 * and non-draggable elements
 * @param  {HTMLElement} el       The parent element
 * @param  {Number} childNum      The index of the child
 * @param  {Object} options       Parent Sortable's options
 * @return {HTMLElement}          The child at index childNum, or null if not found
 */


function getChild(el, childNum, options, includeDragEl) {
  var currentChild = 0,
      i = 0,
      children = el.children;

  while (i < children.length) {
    if (children[i].style.display !== 'none' && children[i] !== Sortable.ghost && (includeDragEl || children[i] !== Sortable.dragged) && closest(children[i], options.draggable, el, false)) {
      if (currentChild === childNum) {
        return children[i];
      }

      currentChild++;
    }

    i++;
  }

  return null;
}
/**
 * Gets the last child in the el, ignoring ghostEl or invisible elements (clones)
 * @param  {HTMLElement} el       Parent element
 * @param  {selector} selector    Any other elements that should be ignored
 * @return {HTMLElement}          The last child, ignoring ghostEl
 */


function lastChild(el, selector) {
  var last = el.lastElementChild;

  while (last && (last === Sortable.ghost || css(last, 'display') === 'none' || selector && !matches(last, selector))) {
    last = last.previousElementSibling;
  }

  return last || null;
}
/**
 * Returns the index of an element within its parent for a selected set of
 * elements
 * @param  {HTMLElement} el
 * @param  {selector} selector
 * @return {number}
 */


function index(el, selector) {
  var index = 0;

  if (!el || !el.parentNode) {
    return -1;
  }
  /* jshint boss:true */


  while (el = el.previousElementSibling) {
    if (el.nodeName.toUpperCase() !== 'TEMPLATE' && el !== Sortable.clone && (!selector || matches(el, selector))) {
      index++;
    }
  }

  return index;
}
/**
 * Returns the scroll offset of the given element, added with all the scroll offsets of parent elements.
 * The value is returned in real pixels.
 * @param  {HTMLElement} el
 * @return {Array}             Offsets in the format of [left, top]
 */


function getRelativeScrollOffset(el) {
  var offsetLeft = 0,
      offsetTop = 0,
      winScroller = getWindowScrollingElement();

  if (el) {
    do {
      var elMatrix = matrix(el),
          scaleX = elMatrix.a,
          scaleY = elMatrix.d;
      offsetLeft += el.scrollLeft * scaleX;
      offsetTop += el.scrollTop * scaleY;
    } while (el !== winScroller && (el = el.parentNode));
  }

  return [offsetLeft, offsetTop];
}
/**
 * Returns the index of the object within the given array
 * @param  {Array} arr   Array that may or may not hold the object
 * @param  {Object} obj  An object that has a key-value pair unique to and identical to a key-value pair in the object you want to find
 * @return {Number}      The index of the object in the array, or -1
 */


function indexOfObject(arr, obj) {
  for (var i in arr) {
    if (!arr.hasOwnProperty(i)) continue;

    for (var key in obj) {
      if (obj.hasOwnProperty(key) && obj[key] === arr[i][key]) return Number(i);
    }
  }

  return -1;
}

function getParentAutoScrollElement(el, includeSelf) {
  // skip to window
  if (!el || !el.getBoundingClientRect) return getWindowScrollingElement();
  var elem = el;
  var gotSelf = false;

  do {
    // we don't need to get elem css if it isn't even overflowing in the first place (performance)
    if (elem.clientWidth < elem.scrollWidth || elem.clientHeight < elem.scrollHeight) {
      var elemCSS = css(elem);

      if (elem.clientWidth < elem.scrollWidth && (elemCSS.overflowX == 'auto' || elemCSS.overflowX == 'scroll') || elem.clientHeight < elem.scrollHeight && (elemCSS.overflowY == 'auto' || elemCSS.overflowY == 'scroll')) {
        if (!elem.getBoundingClientRect || elem === document.body) return getWindowScrollingElement();
        if (gotSelf || includeSelf) return elem;
        gotSelf = true;
      }
    }
    /* jshint boss:true */

  } while (elem = elem.parentNode);

  return getWindowScrollingElement();
}

function extend(dst, src) {
  if (dst && src) {
    for (var key in src) {
      if (src.hasOwnProperty(key)) {
        dst[key] = src[key];
      }
    }
  }

  return dst;
}

function isRectEqual(rect1, rect2) {
  return Math.round(rect1.top) === Math.round(rect2.top) && Math.round(rect1.left) === Math.round(rect2.left) && Math.round(rect1.height) === Math.round(rect2.height) && Math.round(rect1.width) === Math.round(rect2.width);
}

var _throttleTimeout;

function throttle(callback, ms) {
  return function () {
    if (!_throttleTimeout) {
      var args = arguments,
          _this = this;

      if (args.length === 1) {
        callback.call(_this, args[0]);
      } else {
        callback.apply(_this, args);
      }

      _throttleTimeout = setTimeout(function () {
        _throttleTimeout = void 0;
      }, ms);
    }
  };
}

function cancelThrottle() {
  clearTimeout(_throttleTimeout);
  _throttleTimeout = void 0;
}

function scrollBy(el, x, y) {
  el.scrollLeft += x;
  el.scrollTop += y;
}

function clone(el) {
  var Polymer = window.Polymer;
  var $ = window.jQuery || window.Zepto;

  if (Polymer && Polymer.dom) {
    return Polymer.dom(el).cloneNode(true);
  } else if ($) {
    return $(el).clone(true)[0];
  } else {
    return el.cloneNode(true);
  }
}

function setRect(el, rect) {
  css(el, 'position', 'absolute');
  css(el, 'top', rect.top);
  css(el, 'left', rect.left);
  css(el, 'width', rect.width);
  css(el, 'height', rect.height);
}

function unsetRect(el) {
  css(el, 'position', '');
  css(el, 'top', '');
  css(el, 'left', '');
  css(el, 'width', '');
  css(el, 'height', '');
}

var expando = 'Sortable' + new Date().getTime();

function AnimationStateManager() {
  var animationStates = [],
      animationCallbackId;
  return {
    captureAnimationState: function captureAnimationState() {
      animationStates = [];
      if (!this.options.animation) return;
      var children = [].slice.call(this.el.children);
      children.forEach(function (child) {
        if (css(child, 'display') === 'none' || child === Sortable.ghost) return;
        animationStates.push({
          target: child,
          rect: getRect(child)
        });

        var fromRect = _objectSpread2({}, animationStates[animationStates.length - 1].rect); // If animating: compensate for current animation


        if (child.thisAnimationDuration) {
          var childMatrix = matrix(child, true);

          if (childMatrix) {
            fromRect.top -= childMatrix.f;
            fromRect.left -= childMatrix.e;
          }
        }

        child.fromRect = fromRect;
      });
    },
    addAnimationState: function addAnimationState(state) {
      animationStates.push(state);
    },
    removeAnimationState: function removeAnimationState(target) {
      animationStates.splice(indexOfObject(animationStates, {
        target: target
      }), 1);
    },
    animateAll: function animateAll(callback) {
      var _this = this;

      if (!this.options.animation) {
        clearTimeout(animationCallbackId);
        if (typeof callback === 'function') callback();
        return;
      }

      var animating = false,
          animationTime = 0;
      animationStates.forEach(function (state) {
        var time = 0,
            target = state.target,
            fromRect = target.fromRect,
            toRect = getRect(target),
            prevFromRect = target.prevFromRect,
            prevToRect = target.prevToRect,
            animatingRect = state.rect,
            targetMatrix = matrix(target, true);

        if (targetMatrix) {
          // Compensate for current animation
          toRect.top -= targetMatrix.f;
          toRect.left -= targetMatrix.e;
        }

        target.toRect = toRect;

        if (target.thisAnimationDuration) {
          // Could also check if animatingRect is between fromRect and toRect
          if (isRectEqual(prevFromRect, toRect) && !isRectEqual(fromRect, toRect) && // Make sure animatingRect is on line between toRect & fromRect
          (animatingRect.top - toRect.top) / (animatingRect.left - toRect.left) === (fromRect.top - toRect.top) / (fromRect.left - toRect.left)) {
            // If returning to same place as started from animation and on same axis
            time = calculateRealTime(animatingRect, prevFromRect, prevToRect, _this.options);
          }
        } // if fromRect != toRect: animate


        if (!isRectEqual(toRect, fromRect)) {
          target.prevFromRect = fromRect;
          target.prevToRect = toRect;

          if (!time) {
            time = _this.options.animation;
          }

          _this.animate(target, animatingRect, toRect, time);
        }

        if (time) {
          animating = true;
          animationTime = Math.max(animationTime, time);
          clearTimeout(target.animationResetTimer);
          target.animationResetTimer = setTimeout(function () {
            target.animationTime = 0;
            target.prevFromRect = null;
            target.fromRect = null;
            target.prevToRect = null;
            target.thisAnimationDuration = null;
          }, time);
          target.thisAnimationDuration = time;
        }
      });
      clearTimeout(animationCallbackId);

      if (!animating) {
        if (typeof callback === 'function') callback();
      } else {
        animationCallbackId = setTimeout(function () {
          if (typeof callback === 'function') callback();
        }, animationTime);
      }

      animationStates = [];
    },
    animate: function animate(target, currentRect, toRect, duration) {
      if (duration) {
        css(target, 'transition', '');
        css(target, 'transform', '');
        var elMatrix = matrix(this.el),
            scaleX = elMatrix && elMatrix.a,
            scaleY = elMatrix && elMatrix.d,
            translateX = (currentRect.left - toRect.left) / (scaleX || 1),
            translateY = (currentRect.top - toRect.top) / (scaleY || 1);
        target.animatingX = !!translateX;
        target.animatingY = !!translateY;
        css(target, 'transform', 'translate3d(' + translateX + 'px,' + translateY + 'px,0)');
        this.forRepaintDummy = repaint(target); // repaint

        css(target, 'transition', 'transform ' + duration + 'ms' + (this.options.easing ? ' ' + this.options.easing : ''));
        css(target, 'transform', 'translate3d(0,0,0)');
        typeof target.animated === 'number' && clearTimeout(target.animated);
        target.animated = setTimeout(function () {
          css(target, 'transition', '');
          css(target, 'transform', '');
          target.animated = false;
          target.animatingX = false;
          target.animatingY = false;
        }, duration);
      }
    }
  };
}

function repaint(target) {
  return target.offsetWidth;
}

function calculateRealTime(animatingRect, fromRect, toRect, options) {
  return Math.sqrt(Math.pow(fromRect.top - animatingRect.top, 2) + Math.pow(fromRect.left - animatingRect.left, 2)) / Math.sqrt(Math.pow(fromRect.top - toRect.top, 2) + Math.pow(fromRect.left - toRect.left, 2)) * options.animation;
}

var plugins = [];
var defaults = {
  initializeByDefault: true
};
var PluginManager = {
  mount: function mount(plugin) {
    // Set default static properties
    for (var option in defaults) {
      if (defaults.hasOwnProperty(option) && !(option in plugin)) {
        plugin[option] = defaults[option];
      }
    }

    plugins.forEach(function (p) {
      if (p.pluginName === plugin.pluginName) {
        throw "Sortable: Cannot mount plugin ".concat(plugin.pluginName, " more than once");
      }
    });
    plugins.push(plugin);
  },
  pluginEvent: function pluginEvent(eventName, sortable, evt) {
    var _this = this;

    this.eventCanceled = false;

    evt.cancel = function () {
      _this.eventCanceled = true;
    };

    var eventNameGlobal = eventName + 'Global';
    plugins.forEach(function (plugin) {
      if (!sortable[plugin.pluginName]) return; // Fire global events if it exists in this sortable

      if (sortable[plugin.pluginName][eventNameGlobal]) {
        sortable[plugin.pluginName][eventNameGlobal](_objectSpread2({
          sortable: sortable
        }, evt));
      } // Only fire plugin event if plugin is enabled in this sortable,
      // and plugin has event defined


      if (sortable.options[plugin.pluginName] && sortable[plugin.pluginName][eventName]) {
        sortable[plugin.pluginName][eventName](_objectSpread2({
          sortable: sortable
        }, evt));
      }
    });
  },
  initializePlugins: function initializePlugins(sortable, el, defaults, options) {
    plugins.forEach(function (plugin) {
      var pluginName = plugin.pluginName;
      if (!sortable.options[pluginName] && !plugin.initializeByDefault) return;
      var initialized = new plugin(sortable, el, sortable.options);
      initialized.sortable = sortable;
      initialized.options = sortable.options;
      sortable[pluginName] = initialized; // Add default options from plugin

      _extends(defaults, initialized.defaults);
    });

    for (var option in sortable.options) {
      if (!sortable.options.hasOwnProperty(option)) continue;
      var modified = this.modifyOption(sortable, option, sortable.options[option]);

      if (typeof modified !== 'undefined') {
        sortable.options[option] = modified;
      }
    }
  },
  getEventProperties: function getEventProperties(name, sortable) {
    var eventProperties = {};
    plugins.forEach(function (plugin) {
      if (typeof plugin.eventProperties !== 'function') return;

      _extends(eventProperties, plugin.eventProperties.call(sortable[plugin.pluginName], name));
    });
    return eventProperties;
  },
  modifyOption: function modifyOption(sortable, name, value) {
    var modifiedValue;
    plugins.forEach(function (plugin) {
      // Plugin must exist on the Sortable
      if (!sortable[plugin.pluginName]) return; // If static option listener exists for this option, call in the context of the Sortable's instance of this plugin

      if (plugin.optionListeners && typeof plugin.optionListeners[name] === 'function') {
        modifiedValue = plugin.optionListeners[name].call(sortable[plugin.pluginName], value);
      }
    });
    return modifiedValue;
  }
};

function dispatchEvent(_ref) {
  var sortable = _ref.sortable,
      rootEl = _ref.rootEl,
      name = _ref.name,
      targetEl = _ref.targetEl,
      cloneEl = _ref.cloneEl,
      toEl = _ref.toEl,
      fromEl = _ref.fromEl,
      oldIndex = _ref.oldIndex,
      newIndex = _ref.newIndex,
      oldDraggableIndex = _ref.oldDraggableIndex,
      newDraggableIndex = _ref.newDraggableIndex,
      originalEvent = _ref.originalEvent,
      putSortable = _ref.putSortable,
      extraEventProperties = _ref.extraEventProperties;
  sortable = sortable || rootEl && rootEl[expando];
  if (!sortable) return;
  var evt,
      options = sortable.options,
      onName = 'on' + name.charAt(0).toUpperCase() + name.substr(1); // Support for new CustomEvent feature

  if (window.CustomEvent && !IE11OrLess && !Edge) {
    evt = new CustomEvent(name, {
      bubbles: true,
      cancelable: true
    });
  } else {
    evt = document.createEvent('Event');
    evt.initEvent(name, true, true);
  }

  evt.to = toEl || rootEl;
  evt.from = fromEl || rootEl;
  evt.item = targetEl || rootEl;
  evt.clone = cloneEl;
  evt.oldIndex = oldIndex;
  evt.newIndex = newIndex;
  evt.oldDraggableIndex = oldDraggableIndex;
  evt.newDraggableIndex = newDraggableIndex;
  evt.originalEvent = originalEvent;
  evt.pullMode = putSortable ? putSortable.lastPutMode : undefined;

  var allEventProperties = _objectSpread2(_objectSpread2({}, extraEventProperties), PluginManager.getEventProperties(name, sortable));

  for (var option in allEventProperties) {
    evt[option] = allEventProperties[option];
  }

  if (rootEl) {
    rootEl.dispatchEvent(evt);
  }

  if (options[onName]) {
    options[onName].call(sortable, evt);
  }
}

var _excluded = ["evt"];

var pluginEvent = function pluginEvent(eventName, sortable) {
  var _ref = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {},
      originalEvent = _ref.evt,
      data = _objectWithoutProperties(_ref, _excluded);

  PluginManager.pluginEvent.bind(Sortable)(eventName, sortable, _objectSpread2({
    dragEl: dragEl,
    parentEl: parentEl,
    ghostEl: ghostEl,
    rootEl: rootEl,
    nextEl: nextEl,
    lastDownEl: lastDownEl,
    cloneEl: cloneEl,
    cloneHidden: cloneHidden,
    dragStarted: moved,
    putSortable: putSortable,
    activeSortable: Sortable.active,
    originalEvent: originalEvent,
    oldIndex: oldIndex,
    oldDraggableIndex: oldDraggableIndex,
    newIndex: newIndex,
    newDraggableIndex: newDraggableIndex,
    hideGhostForTarget: _hideGhostForTarget,
    unhideGhostForTarget: _unhideGhostForTarget,
    cloneNowHidden: function cloneNowHidden() {
      cloneHidden = true;
    },
    cloneNowShown: function cloneNowShown() {
      cloneHidden = false;
    },
    dispatchSortableEvent: function dispatchSortableEvent(name) {
      _dispatchEvent({
        sortable: sortable,
        name: name,
        originalEvent: originalEvent
      });
    }
  }, data));
};

function _dispatchEvent(info) {
  dispatchEvent(_objectSpread2({
    putSortable: putSortable,
    cloneEl: cloneEl,
    targetEl: dragEl,
    rootEl: rootEl,
    oldIndex: oldIndex,
    oldDraggableIndex: oldDraggableIndex,
    newIndex: newIndex,
    newDraggableIndex: newDraggableIndex
  }, info));
}

var dragEl,
    parentEl,
    ghostEl,
    rootEl,
    nextEl,
    lastDownEl,
    cloneEl,
    cloneHidden,
    oldIndex,
    newIndex,
    oldDraggableIndex,
    newDraggableIndex,
    activeGroup,
    putSortable,
    awaitingDragStarted = false,
    ignoreNextClick = false,
    sortables = [],
    tapEvt,
    touchEvt,
    lastDx,
    lastDy,
    tapDistanceLeft,
    tapDistanceTop,
    moved,
    lastTarget,
    lastDirection,
    pastFirstInvertThresh = false,
    isCircumstantialInvert = false,
    targetMoveDistance,
    // For positioning ghost absolutely
ghostRelativeParent,
    ghostRelativeParentInitialScroll = [],
    // (left, top)
_silent = false,
    savedInputChecked = [];
/** @const */

var documentExists = typeof document !== 'undefined',
    PositionGhostAbsolutely = IOS,
    CSSFloatProperty = Edge || IE11OrLess ? 'cssFloat' : 'float',
    // This will not pass for IE9, because IE9 DnD only works on anchors
supportDraggable = documentExists && !ChromeForAndroid && !IOS && 'draggable' in document.createElement('div'),
    supportCssPointerEvents = function () {
  if (!documentExists) return; // false when <= IE11

  if (IE11OrLess) {
    return false;
  }

  var el = document.createElement('x');
  el.style.cssText = 'pointer-events:auto';
  return el.style.pointerEvents === 'auto';
}(),
    _detectDirection = function _detectDirection(el, options) {
  var elCSS = css(el),
      elWidth = parseInt(elCSS.width) - parseInt(elCSS.paddingLeft) - parseInt(elCSS.paddingRight) - parseInt(elCSS.borderLeftWidth) - parseInt(elCSS.borderRightWidth),
      child1 = getChild(el, 0, options),
      child2 = getChild(el, 1, options),
      firstChildCSS = child1 && css(child1),
      secondChildCSS = child2 && css(child2),
      firstChildWidth = firstChildCSS && parseInt(firstChildCSS.marginLeft) + parseInt(firstChildCSS.marginRight) + getRect(child1).width,
      secondChildWidth = secondChildCSS && parseInt(secondChildCSS.marginLeft) + parseInt(secondChildCSS.marginRight) + getRect(child2).width;

  if (elCSS.display === 'flex') {
    return elCSS.flexDirection === 'column' || elCSS.flexDirection === 'column-reverse' ? 'vertical' : 'horizontal';
  }

  if (elCSS.display === 'grid') {
    return elCSS.gridTemplateColumns.split(' ').length <= 1 ? 'vertical' : 'horizontal';
  }

  if (child1 && firstChildCSS["float"] && firstChildCSS["float"] !== 'none') {
    var touchingSideChild2 = firstChildCSS["float"] === 'left' ? 'left' : 'right';
    return child2 && (secondChildCSS.clear === 'both' || secondChildCSS.clear === touchingSideChild2) ? 'vertical' : 'horizontal';
  }

  return child1 && (firstChildCSS.display === 'block' || firstChildCSS.display === 'flex' || firstChildCSS.display === 'table' || firstChildCSS.display === 'grid' || firstChildWidth >= elWidth && elCSS[CSSFloatProperty] === 'none' || child2 && elCSS[CSSFloatProperty] === 'none' && firstChildWidth + secondChildWidth > elWidth) ? 'vertical' : 'horizontal';
},
    _dragElInRowColumn = function _dragElInRowColumn(dragRect, targetRect, vertical) {
  var dragElS1Opp = vertical ? dragRect.left : dragRect.top,
      dragElS2Opp = vertical ? dragRect.right : dragRect.bottom,
      dragElOppLength = vertical ? dragRect.width : dragRect.height,
      targetS1Opp = vertical ? targetRect.left : targetRect.top,
      targetS2Opp = vertical ? targetRect.right : targetRect.bottom,
      targetOppLength = vertical ? targetRect.width : targetRect.height;
  return dragElS1Opp === targetS1Opp || dragElS2Opp === targetS2Opp || dragElS1Opp + dragElOppLength / 2 === targetS1Opp + targetOppLength / 2;
},

/**
 * Detects first nearest empty sortable to X and Y position using emptyInsertThreshold.
 * @param  {Number} x      X position
 * @param  {Number} y      Y position
 * @return {HTMLElement}   Element of the first found nearest Sortable
 */
_detectNearestEmptySortable = function _detectNearestEmptySortable(x, y) {
  var ret;
  sortables.some(function (sortable) {
    var threshold = sortable[expando].options.emptyInsertThreshold;
    if (!threshold || lastChild(sortable)) return;
    var rect = getRect(sortable),
        insideHorizontally = x >= rect.left - threshold && x <= rect.right + threshold,
        insideVertically = y >= rect.top - threshold && y <= rect.bottom + threshold;

    if (insideHorizontally && insideVertically) {
      return ret = sortable;
    }
  });
  return ret;
},
    _prepareGroup = function _prepareGroup(options) {
  function toFn(value, pull) {
    return function (to, from, dragEl, evt) {
      var sameGroup = to.options.group.name && from.options.group.name && to.options.group.name === from.options.group.name;

      if (value == null && (pull || sameGroup)) {
        // Default pull value
        // Default pull and put value if same group
        return true;
      } else if (value == null || value === false) {
        return false;
      } else if (pull && value === 'clone') {
        return value;
      } else if (typeof value === 'function') {
        return toFn(value(to, from, dragEl, evt), pull)(to, from, dragEl, evt);
      } else {
        var otherGroup = (pull ? to : from).options.group.name;
        return value === true || typeof value === 'string' && value === otherGroup || value.join && value.indexOf(otherGroup) > -1;
      }
    };
  }

  var group = {};
  var originalGroup = options.group;

  if (!originalGroup || _typeof(originalGroup) != 'object') {
    originalGroup = {
      name: originalGroup
    };
  }

  group.name = originalGroup.name;
  group.checkPull = toFn(originalGroup.pull, true);
  group.checkPut = toFn(originalGroup.put);
  group.revertClone = originalGroup.revertClone;
  options.group = group;
},
    _hideGhostForTarget = function _hideGhostForTarget() {
  if (!supportCssPointerEvents && ghostEl) {
    css(ghostEl, 'display', 'none');
  }
},
    _unhideGhostForTarget = function _unhideGhostForTarget() {
  if (!supportCssPointerEvents && ghostEl) {
    css(ghostEl, 'display', '');
  }
}; // #1184 fix - Prevent click event on fallback if dragged but item not changed position


if (documentExists && !ChromeForAndroid) {
  document.addEventListener('click', function (evt) {
    if (ignoreNextClick) {
      evt.preventDefault();
      evt.stopPropagation && evt.stopPropagation();
      evt.stopImmediatePropagation && evt.stopImmediatePropagation();
      ignoreNextClick = false;
      return false;
    }
  }, true);
}

var nearestEmptyInsertDetectEvent = function nearestEmptyInsertDetectEvent(evt) {
  if (dragEl) {
    evt = evt.touches ? evt.touches[0] : evt;

    var nearest = _detectNearestEmptySortable(evt.clientX, evt.clientY);

    if (nearest) {
      // Create imitation event
      var event = {};

      for (var i in evt) {
        if (evt.hasOwnProperty(i)) {
          event[i] = evt[i];
        }
      }

      event.target = event.rootEl = nearest;
      event.preventDefault = void 0;
      event.stopPropagation = void 0;

      nearest[expando]._onDragOver(event);
    }
  }
};

var _checkOutsideTargetEl = function _checkOutsideTargetEl(evt) {
  if (dragEl) {
    dragEl.parentNode[expando]._isOutsideThisEl(evt.target);
  }
};
/**
 * @class  Sortable
 * @param  {HTMLElement}  el
 * @param  {Object}       [options]
 */


function Sortable(el, options) {
  if (!(el && el.nodeType && el.nodeType === 1)) {
    throw "Sortable: `el` must be an HTMLElement, not ".concat({}.toString.call(el));
  }

  this.el = el; // root element

  this.options = options = _extends({}, options); // Export instance

  el[expando] = this;
  var defaults = {
    group: null,
    sort: true,
    disabled: false,
    store: null,
    handle: null,
    draggable: /^[uo]l$/i.test(el.nodeName) ? '>li' : '>*',
    swapThreshold: 1,
    // percentage; 0 <= x <= 1
    invertSwap: false,
    // invert always
    invertedSwapThreshold: null,
    // will be set to same as swapThreshold if default
    removeCloneOnHide: true,
    direction: function direction() {
      return _detectDirection(el, this.options);
    },
    ghostClass: 'sortable-ghost',
    chosenClass: 'sortable-chosen',
    dragClass: 'sortable-drag',
    ignore: 'a, img',
    filter: null,
    preventOnFilter: true,
    animation: 0,
    easing: null,
    setData: function setData(dataTransfer, dragEl) {
      dataTransfer.setData('Text', dragEl.textContent);
    },
    dropBubble: false,
    dragoverBubble: false,
    dataIdAttr: 'data-id',
    delay: 0,
    delayOnTouchOnly: false,
    touchStartThreshold: (Number.parseInt ? Number : window).parseInt(window.devicePixelRatio, 10) || 1,
    forceFallback: false,
    fallbackClass: 'sortable-fallback',
    fallbackOnBody: false,
    fallbackTolerance: 0,
    fallbackOffset: {
      x: 0,
      y: 0
    },
    supportPointer: Sortable.supportPointer !== false && 'PointerEvent' in window && !Safari,
    emptyInsertThreshold: 5
  };
  PluginManager.initializePlugins(this, el, defaults); // Set default options

  for (var name in defaults) {
    !(name in options) && (options[name] = defaults[name]);
  }

  _prepareGroup(options); // Bind all private methods


  for (var fn in this) {
    if (fn.charAt(0) === '_' && typeof this[fn] === 'function') {
      this[fn] = this[fn].bind(this);
    }
  } // Setup drag mode


  this.nativeDraggable = options.forceFallback ? false : supportDraggable;

  if (this.nativeDraggable) {
    // Touch start threshold cannot be greater than the native dragstart threshold
    this.options.touchStartThreshold = 1;
  } // Bind events


  if (options.supportPointer) {
    on(el, 'pointerdown', this._onTapStart);
  } else {
    on(el, 'mousedown', this._onTapStart);
    on(el, 'touchstart', this._onTapStart);
  }

  if (this.nativeDraggable) {
    on(el, 'dragover', this);
    on(el, 'dragenter', this);
  }

  sortables.push(this.el); // Restore sorting

  options.store && options.store.get && this.sort(options.store.get(this) || []); // Add animation state manager

  _extends(this, AnimationStateManager());
}

Sortable.prototype =
/** @lends Sortable.prototype */
{
  constructor: Sortable,
  _isOutsideThisEl: function _isOutsideThisEl(target) {
    if (!this.el.contains(target) && target !== this.el) {
      lastTarget = null;
    }
  },
  _getDirection: function _getDirection(evt, target) {
    return typeof this.options.direction === 'function' ? this.options.direction.call(this, evt, target, dragEl) : this.options.direction;
  },
  _onTapStart: function _onTapStart(
  /** Event|TouchEvent */
  evt) {
    if (!evt.cancelable) return;

    var _this = this,
        el = this.el,
        options = this.options,
        preventOnFilter = options.preventOnFilter,
        type = evt.type,
        touch = evt.touches && evt.touches[0] || evt.pointerType && evt.pointerType === 'touch' && evt,
        target = (touch || evt).target,
        originalTarget = evt.target.shadowRoot && (evt.path && evt.path[0] || evt.composedPath && evt.composedPath()[0]) || target,
        filter = options.filter;

    _saveInputCheckedState(el); // Don't trigger start event when an element is been dragged, otherwise the evt.oldindex always wrong when set option.group.


    if (dragEl) {
      return;
    }

    if (/mousedown|pointerdown/.test(type) && evt.button !== 0 || options.disabled) {
      return; // only left button and enabled
    } // cancel dnd if original target is content editable


    if (originalTarget.isContentEditable) {
      return;
    } // Safari ignores further event handling after mousedown


    if (!this.nativeDraggable && Safari && target && target.tagName.toUpperCase() === 'SELECT') {
      return;
    }

    target = closest(target, options.draggable, el, false);

    if (target && target.animated) {
      return;
    }

    if (lastDownEl === target) {
      // Ignoring duplicate `down`
      return;
    } // Get the index of the dragged element within its parent


    oldIndex = index(target);
    oldDraggableIndex = index(target, options.draggable); // Check filter

    if (typeof filter === 'function') {
      if (filter.call(this, evt, target, this)) {
        _dispatchEvent({
          sortable: _this,
          rootEl: originalTarget,
          name: 'filter',
          targetEl: target,
          toEl: el,
          fromEl: el
        });

        pluginEvent('filter', _this, {
          evt: evt
        });
        preventOnFilter && evt.cancelable && evt.preventDefault();
        return; // cancel dnd
      }
    } else if (filter) {
      filter = filter.split(',').some(function (criteria) {
        criteria = closest(originalTarget, criteria.trim(), el, false);

        if (criteria) {
          _dispatchEvent({
            sortable: _this,
            rootEl: criteria,
            name: 'filter',
            targetEl: target,
            fromEl: el,
            toEl: el
          });

          pluginEvent('filter', _this, {
            evt: evt
          });
          return true;
        }
      });

      if (filter) {
        preventOnFilter && evt.cancelable && evt.preventDefault();
        return; // cancel dnd
      }
    }

    if (options.handle && !closest(originalTarget, options.handle, el, false)) {
      return;
    } // Prepare `dragstart`


    this._prepareDragStart(evt, touch, target);
  },
  _prepareDragStart: function _prepareDragStart(
  /** Event */
  evt,
  /** Touch */
  touch,
  /** HTMLElement */
  target) {
    var _this = this,
        el = _this.el,
        options = _this.options,
        ownerDocument = el.ownerDocument,
        dragStartFn;

    if (target && !dragEl && target.parentNode === el) {
      var dragRect = getRect(target);
      rootEl = el;
      dragEl = target;
      parentEl = dragEl.parentNode;
      nextEl = dragEl.nextSibling;
      lastDownEl = target;
      activeGroup = options.group;
      Sortable.dragged = dragEl;
      tapEvt = {
        target: dragEl,
        clientX: (touch || evt).clientX,
        clientY: (touch || evt).clientY
      };
      tapDistanceLeft = tapEvt.clientX - dragRect.left;
      tapDistanceTop = tapEvt.clientY - dragRect.top;
      this._lastX = (touch || evt).clientX;
      this._lastY = (touch || evt).clientY;
      dragEl.style['will-change'] = 'all';

      dragStartFn = function dragStartFn() {
        pluginEvent('delayEnded', _this, {
          evt: evt
        });

        if (Sortable.eventCanceled) {
          _this._onDrop();

          return;
        } // Delayed drag has been triggered
        // we can re-enable the events: touchmove/mousemove


        _this._disableDelayedDragEvents();

        if (!FireFox && _this.nativeDraggable) {
          dragEl.draggable = true;
        } // Bind the events: dragstart/dragend


        _this._triggerDragStart(evt, touch); // Drag start event


        _dispatchEvent({
          sortable: _this,
          name: 'choose',
          originalEvent: evt
        }); // Chosen item


        toggleClass(dragEl, options.chosenClass, true);
      }; // Disable "draggable"


      options.ignore.split(',').forEach(function (criteria) {
        find(dragEl, criteria.trim(), _disableDraggable);
      });
      on(ownerDocument, 'dragover', nearestEmptyInsertDetectEvent);
      on(ownerDocument, 'mousemove', nearestEmptyInsertDetectEvent);
      on(ownerDocument, 'touchmove', nearestEmptyInsertDetectEvent);
      on(ownerDocument, 'mouseup', _this._onDrop);
      on(ownerDocument, 'touchend', _this._onDrop);
      on(ownerDocument, 'touchcancel', _this._onDrop); // Make dragEl draggable (must be before delay for FireFox)

      if (FireFox && this.nativeDraggable) {
        this.options.touchStartThreshold = 4;
        dragEl.draggable = true;
      }

      pluginEvent('delayStart', this, {
        evt: evt
      }); // Delay is impossible for native DnD in Edge or IE

      if (options.delay && (!options.delayOnTouchOnly || touch) && (!this.nativeDraggable || !(Edge || IE11OrLess))) {
        if (Sortable.eventCanceled) {
          this._onDrop();

          return;
        } // If the user moves the pointer or let go the click or touch
        // before the delay has been reached:
        // disable the delayed drag


        on(ownerDocument, 'mouseup', _this._disableDelayedDrag);
        on(ownerDocument, 'touchend', _this._disableDelayedDrag);
        on(ownerDocument, 'touchcancel', _this._disableDelayedDrag);
        on(ownerDocument, 'mousemove', _this._delayedDragTouchMoveHandler);
        on(ownerDocument, 'touchmove', _this._delayedDragTouchMoveHandler);
        options.supportPointer && on(ownerDocument, 'pointermove', _this._delayedDragTouchMoveHandler);
        _this._dragStartTimer = setTimeout(dragStartFn, options.delay);
      } else {
        dragStartFn();
      }
    }
  },
  _delayedDragTouchMoveHandler: function _delayedDragTouchMoveHandler(
  /** TouchEvent|PointerEvent **/
  e) {
    var touch = e.touches ? e.touches[0] : e;

    if (Math.max(Math.abs(touch.clientX - this._lastX), Math.abs(touch.clientY - this._lastY)) >= Math.floor(this.options.touchStartThreshold / (this.nativeDraggable && window.devicePixelRatio || 1))) {
      this._disableDelayedDrag();
    }
  },
  _disableDelayedDrag: function _disableDelayedDrag() {
    dragEl && _disableDraggable(dragEl);
    clearTimeout(this._dragStartTimer);

    this._disableDelayedDragEvents();
  },
  _disableDelayedDragEvents: function _disableDelayedDragEvents() {
    var ownerDocument = this.el.ownerDocument;
    off(ownerDocument, 'mouseup', this._disableDelayedDrag);
    off(ownerDocument, 'touchend', this._disableDelayedDrag);
    off(ownerDocument, 'touchcancel', this._disableDelayedDrag);
    off(ownerDocument, 'mousemove', this._delayedDragTouchMoveHandler);
    off(ownerDocument, 'touchmove', this._delayedDragTouchMoveHandler);
    off(ownerDocument, 'pointermove', this._delayedDragTouchMoveHandler);
  },
  _triggerDragStart: function _triggerDragStart(
  /** Event */
  evt,
  /** Touch */
  touch) {
    touch = touch || evt.pointerType == 'touch' && evt;

    if (!this.nativeDraggable || touch) {
      if (this.options.supportPointer) {
        on(document, 'pointermove', this._onTouchMove);
      } else if (touch) {
        on(document, 'touchmove', this._onTouchMove);
      } else {
        on(document, 'mousemove', this._onTouchMove);
      }
    } else {
      on(dragEl, 'dragend', this);
      on(rootEl, 'dragstart', this._onDragStart);
    }

    try {
      if (document.selection) {
        // Timeout neccessary for IE9
        _nextTick(function () {
          document.selection.empty();
        });
      } else {
        window.getSelection().removeAllRanges();
      }
    } catch (err) {}
  },
  _dragStarted: function _dragStarted(fallback, evt) {

    awaitingDragStarted = false;

    if (rootEl && dragEl) {
      pluginEvent('dragStarted', this, {
        evt: evt
      });

      if (this.nativeDraggable) {
        on(document, 'dragover', _checkOutsideTargetEl);
      }

      var options = this.options; // Apply effect

      !fallback && toggleClass(dragEl, options.dragClass, false);
      toggleClass(dragEl, options.ghostClass, true);
      Sortable.active = this;
      fallback && this._appendGhost(); // Drag start event

      _dispatchEvent({
        sortable: this,
        name: 'start',
        originalEvent: evt
      });
    } else {
      this._nulling();
    }
  },
  _emulateDragOver: function _emulateDragOver() {
    if (touchEvt) {
      this._lastX = touchEvt.clientX;
      this._lastY = touchEvt.clientY;

      _hideGhostForTarget();

      var target = document.elementFromPoint(touchEvt.clientX, touchEvt.clientY);
      var parent = target;

      while (target && target.shadowRoot) {
        target = target.shadowRoot.elementFromPoint(touchEvt.clientX, touchEvt.clientY);
        if (target === parent) break;
        parent = target;
      }

      dragEl.parentNode[expando]._isOutsideThisEl(target);

      if (parent) {
        do {
          if (parent[expando]) {
            var inserted = void 0;
            inserted = parent[expando]._onDragOver({
              clientX: touchEvt.clientX,
              clientY: touchEvt.clientY,
              target: target,
              rootEl: parent
            });

            if (inserted && !this.options.dragoverBubble) {
              break;
            }
          }

          target = parent; // store last element
        }
        /* jshint boss:true */
        while (parent = parent.parentNode);
      }

      _unhideGhostForTarget();
    }
  },
  _onTouchMove: function _onTouchMove(
  /**TouchEvent*/
  evt) {
    if (tapEvt) {
      var options = this.options,
          fallbackTolerance = options.fallbackTolerance,
          fallbackOffset = options.fallbackOffset,
          touch = evt.touches ? evt.touches[0] : evt,
          ghostMatrix = ghostEl && matrix(ghostEl, true),
          scaleX = ghostEl && ghostMatrix && ghostMatrix.a,
          scaleY = ghostEl && ghostMatrix && ghostMatrix.d,
          relativeScrollOffset = PositionGhostAbsolutely && ghostRelativeParent && getRelativeScrollOffset(ghostRelativeParent),
          dx = (touch.clientX - tapEvt.clientX + fallbackOffset.x) / (scaleX || 1) + (relativeScrollOffset ? relativeScrollOffset[0] - ghostRelativeParentInitialScroll[0] : 0) / (scaleX || 1),
          dy = (touch.clientY - tapEvt.clientY + fallbackOffset.y) / (scaleY || 1) + (relativeScrollOffset ? relativeScrollOffset[1] - ghostRelativeParentInitialScroll[1] : 0) / (scaleY || 1); // only set the status to dragging, when we are actually dragging

      if (!Sortable.active && !awaitingDragStarted) {
        if (fallbackTolerance && Math.max(Math.abs(touch.clientX - this._lastX), Math.abs(touch.clientY - this._lastY)) < fallbackTolerance) {
          return;
        }

        this._onDragStart(evt, true);
      }

      if (ghostEl) {
        if (ghostMatrix) {
          ghostMatrix.e += dx - (lastDx || 0);
          ghostMatrix.f += dy - (lastDy || 0);
        } else {
          ghostMatrix = {
            a: 1,
            b: 0,
            c: 0,
            d: 1,
            e: dx,
            f: dy
          };
        }

        var cssMatrix = "matrix(".concat(ghostMatrix.a, ",").concat(ghostMatrix.b, ",").concat(ghostMatrix.c, ",").concat(ghostMatrix.d, ",").concat(ghostMatrix.e, ",").concat(ghostMatrix.f, ")");
        css(ghostEl, 'webkitTransform', cssMatrix);
        css(ghostEl, 'mozTransform', cssMatrix);
        css(ghostEl, 'msTransform', cssMatrix);
        css(ghostEl, 'transform', cssMatrix);
        lastDx = dx;
        lastDy = dy;
        touchEvt = touch;
      }

      evt.cancelable && evt.preventDefault();
    }
  },
  _appendGhost: function _appendGhost() {
    // Bug if using scale(): https://stackoverflow.com/questions/2637058
    // Not being adjusted for
    if (!ghostEl) {
      var container = this.options.fallbackOnBody ? document.body : rootEl,
          rect = getRect(dragEl, true, PositionGhostAbsolutely, true, container),
          options = this.options; // Position absolutely

      if (PositionGhostAbsolutely) {
        // Get relatively positioned parent
        ghostRelativeParent = container;

        while (css(ghostRelativeParent, 'position') === 'static' && css(ghostRelativeParent, 'transform') === 'none' && ghostRelativeParent !== document) {
          ghostRelativeParent = ghostRelativeParent.parentNode;
        }

        if (ghostRelativeParent !== document.body && ghostRelativeParent !== document.documentElement) {
          if (ghostRelativeParent === document) ghostRelativeParent = getWindowScrollingElement();
          rect.top += ghostRelativeParent.scrollTop;
          rect.left += ghostRelativeParent.scrollLeft;
        } else {
          ghostRelativeParent = getWindowScrollingElement();
        }

        ghostRelativeParentInitialScroll = getRelativeScrollOffset(ghostRelativeParent);
      }

      ghostEl = dragEl.cloneNode(true);
      toggleClass(ghostEl, options.ghostClass, false);
      toggleClass(ghostEl, options.fallbackClass, true);
      toggleClass(ghostEl, options.dragClass, true);
      css(ghostEl, 'transition', '');
      css(ghostEl, 'transform', '');
      css(ghostEl, 'box-sizing', 'border-box');
      css(ghostEl, 'margin', 0);
      css(ghostEl, 'top', rect.top);
      css(ghostEl, 'left', rect.left);
      css(ghostEl, 'width', rect.width);
      css(ghostEl, 'height', rect.height);
      css(ghostEl, 'opacity', '0.8');
      css(ghostEl, 'position', PositionGhostAbsolutely ? 'absolute' : 'fixed');
      css(ghostEl, 'zIndex', '100000');
      css(ghostEl, 'pointerEvents', 'none');
      Sortable.ghost = ghostEl;
      container.appendChild(ghostEl); // Set transform-origin

      css(ghostEl, 'transform-origin', tapDistanceLeft / parseInt(ghostEl.style.width) * 100 + '% ' + tapDistanceTop / parseInt(ghostEl.style.height) * 100 + '%');
    }
  },
  _onDragStart: function _onDragStart(
  /**Event*/
  evt,
  /**boolean*/
  fallback) {
    var _this = this;

    var dataTransfer = evt.dataTransfer;
    var options = _this.options;
    pluginEvent('dragStart', this, {
      evt: evt
    });

    if (Sortable.eventCanceled) {
      this._onDrop();

      return;
    }

    pluginEvent('setupClone', this);

    if (!Sortable.eventCanceled) {
      cloneEl = clone(dragEl);
      cloneEl.removeAttribute("id");
      cloneEl.draggable = false;
      cloneEl.style['will-change'] = '';

      this._hideClone();

      toggleClass(cloneEl, this.options.chosenClass, false);
      Sortable.clone = cloneEl;
    } // #1143: IFrame support workaround


    _this.cloneId = _nextTick(function () {
      pluginEvent('clone', _this);
      if (Sortable.eventCanceled) return;

      if (!_this.options.removeCloneOnHide) {
        rootEl.insertBefore(cloneEl, dragEl);
      }

      _this._hideClone();

      _dispatchEvent({
        sortable: _this,
        name: 'clone'
      });
    });
    !fallback && toggleClass(dragEl, options.dragClass, true); // Set proper drop events

    if (fallback) {
      ignoreNextClick = true;
      _this._loopId = setInterval(_this._emulateDragOver, 50);
    } else {
      // Undo what was set in _prepareDragStart before drag started
      off(document, 'mouseup', _this._onDrop);
      off(document, 'touchend', _this._onDrop);
      off(document, 'touchcancel', _this._onDrop);

      if (dataTransfer) {
        dataTransfer.effectAllowed = 'move';
        options.setData && options.setData.call(_this, dataTransfer, dragEl);
      }

      on(document, 'drop', _this); // #1276 fix:

      css(dragEl, 'transform', 'translateZ(0)');
    }

    awaitingDragStarted = true;
    _this._dragStartId = _nextTick(_this._dragStarted.bind(_this, fallback, evt));
    on(document, 'selectstart', _this);
    moved = true;

    if (Safari) {
      css(document.body, 'user-select', 'none');
    }
  },
  // Returns true - if no further action is needed (either inserted or another condition)
  _onDragOver: function _onDragOver(
  /**Event*/
  evt) {
    var el = this.el,
        target = evt.target,
        dragRect,
        targetRect,
        revert,
        options = this.options,
        group = options.group,
        activeSortable = Sortable.active,
        isOwner = activeGroup === group,
        canSort = options.sort,
        fromSortable = putSortable || activeSortable,
        vertical,
        _this = this,
        completedFired = false;

    if (_silent) return;

    function dragOverEvent(name, extra) {
      pluginEvent(name, _this, _objectSpread2({
        evt: evt,
        isOwner: isOwner,
        axis: vertical ? 'vertical' : 'horizontal',
        revert: revert,
        dragRect: dragRect,
        targetRect: targetRect,
        canSort: canSort,
        fromSortable: fromSortable,
        target: target,
        completed: completed,
        onMove: function onMove(target, after) {
          return _onMove(rootEl, el, dragEl, dragRect, target, getRect(target), evt, after);
        },
        changed: changed
      }, extra));
    } // Capture animation state


    function capture() {
      dragOverEvent('dragOverAnimationCapture');

      _this.captureAnimationState();

      if (_this !== fromSortable) {
        fromSortable.captureAnimationState();
      }
    } // Return invocation when dragEl is inserted (or completed)


    function completed(insertion) {
      dragOverEvent('dragOverCompleted', {
        insertion: insertion
      });

      if (insertion) {
        // Clones must be hidden before folding animation to capture dragRectAbsolute properly
        if (isOwner) {
          activeSortable._hideClone();
        } else {
          activeSortable._showClone(_this);
        }

        if (_this !== fromSortable) {
          // Set ghost class to new sortable's ghost class
          toggleClass(dragEl, putSortable ? putSortable.options.ghostClass : activeSortable.options.ghostClass, false);
          toggleClass(dragEl, options.ghostClass, true);
        }

        if (putSortable !== _this && _this !== Sortable.active) {
          putSortable = _this;
        } else if (_this === Sortable.active && putSortable) {
          putSortable = null;
        } // Animation


        if (fromSortable === _this) {
          _this._ignoreWhileAnimating = target;
        }

        _this.animateAll(function () {
          dragOverEvent('dragOverAnimationComplete');
          _this._ignoreWhileAnimating = null;
        });

        if (_this !== fromSortable) {
          fromSortable.animateAll();
          fromSortable._ignoreWhileAnimating = null;
        }
      } // Null lastTarget if it is not inside a previously swapped element


      if (target === dragEl && !dragEl.animated || target === el && !target.animated) {
        lastTarget = null;
      } // no bubbling and not fallback


      if (!options.dragoverBubble && !evt.rootEl && target !== document) {
        dragEl.parentNode[expando]._isOutsideThisEl(evt.target); // Do not detect for empty insert if already inserted


        !insertion && nearestEmptyInsertDetectEvent(evt);
      }

      !options.dragoverBubble && evt.stopPropagation && evt.stopPropagation();
      return completedFired = true;
    } // Call when dragEl has been inserted


    function changed() {
      newIndex = index(dragEl);
      newDraggableIndex = index(dragEl, options.draggable);

      _dispatchEvent({
        sortable: _this,
        name: 'change',
        toEl: el,
        newIndex: newIndex,
        newDraggableIndex: newDraggableIndex,
        originalEvent: evt
      });
    }

    if (evt.preventDefault !== void 0) {
      evt.cancelable && evt.preventDefault();
    }

    target = closest(target, options.draggable, el, true);
    dragOverEvent('dragOver');
    if (Sortable.eventCanceled) return completedFired;

    if (dragEl.contains(evt.target) || target.animated && target.animatingX && target.animatingY || _this._ignoreWhileAnimating === target) {
      return completed(false);
    }

    ignoreNextClick = false;

    if (activeSortable && !options.disabled && (isOwner ? canSort || (revert = parentEl !== rootEl) // Reverting item into the original list
    : putSortable === this || (this.lastPutMode = activeGroup.checkPull(this, activeSortable, dragEl, evt)) && group.checkPut(this, activeSortable, dragEl, evt))) {
      vertical = this._getDirection(evt, target) === 'vertical';
      dragRect = getRect(dragEl);
      dragOverEvent('dragOverValid');
      if (Sortable.eventCanceled) return completedFired;

      if (revert) {
        parentEl = rootEl; // actualization

        capture();

        this._hideClone();

        dragOverEvent('revert');

        if (!Sortable.eventCanceled) {
          if (nextEl) {
            rootEl.insertBefore(dragEl, nextEl);
          } else {
            rootEl.appendChild(dragEl);
          }
        }

        return completed(true);
      }

      var elLastChild = lastChild(el, options.draggable);

      if (!elLastChild || _ghostIsLast(evt, vertical, this) && !elLastChild.animated) {
        // Insert to end of list
        // If already at end of list: Do not insert
        if (elLastChild === dragEl) {
          return completed(false);
        } // if there is a last element, it is the target


        if (elLastChild && el === evt.target) {
          target = elLastChild;
        }

        if (target) {
          targetRect = getRect(target);
        }

        if (_onMove(rootEl, el, dragEl, dragRect, target, targetRect, evt, !!target) !== false) {
          capture();

          if (elLastChild && elLastChild.nextSibling) {
            // the last draggable element is not the last node
            el.insertBefore(dragEl, elLastChild.nextSibling);
          } else {
            el.appendChild(dragEl);
          }

          parentEl = el; // actualization

          changed();
          return completed(true);
        }
      } else if (elLastChild && _ghostIsFirst(evt, vertical, this)) {
        // Insert to start of list
        var firstChild = getChild(el, 0, options, true);

        if (firstChild === dragEl) {
          return completed(false);
        }

        target = firstChild;
        targetRect = getRect(target);

        if (_onMove(rootEl, el, dragEl, dragRect, target, targetRect, evt, false) !== false) {
          capture();
          el.insertBefore(dragEl, firstChild);
          parentEl = el; // actualization

          changed();
          return completed(true);
        }
      } else if (target.parentNode === el) {
        targetRect = getRect(target);
        var direction = 0,
            targetBeforeFirstSwap,
            differentLevel = dragEl.parentNode !== el,
            differentRowCol = !_dragElInRowColumn(dragEl.animated && dragEl.toRect || dragRect, target.animated && target.toRect || targetRect, vertical),
            side1 = vertical ? 'top' : 'left',
            scrolledPastTop = isScrolledPast(target, 'top', 'top') || isScrolledPast(dragEl, 'top', 'top'),
            scrollBefore = scrolledPastTop ? scrolledPastTop.scrollTop : void 0;

        if (lastTarget !== target) {
          targetBeforeFirstSwap = targetRect[side1];
          pastFirstInvertThresh = false;
          isCircumstantialInvert = !differentRowCol && options.invertSwap || differentLevel;
        }

        direction = _getSwapDirection(evt, target, targetRect, vertical, differentRowCol ? 1 : options.swapThreshold, options.invertedSwapThreshold == null ? options.swapThreshold : options.invertedSwapThreshold, isCircumstantialInvert, lastTarget === target);
        var sibling;

        if (direction !== 0) {
          // Check if target is beside dragEl in respective direction (ignoring hidden elements)
          var dragIndex = index(dragEl);

          do {
            dragIndex -= direction;
            sibling = parentEl.children[dragIndex];
          } while (sibling && (css(sibling, 'display') === 'none' || sibling === ghostEl));
        } // If dragEl is already beside target: Do not insert


        if (direction === 0 || sibling === target) {
          return completed(false);
        }

        lastTarget = target;
        lastDirection = direction;
        var nextSibling = target.nextElementSibling,
            after = false;
        after = direction === 1;

        var moveVector = _onMove(rootEl, el, dragEl, dragRect, target, targetRect, evt, after);

        if (moveVector !== false) {
          if (moveVector === 1 || moveVector === -1) {
            after = moveVector === 1;
          }

          _silent = true;
          setTimeout(_unsilent, 30);
          capture();

          if (after && !nextSibling) {
            el.appendChild(dragEl);
          } else {
            target.parentNode.insertBefore(dragEl, after ? nextSibling : target);
          } // Undo chrome's scroll adjustment (has no effect on other browsers)


          if (scrolledPastTop) {
            scrollBy(scrolledPastTop, 0, scrollBefore - scrolledPastTop.scrollTop);
          }

          parentEl = dragEl.parentNode; // actualization
          // must be done before animation

          if (targetBeforeFirstSwap !== undefined && !isCircumstantialInvert) {
            targetMoveDistance = Math.abs(targetBeforeFirstSwap - getRect(target)[side1]);
          }

          changed();
          return completed(true);
        }
      }

      if (el.contains(dragEl)) {
        return completed(false);
      }
    }

    return false;
  },
  _ignoreWhileAnimating: null,
  _offMoveEvents: function _offMoveEvents() {
    off(document, 'mousemove', this._onTouchMove);
    off(document, 'touchmove', this._onTouchMove);
    off(document, 'pointermove', this._onTouchMove);
    off(document, 'dragover', nearestEmptyInsertDetectEvent);
    off(document, 'mousemove', nearestEmptyInsertDetectEvent);
    off(document, 'touchmove', nearestEmptyInsertDetectEvent);
  },
  _offUpEvents: function _offUpEvents() {
    var ownerDocument = this.el.ownerDocument;
    off(ownerDocument, 'mouseup', this._onDrop);
    off(ownerDocument, 'touchend', this._onDrop);
    off(ownerDocument, 'pointerup', this._onDrop);
    off(ownerDocument, 'touchcancel', this._onDrop);
    off(document, 'selectstart', this);
  },
  _onDrop: function _onDrop(
  /**Event*/
  evt) {
    var el = this.el,
        options = this.options; // Get the index of the dragged element within its parent

    newIndex = index(dragEl);
    newDraggableIndex = index(dragEl, options.draggable);
    pluginEvent('drop', this, {
      evt: evt
    });
    parentEl = dragEl && dragEl.parentNode; // Get again after plugin event

    newIndex = index(dragEl);
    newDraggableIndex = index(dragEl, options.draggable);

    if (Sortable.eventCanceled) {
      this._nulling();

      return;
    }

    awaitingDragStarted = false;
    isCircumstantialInvert = false;
    pastFirstInvertThresh = false;
    clearInterval(this._loopId);
    clearTimeout(this._dragStartTimer);

    _cancelNextTick(this.cloneId);

    _cancelNextTick(this._dragStartId); // Unbind events


    if (this.nativeDraggable) {
      off(document, 'drop', this);
      off(el, 'dragstart', this._onDragStart);
    }

    this._offMoveEvents();

    this._offUpEvents();

    if (Safari) {
      css(document.body, 'user-select', '');
    }

    css(dragEl, 'transform', '');

    if (evt) {
      if (moved) {
        evt.cancelable && evt.preventDefault();
        !options.dropBubble && evt.stopPropagation();
      }

      ghostEl && ghostEl.parentNode && ghostEl.parentNode.removeChild(ghostEl);

      if (rootEl === parentEl || putSortable && putSortable.lastPutMode !== 'clone') {
        // Remove clone(s)
        cloneEl && cloneEl.parentNode && cloneEl.parentNode.removeChild(cloneEl);
      }

      if (dragEl) {
        if (this.nativeDraggable) {
          off(dragEl, 'dragend', this);
        }

        _disableDraggable(dragEl);

        dragEl.style['will-change'] = ''; // Remove classes
        // ghostClass is added in dragStarted

        if (moved && !awaitingDragStarted) {
          toggleClass(dragEl, putSortable ? putSortable.options.ghostClass : this.options.ghostClass, false);
        }

        toggleClass(dragEl, this.options.chosenClass, false); // Drag stop event

        _dispatchEvent({
          sortable: this,
          name: 'unchoose',
          toEl: parentEl,
          newIndex: null,
          newDraggableIndex: null,
          originalEvent: evt
        });

        if (rootEl !== parentEl) {
          if (newIndex >= 0) {
            // Add event
            _dispatchEvent({
              rootEl: parentEl,
              name: 'add',
              toEl: parentEl,
              fromEl: rootEl,
              originalEvent: evt
            }); // Remove event


            _dispatchEvent({
              sortable: this,
              name: 'remove',
              toEl: parentEl,
              originalEvent: evt
            }); // drag from one list and drop into another


            _dispatchEvent({
              rootEl: parentEl,
              name: 'sort',
              toEl: parentEl,
              fromEl: rootEl,
              originalEvent: evt
            });

            _dispatchEvent({
              sortable: this,
              name: 'sort',
              toEl: parentEl,
              originalEvent: evt
            });
          }

          putSortable && putSortable.save();
        } else {
          if (newIndex !== oldIndex) {
            if (newIndex >= 0) {
              // drag & drop within the same list
              _dispatchEvent({
                sortable: this,
                name: 'update',
                toEl: parentEl,
                originalEvent: evt
              });

              _dispatchEvent({
                sortable: this,
                name: 'sort',
                toEl: parentEl,
                originalEvent: evt
              });
            }
          }
        }

        if (Sortable.active) {
          /* jshint eqnull:true */
          if (newIndex == null || newIndex === -1) {
            newIndex = oldIndex;
            newDraggableIndex = oldDraggableIndex;
          }

          _dispatchEvent({
            sortable: this,
            name: 'end',
            toEl: parentEl,
            originalEvent: evt
          }); // Save sorting


          this.save();
        }
      }
    }

    this._nulling();
  },
  _nulling: function _nulling() {
    pluginEvent('nulling', this);
    rootEl = dragEl = parentEl = ghostEl = nextEl = cloneEl = lastDownEl = cloneHidden = tapEvt = touchEvt = moved = newIndex = newDraggableIndex = oldIndex = oldDraggableIndex = lastTarget = lastDirection = putSortable = activeGroup = Sortable.dragged = Sortable.ghost = Sortable.clone = Sortable.active = null;
    savedInputChecked.forEach(function (el) {
      el.checked = true;
    });
    savedInputChecked.length = lastDx = lastDy = 0;
  },
  handleEvent: function handleEvent(
  /**Event*/
  evt) {
    switch (evt.type) {
      case 'drop':
      case 'dragend':
        this._onDrop(evt);

        break;

      case 'dragenter':
      case 'dragover':
        if (dragEl) {
          this._onDragOver(evt);

          _globalDragOver(evt);
        }

        break;

      case 'selectstart':
        evt.preventDefault();
        break;
    }
  },

  /**
   * Serializes the item into an array of string.
   * @returns {String[]}
   */
  toArray: function toArray() {
    var order = [],
        el,
        children = this.el.children,
        i = 0,
        n = children.length,
        options = this.options;

    for (; i < n; i++) {
      el = children[i];

      if (closest(el, options.draggable, this.el, false)) {
        order.push(el.getAttribute(options.dataIdAttr) || _generateId(el));
      }
    }

    return order;
  },

  /**
   * Sorts the elements according to the array.
   * @param  {String[]}  order  order of the items
   */
  sort: function sort(order, useAnimation) {
    var items = {},
        rootEl = this.el;
    this.toArray().forEach(function (id, i) {
      var el = rootEl.children[i];

      if (closest(el, this.options.draggable, rootEl, false)) {
        items[id] = el;
      }
    }, this);
    useAnimation && this.captureAnimationState();
    order.forEach(function (id) {
      if (items[id]) {
        rootEl.removeChild(items[id]);
        rootEl.appendChild(items[id]);
      }
    });
    useAnimation && this.animateAll();
  },

  /**
   * Save the current sorting
   */
  save: function save() {
    var store = this.options.store;
    store && store.set && store.set(this);
  },

  /**
   * For each element in the set, get the first element that matches the selector by testing the element itself and traversing up through its ancestors in the DOM tree.
   * @param   {HTMLElement}  el
   * @param   {String}       [selector]  default: `options.draggable`
   * @returns {HTMLElement|null}
   */
  closest: function closest$1(el, selector) {
    return closest(el, selector || this.options.draggable, this.el, false);
  },

  /**
   * Set/get option
   * @param   {string} name
   * @param   {*}      [value]
   * @returns {*}
   */
  option: function option(name, value) {
    var options = this.options;

    if (value === void 0) {
      return options[name];
    } else {
      var modifiedValue = PluginManager.modifyOption(this, name, value);

      if (typeof modifiedValue !== 'undefined') {
        options[name] = modifiedValue;
      } else {
        options[name] = value;
      }

      if (name === 'group') {
        _prepareGroup(options);
      }
    }
  },

  /**
   * Destroy
   */
  destroy: function destroy() {
    pluginEvent('destroy', this);
    var el = this.el;
    el[expando] = null;
    off(el, 'mousedown', this._onTapStart);
    off(el, 'touchstart', this._onTapStart);
    off(el, 'pointerdown', this._onTapStart);

    if (this.nativeDraggable) {
      off(el, 'dragover', this);
      off(el, 'dragenter', this);
    } // Remove draggable attributes


    Array.prototype.forEach.call(el.querySelectorAll('[draggable]'), function (el) {
      el.removeAttribute('draggable');
    });

    this._onDrop();

    this._disableDelayedDragEvents();

    sortables.splice(sortables.indexOf(this.el), 1);
    this.el = el = null;
  },
  _hideClone: function _hideClone() {
    if (!cloneHidden) {
      pluginEvent('hideClone', this);
      if (Sortable.eventCanceled) return;
      css(cloneEl, 'display', 'none');

      if (this.options.removeCloneOnHide && cloneEl.parentNode) {
        cloneEl.parentNode.removeChild(cloneEl);
      }

      cloneHidden = true;
    }
  },
  _showClone: function _showClone(putSortable) {
    if (putSortable.lastPutMode !== 'clone') {
      this._hideClone();

      return;
    }

    if (cloneHidden) {
      pluginEvent('showClone', this);
      if (Sortable.eventCanceled) return; // show clone at dragEl or original position

      if (dragEl.parentNode == rootEl && !this.options.group.revertClone) {
        rootEl.insertBefore(cloneEl, dragEl);
      } else if (nextEl) {
        rootEl.insertBefore(cloneEl, nextEl);
      } else {
        rootEl.appendChild(cloneEl);
      }

      if (this.options.group.revertClone) {
        this.animate(dragEl, cloneEl);
      }

      css(cloneEl, 'display', '');
      cloneHidden = false;
    }
  }
};

function _globalDragOver(
/**Event*/
evt) {
  if (evt.dataTransfer) {
    evt.dataTransfer.dropEffect = 'move';
  }

  evt.cancelable && evt.preventDefault();
}

function _onMove(fromEl, toEl, dragEl, dragRect, targetEl, targetRect, originalEvent, willInsertAfter) {
  var evt,
      sortable = fromEl[expando],
      onMoveFn = sortable.options.onMove,
      retVal; // Support for new CustomEvent feature

  if (window.CustomEvent && !IE11OrLess && !Edge) {
    evt = new CustomEvent('move', {
      bubbles: true,
      cancelable: true
    });
  } else {
    evt = document.createEvent('Event');
    evt.initEvent('move', true, true);
  }

  evt.to = toEl;
  evt.from = fromEl;
  evt.dragged = dragEl;
  evt.draggedRect = dragRect;
  evt.related = targetEl || toEl;
  evt.relatedRect = targetRect || getRect(toEl);
  evt.willInsertAfter = willInsertAfter;
  evt.originalEvent = originalEvent;
  fromEl.dispatchEvent(evt);

  if (onMoveFn) {
    retVal = onMoveFn.call(sortable, evt, originalEvent);
  }

  return retVal;
}

function _disableDraggable(el) {
  el.draggable = false;
}

function _unsilent() {
  _silent = false;
}

function _ghostIsFirst(evt, vertical, sortable) {
  var rect = getRect(getChild(sortable.el, 0, sortable.options, true));
  var spacer = 10;
  return vertical ? evt.clientX < rect.left - spacer || evt.clientY < rect.top && evt.clientX < rect.right : evt.clientY < rect.top - spacer || evt.clientY < rect.bottom && evt.clientX < rect.left;
}

function _ghostIsLast(evt, vertical, sortable) {
  var rect = getRect(lastChild(sortable.el, sortable.options.draggable));
  var spacer = 10;
  return vertical ? evt.clientX > rect.right + spacer || evt.clientX <= rect.right && evt.clientY > rect.bottom && evt.clientX >= rect.left : evt.clientX > rect.right && evt.clientY > rect.top || evt.clientX <= rect.right && evt.clientY > rect.bottom + spacer;
}

function _getSwapDirection(evt, target, targetRect, vertical, swapThreshold, invertedSwapThreshold, invertSwap, isLastTarget) {
  var mouseOnAxis = vertical ? evt.clientY : evt.clientX,
      targetLength = vertical ? targetRect.height : targetRect.width,
      targetS1 = vertical ? targetRect.top : targetRect.left,
      targetS2 = vertical ? targetRect.bottom : targetRect.right,
      invert = false;

  if (!invertSwap) {
    // Never invert or create dragEl shadow when target movemenet causes mouse to move past the end of regular swapThreshold
    if (isLastTarget && targetMoveDistance < targetLength * swapThreshold) {
      // multiplied only by swapThreshold because mouse will already be inside target by (1 - threshold) * targetLength / 2
      // check if past first invert threshold on side opposite of lastDirection
      if (!pastFirstInvertThresh && (lastDirection === 1 ? mouseOnAxis > targetS1 + targetLength * invertedSwapThreshold / 2 : mouseOnAxis < targetS2 - targetLength * invertedSwapThreshold / 2)) {
        // past first invert threshold, do not restrict inverted threshold to dragEl shadow
        pastFirstInvertThresh = true;
      }

      if (!pastFirstInvertThresh) {
        // dragEl shadow (target move distance shadow)
        if (lastDirection === 1 ? mouseOnAxis < targetS1 + targetMoveDistance // over dragEl shadow
        : mouseOnAxis > targetS2 - targetMoveDistance) {
          return -lastDirection;
        }
      } else {
        invert = true;
      }
    } else {
      // Regular
      if (mouseOnAxis > targetS1 + targetLength * (1 - swapThreshold) / 2 && mouseOnAxis < targetS2 - targetLength * (1 - swapThreshold) / 2) {
        return _getInsertDirection(target);
      }
    }
  }

  invert = invert || invertSwap;

  if (invert) {
    // Invert of regular
    if (mouseOnAxis < targetS1 + targetLength * invertedSwapThreshold / 2 || mouseOnAxis > targetS2 - targetLength * invertedSwapThreshold / 2) {
      return mouseOnAxis > targetS1 + targetLength / 2 ? 1 : -1;
    }
  }

  return 0;
}
/**
 * Gets the direction dragEl must be swapped relative to target in order to make it
 * seem that dragEl has been "inserted" into that element's position
 * @param  {HTMLElement} target       The target whose position dragEl is being inserted at
 * @return {Number}                   Direction dragEl must be swapped
 */


function _getInsertDirection(target) {
  if (index(dragEl) < index(target)) {
    return 1;
  } else {
    return -1;
  }
}
/**
 * Generate id
 * @param   {HTMLElement} el
 * @returns {String}
 * @private
 */


function _generateId(el) {
  var str = el.tagName + el.className + el.src + el.href + el.textContent,
      i = str.length,
      sum = 0;

  while (i--) {
    sum += str.charCodeAt(i);
  }

  return sum.toString(36);
}

function _saveInputCheckedState(root) {
  savedInputChecked.length = 0;
  var inputs = root.getElementsByTagName('input');
  var idx = inputs.length;

  while (idx--) {
    var el = inputs[idx];
    el.checked && savedInputChecked.push(el);
  }
}

function _nextTick(fn) {
  return setTimeout(fn, 0);
}

function _cancelNextTick(id) {
  return clearTimeout(id);
} // Fixed #973:


if (documentExists) {
  on(document, 'touchmove', function (evt) {
    if ((Sortable.active || awaitingDragStarted) && evt.cancelable) {
      evt.preventDefault();
    }
  });
} // Export utils


Sortable.utils = {
  on: on,
  off: off,
  css: css,
  find: find,
  is: function is(el, selector) {
    return !!closest(el, selector, el, false);
  },
  extend: extend,
  throttle: throttle,
  closest: closest,
  toggleClass: toggleClass,
  clone: clone,
  index: index,
  nextTick: _nextTick,
  cancelNextTick: _cancelNextTick,
  detectDirection: _detectDirection,
  getChild: getChild
};
/**
 * Get the Sortable instance of an element
 * @param  {HTMLElement} element The element
 * @return {Sortable|undefined}         The instance of Sortable
 */

Sortable.get = function (element) {
  return element[expando];
};
/**
 * Mount a plugin to Sortable
 * @param  {...SortablePlugin|SortablePlugin[]} plugins       Plugins being mounted
 */


Sortable.mount = function () {
  for (var _len = arguments.length, plugins = new Array(_len), _key = 0; _key < _len; _key++) {
    plugins[_key] = arguments[_key];
  }

  if (plugins[0].constructor === Array) plugins = plugins[0];
  plugins.forEach(function (plugin) {
    if (!plugin.prototype || !plugin.prototype.constructor) {
      throw "Sortable: Mounted plugin must be a constructor function, not ".concat({}.toString.call(plugin));
    }

    if (plugin.utils) Sortable.utils = _objectSpread2(_objectSpread2({}, Sortable.utils), plugin.utils);
    PluginManager.mount(plugin);
  });
};
/**
 * Create sortable instance
 * @param {HTMLElement}  el
 * @param {Object}      [options]
 */


Sortable.create = function (el, options) {
  return new Sortable(el, options);
}; // Export


Sortable.version = version;

var autoScrolls = [],
    scrollEl,
    scrollRootEl,
    scrolling = false,
    lastAutoScrollX,
    lastAutoScrollY,
    touchEvt$1,
    pointerElemChangedInterval;

function AutoScrollPlugin() {
  function AutoScroll() {
    this.defaults = {
      scroll: true,
      forceAutoScrollFallback: false,
      scrollSensitivity: 30,
      scrollSpeed: 10,
      bubbleScroll: true
    }; // Bind all private methods

    for (var fn in this) {
      if (fn.charAt(0) === '_' && typeof this[fn] === 'function') {
        this[fn] = this[fn].bind(this);
      }
    }
  }

  AutoScroll.prototype = {
    dragStarted: function dragStarted(_ref) {
      var originalEvent = _ref.originalEvent;

      if (this.sortable.nativeDraggable) {
        on(document, 'dragover', this._handleAutoScroll);
      } else {
        if (this.options.supportPointer) {
          on(document, 'pointermove', this._handleFallbackAutoScroll);
        } else if (originalEvent.touches) {
          on(document, 'touchmove', this._handleFallbackAutoScroll);
        } else {
          on(document, 'mousemove', this._handleFallbackAutoScroll);
        }
      }
    },
    dragOverCompleted: function dragOverCompleted(_ref2) {
      var originalEvent = _ref2.originalEvent;

      // For when bubbling is canceled and using fallback (fallback 'touchmove' always reached)
      if (!this.options.dragOverBubble && !originalEvent.rootEl) {
        this._handleAutoScroll(originalEvent);
      }
    },
    drop: function drop() {
      if (this.sortable.nativeDraggable) {
        off(document, 'dragover', this._handleAutoScroll);
      } else {
        off(document, 'pointermove', this._handleFallbackAutoScroll);
        off(document, 'touchmove', this._handleFallbackAutoScroll);
        off(document, 'mousemove', this._handleFallbackAutoScroll);
      }

      clearPointerElemChangedInterval();
      clearAutoScrolls();
      cancelThrottle();
    },
    nulling: function nulling() {
      touchEvt$1 = scrollRootEl = scrollEl = scrolling = pointerElemChangedInterval = lastAutoScrollX = lastAutoScrollY = null;
      autoScrolls.length = 0;
    },
    _handleFallbackAutoScroll: function _handleFallbackAutoScroll(evt) {
      this._handleAutoScroll(evt, true);
    },
    _handleAutoScroll: function _handleAutoScroll(evt, fallback) {
      var _this = this;

      var x = (evt.touches ? evt.touches[0] : evt).clientX,
          y = (evt.touches ? evt.touches[0] : evt).clientY,
          elem = document.elementFromPoint(x, y);
      touchEvt$1 = evt; // IE does not seem to have native autoscroll,
      // Edge's autoscroll seems too conditional,
      // MACOS Safari does not have autoscroll,
      // Firefox and Chrome are good

      if (fallback || this.options.forceAutoScrollFallback || Edge || IE11OrLess || Safari) {
        autoScroll(evt, this.options, elem, fallback); // Listener for pointer element change

        var ogElemScroller = getParentAutoScrollElement(elem, true);

        if (scrolling && (!pointerElemChangedInterval || x !== lastAutoScrollX || y !== lastAutoScrollY)) {
          pointerElemChangedInterval && clearPointerElemChangedInterval(); // Detect for pointer elem change, emulating native DnD behaviour

          pointerElemChangedInterval = setInterval(function () {
            var newElem = getParentAutoScrollElement(document.elementFromPoint(x, y), true);

            if (newElem !== ogElemScroller) {
              ogElemScroller = newElem;
              clearAutoScrolls();
            }

            autoScroll(evt, _this.options, newElem, fallback);
          }, 10);
          lastAutoScrollX = x;
          lastAutoScrollY = y;
        }
      } else {
        // if DnD is enabled (and browser has good autoscrolling), first autoscroll will already scroll, so get parent autoscroll of first autoscroll
        if (!this.options.bubbleScroll || getParentAutoScrollElement(elem, true) === getWindowScrollingElement()) {
          clearAutoScrolls();
          return;
        }

        autoScroll(evt, this.options, getParentAutoScrollElement(elem, false), false);
      }
    }
  };
  return _extends(AutoScroll, {
    pluginName: 'scroll',
    initializeByDefault: true
  });
}

function clearAutoScrolls() {
  autoScrolls.forEach(function (autoScroll) {
    clearInterval(autoScroll.pid);
  });
  autoScrolls = [];
}

function clearPointerElemChangedInterval() {
  clearInterval(pointerElemChangedInterval);
}

var autoScroll = throttle(function (evt, options, rootEl, isFallback) {
  // Bug: https://bugzilla.mozilla.org/show_bug.cgi?id=505521
  if (!options.scroll) return;
  var x = (evt.touches ? evt.touches[0] : evt).clientX,
      y = (evt.touches ? evt.touches[0] : evt).clientY,
      sens = options.scrollSensitivity,
      speed = options.scrollSpeed,
      winScroller = getWindowScrollingElement();
  var scrollThisInstance = false,
      scrollCustomFn; // New scroll root, set scrollEl

  if (scrollRootEl !== rootEl) {
    scrollRootEl = rootEl;
    clearAutoScrolls();
    scrollEl = options.scroll;
    scrollCustomFn = options.scrollFn;

    if (scrollEl === true) {
      scrollEl = getParentAutoScrollElement(rootEl, true);
    }
  }

  var layersOut = 0;
  var currentParent = scrollEl;

  do {
    var el = currentParent,
        rect = getRect(el),
        top = rect.top,
        bottom = rect.bottom,
        left = rect.left,
        right = rect.right,
        width = rect.width,
        height = rect.height,
        canScrollX = void 0,
        canScrollY = void 0,
        scrollWidth = el.scrollWidth,
        scrollHeight = el.scrollHeight,
        elCSS = css(el),
        scrollPosX = el.scrollLeft,
        scrollPosY = el.scrollTop;

    if (el === winScroller) {
      canScrollX = width < scrollWidth && (elCSS.overflowX === 'auto' || elCSS.overflowX === 'scroll' || elCSS.overflowX === 'visible');
      canScrollY = height < scrollHeight && (elCSS.overflowY === 'auto' || elCSS.overflowY === 'scroll' || elCSS.overflowY === 'visible');
    } else {
      canScrollX = width < scrollWidth && (elCSS.overflowX === 'auto' || elCSS.overflowX === 'scroll');
      canScrollY = height < scrollHeight && (elCSS.overflowY === 'auto' || elCSS.overflowY === 'scroll');
    }

    var vx = canScrollX && (Math.abs(right - x) <= sens && scrollPosX + width < scrollWidth) - (Math.abs(left - x) <= sens && !!scrollPosX);
    var vy = canScrollY && (Math.abs(bottom - y) <= sens && scrollPosY + height < scrollHeight) - (Math.abs(top - y) <= sens && !!scrollPosY);

    if (!autoScrolls[layersOut]) {
      for (var i = 0; i <= layersOut; i++) {
        if (!autoScrolls[i]) {
          autoScrolls[i] = {};
        }
      }
    }

    if (autoScrolls[layersOut].vx != vx || autoScrolls[layersOut].vy != vy || autoScrolls[layersOut].el !== el) {
      autoScrolls[layersOut].el = el;
      autoScrolls[layersOut].vx = vx;
      autoScrolls[layersOut].vy = vy;
      clearInterval(autoScrolls[layersOut].pid);

      if (vx != 0 || vy != 0) {
        scrollThisInstance = true;
        /* jshint loopfunc:true */

        autoScrolls[layersOut].pid = setInterval(function () {
          // emulate drag over during autoscroll (fallback), emulating native DnD behaviour
          if (isFallback && this.layer === 0) {
            Sortable.active._onTouchMove(touchEvt$1); // To move ghost if it is positioned absolutely

          }

          var scrollOffsetY = autoScrolls[this.layer].vy ? autoScrolls[this.layer].vy * speed : 0;
          var scrollOffsetX = autoScrolls[this.layer].vx ? autoScrolls[this.layer].vx * speed : 0;

          if (typeof scrollCustomFn === 'function') {
            if (scrollCustomFn.call(Sortable.dragged.parentNode[expando], scrollOffsetX, scrollOffsetY, evt, touchEvt$1, autoScrolls[this.layer].el) !== 'continue') {
              return;
            }
          }

          scrollBy(autoScrolls[this.layer].el, scrollOffsetX, scrollOffsetY);
        }.bind({
          layer: layersOut
        }), 24);
      }
    }

    layersOut++;
  } while (options.bubbleScroll && currentParent !== winScroller && (currentParent = getParentAutoScrollElement(currentParent, false)));

  scrolling = scrollThisInstance; // in case another function catches scrolling as false in between when it is not
}, 30);

var drop = function drop(_ref) {
  var originalEvent = _ref.originalEvent,
      putSortable = _ref.putSortable,
      dragEl = _ref.dragEl,
      activeSortable = _ref.activeSortable,
      dispatchSortableEvent = _ref.dispatchSortableEvent,
      hideGhostForTarget = _ref.hideGhostForTarget,
      unhideGhostForTarget = _ref.unhideGhostForTarget;
  if (!originalEvent) return;
  var toSortable = putSortable || activeSortable;
  hideGhostForTarget();
  var touch = originalEvent.changedTouches && originalEvent.changedTouches.length ? originalEvent.changedTouches[0] : originalEvent;
  var target = document.elementFromPoint(touch.clientX, touch.clientY);
  unhideGhostForTarget();

  if (toSortable && !toSortable.el.contains(target)) {
    dispatchSortableEvent('spill');
    this.onSpill({
      dragEl: dragEl,
      putSortable: putSortable
    });
  }
};

function Revert() {}

Revert.prototype = {
  startIndex: null,
  dragStart: function dragStart(_ref2) {
    var oldDraggableIndex = _ref2.oldDraggableIndex;
    this.startIndex = oldDraggableIndex;
  },
  onSpill: function onSpill(_ref3) {
    var dragEl = _ref3.dragEl,
        putSortable = _ref3.putSortable;
    this.sortable.captureAnimationState();

    if (putSortable) {
      putSortable.captureAnimationState();
    }

    var nextSibling = getChild(this.sortable.el, this.startIndex, this.options);

    if (nextSibling) {
      this.sortable.el.insertBefore(dragEl, nextSibling);
    } else {
      this.sortable.el.appendChild(dragEl);
    }

    this.sortable.animateAll();

    if (putSortable) {
      putSortable.animateAll();
    }
  },
  drop: drop
};

_extends(Revert, {
  pluginName: 'revertOnSpill'
});

function Remove() {}

Remove.prototype = {
  onSpill: function onSpill(_ref4) {
    var dragEl = _ref4.dragEl,
        putSortable = _ref4.putSortable;
    var parentSortable = putSortable || this.sortable;
    parentSortable.captureAnimationState();
    dragEl.parentNode && dragEl.parentNode.removeChild(dragEl);
    parentSortable.animateAll();
  },
  drop: drop
};

_extends(Remove, {
  pluginName: 'removeOnSpill'
});

var lastSwapEl;

function SwapPlugin() {
  function Swap() {
    this.defaults = {
      swapClass: 'sortable-swap-highlight'
    };
  }

  Swap.prototype = {
    dragStart: function dragStart(_ref) {
      var dragEl = _ref.dragEl;
      lastSwapEl = dragEl;
    },
    dragOverValid: function dragOverValid(_ref2) {
      var completed = _ref2.completed,
          target = _ref2.target,
          onMove = _ref2.onMove,
          activeSortable = _ref2.activeSortable,
          changed = _ref2.changed,
          cancel = _ref2.cancel;
      if (!activeSortable.options.swap) return;
      var el = this.sortable.el,
          options = this.options;

      if (target && target !== el) {
        var prevSwapEl = lastSwapEl;

        if (onMove(target) !== false) {
          toggleClass(target, options.swapClass, true);
          lastSwapEl = target;
        } else {
          lastSwapEl = null;
        }

        if (prevSwapEl && prevSwapEl !== lastSwapEl) {
          toggleClass(prevSwapEl, options.swapClass, false);
        }
      }

      changed();
      completed(true);
      cancel();
    },
    drop: function drop(_ref3) {
      var activeSortable = _ref3.activeSortable,
          putSortable = _ref3.putSortable,
          dragEl = _ref3.dragEl;
      var toSortable = putSortable || this.sortable;
      var options = this.options;
      lastSwapEl && toggleClass(lastSwapEl, options.swapClass, false);

      if (lastSwapEl && (options.swap || putSortable && putSortable.options.swap)) {
        if (dragEl !== lastSwapEl) {
          toSortable.captureAnimationState();
          if (toSortable !== activeSortable) activeSortable.captureAnimationState();
          swapNodes(dragEl, lastSwapEl);
          toSortable.animateAll();
          if (toSortable !== activeSortable) activeSortable.animateAll();
        }
      }
    },
    nulling: function nulling() {
      lastSwapEl = null;
    }
  };
  return _extends(Swap, {
    pluginName: 'swap',
    eventProperties: function eventProperties() {
      return {
        swapItem: lastSwapEl
      };
    }
  });
}

function swapNodes(n1, n2) {
  var p1 = n1.parentNode,
      p2 = n2.parentNode,
      i1,
      i2;
  if (!p1 || !p2 || p1.isEqualNode(n2) || p2.isEqualNode(n1)) return;
  i1 = index(n1);
  i2 = index(n2);

  if (p1.isEqualNode(p2) && i1 < i2) {
    i2++;
  }

  p1.insertBefore(n2, p1.children[i1]);
  p2.insertBefore(n1, p2.children[i2]);
}

var multiDragElements = [],
    multiDragClones = [],
    lastMultiDragSelect,
    // for selection with modifier key down (SHIFT)
multiDragSortable,
    initialFolding = false,
    // Initial multi-drag fold when drag started
folding = false,
    // Folding any other time
dragStarted = false,
    dragEl$1,
    clonesFromRect,
    clonesHidden;

function MultiDragPlugin() {
  function MultiDrag(sortable) {
    // Bind all private methods
    for (var fn in this) {
      if (fn.charAt(0) === '_' && typeof this[fn] === 'function') {
        this[fn] = this[fn].bind(this);
      }
    }

    if (!sortable.options.avoidImplicitDeselect) {
      if (sortable.options.supportPointer) {
        on(document, 'pointerup', this._deselectMultiDrag);
      } else {
        on(document, 'mouseup', this._deselectMultiDrag);
        on(document, 'touchend', this._deselectMultiDrag);
      }
    }

    on(document, 'keydown', this._checkKeyDown);
    on(document, 'keyup', this._checkKeyUp);
    this.defaults = {
      selectedClass: 'sortable-selected',
      multiDragKey: null,
      avoidImplicitDeselect: false,
      setData: function setData(dataTransfer, dragEl) {
        var data = '';

        if (multiDragElements.length && multiDragSortable === sortable) {
          multiDragElements.forEach(function (multiDragElement, i) {
            data += (!i ? '' : ', ') + multiDragElement.textContent;
          });
        } else {
          data = dragEl.textContent;
        }

        dataTransfer.setData('Text', data);
      }
    };
  }

  MultiDrag.prototype = {
    multiDragKeyDown: false,
    isMultiDrag: false,
    delayStartGlobal: function delayStartGlobal(_ref) {
      var dragged = _ref.dragEl;
      dragEl$1 = dragged;
    },
    delayEnded: function delayEnded() {
      this.isMultiDrag = ~multiDragElements.indexOf(dragEl$1);
    },
    setupClone: function setupClone(_ref2) {
      var sortable = _ref2.sortable,
          cancel = _ref2.cancel;
      if (!this.isMultiDrag) return;

      for (var i = 0; i < multiDragElements.length; i++) {
        multiDragClones.push(clone(multiDragElements[i]));
        multiDragClones[i].sortableIndex = multiDragElements[i].sortableIndex;
        multiDragClones[i].draggable = false;
        multiDragClones[i].style['will-change'] = '';
        toggleClass(multiDragClones[i], this.options.selectedClass, false);
        multiDragElements[i] === dragEl$1 && toggleClass(multiDragClones[i], this.options.chosenClass, false);
      }

      sortable._hideClone();

      cancel();
    },
    clone: function clone(_ref3) {
      var sortable = _ref3.sortable,
          rootEl = _ref3.rootEl,
          dispatchSortableEvent = _ref3.dispatchSortableEvent,
          cancel = _ref3.cancel;
      if (!this.isMultiDrag) return;

      if (!this.options.removeCloneOnHide) {
        if (multiDragElements.length && multiDragSortable === sortable) {
          insertMultiDragClones(true, rootEl);
          dispatchSortableEvent('clone');
          cancel();
        }
      }
    },
    showClone: function showClone(_ref4) {
      var cloneNowShown = _ref4.cloneNowShown,
          rootEl = _ref4.rootEl,
          cancel = _ref4.cancel;
      if (!this.isMultiDrag) return;
      insertMultiDragClones(false, rootEl);
      multiDragClones.forEach(function (clone) {
        css(clone, 'display', '');
      });
      cloneNowShown();
      clonesHidden = false;
      cancel();
    },
    hideClone: function hideClone(_ref5) {
      var _this = this;

      var sortable = _ref5.sortable,
          cloneNowHidden = _ref5.cloneNowHidden,
          cancel = _ref5.cancel;
      if (!this.isMultiDrag) return;
      multiDragClones.forEach(function (clone) {
        css(clone, 'display', 'none');

        if (_this.options.removeCloneOnHide && clone.parentNode) {
          clone.parentNode.removeChild(clone);
        }
      });
      cloneNowHidden();
      clonesHidden = true;
      cancel();
    },
    dragStartGlobal: function dragStartGlobal(_ref6) {
      var sortable = _ref6.sortable;

      if (!this.isMultiDrag && multiDragSortable) {
        multiDragSortable.multiDrag._deselectMultiDrag();
      }

      multiDragElements.forEach(function (multiDragElement) {
        multiDragElement.sortableIndex = index(multiDragElement);
      }); // Sort multi-drag elements

      multiDragElements = multiDragElements.sort(function (a, b) {
        return a.sortableIndex - b.sortableIndex;
      });
      dragStarted = true;
    },
    dragStarted: function dragStarted(_ref7) {
      var _this2 = this;

      var sortable = _ref7.sortable;
      if (!this.isMultiDrag) return;

      if (this.options.sort) {
        // Capture rects,
        // hide multi drag elements (by positioning them absolute),
        // set multi drag elements rects to dragRect,
        // show multi drag elements,
        // animate to rects,
        // unset rects & remove from DOM
        sortable.captureAnimationState();

        if (this.options.animation) {
          multiDragElements.forEach(function (multiDragElement) {
            if (multiDragElement === dragEl$1) return;
            css(multiDragElement, 'position', 'absolute');
          });
          var dragRect = getRect(dragEl$1, false, true, true);
          multiDragElements.forEach(function (multiDragElement) {
            if (multiDragElement === dragEl$1) return;
            setRect(multiDragElement, dragRect);
          });
          folding = true;
          initialFolding = true;
        }
      }

      sortable.animateAll(function () {
        folding = false;
        initialFolding = false;

        if (_this2.options.animation) {
          multiDragElements.forEach(function (multiDragElement) {
            unsetRect(multiDragElement);
          });
        } // Remove all auxiliary multidrag items from el, if sorting enabled


        if (_this2.options.sort) {
          removeMultiDragElements();
        }
      });
    },
    dragOver: function dragOver(_ref8) {
      var target = _ref8.target,
          completed = _ref8.completed,
          cancel = _ref8.cancel;

      if (folding && ~multiDragElements.indexOf(target)) {
        completed(false);
        cancel();
      }
    },
    revert: function revert(_ref9) {
      var fromSortable = _ref9.fromSortable,
          rootEl = _ref9.rootEl,
          sortable = _ref9.sortable,
          dragRect = _ref9.dragRect;

      if (multiDragElements.length > 1) {
        // Setup unfold animation
        multiDragElements.forEach(function (multiDragElement) {
          sortable.addAnimationState({
            target: multiDragElement,
            rect: folding ? getRect(multiDragElement) : dragRect
          });
          unsetRect(multiDragElement);
          multiDragElement.fromRect = dragRect;
          fromSortable.removeAnimationState(multiDragElement);
        });
        folding = false;
        insertMultiDragElements(!this.options.removeCloneOnHide, rootEl);
      }
    },
    dragOverCompleted: function dragOverCompleted(_ref10) {
      var sortable = _ref10.sortable,
          isOwner = _ref10.isOwner,
          insertion = _ref10.insertion,
          activeSortable = _ref10.activeSortable,
          parentEl = _ref10.parentEl,
          putSortable = _ref10.putSortable;
      var options = this.options;

      if (insertion) {
        // Clones must be hidden before folding animation to capture dragRectAbsolute properly
        if (isOwner) {
          activeSortable._hideClone();
        }

        initialFolding = false; // If leaving sort:false root, or already folding - Fold to new location

        if (options.animation && multiDragElements.length > 1 && (folding || !isOwner && !activeSortable.options.sort && !putSortable)) {
          // Fold: Set all multi drag elements's rects to dragEl's rect when multi-drag elements are invisible
          var dragRectAbsolute = getRect(dragEl$1, false, true, true);
          multiDragElements.forEach(function (multiDragElement) {
            if (multiDragElement === dragEl$1) return;
            setRect(multiDragElement, dragRectAbsolute); // Move element(s) to end of parentEl so that it does not interfere with multi-drag clones insertion if they are inserted
            // while folding, and so that we can capture them again because old sortable will no longer be fromSortable

            parentEl.appendChild(multiDragElement);
          });
          folding = true;
        } // Clones must be shown (and check to remove multi drags) after folding when interfering multiDragElements are moved out


        if (!isOwner) {
          // Only remove if not folding (folding will remove them anyways)
          if (!folding) {
            removeMultiDragElements();
          }

          if (multiDragElements.length > 1) {
            var clonesHiddenBefore = clonesHidden;

            activeSortable._showClone(sortable); // Unfold animation for clones if showing from hidden


            if (activeSortable.options.animation && !clonesHidden && clonesHiddenBefore) {
              multiDragClones.forEach(function (clone) {
                activeSortable.addAnimationState({
                  target: clone,
                  rect: clonesFromRect
                });
                clone.fromRect = clonesFromRect;
                clone.thisAnimationDuration = null;
              });
            }
          } else {
            activeSortable._showClone(sortable);
          }
        }
      }
    },
    dragOverAnimationCapture: function dragOverAnimationCapture(_ref11) {
      var dragRect = _ref11.dragRect,
          isOwner = _ref11.isOwner,
          activeSortable = _ref11.activeSortable;
      multiDragElements.forEach(function (multiDragElement) {
        multiDragElement.thisAnimationDuration = null;
      });

      if (activeSortable.options.animation && !isOwner && activeSortable.multiDrag.isMultiDrag) {
        clonesFromRect = _extends({}, dragRect);
        var dragMatrix = matrix(dragEl$1, true);
        clonesFromRect.top -= dragMatrix.f;
        clonesFromRect.left -= dragMatrix.e;
      }
    },
    dragOverAnimationComplete: function dragOverAnimationComplete() {
      if (folding) {
        folding = false;
        removeMultiDragElements();
      }
    },
    drop: function drop(_ref12) {
      var evt = _ref12.originalEvent,
          rootEl = _ref12.rootEl,
          parentEl = _ref12.parentEl,
          sortable = _ref12.sortable,
          dispatchSortableEvent = _ref12.dispatchSortableEvent,
          oldIndex = _ref12.oldIndex,
          putSortable = _ref12.putSortable;
      var toSortable = putSortable || this.sortable;
      if (!evt) return;
      var options = this.options,
          children = parentEl.children; // Multi-drag selection

      if (!dragStarted) {
        if (options.multiDragKey && !this.multiDragKeyDown) {
          this._deselectMultiDrag();
        }

        toggleClass(dragEl$1, options.selectedClass, !~multiDragElements.indexOf(dragEl$1));

        if (!~multiDragElements.indexOf(dragEl$1)) {
          multiDragElements.push(dragEl$1);
          dispatchEvent({
            sortable: sortable,
            rootEl: rootEl,
            name: 'select',
            targetEl: dragEl$1,
            originalEvent: evt
          }); // Modifier activated, select from last to dragEl

          if (evt.shiftKey && lastMultiDragSelect && sortable.el.contains(lastMultiDragSelect)) {
            var lastIndex = index(lastMultiDragSelect),
                currentIndex = index(dragEl$1);

            if (~lastIndex && ~currentIndex && lastIndex !== currentIndex) {
              // Must include lastMultiDragSelect (select it), in case modified selection from no selection
              // (but previous selection existed)
              var n, i;

              if (currentIndex > lastIndex) {
                i = lastIndex;
                n = currentIndex;
              } else {
                i = currentIndex;
                n = lastIndex + 1;
              }

              for (; i < n; i++) {
                if (~multiDragElements.indexOf(children[i])) continue;
                toggleClass(children[i], options.selectedClass, true);
                multiDragElements.push(children[i]);
                dispatchEvent({
                  sortable: sortable,
                  rootEl: rootEl,
                  name: 'select',
                  targetEl: children[i],
                  originalEvent: evt
                });
              }
            }
          } else {
            lastMultiDragSelect = dragEl$1;
          }

          multiDragSortable = toSortable;
        } else {
          multiDragElements.splice(multiDragElements.indexOf(dragEl$1), 1);
          lastMultiDragSelect = null;
          dispatchEvent({
            sortable: sortable,
            rootEl: rootEl,
            name: 'deselect',
            targetEl: dragEl$1,
            originalEvent: evt
          });
        }
      } // Multi-drag drop


      if (dragStarted && this.isMultiDrag) {
        folding = false; // Do not "unfold" after around dragEl if reverted

        if ((parentEl[expando].options.sort || parentEl !== rootEl) && multiDragElements.length > 1) {
          var dragRect = getRect(dragEl$1),
              multiDragIndex = index(dragEl$1, ':not(.' + this.options.selectedClass + ')');
          if (!initialFolding && options.animation) dragEl$1.thisAnimationDuration = null;
          toSortable.captureAnimationState();

          if (!initialFolding) {
            if (options.animation) {
              dragEl$1.fromRect = dragRect;
              multiDragElements.forEach(function (multiDragElement) {
                multiDragElement.thisAnimationDuration = null;

                if (multiDragElement !== dragEl$1) {
                  var rect = folding ? getRect(multiDragElement) : dragRect;
                  multiDragElement.fromRect = rect; // Prepare unfold animation

                  toSortable.addAnimationState({
                    target: multiDragElement,
                    rect: rect
                  });
                }
              });
            } // Multi drag elements are not necessarily removed from the DOM on drop, so to reinsert
            // properly they must all be removed


            removeMultiDragElements();
            multiDragElements.forEach(function (multiDragElement) {
              if (children[multiDragIndex]) {
                parentEl.insertBefore(multiDragElement, children[multiDragIndex]);
              } else {
                parentEl.appendChild(multiDragElement);
              }

              multiDragIndex++;
            }); // If initial folding is done, the elements may have changed position because they are now
            // unfolding around dragEl, even though dragEl may not have his index changed, so update event
            // must be fired here as Sortable will not.

            if (oldIndex === index(dragEl$1)) {
              var update = false;
              multiDragElements.forEach(function (multiDragElement) {
                if (multiDragElement.sortableIndex !== index(multiDragElement)) {
                  update = true;
                  return;
                }
              });

              if (update) {
                dispatchSortableEvent('update');
              }
            }
          } // Must be done after capturing individual rects (scroll bar)


          multiDragElements.forEach(function (multiDragElement) {
            unsetRect(multiDragElement);
          });
          toSortable.animateAll();
        }

        multiDragSortable = toSortable;
      } // Remove clones if necessary


      if (rootEl === parentEl || putSortable && putSortable.lastPutMode !== 'clone') {
        multiDragClones.forEach(function (clone) {
          clone.parentNode && clone.parentNode.removeChild(clone);
        });
      }
    },
    nullingGlobal: function nullingGlobal() {
      this.isMultiDrag = dragStarted = false;
      multiDragClones.length = 0;
    },
    destroyGlobal: function destroyGlobal() {
      this._deselectMultiDrag();

      off(document, 'pointerup', this._deselectMultiDrag);
      off(document, 'mouseup', this._deselectMultiDrag);
      off(document, 'touchend', this._deselectMultiDrag);
      off(document, 'keydown', this._checkKeyDown);
      off(document, 'keyup', this._checkKeyUp);
    },
    _deselectMultiDrag: function _deselectMultiDrag(evt) {
      if (typeof dragStarted !== "undefined" && dragStarted) return; // Only deselect if selection is in this sortable

      if (multiDragSortable !== this.sortable) return; // Only deselect if target is not item in this sortable

      if (evt && closest(evt.target, this.options.draggable, this.sortable.el, false)) return; // Only deselect if left click

      if (evt && evt.button !== 0) return;

      while (multiDragElements.length) {
        var el = multiDragElements[0];
        toggleClass(el, this.options.selectedClass, false);
        multiDragElements.shift();
        dispatchEvent({
          sortable: this.sortable,
          rootEl: this.sortable.el,
          name: 'deselect',
          targetEl: el,
          originalEvent: evt
        });
      }
    },
    _checkKeyDown: function _checkKeyDown(evt) {
      if (evt.key === this.options.multiDragKey) {
        this.multiDragKeyDown = true;
      }
    },
    _checkKeyUp: function _checkKeyUp(evt) {
      if (evt.key === this.options.multiDragKey) {
        this.multiDragKeyDown = false;
      }
    }
  };
  return _extends(MultiDrag, {
    // Static methods & properties
    pluginName: 'multiDrag',
    utils: {
      /**
       * Selects the provided multi-drag item
       * @param  {HTMLElement} el    The element to be selected
       */
      select: function select(el) {
        var sortable = el.parentNode[expando];
        if (!sortable || !sortable.options.multiDrag || ~multiDragElements.indexOf(el)) return;

        if (multiDragSortable && multiDragSortable !== sortable) {
          multiDragSortable.multiDrag._deselectMultiDrag();

          multiDragSortable = sortable;
        }

        toggleClass(el, sortable.options.selectedClass, true);
        multiDragElements.push(el);
      },

      /**
       * Deselects the provided multi-drag item
       * @param  {HTMLElement} el    The element to be deselected
       */
      deselect: function deselect(el) {
        var sortable = el.parentNode[expando],
            index = multiDragElements.indexOf(el);
        if (!sortable || !sortable.options.multiDrag || !~index) return;
        toggleClass(el, sortable.options.selectedClass, false);
        multiDragElements.splice(index, 1);
      }
    },
    eventProperties: function eventProperties() {
      var _this3 = this;

      var oldIndicies = [],
          newIndicies = [];
      multiDragElements.forEach(function (multiDragElement) {
        oldIndicies.push({
          multiDragElement: multiDragElement,
          index: multiDragElement.sortableIndex
        }); // multiDragElements will already be sorted if folding

        var newIndex;

        if (folding && multiDragElement !== dragEl$1) {
          newIndex = -1;
        } else if (folding) {
          newIndex = index(multiDragElement, ':not(.' + _this3.options.selectedClass + ')');
        } else {
          newIndex = index(multiDragElement);
        }

        newIndicies.push({
          multiDragElement: multiDragElement,
          index: newIndex
        });
      });
      return {
        items: _toConsumableArray(multiDragElements),
        clones: [].concat(multiDragClones),
        oldIndicies: oldIndicies,
        newIndicies: newIndicies
      };
    },
    optionListeners: {
      multiDragKey: function multiDragKey(key) {
        key = key.toLowerCase();

        if (key === 'ctrl') {
          key = 'Control';
        } else if (key.length > 1) {
          key = key.charAt(0).toUpperCase() + key.substr(1);
        }

        return key;
      }
    }
  });
}

function insertMultiDragElements(clonesInserted, rootEl) {
  multiDragElements.forEach(function (multiDragElement, i) {
    var target = rootEl.children[multiDragElement.sortableIndex + (clonesInserted ? Number(i) : 0)];

    if (target) {
      rootEl.insertBefore(multiDragElement, target);
    } else {
      rootEl.appendChild(multiDragElement);
    }
  });
}
/**
 * Insert multi-drag clones
 * @param  {[Boolean]} elementsInserted  Whether the multi-drag elements are inserted
 * @param  {HTMLElement} rootEl
 */


function insertMultiDragClones(elementsInserted, rootEl) {
  multiDragClones.forEach(function (clone, i) {
    var target = rootEl.children[clone.sortableIndex + (elementsInserted ? Number(i) : 0)];

    if (target) {
      rootEl.insertBefore(clone, target);
    } else {
      rootEl.appendChild(clone);
    }
  });
}

function removeMultiDragElements() {
  multiDragElements.forEach(function (multiDragElement) {
    if (multiDragElement === dragEl$1) return;
    multiDragElement.parentNode && multiDragElement.parentNode.removeChild(multiDragElement);
  });
}

Sortable.mount(new AutoScrollPlugin());
Sortable.mount(Remove, Revert);

/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (Sortable);



/***/ }),

/***/ "./css/betterbuffsbar.css":
/*!********************************!*\
  !*** ./css/betterbuffsbar.css ***!
  \********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _node_modules_style_loader_dist_runtime_injectStylesIntoStyleTag_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! !../../node_modules/style-loader/dist/runtime/injectStylesIntoStyleTag.js */ "../node_modules/style-loader/dist/runtime/injectStylesIntoStyleTag.js");
/* harmony import */ var _node_modules_style_loader_dist_runtime_injectStylesIntoStyleTag_js__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_node_modules_style_loader_dist_runtime_injectStylesIntoStyleTag_js__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _node_modules_style_loader_dist_runtime_styleDomAPI_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! !../../node_modules/style-loader/dist/runtime/styleDomAPI.js */ "../node_modules/style-loader/dist/runtime/styleDomAPI.js");
/* harmony import */ var _node_modules_style_loader_dist_runtime_styleDomAPI_js__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(_node_modules_style_loader_dist_runtime_styleDomAPI_js__WEBPACK_IMPORTED_MODULE_1__);
/* harmony import */ var _node_modules_style_loader_dist_runtime_insertBySelector_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! !../../node_modules/style-loader/dist/runtime/insertBySelector.js */ "../node_modules/style-loader/dist/runtime/insertBySelector.js");
/* harmony import */ var _node_modules_style_loader_dist_runtime_insertBySelector_js__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(_node_modules_style_loader_dist_runtime_insertBySelector_js__WEBPACK_IMPORTED_MODULE_2__);
/* harmony import */ var _node_modules_style_loader_dist_runtime_setAttributesWithoutAttributes_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! !../../node_modules/style-loader/dist/runtime/setAttributesWithoutAttributes.js */ "../node_modules/style-loader/dist/runtime/setAttributesWithoutAttributes.js");
/* harmony import */ var _node_modules_style_loader_dist_runtime_setAttributesWithoutAttributes_js__WEBPACK_IMPORTED_MODULE_3___default = /*#__PURE__*/__webpack_require__.n(_node_modules_style_loader_dist_runtime_setAttributesWithoutAttributes_js__WEBPACK_IMPORTED_MODULE_3__);
/* harmony import */ var _node_modules_style_loader_dist_runtime_insertStyleElement_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! !../../node_modules/style-loader/dist/runtime/insertStyleElement.js */ "../node_modules/style-loader/dist/runtime/insertStyleElement.js");
/* harmony import */ var _node_modules_style_loader_dist_runtime_insertStyleElement_js__WEBPACK_IMPORTED_MODULE_4___default = /*#__PURE__*/__webpack_require__.n(_node_modules_style_loader_dist_runtime_insertStyleElement_js__WEBPACK_IMPORTED_MODULE_4__);
/* harmony import */ var _node_modules_style_loader_dist_runtime_styleTagTransform_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! !../../node_modules/style-loader/dist/runtime/styleTagTransform.js */ "../node_modules/style-loader/dist/runtime/styleTagTransform.js");
/* harmony import */ var _node_modules_style_loader_dist_runtime_styleTagTransform_js__WEBPACK_IMPORTED_MODULE_5___default = /*#__PURE__*/__webpack_require__.n(_node_modules_style_loader_dist_runtime_styleTagTransform_js__WEBPACK_IMPORTED_MODULE_5__);
/* harmony import */ var _node_modules_css_loader_dist_cjs_js_betterbuffsbar_css__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! !!../../node_modules/css-loader/dist/cjs.js!./betterbuffsbar.css */ "../node_modules/css-loader/dist/cjs.js!./css/betterbuffsbar.css");

      
      
      
      
      
      
      
      
      

var options = {};

options.styleTagTransform = (_node_modules_style_loader_dist_runtime_styleTagTransform_js__WEBPACK_IMPORTED_MODULE_5___default());
options.setAttributes = (_node_modules_style_loader_dist_runtime_setAttributesWithoutAttributes_js__WEBPACK_IMPORTED_MODULE_3___default());

      options.insert = _node_modules_style_loader_dist_runtime_insertBySelector_js__WEBPACK_IMPORTED_MODULE_2___default().bind(null, "head");
    
options.domAPI = (_node_modules_style_loader_dist_runtime_styleDomAPI_js__WEBPACK_IMPORTED_MODULE_1___default());
options.insertStyleElement = (_node_modules_style_loader_dist_runtime_insertStyleElement_js__WEBPACK_IMPORTED_MODULE_4___default());

var update = _node_modules_style_loader_dist_runtime_injectStylesIntoStyleTag_js__WEBPACK_IMPORTED_MODULE_0___default()(_node_modules_css_loader_dist_cjs_js_betterbuffsbar_css__WEBPACK_IMPORTED_MODULE_6__["default"], options);




       /* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (_node_modules_css_loader_dist_cjs_js_betterbuffsbar_css__WEBPACK_IMPORTED_MODULE_6__["default"] && _node_modules_css_loader_dist_cjs_js_betterbuffsbar_css__WEBPACK_IMPORTED_MODULE_6__["default"].locals ? _node_modules_css_loader_dist_cjs_js_betterbuffsbar_css__WEBPACK_IMPORTED_MODULE_6__["default"].locals : undefined);


/***/ }),

/***/ "../node_modules/style-loader/dist/runtime/injectStylesIntoStyleTag.js":
/*!*****************************************************************************!*\
  !*** ../node_modules/style-loader/dist/runtime/injectStylesIntoStyleTag.js ***!
  \*****************************************************************************/
/***/ ((module) => {

"use strict";


var stylesInDOM = [];
function getIndexByIdentifier(identifier) {
  var result = -1;
  for (var i = 0; i < stylesInDOM.length; i++) {
    if (stylesInDOM[i].identifier === identifier) {
      result = i;
      break;
    }
  }
  return result;
}
function modulesToDom(list, options) {
  var idCountMap = {};
  var identifiers = [];
  for (var i = 0; i < list.length; i++) {
    var item = list[i];
    var id = options.base ? item[0] + options.base : item[0];
    var count = idCountMap[id] || 0;
    var identifier = "".concat(id, " ").concat(count);
    idCountMap[id] = count + 1;
    var indexByIdentifier = getIndexByIdentifier(identifier);
    var obj = {
      css: item[1],
      media: item[2],
      sourceMap: item[3],
      supports: item[4],
      layer: item[5]
    };
    if (indexByIdentifier !== -1) {
      stylesInDOM[indexByIdentifier].references++;
      stylesInDOM[indexByIdentifier].updater(obj);
    } else {
      var updater = addElementStyle(obj, options);
      options.byIndex = i;
      stylesInDOM.splice(i, 0, {
        identifier: identifier,
        updater: updater,
        references: 1
      });
    }
    identifiers.push(identifier);
  }
  return identifiers;
}
function addElementStyle(obj, options) {
  var api = options.domAPI(options);
  api.update(obj);
  var updater = function updater(newObj) {
    if (newObj) {
      if (newObj.css === obj.css && newObj.media === obj.media && newObj.sourceMap === obj.sourceMap && newObj.supports === obj.supports && newObj.layer === obj.layer) {
        return;
      }
      api.update(obj = newObj);
    } else {
      api.remove();
    }
  };
  return updater;
}
module.exports = function (list, options) {
  options = options || {};
  list = list || [];
  var lastIdentifiers = modulesToDom(list, options);
  return function update(newList) {
    newList = newList || [];
    for (var i = 0; i < lastIdentifiers.length; i++) {
      var identifier = lastIdentifiers[i];
      var index = getIndexByIdentifier(identifier);
      stylesInDOM[index].references--;
    }
    var newLastIdentifiers = modulesToDom(newList, options);
    for (var _i = 0; _i < lastIdentifiers.length; _i++) {
      var _identifier = lastIdentifiers[_i];
      var _index = getIndexByIdentifier(_identifier);
      if (stylesInDOM[_index].references === 0) {
        stylesInDOM[_index].updater();
        stylesInDOM.splice(_index, 1);
      }
    }
    lastIdentifiers = newLastIdentifiers;
  };
};

/***/ }),

/***/ "../node_modules/style-loader/dist/runtime/insertBySelector.js":
/*!*********************************************************************!*\
  !*** ../node_modules/style-loader/dist/runtime/insertBySelector.js ***!
  \*********************************************************************/
/***/ ((module) => {

"use strict";


var memo = {};

/* istanbul ignore next  */
function getTarget(target) {
  if (typeof memo[target] === "undefined") {
    var styleTarget = document.querySelector(target);

    // Special case to return head of iframe instead of iframe itself
    if (window.HTMLIFrameElement && styleTarget instanceof window.HTMLIFrameElement) {
      try {
        // This will throw an exception if access to iframe is blocked
        // due to cross-origin restrictions
        styleTarget = styleTarget.contentDocument.head;
      } catch (e) {
        // istanbul ignore next
        styleTarget = null;
      }
    }
    memo[target] = styleTarget;
  }
  return memo[target];
}

/* istanbul ignore next  */
function insertBySelector(insert, style) {
  var target = getTarget(insert);
  if (!target) {
    throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");
  }
  target.appendChild(style);
}
module.exports = insertBySelector;

/***/ }),

/***/ "../node_modules/style-loader/dist/runtime/insertStyleElement.js":
/*!***********************************************************************!*\
  !*** ../node_modules/style-loader/dist/runtime/insertStyleElement.js ***!
  \***********************************************************************/
/***/ ((module) => {

"use strict";


/* istanbul ignore next  */
function insertStyleElement(options) {
  var element = document.createElement("style");
  options.setAttributes(element, options.attributes);
  options.insert(element, options.options);
  return element;
}
module.exports = insertStyleElement;

/***/ }),

/***/ "../node_modules/style-loader/dist/runtime/setAttributesWithoutAttributes.js":
/*!***********************************************************************************!*\
  !*** ../node_modules/style-loader/dist/runtime/setAttributesWithoutAttributes.js ***!
  \***********************************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";


/* istanbul ignore next  */
function setAttributesWithoutAttributes(styleElement) {
  var nonce =  true ? __webpack_require__.nc : 0;
  if (nonce) {
    styleElement.setAttribute("nonce", nonce);
  }
}
module.exports = setAttributesWithoutAttributes;

/***/ }),

/***/ "../node_modules/style-loader/dist/runtime/styleDomAPI.js":
/*!****************************************************************!*\
  !*** ../node_modules/style-loader/dist/runtime/styleDomAPI.js ***!
  \****************************************************************/
/***/ ((module) => {

"use strict";


/* istanbul ignore next  */
function apply(styleElement, options, obj) {
  var css = "";
  if (obj.supports) {
    css += "@supports (".concat(obj.supports, ") {");
  }
  if (obj.media) {
    css += "@media ".concat(obj.media, " {");
  }
  var needLayer = typeof obj.layer !== "undefined";
  if (needLayer) {
    css += "@layer".concat(obj.layer.length > 0 ? " ".concat(obj.layer) : "", " {");
  }
  css += obj.css;
  if (needLayer) {
    css += "}";
  }
  if (obj.media) {
    css += "}";
  }
  if (obj.supports) {
    css += "}";
  }
  var sourceMap = obj.sourceMap;
  if (sourceMap && typeof btoa !== "undefined") {
    css += "\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(sourceMap)))), " */");
  }

  // For old IE
  /* istanbul ignore if  */
  options.styleTagTransform(css, styleElement, options.options);
}
function removeStyleElement(styleElement) {
  // istanbul ignore if
  if (styleElement.parentNode === null) {
    return false;
  }
  styleElement.parentNode.removeChild(styleElement);
}

/* istanbul ignore next  */
function domAPI(options) {
  if (typeof document === "undefined") {
    return {
      update: function update() {},
      remove: function remove() {}
    };
  }
  var styleElement = options.insertStyleElement(options);
  return {
    update: function update(obj) {
      apply(styleElement, options, obj);
    },
    remove: function remove() {
      removeStyleElement(styleElement);
    }
  };
}
module.exports = domAPI;

/***/ }),

/***/ "../node_modules/style-loader/dist/runtime/styleTagTransform.js":
/*!**********************************************************************!*\
  !*** ../node_modules/style-loader/dist/runtime/styleTagTransform.js ***!
  \**********************************************************************/
/***/ ((module) => {

"use strict";


/* istanbul ignore next  */
function styleTagTransform(css, styleElement) {
  if (styleElement.styleSheet) {
    styleElement.styleSheet.cssText = css;
  } else {
    while (styleElement.firstChild) {
      styleElement.removeChild(styleElement.firstChild);
    }
    styleElement.appendChild(document.createTextNode(css));
  }
}
module.exports = styleTagTransform;

/***/ }),

/***/ "./a1sauce.ts":
/*!********************!*\
  !*** ./a1sauce.ts ***!
  \********************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   createButton: () => (/* binding */ createButton),
/* harmony export */   createCheckboxSetting: () => (/* binding */ createCheckboxSetting),
/* harmony export */   createDropdownSetting: () => (/* binding */ createDropdownSetting),
/* harmony export */   createHeading: () => (/* binding */ createHeading),
/* harmony export */   createNumberSetting: () => (/* binding */ createNumberSetting),
/* harmony export */   createProfileManager: () => (/* binding */ createProfileManager),
/* harmony export */   createRangeSetting: () => (/* binding */ createRangeSetting),
/* harmony export */   createSeperator: () => (/* binding */ createSeperator),
/* harmony export */   createSmallText: () => (/* binding */ createSmallText),
/* harmony export */   createText: () => (/* binding */ createText),
/* harmony export */   createTextSetting: () => (/* binding */ createTextSetting),
/* harmony export */   getSetting: () => (/* binding */ getSetting),
/* harmony export */   loadSettings: () => (/* binding */ loadSettings),
/* harmony export */   setDefaultSettings: () => (/* binding */ setDefaultSettings),
/* harmony export */   settingsExist: () => (/* binding */ settingsExist),
/* harmony export */   updateSetting: () => (/* binding */ updateSetting)
/* harmony export */ });
// TODO: Figure out why I can't just import { default as config } from './appconfig.json';
var config = {
    appName: 'betterBuffBar',
};
function createHeading(size, content) {
    var header = document.createElement(size);
    header.innerHTML = content;
    return header;
}
function createText(content) {
    var text = document.createElement('p');
    text.innerHTML = content;
    return text;
}
function createSmallText(content) {
    var text = document.createElement('small');
    text.innerHTML = content;
    return text;
}
function createSeperator() {
    return document.createElement('hr');
}
function createButton(content, fn, options) {
    var _a = options.classes, classes = _a === void 0 ? options.classes : _a;
    var button = document.createElement('button');
    button.innerHTML = content;
    if (options.classes.length) {
        for (var i = options.classes.length; i--; i >= 0) {
            button.classList.add(options.classes[i]);
        }
    }
    button.addEventListener('click', function () {
        fn();
    });
    return button;
}
function createDropdownSetting(name, description, defaultValue, options) {
    var select = createDropdown(name, defaultValue, options);
    var label = createLabel(name, description);
    var container = createFlexContainer('reverse-setting');
    container.appendChild(select);
    container.appendChild(label);
    return container;
}
function createTextSetting(name, description, defaultValue) {
    var input = createInput('text', name, defaultValue);
    var label = createLabel(name, description);
    label.setAttribute('for', name);
    var container = createFlexContainer();
    container.appendChild(input);
    container.appendChild(label);
    return container;
}
function createCheckboxSetting(name, description, defaultValue) {
    var input = createCheckboxInput(name, defaultValue);
    var label = createLabel(name, description);
    var checkboxLabel = createLabel(name, '');
    var checkbox = document.createElement('span');
    checkbox.classList.add('checkbox');
    var container = createFlexContainer('reverse-setting');
    checkboxLabel.appendChild(input);
    checkboxLabel.appendChild(checkbox);
    container.appendChild(checkboxLabel);
    container.appendChild(label);
    container.addEventListener('click', function (e) {
        if (e.target == container) {
            input.checked = !input.checked;
            input.dispatchEvent(new CustomEvent('change', { bubbles: true }));
            updateSetting(name, input.checked);
        }
    });
    return container;
}
function createNumberSetting(name, description, options) {
    var _a, _b, _c;
    if (options === void 0) { options = {}; }
    var _d = options.defaultValue, defaultValue = _d === void 0 ? (_a = options.defaultValue) !== null && _a !== void 0 ? _a : 10 : _d, _e = options.min, min = _e === void 0 ? (_b = options.min) !== null && _b !== void 0 ? _b : 1 : _e, _f = options.max, max = _f === void 0 ? (_c = options.max) !== null && _c !== void 0 ? _c : 20 : _f;
    var input = createInput('number', name, defaultValue);
    input.setAttribute('min', min.toString());
    input.setAttribute('max', max.toString());
    var label = createLabel(name, description);
    var container = createFlexContainer('reverse-setting');
    container.appendChild(input);
    container.appendChild(label);
    return container;
}
function createRangeSetting(name, description, options) {
    var _a, _b, _c, _d, _e;
    if (options === void 0) { options = {}; }
    var _f = options.classes, classes = _f === void 0 ? (_a = options.classes) !== null && _a !== void 0 ? _a : '' : _f, _g = options.defaultValue, defaultValue = _g === void 0 ? (_b = options.defaultValue) !== null && _b !== void 0 ? _b : '100' : _g, _h = options.min, min = _h === void 0 ? (_c = options.min) !== null && _c !== void 0 ? _c : 0 : _h, _j = options.max, max = _j === void 0 ? (_d = options.max) !== null && _d !== void 0 ? _d : 100 : _j, _k = options.unit, unit = _k === void 0 ? (_e = options.unit) !== null && _e !== void 0 ? _e : '%' : _k;
    var input = createInput('range', name, defaultValue);
    input.setAttribute('min', min.toString());
    input.setAttribute('max', max.toString());
    var label = createLabel(name, description);
    label.classList.add('full');
    if (getSetting(name) != undefined) {
        input.value = getSetting(name);
    }
    var output = createOutput();
    output.setAttribute('id', "".concat(name, "Output"));
    output.setAttribute('for', name);
    output.innerHTML = input.value + unit;
    output.after(unit);
    var container = createFlexContainer();
    if (classes.length) {
        for (var i = classes.length; i--; i >= 0) {
            container.classList.add(classes[i]);
        }
    }
    container.classList.add('flex-wrap');
    container.appendChild(label);
    container.appendChild(input);
    container.appendChild(output);
    input.addEventListener('input', function () {
        output.innerHTML = input.value + unit;
    });
    return container;
}
function createProfileManager() {
    function saveProfile() {
        var id = container.querySelector('select').selectedIndex;
        if (id !== 0) {
            var profiles = getSetting('profiles');
            var loadOptions_1 = container.querySelector('select');
            if (!getSetting('profiles')) {
                profiles = [
                    { value: '0', name: 'Select Profile' },
                    { value: 'Melee', name: 'Melee' },
                    { value: 'Ranged', name: 'Ranged' },
                    { value: 'Magic', name: 'Magic' },
                    { value: 'Necromancy', name: 'Necromancy' },
                    { value: 'Hybrid', name: 'Hybrid' },
                ];
                updateSetting('profiles', profiles);
            }
            var name_1 = container.querySelector('input').value;
            profiles[id].name = name_1;
            var data = [];
            var trackedBuffs = localStorage['Buffs'];
            var untrackedBuffs = localStorage['UntrackedBuffs'];
            var settings = JSON.parse(localStorage[config.appName]);
            var profile_data = { trackedBuffs: trackedBuffs, untrackedBuffs: untrackedBuffs, settings: settings };
            data.push(profile_data);
            profiles[id].value = data;
            updateSetting('profiles', profiles);
            var profileOptions_1 = [
                { value: '0', name: 'Select Profile' },
                { value: 'Melee', name: 'Melee' },
                { value: 'Ranged', name: 'Ranged' },
                { value: 'Magic', name: 'Magic' },
                { value: 'Necromancy', name: 'Necromancy' },
                { value: 'Hybrid', name: 'Hybrid' },
            ];
            var savedProfiles_1 = getSetting('profiles');
            savedProfiles_1 === null || savedProfiles_1 === void 0 ? void 0 : savedProfiles_1.forEach(function (profile, index) {
                profileOptions_1[index].value = profile.name;
                profileOptions_1[index].name = profile.name;
            });
            loadOptions_1.parentElement.replaceWith(createDropdownSetting('Profile', '', 'CreateNew', profileOptions_1));
            document
                .querySelector('#Profile')
                .addEventListener('change', function () {
                var name = document.querySelector('.profile-name');
                var dropdown = document.querySelector('#Profile');
                name.value = dropdown.value;
            });
        }
    }
    function loadProfile() {
        var id = container.querySelector('select').selectedIndex;
        if (id !== 0) {
            var data = getSetting('profiles');
            data[id].value.forEach(function (key) {
                localStorage['Buffs'] = key.trackedBuffs;
                localStorage['Buffs2'] = key.trackedBuffs2;
                localStorage['Buffs3'] = key.trackedBuffs3;
                localStorage['UntrackedBuffs'] = key.untrackedBuffs;
                Object.keys(key.settings).forEach(function (setting) {
                    if (setting.toString() !== 'profiles') {
                        updateSetting(setting, key.settings[setting]);
                    }
                });
            });
        }
    }
    function deleteProfile() {
        var id = container.querySelector('select').selectedIndex;
        var profiles = getSetting('profiles');
        if (id !== 0) {
            profiles.splice(id, 1);
            updateSetting('profiles', profiles);
        }
        loadOptions.parentElement.replaceWith(createDropdownSetting('Profile', '', 'CreateNew', profiles));
    }
    var profileOptions = [
        { value: '0', name: 'Select Profile' },
        { value: 'Melee', name: 'Melee' },
        { value: 'Ranged', name: 'Ranged' },
        { value: 'Magic', name: 'Magic' },
        { value: 'Necromancy', name: 'Necromancy' },
        { value: 'Hybrid', name: 'Hybrid' },
    ];
    var savedProfiles = getSetting('profiles');
    savedProfiles === null || savedProfiles === void 0 ? void 0 : savedProfiles.forEach(function (profile, index) {
        profileOptions[index].value = profile.name;
        profileOptions[index].name = profile.name;
    });
    var profileHeader = createHeading('h3', 'Profiles');
    var profileText = createText('Select a profile and save settings. You can rename the profile using the text field after selecting. To load a profile select the profile and click load.');
    var saveButton = createButton('Save', saveProfile, {
        classes: ['nisbutton'],
    });
    var profileName = createInput('text', 'ProfileName', '');
    profileName.classList.add('profile-name');
    var loadOptions = createDropdownSetting('Profile', '', 'Add', profileOptions);
    loadOptions.classList.add('profile-list');
    loadOptions.querySelector('select').selectedIndex = 0;
    var loadButton = createButton('Load', loadProfile, {
        classes: ['nisbutton'],
    });
    loadButton.classList.add('load-btn');
    var deleteButton = createButton('Delete Profile', deleteProfile, {
        classes: ['delete'],
    });
    var container = createFlexContainer();
    container.classList.remove('flex');
    var endSeperator = createSeperator();
    container.classList.add('flex-wrap');
    container.classList.add('beta-only');
    container.appendChild(profileHeader);
    container.appendChild(profileText);
    container.appendChild(loadOptions);
    container.appendChild(document.createElement('br'));
    container.appendChild(saveButton);
    container.appendChild(profileName);
    container.appendChild(loadButton);
    //container.appendChild(deleteButton);
    container.appendChild(endSeperator);
    return container;
}
function createLabel(name, description) {
    var label = document.createElement('label');
    label.setAttribute('for', name);
    label.innerHTML = description;
    return label;
}
function createInput(type, name, defaultValue) {
    var _a;
    var input = document.createElement('input');
    input.id = name;
    input.type = type;
    input.dataset.setting = name;
    input.dataset.defaultValue = defaultValue;
    input.value = input.dataset.defaultValue;
    if (getSetting(name)) {
        input.value = (_a = getSetting(name)) !== null && _a !== void 0 ? _a : input.dataset.defaultValue;
    }
    else {
        updateSetting(name, input.dataset.defaultValue);
    }
    input.addEventListener('change', function () {
        if (type == 'text') {
            updateSetting(name, input.value);
        }
        else if (type == 'number' || type == 'range') {
            updateSetting(name, parseInt(input.value, 10));
        }
    });
    return input;
}
function createCheckboxInput(name, defaultValue) {
    var input = document.createElement('input');
    input.id = name;
    input.type = 'checkbox';
    input.dataset.setting = name;
    input.dataset.defaultValue = defaultValue;
    input.checked = defaultValue;
    if (getSetting(name)) {
        input.checked = getSetting(name);
    }
    else {
        updateSetting(name, input.checked);
    }
    input.addEventListener('change', function () {
        updateSetting(name, input.checked);
    });
    return input;
}
function createDropdown(name, defaultValue, options) {
    var select = document.createElement('select');
    select.id = name;
    select.dataset.setting = name;
    select.dataset.defaultValue = defaultValue;
    select.value = defaultValue;
    if (getSetting(name)) {
        select.value = getSetting(name);
    }
    for (var i = 0; i < options.length; i++) {
        var option = document.createElement('option');
        option.value = options[i].value;
        option.text = options[i].name;
        select.appendChild(option);
    }
    if (getSetting(name)) {
        select.value = getSetting(name);
    }
    else {
        updateSetting(name, select.value);
    }
    select.addEventListener('change', function () {
        updateSetting(name, select.value);
    });
    return select;
}
function createOutput() {
    var output = document.createElement('output');
    return output;
}
function createFlexContainer(classes) {
    var container = document.createElement('div');
    container.classList.add('flex');
    container.classList.add('setting');
    if (classes) {
        container.classList.add(classes);
    }
    return container;
}
function setDefaultSettings() {
    var settings = document.querySelectorAll('[data-setting]');
    settings.forEach(function (setting) {
        switch (setting.type) {
            case 'number':
            case 'range':
                updateSetting(setting.dataset.setting, parseInt(setting.dataset.defaultValue, 10));
                break;
            case 'checkbox':
                if (setting.dataset.defaultValue == 'false') {
                    updateSetting(setting.dataset.setting, false);
                }
                else {
                    updateSetting(setting.dataset.setting, true);
                }
                break;
            default:
                updateSetting(setting.dataset.setting, setting.dataset.defaultValue);
        }
    });
}
function loadSettings() {
    var settings = document.querySelectorAll('[data-setting]');
    settings.forEach(function (setting) {
        var _a;
        switch (setting.type) {
            case 'number':
            case 'range':
                setting.value =
                    (_a = getSetting(setting.dataset.setting)) !== null && _a !== void 0 ? _a : setting.dataset.defaultValue;
                break;
            case 'checkbox':
                setting.checked =
                    getSetting(setting.dataset.setting) ||
                        setting.dataset.defaultValue;
                break;
            default:
                setting.value =
                    getSetting(setting.dataset.setting) ||
                        setting.dataset.defaultValue;
        }
    });
}
function settingsExist() {
    if (!localStorage[config.appName]) {
        setDefaultSettings();
    }
    else {
        loadSettings();
    }
}
function getSetting(setting) {
    if (!localStorage[config.appName]) {
        localStorage.setItem(config.appName, JSON.stringify({}));
        setDefaultSettings();
    }
    return JSON.parse(localStorage[config.appName])[setting];
}
function updateSetting(setting, value) {
    if (!localStorage.getItem(config.appName)) {
        localStorage.setItem(config.appName, JSON.stringify({}));
    }
    var save_data = JSON.parse(localStorage[config.appName]);
    save_data[setting] = value;
    localStorage.setItem(config.appName, JSON.stringify(save_data));
}


/***/ }),

/***/ "data:font/opentype;base64,":

  !*** data:font/opentype;base64, ***!

/***/ ((module) => {

"use strict";
module.exports = "data:font/opentype;base64,";

/***/ }),

/***/ "./appconfig.json":
/*!************************!*\
  !*** ./appconfig.json ***!
  \************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
module.exports = __webpack_require__.p + "appconfig.json";

/***/ }),

/***/ "./asset/buffs/affliction.png":
/*!************************************!*\
  !*** ./asset/buffs/affliction.png ***!
  \************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
module.exports = __webpack_require__.p + "affliction.png";

/***/ }),

/***/ "./asset/buffs/anguish.png":
/*!*********************************!*\
  !*** ./asset/buffs/anguish.png ***!
  \*********************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
module.exports = __webpack_require__.p + "anguish.png";

/***/ }),

/***/ "./asset/buffs/blank.png":
/*!*******************************!*\
  !*** ./asset/buffs/blank.png ***!
  \*******************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
module.exports = __webpack_require__.p + "blank.png";

/***/ }),

/***/ "./asset/buffs/deflect_magic.png":
/*!***************************************!*\
  !*** ./asset/buffs/deflect_magic.png ***!
  \***************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
module.exports = __webpack_require__.p + "deflect_magic.png";

/***/ }),

/***/ "./asset/buffs/deflect_melee.png":
/*!***************************************!*\
  !*** ./asset/buffs/deflect_melee.png ***!
  \***************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
module.exports = __webpack_require__.p + "deflect_melee.png";

/***/ }),

/***/ "./asset/buffs/deflect_necromancy.png":
/*!********************************************!*\
  !*** ./asset/buffs/deflect_necromancy.png ***!
  \********************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
module.exports = __webpack_require__.p + "deflect_necromancy.png";

/***/ }),

/***/ "./asset/buffs/deflect_ranged.png":
/*!****************************************!*\
  !*** ./asset/buffs/deflect_ranged.png ***!
  \****************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
module.exports = __webpack_require__.p + "deflect_ranged.png";

/***/ }),

/***/ "./asset/buffs/desat/virus-desat.png":
/*!*******************************************!*\
  !*** ./asset/buffs/desat/virus-desat.png ***!
  \*******************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
module.exports = __webpack_require__.p + "virus-desat.png";

/***/ }),

/***/ "./asset/buffs/desolation.png":
/*!************************************!*\
  !*** ./asset/buffs/desolation.png ***!
  \************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
module.exports = __webpack_require__.p + "desolation.png";

/***/ }),

/***/ "./asset/buffs/malevolence.png":
/*!*************************************!*\
  !*** ./asset/buffs/malevolence.png ***!
  \*************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
module.exports = __webpack_require__.p + "malevolence.png";

/***/ }),

/***/ "./asset/buffs/protect_from_magic.png":
/*!********************************************!*\
  !*** ./asset/buffs/protect_from_magic.png ***!
  \********************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
module.exports = __webpack_require__.p + "protect_from_magic.png";

/***/ }),

/***/ "./asset/buffs/protect_from_melee.png":
/*!********************************************!*\
  !*** ./asset/buffs/protect_from_melee.png ***!
  \********************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
module.exports = __webpack_require__.p + "protect_from_melee.png";

/***/ }),

/***/ "./asset/buffs/protect_from_necromancy.png":
/*!*************************************************!*\
  !*** ./asset/buffs/protect_from_necromancy.png ***!
  \*************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
module.exports = __webpack_require__.p + "protect_from_necromancy.png";

/***/ }),

/***/ "./asset/buffs/protect_from_ranged.png":
/*!*********************************************!*\
  !*** ./asset/buffs/protect_from_ranged.png ***!
  \*********************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
module.exports = __webpack_require__.p + "protect_from_ranged.png";

/***/ }),

/***/ "./asset/buffs/ruination.png":
/*!***********************************!*\
  !*** ./asset/buffs/ruination.png ***!
  \***********************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
module.exports = __webpack_require__.p + "ruination.png";

/***/ }),

/***/ "./asset/buffs/sorrow.png":
/*!********************************!*\
  !*** ./asset/buffs/sorrow.png ***!
  \********************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
module.exports = __webpack_require__.p + "sorrow.png";

/***/ }),

/***/ "./asset/buffs/soul_split.png":
/*!************************************!*\
  !*** ./asset/buffs/soul_split.png ***!
  \************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
module.exports = __webpack_require__.p + "soul_split.png";

/***/ }),

/***/ "./asset/buffs/torment.png":
/*!*********************************!*\
  !*** ./asset/buffs/torment.png ***!
  \*********************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
module.exports = __webpack_require__.p + "torment.png";

/***/ }),

/***/ "./asset/buffs/turmoil.png":
/*!*********************************!*\
  !*** ./asset/buffs/turmoil.png ***!
  \*********************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
module.exports = __webpack_require__.p + "turmoil.png";

/***/ }),

/***/ "./asset/buffs/virus_black.webp":
/*!**************************************!*\
  !*** ./asset/buffs/virus_black.webp ***!
  \**************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
module.exports = __webpack_require__.p + "virus_black.webp";

/***/ }),

/***/ "./asset/buffs/virus_blue.webp":
/*!*************************************!*\
  !*** ./asset/buffs/virus_blue.webp ***!
  \*************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
module.exports = __webpack_require__.p + "virus_blue.webp";

/***/ }),

/***/ "./asset/buffs/virus_green.webp":
/*!**************************************!*\
  !*** ./asset/buffs/virus_green.webp ***!
  \**************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
module.exports = __webpack_require__.p + "virus_green.webp";

/***/ }),

/***/ "./asset/buffs/virus_red.webp":
/*!************************************!*\
  !*** ./asset/buffs/virus_red.webp ***!
  \************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
module.exports = __webpack_require__.p + "virus_red.webp";

/***/ }),

/***/ "./asset/nis/bg.png":
/*!**************************!*\
  !*** ./asset/nis/bg.png ***!
  \**************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
module.exports = __webpack_require__.p + "bg.png";

/***/ }),

/***/ "./asset/nis/button.png":
/*!******************************!*\
  !*** ./asset/nis/button.png ***!
  \******************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
module.exports = __webpack_require__.p + "button.png";

/***/ }),

/***/ "./asset/nis/checkmark.png":
/*!*********************************!*\
  !*** ./asset/nis/checkmark.png ***!
  \*********************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
module.exports = __webpack_require__.p + "checkmark.png";

/***/ }),

/***/ "./asset/nis/imgbutton.png":
/*!*********************************!*\
  !*** ./asset/nis/imgbutton.png ***!
  \*********************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
module.exports = __webpack_require__.p + "imgbutton.png";

/***/ }),

/***/ "./asset/nis/scroll.png":
/*!******************************!*\
  !*** ./asset/nis/scroll.png ***!
  \******************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
module.exports = __webpack_require__.p + "scroll.png";

/***/ }),

/***/ "./asset/nis/scrollhor.png":
/*!*********************************!*\
  !*** ./asset/nis/scrollhor.png ***!
  \*********************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
module.exports = __webpack_require__.p + "scrollhor.png";

/***/ }),

/***/ "./icon.png":
/*!******************!*\
  !*** ./icon.png ***!
  \******************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
module.exports = __webpack_require__.p + "icon.png";

/***/ }),

/***/ "./index.html":
/*!********************!*\
  !*** ./index.html ***!
  \********************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
module.exports = __webpack_require__.p + "index.html";

/***/ }),

/***/ "canvas":
/*!*************************!*\
  !*** external "canvas" ***!
  \*************************/
/***/ ((module) => {

"use strict";
if(typeof __WEBPACK_EXTERNAL_MODULE_canvas__ === 'undefined') { var e = new Error("Cannot find module 'canvas'"); e.code = 'MODULE_NOT_FOUND'; throw e; }

module.exports = __WEBPACK_EXTERNAL_MODULE_canvas__;

/***/ }),

/***/ "electron/common":
/*!**********************************!*\
  !*** external "electron/common" ***!
  \**********************************/
/***/ ((module) => {

"use strict";
if(typeof __WEBPACK_EXTERNAL_MODULE_electron_common__ === 'undefined') { var e = new Error("Cannot find module 'electron/common'"); e.code = 'MODULE_NOT_FOUND'; throw e; }

module.exports = __WEBPACK_EXTERNAL_MODULE_electron_common__;

/***/ }),

/***/ "sharp":
/*!************************!*\
  !*** external "sharp" ***!
  \************************/
/***/ ((module) => {

"use strict";
if(typeof __WEBPACK_EXTERNAL_MODULE_sharp__ === 'undefined') { var e = new Error("Cannot find module 'sharp'"); e.code = 'MODULE_NOT_FOUND'; throw e; }

module.exports = __WEBPACK_EXTERNAL_MODULE_sharp__;

/***/ }),

/***/ "../node_modules/alt1/dist/base/index.js":
/*!***********************************************!*\
  !*** ../node_modules/alt1/dist/base/index.js ***!
  \***********************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

(function webpackUniversalModuleDefinition(root, factory) {
	if(true)
		module.exports = factory((function webpackLoadOptionalExternalModule() { try { return __webpack_require__(/*! sharp */ "sharp"); } catch(e) {} }()), (function webpackLoadOptionalExternalModule() { try { return __webpack_require__(/*! canvas */ "canvas"); } catch(e) {} }()), (function webpackLoadOptionalExternalModule() { try { return __webpack_require__(/*! electron/common */ "electron/common"); } catch(e) {} }()));
	else {}
})(globalThis, (__WEBPACK_EXTERNAL_MODULE_sharp__, __WEBPACK_EXTERNAL_MODULE_canvas__, __WEBPACK_EXTERNAL_MODULE_electron_common__) => {
return /******/ (() => { // webpackBootstrap
/******/ 	"use strict";
/******/ 	var __webpack_modules__ = ({

/***/ "./src/base/alt1api.ts":
/*!*****************************!*\
  !*** ./src/base/alt1api.ts ***!
  \*****************************/
/***/ ((__unused_webpack_module, exports) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));


/***/ }),

/***/ "./src/base/declarations.ts":
/*!**********************************!*\
  !*** ./src/base/declarations.ts ***!
  \**********************************/
/***/ ((__unused_webpack_module, exports) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));


/***/ }),

/***/ "./src/base/imagedata-extensions.ts":
/*!******************************************!*\
  !*** ./src/base/imagedata-extensions.ts ***!
  \******************************************/
/***/ (function(__unused_webpack_module, exports, __nested_webpack_require_2062__) {


var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.ImageData = void 0;
const a1lib = __importStar(__nested_webpack_require_2062__(/*! ./index */ "./src/base/index.ts"));
const nodeimports = __importStar(__nested_webpack_require_2062__(/*! ./nodepolyfill */ "./src/base/nodepolyfill.ts"));
(function () {
    var globalvar = (typeof self != "undefined" ? self : (typeof __nested_webpack_require_2062__.g != "undefined" ? __nested_webpack_require_2062__.g : null));
    var filltype = typeof globalvar.ImageData == "undefined";
    var fillconstr = filltype;
    if (!filltype) {
        var oldconstr = globalvar.ImageData;
        try {
            let data = new Uint8ClampedArray(4);
            data[0] = 1;
            let a = new globalvar.ImageData(data, 1, 1);
            fillconstr = a.data[0] != 1;
        }
        catch (e) {
            fillconstr = true;
        }
    }
    if (fillconstr) {
        var constr = function ImageDataShim() {
            var i = 0;
            var data = (arguments[i] instanceof Uint8ClampedArray ? arguments[i++] : null);
            var width = arguments[i++];
            var height = arguments[i++];
            if (filltype) {
                if (!data) {
                    data = new Uint8ClampedArray(width * height * 4);
                }
                this.width = width;
                this.height = height;
                this.data = data;
            }
            else if (fillconstr) {
                //WARNING This branch of code does not use the same pixel data backing store
                //(problem with wasm, however all wasm browser have a native constructor (unless asm.js is used))
                var canvas = document.createElement('canvas');
                canvas.width = width;
                canvas.height = height;
                var ctx = canvas.getContext("2d");
                var imageData = ctx.createImageData(width, height);
                if (data) {
                    imageData.data.set(data);
                }
                return imageData;
            }
            // else {
            // 	//oh no...
            // 	//we need this monstrocity in order to call the native constructor with variable number of args
            // 	//when es5 transpile is enable (that strips the spread operator)
            // 	return new (Function.prototype.bind.apply(oldconstr, [null,...arguments]));
            // }
        };
        if (!filltype) {
            constr.prototype = globalvar.ImageData.prototype;
        }
        globalvar.ImageData = constr;
        exports.ImageData = constr;
    }
    else {
        exports.ImageData = globalvar.ImageData;
    }
})();
//Recast into a drawable imagedata class on all platforms, into a normal browser ImageData on browsers or a node-canvas imagedata on nodejs
exports.ImageData.prototype.toDrawableData = function () {
    if (typeof document == "undefined") {
        return nodeimports.imageDataToDrawable(this);
    }
    else {
        return this;
    }
};
exports.ImageData.prototype.putImageData = function (buf, cx, cy) {
    for (var dx = 0; dx < buf.width; dx++) {
        for (var dy = 0; dy < buf.height; dy++) {
            var i1 = (dx + cx) * 4 + (dy + cy) * 4 * this.width;
            var i2 = dx * 4 + dy * 4 * buf.width;
            this.data[i1] = buf.data[i2];
            this.data[i1 + 1] = buf.data[i2 + 1];
            this.data[i1 + 2] = buf.data[i2 + 2];
            this.data[i1 + 3] = buf.data[i2 + 3];
        }
    }
};
exports.ImageData.prototype.pixelOffset = function (x, y) {
    return x * 4 + y * this.width * 4;
};
//creates a hash of a portion of the buffer used to check for changes
exports.ImageData.prototype.getPixelHash = function (rect) {
    if (!rect) {
        rect = new a1lib.Rect(0, 0, this.width, this.height);
    }
    var hash = 0;
    for (var x = rect.x; x < rect.x + rect.width; x++) {
        for (var y = rect.y; y < rect.y + rect.height; y++) {
            var i = x * 4 + y * 4 * this.width;
            hash = (((hash << 5) - hash) + this.data[i]) | 0;
            hash = (((hash << 5) - hash) + this.data[i + 1]) | 0;
            hash = (((hash << 5) - hash) + this.data[i + 2]) | 0;
            hash = (((hash << 5) - hash) + this.data[i + 3]) | 0;
        }
    }
    return hash;
};
exports.ImageData.prototype.clone = function (rect) {
    let res = new exports.ImageData(rect.width, rect.height);
    this.copyTo(res, rect.x, rect.y, rect.width, rect.height, 0, 0);
    return res;
};
exports.ImageData.prototype.show = function (x = 5, y = 5, zoom = 1) {
    if (typeof document == "undefined") {
        console.error("need a document to show an imagedata object");
        return;
    }
    var imgs = document.getElementsByClassName("debugimage");
    while (imgs.length > exports.ImageData.prototype.show.maxImages) {
        imgs[0].remove();
    }
    var el = this.toImage();
    el.classList.add("debugimage");
    el.style.position = "absolute";
    el.style.zIndex = "1000";
    el.style.left = x / zoom + "px";
    el.style.top = y / zoom + "px";
    el.style.background = "purple";
    el.style.cursor = "pointer";
    el.style.imageRendering = "pixelated";
    el.style.outline = "1px solid #0f0";
    el.style.width = (this.width == 1 ? 100 : this.width) * zoom + "px";
    el.style.height = (this.height == 1 ? 100 : this.height) * zoom + "px";
    el.onclick = function () { el.remove(); };
    document.body.appendChild(el);
    return el;
};
exports.ImageData.prototype.show.maxImages = 10;
exports.ImageData.prototype.toImage = function (rect) {
    if (!rect) {
        rect = new a1lib.Rect(0, 0, this.width, this.height);
    }
    if (typeof document != "undefined") {
        var el = document.createElement("canvas");
        el.width = rect.width;
        el.height = rect.height;
    }
    else {
        el = nodeimports.createCanvas(rect.width, rect.height);
    }
    var ctx = el.getContext("2d");
    ctx.putImageData(this.toDrawableData(), -rect.x, -rect.y);
    return el;
};
exports.ImageData.prototype.getPixel = function (x, y) {
    var i = x * 4 + y * 4 * this.width;
    return [this.data[i], this.data[i + 1], this.data[i + 2], this.data[i + 3]];
};
exports.ImageData.prototype.getPixelValueSum = function (x, y) {
    var i = x * 4 + y * 4 * this.width;
    return this.data[i] + this.data[i + 1] + this.data[i + 2];
};
exports.ImageData.prototype.getPixelInt = function (x, y) {
    var i = x * 4 + y * 4 * this.width;
    return (this.data[i + 3] << 24) + (this.data[i + 0] << 16) + (this.data[i + 1] << 8) + (this.data[i + 2] << 0);
};
exports.ImageData.prototype.getColorDifference = function (x, y, r, g, b, a = 255) {
    var i = x * 4 + y * 4 * this.width;
    return Math.abs(this.data[i] - r) + Math.abs(this.data[i + 1] - g) + Math.abs(this.data[i + 2] - b) * a / 255;
};
exports.ImageData.prototype.setPixel = function (x, y, ...color) {
    var r, g, b, a;
    var [r, g, b, a] = (Array.isArray(color[0]) ? color[0] : color);
    var i = x * 4 + y * 4 * this.width;
    this.data[i] = r;
    this.data[i + 1] = g;
    this.data[i + 2] = b;
    this.data[i + 3] = a == undefined ? 255 : a;
};
exports.ImageData.prototype.setPixelInt = function (x, y, color) {
    var i = x * 4 + y * 4 * this.width;
    this.data[i] = (color >> 24) & 0xff;
    this.data[i + 1] = (color >> 16) & 0xff;
    this.data[i + 2] = (color >> 8) & 0xff;
    this.data[i + 3] = (color >> 0) & 0xff;
};
exports.ImageData.prototype.toFileBytes = function (format, quality) {
    if (typeof HTMLCanvasElement != "undefined") {
        return new Promise(d => this.toImage().toBlob(b => {
            var r = new FileReader();
            r.readAsArrayBuffer(b);
            r.onload = () => d(new Uint8Array(r.result));
        }, format, quality));
    }
    else {
        return nodeimports.imageDataToFileBytes(this, format, quality);
    }
};
exports.ImageData.prototype.toPngBase64 = function () {
    if (typeof HTMLCanvasElement != "undefined") {
        var str = this.toImage().toDataURL("image/png");
        return str.slice(str.indexOf(",") + 1);
    }
    else {
        throw new Error("synchronous image conversion not supported in nodejs, try using ImageData.prototype.toFileBytes");
    }
};
exports.ImageData.prototype.pixelCompare = function (buf, x = 0, y = 0, max) {
    return a1lib.ImageDetect.simpleCompare(this, buf, x, y, max);
};
exports.ImageData.prototype.copyTo = function (target, sourcex, sourcey, width, height, targetx, targety) {
    //convince v8 that these are 31bit uints
    const targetwidth = target.width | 0;
    const thiswidth = this.width | 0;
    const copywidth = width | 0;
    const fastwidth = Math.floor(width / 4) * 4;
    const thisdata = new Int32Array(this.data.buffer, this.data.byteOffset, this.data.byteLength / 4);
    const targetdata = new Int32Array(target.data.buffer, target.data.byteOffset, target.data.byteLength / 4);
    for (let cy = 0; cy < height; cy++) {
        let cx = 0;
        let it = (cx + targetx) + (cy + targety) * targetwidth;
        let is = (cx + sourcex) + (cy + sourcey) * thiswidth;
        //copy 4 pixels per iter (xmm)
        for (; cx < fastwidth; cx += 4) {
            targetdata[it] = thisdata[is];
            targetdata[it + 1] = thisdata[is + 1];
            targetdata[it + 2] = thisdata[is + 2];
            targetdata[it + 3] = thisdata[is + 3];
            it += 4;
            is += 4;
        }
        //copy remainder per pixel
        for (; cx < copywidth; cx++) {
            targetdata[it] = thisdata[is];
            it += 1;
            is += 1;
        }
    }
};


/***/ }),

/***/ "./src/base/imagedetect.ts":
/*!*********************************!*\
  !*** ./src/base/imagedetect.ts ***!
  \*********************************/
/***/ (function(__unused_webpack_module, exports, __nested_webpack_require_12931__) {


var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.ImageDataSet = exports.webpackImages = exports.asyncMap = exports.coldif = exports.simpleCompareRMSE = exports.simpleCompare = exports.findSubbuffer = exports.findSubimage = exports.clearPngColorspace = exports.isPngBuffer = exports.imageDataFromFileBuffer = exports.imageDataFromBase64 = exports.imageDataFromUrl = void 0;
const imgref_1 = __nested_webpack_require_12931__(/*! ./imgref */ "./src/base/imgref.ts");
const wapper = __importStar(__nested_webpack_require_12931__(/*! ./wrapper */ "./src/base/wrapper.ts"));
const nodeimports = __importStar(__nested_webpack_require_12931__(/*! ./nodepolyfill */ "./src/base/nodepolyfill.ts"));
const _1 = __nested_webpack_require_12931__(/*! . */ "./src/base/index.ts");
/**
* Downloads an image and returns the ImageData.
* Cleans sRGB headers from downloaded png images. Assumes that data url's are already cleaned from sRGB and other headers
* @param url http(s) or data url to the image
*/
async function imageDataFromUrl(url) {
    var hdr = "data:image/png;base64,";
    var isdataurl = url.startsWith(hdr);
    if (typeof Image != "undefined") {
        if (isdataurl) {
            return loadImageDataFromUrl(url);
        }
        else {
            let res = await fetch(url);
            if (!res.ok) {
                throw new Error("failed to load image: " + url);
            }
            let file = new Uint8Array(await res.arrayBuffer());
            return imageDataFromFileBuffer(file);
        }
    }
    else {
        if (isdataurl) {
            return imageDataFromBase64(url.slice(hdr.length));
        }
        throw new Error("loading remote images in nodejs has been disabled, load the raw bytes and use imageDataFromNodeBuffer instead");
    }
}
exports.imageDataFromUrl = imageDataFromUrl;
function loadImageDataFromUrl(url) {
    if (typeof Image == "undefined") {
        throw new Error("Browser environment expected");
    }
    return new Promise((done, fail) => {
        var img = new Image();
        img.crossOrigin = "crossorigin";
        img.onload = function () { done(new imgref_1.ImgRefCtx(img).toData()); };
        img.onerror = fail;
        img.src = url;
    });
}
/**
* Loads an ImageData object from a base64 encoded png image
* Make sure the png image does not have a sRGB chunk or the resulting pixels will differ for different users!!!
* @param data a base64 encoded png image
*/
async function imageDataFromBase64(data) {
    if (typeof Image != "undefined") {
        return imageDataFromUrl("data:image/png;base64," + data);
    }
    else {
        return nodeimports.imageDataFromBase64(data);
    }
}
exports.imageDataFromBase64 = imageDataFromBase64;
/**
 * Loads an ImageData object directly from a png encoded file buffer
 * This method ensures that png color space headers are taken care off
 * @param data The bytes of a png file
 */
async function imageDataFromFileBuffer(data) {
    if (isPngBuffer(data)) {
        clearPngColorspace(data);
    }
    if (typeof Image != "undefined") {
        let blob = new Blob([data], { type: "image/png" });
        let url = URL.createObjectURL(blob);
        let r = await loadImageDataFromUrl(url);
        URL.revokeObjectURL(url);
        return r;
    }
    else {
        return nodeimports.imageDataFromBuffer(data);
    }
}
exports.imageDataFromFileBuffer = imageDataFromFileBuffer;
/**
* Checks if a given byte array is a png file (by checking for ?PNG as first 4 bytes)
* @param bytes Raw bytes of the png file
*/
function isPngBuffer(bytes) {
    return bytes[0] == 137 && bytes[1] == 80 && bytes[2] == 78 && bytes[3] == 71;
}
exports.isPngBuffer = isPngBuffer;
/**
* Resets the colorspace data in the png file.
* This makes sure the browser renders the exact colors in the file instead of filtering it in order to obtain the best real life representation of
* what it looked like on the authors screen. (this feature is often broken and not supported)
* For example a round trip printscreen -> open in browser results in different colors than the original
* @param data Raw bytes of the png file
*/
function clearPngColorspace(data) {
    if (!isPngBuffer(data)) {
        throw new Error("non-png image received");
    }
    var i = 8;
    while (i < data.length) {
        var length = data[i++] * 0x1000000 + data[i++] * 0x10000 + data[i++] * 0x100 + data[i++];
        var ancillary = !!((data[i] >> 5) & 1);
        var chunkname = String.fromCharCode(data[i], data[i + 1], data[i + 2], data[i + 3]);
        var chunkid = chunkname.toLowerCase();
        if (chunkid != "trns" && ancillary) {
            data[i + 0] = "n".charCodeAt(0);
            data[i + 1] = "o".charCodeAt(0);
            data[i + 2] = "P".charCodeAt(0);
            data[i + 3] = "E".charCodeAt(0);
            //calculate new chunk checksum
            //http://www.libpng.org/pub/png/spec/1.2/PNG-CRCAppendix.html
            var end = i + 4 + length;
            var crc = 0xffffffff;
            //should be fast enough like this
            var bitcrc = function (bit) {
                for (var k = 0; k < 8; k++) {
                    if (bit & 1) {
                        bit = 0xedb88320 ^ (bit >>> 1);
                    }
                    else {
                        bit = bit >>> 1;
                    }
                }
                return bit;
            };
            for (var a = i; a < end; a++) {
                if (a >= i + 4) {
                    data[a] = 0;
                }
                var bit = data[a];
                crc = bitcrc((crc ^ bit) & 0xff) ^ (crc >>> 8);
            }
            crc = crc ^ 0xffffffff;
            //new chunk checksum
            data[i + 4 + length + 0] = (crc >> 24) & 0xff;
            data[i + 4 + length + 1] = (crc >> 16) & 0xff;
            data[i + 4 + length + 2] = (crc >> 8) & 0xff;
            data[i + 4 + length + 3] = (crc >> 0) & 0xff;
        }
        if (chunkname == "IEND") {
            break;
        }
        i += 4; //type
        i += length; //data
        i += 4; //crc
    }
}
exports.clearPngColorspace = clearPngColorspace;
/**
* finds the given needle ImageBuffer in the given haystack ImgRef this function uses the best optimized available
* code depending on the type of the haystack. It will use fast c# searching if the haystack is an ImgRefBind, js searching
* is used otherwise.
* the checklist argument is no longer used and should ignored or null/undefined
* The optional sx,sy,sw,sh arguments indicate a bounding rectangle in which to search the needle. The rectangle should be bigger than the needle
* @returns An array of points where the needle is found. The array is empty if none are found
*/
function findSubimage(haystackImgref, needleBuffer, sx = 0, sy = 0, sw = haystackImgref.width, sh = haystackImgref.height) {
    if (!haystackImgref) {
        throw new TypeError();
    }
    if (!needleBuffer) {
        throw new TypeError();
    }
    var max = 30;
    //check if we can do this in alt1
    if (haystackImgref instanceof imgref_1.ImgRefBind && wapper.hasAlt1 && alt1.bindFindSubImg) {
        var needlestr = wapper.encodeImageString(needleBuffer);
        var r = alt1.bindFindSubImg(haystackImgref.handle, needlestr, needleBuffer.width, sx, sy, sw, sh);
        if (!r) {
            throw new wapper.Alt1Error();
        }
        return JSON.parse(r);
    }
    return findSubbuffer(haystackImgref.read(), needleBuffer, sx, sy, sw, sh);
}
exports.findSubimage = findSubimage;
/**
* Uses js to find the given needle ImageBuffer in the given haystack ImageBuffer. It is better to use the alt1.bind- functions in
* combination with a1nxt.findsubimg.
* the optional sx,sy,sw,sh arguments indicate a bounding rectangle in which to search.
* @returns An array of points where the needle is found. The array is empty if none are found
*/
function findSubbuffer(haystack, needle, sx = 0, sy = 0, sw = haystack.width, sh = haystack.height) {
    var r = [];
    var maxdif = 30;
    var maxresults = 50;
    var needlestride = needle.width * 4;
    var heystackstride = haystack.width * 4;
    //built list of non trans pixel to check
    var checkList = [];
    for (var y = 0; y < needle.height; y++) {
        for (var x = 0; x < needle.width; x++) {
            var i = x * 4 + y * needlestride;
            if (needle.data[i + 3] == 255) {
                checkList.push({ x: x, y: y });
            }
            if (checkList.length == 10) {
                break;
            }
        }
        if (checkList.length == 10) {
            break;
        }
    }
    var cw = (sx + sw) - needle.width;
    var ch = (sy + sh) - needle.height;
    var checklength = checkList.length;
    for (var y = sy; y <= ch; y++) {
        outer: for (var x = sx; x <= cw; x++) {
            for (var a = 0; a < checklength; a++) {
                var i1 = (x + checkList[a].x) * 4 + (y + checkList[a].y) * heystackstride;
                var i2 = checkList[a].x * 4 + checkList[a].y * needlestride;
                var d = 0;
                d = d + Math.abs(haystack.data[i1 + 0] - needle.data[i2 + 0]) | 0;
                d = d + Math.abs(haystack.data[i1 + 1] - needle.data[i2 + 1]) | 0;
                d = d + Math.abs(haystack.data[i1 + 2] - needle.data[i2 + 2]) | 0;
                d *= 255 / needle.data[i2 + 3];
                if (d > maxdif) {
                    continue outer;
                }
            }
            if (simpleCompare(haystack, needle, x, y, maxdif) != Infinity) {
                r.push({ x, y });
                if (r.length > maxresults) {
                    return r;
                }
            }
        }
    }
    return r;
}
exports.findSubbuffer = findSubbuffer;
/**
* Compares two images and returns the average color difference per pixel between them
* @param max The max color difference at any point in the image before short circuiting the function and returning Infinity. set to -1 to always continue.
* @returns The average color difference per pixel or Infinity if the difference is more than max at any point in the image
*/
function simpleCompare(bigbuf, checkbuf, x, y, max = 30) {
    if (x < 0 || y < 0) {
        throw new RangeError();
    }
    if (x + checkbuf.width > bigbuf.width || y + checkbuf.height > bigbuf.height) {
        throw new RangeError();
    }
    if (max == -1) {
        max = 255 * 4;
    }
    var dif = 0;
    for (var step = 8; step >= 1; step /= 2) {
        for (var cx = 0; cx < checkbuf.width; cx += step) {
            for (var cy = 0; cy < checkbuf.height; cy += step) {
                var i1 = (x + cx) * 4 + (y + cy) * bigbuf.width * 4;
                var i2 = cx * 4 + cy * checkbuf.width * 4;
                var d = 0;
                d = d + Math.abs(bigbuf.data[i1 + 0] - checkbuf.data[i2 + 0]) | 0;
                d = d + Math.abs(bigbuf.data[i1 + 1] - checkbuf.data[i2 + 1]) | 0;
                d = d + Math.abs(bigbuf.data[i1 + 2] - checkbuf.data[i2 + 2]) | 0;
                d *= checkbuf.data[i2 + 3] / 255;
                if (step == 1) {
                    dif += d;
                }
                if (d > max) {
                    return Infinity;
                }
            }
        }
    }
    return dif / checkbuf.width / checkbuf.height;
}
exports.simpleCompare = simpleCompare;
/**
* Calculates the root mean square error between the two buffers at the given coordinate, this method can be used in situations with significant blur or
* transparency, it does not bail early on non-matching images like simpleCompare does so it can be expected to be much slower when called often.
* @returns The root mean square error beteen the images, high single pixel errors are penalized more than consisten low errors. return of 0 means perfect match.
*/
function simpleCompareRMSE(bigbuf, checkbuf, x, y) {
    if (x < 0 || y < 0) {
        throw new RangeError();
    }
    if (x + checkbuf.width > bigbuf.width || y + checkbuf.height > bigbuf.height) {
        throw new RangeError();
    }
    var dif = 0;
    var numpix = 0;
    for (var cx = 0; cx < checkbuf.width; cx++) {
        for (var cy = 0; cy < checkbuf.height; cy++) {
            var i1 = (x + cx) * 4 + (y + cy) * bigbuf.width * 4;
            var i2 = cx * 4 + cy * checkbuf.width * 4;
            var d = 0;
            d = d + Math.abs(bigbuf.data[i1 + 0] - checkbuf.data[i2 + 0]) | 0;
            d = d + Math.abs(bigbuf.data[i1 + 1] - checkbuf.data[i2 + 1]) | 0;
            d = d + Math.abs(bigbuf.data[i1 + 2] - checkbuf.data[i2 + 2]) | 0;
            var weight = checkbuf.data[i2 + 3] / 255;
            numpix += weight;
            dif += d * d * weight;
        }
    }
    return Math.sqrt(dif / numpix);
}
exports.simpleCompareRMSE = simpleCompareRMSE;
/**
* Returns the difference between two colors (scaled to the alpha of the second color)
*/
function coldif(r1, g1, b1, r2, g2, b2, a2) {
    return (Math.abs(r1 - r2) + Math.abs(g1 - g2) + Math.abs(b1 - b2)) * a2 / 255; //only applies alpha for 2nd buffer!
}
exports.coldif = coldif;
/**
 * Turns map of promises into a map that contains the resolved values after loading.
 * @param input
 */
function asyncMap(input) {
    var raw = {};
    var promises = [];
    for (var a in input) {
        if (input.hasOwnProperty(a)) {
            raw[a] = null;
            promises.push(input[a].then(function (a, i) { raw[a] = i; r[a] = i; }.bind(null, a)));
        }
    }
    var r = {};
    var promise = Promise.all(promises).then(() => { r.loaded = true; return r; });
    Object.defineProperty(r, "loaded", { enumerable: false, value: false, writable: true });
    Object.defineProperty(r, "promise", { enumerable: false, value: promise });
    Object.defineProperty(r, "raw", { enumerable: false, value: raw });
    return Object.assign(r, raw);
}
exports.asyncMap = asyncMap;
/**
* Same as asyncMap, but casts the properties to ImageData in typescript
*/
function webpackImages(input) {
    return asyncMap(input);
}
exports.webpackImages = webpackImages;
class ImageDataSet {
    constructor() {
        this.buffers = [];
    }
    matchBest(img, x, y, max) {
        let best = null;
        let bestscore = max;
        for (let a = 0; a < this.buffers.length; a++) {
            let score = img.pixelCompare(this.buffers[a], x, y, bestscore);
            if (isFinite(score) && (bestscore == undefined || score < bestscore)) {
                bestscore = score;
                best = a;
            }
        }
        if (best == null) {
            return null;
        }
        return { index: best, score: bestscore };
    }
    static fromFilmStrip(baseimg, width) {
        if ((baseimg.width % width) != 0) {
            throw new Error("slice size does not fit in base img");
        }
        let r = new ImageDataSet();
        for (let x = 0; x < baseimg.width; x += width) {
            r.buffers.push(baseimg.clone(new _1.Rect(x, 0, width, baseimg.height)));
        }
        return r;
    }
    static fromFilmStripUneven(baseimg, widths) {
        let r = new ImageDataSet();
        let x = 0;
        for (let w of widths) {
            r.buffers.push(baseimg.clone(new _1.Rect(x, 0, w, baseimg.height)));
            x += w;
            if (x > baseimg.width) {
                throw new Error("sampling filmstrip outside bounds");
            }
        }
        if (x != baseimg.width) {
            throw new Error("unconsumed pixels left in film strip imagedata");
        }
        return r;
    }
    static fromAtlas(baseimg, slices) {
        let r = new ImageDataSet();
        for (let slice of slices) {
            r.buffers.push(baseimg.clone(slice));
        }
        return r;
    }
}
exports.ImageDataSet = ImageDataSet;


/***/ }),

/***/ "./src/base/imgref.ts":
/*!****************************!*\
  !*** ./src/base/imgref.ts ***!
  \****************************/
/***/ ((__unused_webpack_module, exports, __nested_webpack_require_29896__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.ImgRefData = exports.ImgRefBind = exports.ImgRefCtx = exports.ImgRef = void 0;
const index_1 = __nested_webpack_require_29896__(/*! ./index */ "./src/base/index.ts");
/**
 * Represents an image that might be in different types of memory
 * This is mostly used to represent images still in Alt1 memory that have
 * not been transfered to js yet. Various a1lib api's use this type and
 * choose the most efficient approach based on the memory type
 */
class ImgRef {
    constructor(x, y, w, h) {
        this.t = "none";
        this.x = x;
        this.y = y;
        this.width = w;
        this.height = h;
    }
    read(x = 0, y = 0, w = this.width, h = this.height) {
        throw new Error("This imgref (" + this.t + ") does not support toData");
    }
    findSubimage(needle, sx = 0, sy = 0, w = this.width, h = this.height) {
        return index_1.ImageDetect.findSubimage(this, needle, sx, sy, w, h);
    }
    toData(x = this.x, y = this.y, w = this.width, h = this.height) {
        return this.read(x - this.x, y - this.y, w, h);
    }
    ;
    containsArea(rect) {
        return this.x <= rect.x && this.y <= rect.y && this.x + this.width >= rect.x + rect.width && this.y + this.height >= rect.y + rect.height;
    }
}
exports.ImgRef = ImgRef;
/**
 * Represents an image in js render memory (canvas/image tag)
 */
class ImgRefCtx extends ImgRef {
    constructor(img, x = 0, y = 0) {
        if (img instanceof CanvasRenderingContext2D) {
            super(x, y, img.canvas.width, img.canvas.height);
            this.ctx = img;
        }
        else {
            super(x, y, img.width, img.height);
            if (img instanceof HTMLCanvasElement) {
                this.ctx = img.getContext("2d", { willReadFrequently: true });
            }
            else {
                var cnv = document.createElement("canvas");
                cnv.width = img.width;
                cnv.height = img.height;
                this.ctx = cnv.getContext("2d", { willReadFrequently: true });
                this.ctx.drawImage(img, 0, 0);
            }
        }
        this.t = "ctx";
    }
    read(x = 0, y = 0, w = this.width, h = this.height) {
        return this.ctx.getImageData(x, y, w, h);
    }
}
exports.ImgRefCtx = ImgRefCtx;
/**
 * Represents in image in Alt1 memory, This type of image can be searched for subimages
 * very efficiently and transfering the full image to js can be avoided this way
 */
class ImgRefBind extends ImgRef {
    constructor(handle, x = 0, y = 0, w = 0, h = 0) {
        super(x, y, w, h);
        this.handle = handle;
        this.t = "bind";
    }
    read(x = 0, y = 0, w = this.width, h = this.height) {
        return (0, index_1.transferImageData)(this.handle, x, y, w, h);
    }
}
exports.ImgRefBind = ImgRefBind;
/**
 * Represents an image in js memory
 */
class ImgRefData extends ImgRef {
    constructor(buf, x = 0, y = 0) {
        super(x, y, buf.width, buf.height);
        this.buf = buf;
        this.t = "data";
    }
    read(x = 0, y = 0, w = this.width, h = this.height) {
        if (x == 0 && y == 0 && w == this.width && h == this.height) {
            return this.buf;
        }
        var r = new ImageData(w, h);
        for (var b = y; b < y + h; b++) {
            for (var a = x; a < x + w; a++) {
                var i1 = (a - x) * 4 + (b - y) * w * 4;
                var i2 = a * 4 + b * 4 * this.buf.width;
                r.data[i1] = this.buf.data[i2];
                r.data[i1 + 1] = this.buf.data[i2 + 1];
                r.data[i1 + 2] = this.buf.data[i2 + 2];
                r.data[i1 + 3] = this.buf.data[i2 + 3];
            }
        }
        return r;
    }
}
exports.ImgRefData = ImgRefData;


/***/ }),

/***/ "./src/base/index.ts":
/*!***************************!*\
  !*** ./src/base/index.ts ***!
  \***************************/
/***/ (function(__unused_webpack_module, exports, __nested_webpack_require_33868__) {


var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __exportStar = (this && this.__exportStar) || function(m, exports) {
    for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.imageDataFromUrl = exports.ImageDataSet = exports.findSubbuffer = exports.simpleCompare = exports.findSubimage = exports.webpackImages = exports.NodePolyfill = exports.ImageData = exports.Rect = exports.PasteInput = exports.ImageDetect = void 0;
__nested_webpack_require_33868__(/*! ./declarations */ "./src/base/declarations.ts");
exports.ImageDetect = __importStar(__nested_webpack_require_33868__(/*! ./imagedetect */ "./src/base/imagedetect.ts"));
exports.PasteInput = __importStar(__nested_webpack_require_33868__(/*! ./pasteinput */ "./src/base/pasteinput.ts"));
var rect_1 = __nested_webpack_require_33868__(/*! ./rect */ "./src/base/rect.ts");
Object.defineProperty(exports, "Rect", ({ enumerable: true, get: function () { return __importDefault(rect_1).default; } }));
var imagedata_extensions_1 = __nested_webpack_require_33868__(/*! ./imagedata-extensions */ "./src/base/imagedata-extensions.ts");
Object.defineProperty(exports, "ImageData", ({ enumerable: true, get: function () { return imagedata_extensions_1.ImageData; } }));
exports.NodePolyfill = __importStar(__nested_webpack_require_33868__(/*! ./nodepolyfill */ "./src/base/nodepolyfill.ts"));
__exportStar(__nested_webpack_require_33868__(/*! ./imgref */ "./src/base/imgref.ts"), exports);
__exportStar(__nested_webpack_require_33868__(/*! ./wrapper */ "./src/base/wrapper.ts"), exports);
var imagedetect_1 = __nested_webpack_require_33868__(/*! ./imagedetect */ "./src/base/imagedetect.ts");
Object.defineProperty(exports, "webpackImages", ({ enumerable: true, get: function () { return imagedetect_1.webpackImages; } }));
Object.defineProperty(exports, "findSubimage", ({ enumerable: true, get: function () { return imagedetect_1.findSubimage; } }));
Object.defineProperty(exports, "simpleCompare", ({ enumerable: true, get: function () { return imagedetect_1.simpleCompare; } }));
Object.defineProperty(exports, "findSubbuffer", ({ enumerable: true, get: function () { return imagedetect_1.findSubbuffer; } }));
Object.defineProperty(exports, "ImageDataSet", ({ enumerable: true, get: function () { return imagedetect_1.ImageDataSet; } }));
Object.defineProperty(exports, "imageDataFromUrl", ({ enumerable: true, get: function () { return imagedetect_1.imageDataFromUrl; } }));


/***/ }),

/***/ "./src/base/nodepolyfill.ts":
/*!**********************************!*\
  !*** ./src/base/nodepolyfill.ts ***!
  \**********************************/
/***/ ((__unused_webpack_module, exports, __nested_webpack_require_37680__) => {


//nodejs and electron polyfills for web api's
//commented out type info as that breaks webpack with optional dependencies
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.imageDataFromBuffer = exports.imageDataFromBase64 = exports.imageDataToFileBytes = exports.createCanvas = exports.imageDataToDrawable = exports.requireElectronCommon = exports.requireNodeCanvas = exports.requireSharp = exports.polyfillRequire = void 0;
const index_1 = __nested_webpack_require_37680__(/*! ./index */ "./src/base/index.ts");
const imagedetect_1 = __nested_webpack_require_37680__(/*! ./imagedetect */ "./src/base/imagedetect.ts");
var requirefunction = null;
/**
 * Call this function to let the libs require extra dependencies on nodejs in order
 * to polyfill some browser api's (mostly image compression/decompression)
 * `NodePolifill.polyfillRequire(require);` should solve most cases
 */
function polyfillRequire(requirefn) {
    requirefunction = requirefn;
}
exports.polyfillRequire = polyfillRequire;
function requireSharp() {
    try {
        if (requirefunction) {
            return requirefunction("sharp");
        }
        else {
            return __nested_webpack_require_37680__(/* webpackIgnore: true */ /*! sharp */ "sharp"); // as typeof import("sharp");
        }
    }
    catch (e) { }
    return null;
}
exports.requireSharp = requireSharp;
function requireNodeCanvas() {
    //attempt to require sharp first, after loading canvas the module sharp fails to load
    requireSharp();
    try {
        if (requirefunction) {
            return requirefunction("canvas");
        }
        else {
            return __nested_webpack_require_37680__(/* webpackIgnore: true */ /*! canvas */ "canvas"); // as typeof import("sharp");
        }
    }
    catch (e) { }
    return null;
}
exports.requireNodeCanvas = requireNodeCanvas;
function requireElectronCommon() {
    try {
        if (requirefunction) {
            return requirefunction("electron/common");
        }
        else {
            return __nested_webpack_require_37680__(/* webpackIgnore: true */ /*! electron/common */ "electron/common");
        }
    }
    catch (e) { }
    return null;
}
exports.requireElectronCommon = requireElectronCommon;
function imageDataToDrawable(buf) {
    let nodecnv = requireNodeCanvas();
    if (!nodecnv) {
        throw new Error("couldn't find built-in canvas or the module 'canvas'");
    }
    return new nodecnv.ImageData(buf.data, buf.width, buf.height);
}
exports.imageDataToDrawable = imageDataToDrawable;
function createCanvas(w, h) {
    let nodecnv = requireNodeCanvas();
    if (!nodecnv) {
        throw new Error("couldn't find built-in canvas or the module 'canvas'");
    }
    return nodecnv.createCanvas(w, h);
}
exports.createCanvas = createCanvas;
function flipBGRAtoRGBA(data) {
    for (let i = 0; i < data.length; i += 4) {
        let tmp = data[i + 2];
        data[i + 2] = data[i + 0];
        data[i + 0] = tmp;
    }
}
async function imageDataToFileBytes(buf, format, quality) {
    //use the electron API if we're in electron
    var electronCommon;
    var sharp;
    if (electronCommon = requireElectronCommon()) {
        let nativeImage = electronCommon.nativeImage;
        //need to copy the buffer in order to flip it without destroying the original
        let bufcpy = Buffer.from(buf.data.slice(buf.data.byteOffset, buf.data.byteLength));
        flipBGRAtoRGBA(bufcpy);
        let nativeimg = nativeImage.createFromBitmap(bufcpy, { width: buf.width, height: buf.height });
        return nativeimg.toPNG();
    }
    else if (sharp = requireSharp()) {
        let img = sharp(Buffer.from(buf.data.buffer), { raw: { width: buf.width, height: buf.height, channels: 4 } });
        if (format == "image/png") {
            img.png();
        }
        else if (format == "image/webp") {
            var opts = { quality: 80 };
            if (typeof quality == "number") {
                opts.quality = quality * 100;
            }
            img.webp(opts);
        }
        else {
            throw new Error("unknown image format: " + format);
        }
        return await img.toBuffer({ resolveWithObject: false }).buffer;
    }
    throw new Error("coulnd't find build-in image compression methods or the module 'electron/common' or 'sharp'");
}
exports.imageDataToFileBytes = imageDataToFileBytes;
function imageDataFromBase64(base64) {
    return imageDataFromBuffer(Buffer.from(base64, "base64"));
}
exports.imageDataFromBase64 = imageDataFromBase64;
async function imageDataFromBuffer(buffer) {
    (0, imagedetect_1.clearPngColorspace)(buffer);
    //use the electron API if we're in electron
    var electronCommon;
    var nodecnv;
    if (electronCommon = requireElectronCommon()) {
        let nativeImage = electronCommon.nativeImage;
        let img = nativeImage.createFromBuffer(buffer);
        let pixels = img.toBitmap();
        let size = img.getSize();
        let pixbuf = new Uint8ClampedArray(pixels.buffer, pixels.byteOffset, pixels.byteLength);
        flipBGRAtoRGBA(pixbuf);
        return new index_1.ImageData(pixbuf, size.width, size.height);
    }
    else if (nodecnv = requireNodeCanvas()) {
        return new Promise((done, err) => {
            let img = new nodecnv.Image();
            img.onerror = err;
            img.onload = () => {
                var cnv = nodecnv.createCanvas(img.naturalWidth, img.naturalHeight);
                var ctx = cnv.getContext("2d");
                ctx.drawImage(img, 0, 0);
                var data = ctx.getImageData(0, 0, img.naturalWidth, img.naturalHeight);
                //use our own class
                done(new index_1.ImageData(data.data, data.width, data.height));
            };
            img.src = Buffer.from(buffer.buffer, buffer.byteOffset, buffer.byteLength);
        });
    }
    throw new Error("couldn't find built-in canvas, module 'electron/common' or the module 'canvas'");
}
exports.imageDataFromBuffer = imageDataFromBuffer;


/***/ }),

/***/ "./src/base/pasteinput.ts":
/*!********************************!*\
  !*** ./src/base/pasteinput.ts ***!
  \********************************/
/***/ (function(__unused_webpack_module, exports, __nested_webpack_require_43872__) {


var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.fileDialog = exports.start = exports.startDragNDrop = exports.triggerPaste = exports.unlisten = exports.listen = exports.lastref = void 0;
const index_1 = __nested_webpack_require_43872__(/*! ./index */ "./src/base/index.ts");
const ImageDetect = __importStar(__nested_webpack_require_43872__(/*! ./imagedetect */ "./src/base/imagedetect.ts"));
var listeners = [];
var started = false;
var dndStarted = false;
var pasting = false;
exports.lastref = null;
function listen(func, errorfunc, dragndrop) {
    listeners.push({ cb: func, error: errorfunc });
    if (!started) {
        start();
    }
    if (dragndrop && !dndStarted) {
        startDragNDrop();
    }
}
exports.listen = listen;
function unlisten(func) {
    let i = listeners.findIndex(c => c.cb == func);
    if (i != -1) {
        listeners.splice(i, 1);
    }
}
exports.unlisten = unlisten;
/**
 * currently used in multiple document situations (iframe), might be removed in the future
 */
function triggerPaste(img) {
    exports.lastref = img;
    for (var a in listeners) {
        listeners[a].cb(exports.lastref);
    }
}
exports.triggerPaste = triggerPaste;
function pasted(img) {
    pasting = false;
    triggerPaste(new index_1.ImgRefCtx(img));
}
function error(error, mes) {
    var _a, _b;
    pasting = false;
    for (var a in listeners) {
        (_b = (_a = listeners[a]).error) === null || _b === void 0 ? void 0 : _b.call(_a, mes, error);
    }
}
function startDragNDrop() {
    var getitem = function (items) {
        var foundimage = "";
        for (var a = 0; a < items.length; a++) {
            var item = items[a];
            var m = item.type.match(/^image\/(\w+)$/);
            if (m) {
                if (m[1] == "png") {
                    return item;
                }
                else {
                    foundimage = m[1];
                }
            }
        }
        if (foundimage) {
            error("notpng", "The image you uploaded is not a .png image. Other image type have compression noise and can't be used for image detection.");
        }
        return null;
    };
    window.addEventListener("dragover", function (e) {
        e.preventDefault();
    });
    window.addEventListener("drop", function (e) {
        if (!e.dataTransfer) {
            return;
        }
        var item = getitem(e.dataTransfer.items);
        e.preventDefault();
        if (!item) {
            return;
        }
        fromFile(item.getAsFile());
    });
}
exports.startDragNDrop = startDragNDrop;
function start() {
    if (started) {
        return;
    }
    started = true;
    //determine if we have a clipboard api
    //try{a=new Event("clipboard"); a="clipboardData" in a;}
    //catch(e){a=false;}
    var ischrome = !!navigator.userAgent.match(/Chrome/) && !navigator.userAgent.match(/Edge/);
    //old method breaks after chrome 41, revert to good old user agent sniffing
    //nvm, internet explorer (edge) decided that it wants to be chrome, however fails at delivering
    //turns out this one is interesting, edge is a hybrid between the paste api's
    var apipasted = function (e) {
        if (!e.clipboardData) {
            return;
        }
        for (var a = 0; a < e.clipboardData.items.length; a++) { //loop all data types
            if (e.clipboardData.items[a].type.indexOf("image") != -1) {
                var file = e.clipboardData.items[a].getAsFile();
                if (file) {
                    var img = new Image();
                    img.src = (window.URL || window.webkitURL).createObjectURL(file);
                    if (img.width > 0) {
                        pasted(img);
                    }
                    else {
                        img.onload = function () { pasted(img); };
                    }
                }
            }
        }
    };
    if (ischrome) {
        document.addEventListener("paste", apipasted);
    }
    else {
        var catcher = document.createElement("div");
        catcher.setAttribute("contenteditable", "");
        catcher.className = "forcehidden"; //retarded ie safety/bug, cant apply styles using js//TODO i don't even know what's going on
        catcher.onpaste = function (e) {
            if (e.clipboardData && e.clipboardData.items) {
                apipasted(e);
                return;
            }
            setTimeout(function () {
                var b = catcher.children[0];
                if (!b || b.tagName != "IMG") {
                    return;
                }
                var img = new Image();
                img.src = b.src;
                var a = img.src.match(/^data:([\w\/]+);/);
                if (img.width > 0) {
                    pasted(img);
                }
                else {
                    img.onload = function () { pasted(img); };
                }
                catcher.innerHTML = "";
            }, 1);
        };
        document.body.appendChild(catcher);
    }
    //detect if ctrl-v is pressed and focus catcher if needed
    document.addEventListener("keydown", function (e) {
        if (e.target.tagName == "INPUT") {
            return;
        }
        if (e.keyCode != "V".charCodeAt(0) || !e.ctrlKey) {
            return;
        }
        pasting = true;
        setTimeout(function () {
            if (pasting) {
                error("noimg", "You pressed Ctrl+V, but no image was pasted by your browser, make sure your clipboard contains an image, and not a link to an image.");
            }
        }, 1000);
        if (catcher) {
            catcher.focus();
        }
    });
}
exports.start = start;
function fileDialog() {
    var fileinput = document.createElement("input");
    fileinput.type = "file";
    fileinput.accept = "image/png";
    fileinput.onchange = function () { if (fileinput.files && fileinput.files[0]) {
        fromFile(fileinput.files[0]);
    } };
    fileinput.click();
    return fileinput;
}
exports.fileDialog = fileDialog;
function fromFile(file) {
    if (!file) {
        return;
    }
    var reader = new FileReader();
    reader.onload = function () {
        var bytearray = new Uint8Array(reader.result);
        if (ImageDetect.isPngBuffer(bytearray)) {
            ImageDetect.clearPngColorspace(bytearray);
        }
        var blob = new Blob([bytearray], { type: "image/png" });
        var img = new Image();
        var bloburl = URL.createObjectURL(blob);
        img.onerror = () => {
            URL.revokeObjectURL(bloburl);
            error("invalidfile", "The file you uploaded could not be opened as an image.");
        };
        img.src = bloburl;
        if (img.width > 0) {
            pasted(img);
            URL.revokeObjectURL(bloburl);
        }
        else {
            img.onload = function () {
                pasted(img);
                URL.revokeObjectURL(bloburl);
            };
        }
    };
    reader.readAsArrayBuffer(file);
}


/***/ }),

/***/ "./src/base/rect.ts":
/*!**************************!*\
  !*** ./src/base/rect.ts ***!
  \**************************/
/***/ ((__unused_webpack_module, exports) => {


//util class for rectangle maths
//TODO shit this sucks can we remove it again?
//more of a shorthand to get {x,y,width,height} than a class
//kinda starting to like it again
//TODO remove rant
Object.defineProperty(exports, "__esModule", ({ value: true }));
;
/**
 * Simple rectangle class with some util functions
 */
class Rect {
    constructor(x, y, w, h) {
        this.x = x;
        this.y = y;
        this.width = w;
        this.height = h;
    }
    static fromArgs(...args) {
        if (typeof args[0] == "object") {
            return new Rect(args[0].x, args[0].y, args[0].width, args[0].height);
        }
        else if (typeof args[0] == "number" && args.length >= 4) {
            return new Rect(args[0], args[1], args[2], args[3]);
        }
        else {
            throw new Error("invalid rect args");
        }
    }
    /**
     * Resizes this Rect to include the full size of a given second rectangle
     */
    union(r2) {
        var x = Math.min(this.x, r2.x);
        var y = Math.min(this.y, r2.y);
        this.width = Math.max(this.x + this.width, r2.x + r2.width) - x;
        this.height = Math.max(this.y + this.height, r2.y + r2.height) - y;
        this.x = x;
        this.y = y;
        return this;
    }
    /**
     * Resizes this Rect to include a given point
     */
    includePoint(x, y) {
        this.union(new Rect(x, y, 0, 0));
    }
    /**
     * Grows the rectangle with the given dimensions
     */
    inflate(w, h) {
        this.x -= w;
        this.y -= h;
        this.width += 2 * w;
        this.height += 2 * h;
    }
    /**
     * Resizes this Rect to the area that overlaps a given Rect
     * width and height will be set to 0 if the intersection does not exist
     */
    intersect(r2) {
        if (this.x < r2.x) {
            this.width -= r2.x - this.x;
            this.x = r2.x;
        }
        if (this.y < r2.y) {
            this.height -= r2.y - this.y;
            this.y = r2.y;
        }
        this.width = Math.min(this.x + this.width, r2.x + r2.width) - this.x;
        this.height = Math.min(this.y + this.height, r2.y + r2.height) - this.y;
        if (this.width <= 0 || this.height <= 0) {
            this.width = 0;
            this.height = 0;
        }
    }
    /**
     * Returns wether this Rect has at least one pixel overlap with a given Rect
     */
    overlaps(r2) {
        return this.x < r2.x + r2.width && this.x + this.width > r2.x && this.y < r2.y + r2.height && this.y + this.height > r2.y;
    }
    /**
     * Returns wether a given Rect fits completely inside this Rect
     * @param r2
     */
    contains(r2) {
        return this.x <= r2.x && this.x + this.width >= r2.x + r2.width && this.y <= r2.y && this.y + this.height >= r2.y + r2.height;
    }
    /**
     * Returns wether a given point lies inside this Rect
     */
    containsPoint(x, y) {
        return this.x <= x && this.x + this.width > x && this.y <= y && this.y + this.height > y;
    }
}
exports["default"] = Rect;


/***/ }),

/***/ "./src/base/wrapper.ts":
/*!*****************************!*\
  !*** ./src/base/wrapper.ts ***!
  \*****************************/
/***/ (function(__unused_webpack_module, exports, __nested_webpack_require_55275__) {


var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.captureStream = exports.captureMultiAsync = exports.captureAsync = exports.ImageStreamReader = exports.once = exports.removeListener = exports.on = exports.addResizeElement = exports.getMousePosition = exports.hasAlt1Version = exports.resetEnvironment = exports.identifyApp = exports.unmixColor = exports.mixColor = exports.encodeImageString = exports.decodeImageString = exports.transferImageData = exports.captureHoldFullRs = exports.captureHoldScreen = exports.captureHold = exports.capture = exports.getdisplaybounds = exports.requireAlt1 = exports.openbrowser = exports.skinName = exports.hasAlt1 = exports.newestversion = exports.Alt1Error = exports.NoAlt1Error = void 0;
const rect_1 = __importDefault(__nested_webpack_require_55275__(/*! ./rect */ "./src/base/rect.ts"));
const imgref_1 = __nested_webpack_require_55275__(/*! ./imgref */ "./src/base/imgref.ts");
const imagedata_extensions_1 = __nested_webpack_require_55275__(/*! ./imagedata-extensions */ "./src/base/imagedata-extensions.ts");
__nested_webpack_require_55275__(/*! ./alt1api */ "./src/base/alt1api.ts");
/**
 * Thrown when a method is called that can not be used outside of Alt1
 */
class NoAlt1Error extends Error {
    constructor() {
        super();
        this.message = "This method can not be ran outside of Alt1";
    }
}
exports.NoAlt1Error = NoAlt1Error;
;
/**
 * Thrown when the Alt1 API returns an invalid result
 * Errors of a different type are throw when internal Alt1 errors occur
 */
class Alt1Error extends Error {
}
exports.Alt1Error = Alt1Error;
/**
 * The latest Alt1 version
 */
exports.newestversion = "1.5.5";
/**
 * Whether the Alt1 API is available
 */
exports.hasAlt1 = (typeof alt1 != "undefined");
/**
 * The name of the Alt1 interface skin. (Always "default" if running in a browser)
 */
exports.skinName = exports.hasAlt1 ? alt1.skinName : "default";
/**
 * Max number of bytes that can be sent by alt1 in one function
 * Not completely sure why this number is different than window.alt1.maxtranfer
 */
var maxtransfer = 4000000;
/**
 * Open a link in the default browser
 * @deprecated use window.open instead
 */
function openbrowser(url) {
    if (exports.hasAlt1) {
        alt1.openBrowser(url);
    }
    else {
        window.open(url, '_blank');
    }
}
exports.openbrowser = openbrowser;
/**
 * Throw if Alt1 API is not available
 */
function requireAlt1() {
    if (!exports.hasAlt1) {
        throw new NoAlt1Error();
    }
}
exports.requireAlt1 = requireAlt1;
/**
 * Returns an object with a rectangle that spans all screens
 */
function getdisplaybounds() {
    if (!exports.hasAlt1) {
        return false;
    }
    return new rect_1.default(alt1.screenX, alt1.screenY, alt1.screenWidth, alt1.screenHeight);
}
exports.getdisplaybounds = getdisplaybounds;
/**
 * gets an imagebuffer with pixel data about the requested region
 */
function capture(...args) {
    //TODO change null return on error into throw instead (x3)
    if (!exports.hasAlt1) {
        throw new NoAlt1Error();
    }
    var rect = rect_1.default.fromArgs(...args);
    if (alt1.capture) {
        return new imagedata_extensions_1.ImageData(alt1.capture(rect.x, rect.y, rect.width, rect.height), rect.width, rect.height);
    }
    var buf = new imagedata_extensions_1.ImageData(rect.width, rect.height);
    if (rect.width * rect.height * 4 <= maxtransfer) {
        var data = alt1.getRegion(rect.x, rect.y, rect.width, rect.height);
        if (!data) {
            return null;
        }
        decodeImageString(data, buf, 0, 0, rect.width, rect.height);
    }
    else {
        //split up the request to to exceed the single transfer limit (for now)
        var x1 = rect.x;
        var ref = alt1.bindRegion(rect.x, rect.y, rect.width, rect.height);
        if (ref <= 0) {
            return null;
        }
        while (x1 < rect.x + rect.width) {
            var x2 = Math.min(rect.x + rect.width, Math.floor(x1 + (maxtransfer / 4 / rect.height)));
            var data = alt1.bindGetRegion(ref, x1, rect.y, x2 - x1, rect.height);
            if (!data) {
                return null;
            }
            decodeImageString(data, buf, x1 - rect.x, 0, x2 - x1, rect.height);
            x1 = x2;
        }
    }
    return buf;
}
exports.capture = capture;
/**
 * Makes alt1 bind an area of the rs client in memory without sending it to the js client
 * returns an imgref object which can be used to get pixel data using the imgreftobuf function
 * currently only one bind can exist per app and the ref in (v) will always be 1
 */
function captureHold(x, y, w, h) {
    x = Math.round(x);
    y = Math.round(y);
    w = Math.round(w);
    h = Math.round(h);
    requireAlt1();
    var r = alt1.bindRegion(x, y, w, h);
    if (r <= 0) {
        throw new Alt1Error("capturehold failed");
    }
    return new imgref_1.ImgRefBind(r, x, y, w, h);
}
exports.captureHold = captureHold;
/**
 * Same as captureHoldRegion, but captures the screen instead of the rs client. it also uses screen coordinates instead and can capture outside of the rs client
 */
function captureHoldScreen(x, y, w, h) {
    x = Math.round(x);
    y = Math.round(y);
    w = Math.round(w);
    h = Math.round(h);
    requireAlt1();
    var r = alt1.bindScreenRegion(x, y, w, h);
    if (r <= 0) {
        return false;
    }
    return new imgref_1.ImgRefBind(r, x, y, w, h);
}
exports.captureHoldScreen = captureHoldScreen;
/**
 * bind the full rs window
 */
function captureHoldFullRs() {
    return captureHold(0, 0, alt1.rsWidth, alt1.rsHeight);
}
exports.captureHoldFullRs = captureHoldFullRs;
/**
 * returns a subregion from a bound image
 * used internally in imgreftobuf if imgref is a bound image
 * @deprecated This should be handled internall by the imgrefbind.toData method
 */
function transferImageData(handle, x, y, w, h) {
    x = Math.round(x);
    y = Math.round(y);
    w = Math.round(w);
    h = Math.round(h);
    requireAlt1();
    if (alt1.bindGetRegionBuffer) {
        return new imagedata_extensions_1.ImageData(alt1.bindGetRegionBuffer(handle, x, y, w, h), w, h);
    }
    var r = new imagedata_extensions_1.ImageData(w, h);
    var x1 = x;
    while (true) { //split up the request to to exceed the single transfer limit (for now)
        var x2 = Math.min(x + w, Math.floor(x1 + (maxtransfer / 4 / h)));
        var a = alt1.bindGetRegion(handle, x1, y, x2 - x1, h);
        if (!a) {
            throw new Alt1Error();
        }
        decodeImageString(a, r, x1 - x, 0, x2 - x1, h);
        x1 = x2;
        if (x1 == x + w) {
            break;
        }
        ;
    }
    return r;
}
exports.transferImageData = transferImageData;
/**
 * decodes a returned string from alt1 to an imagebuffer. You generally never have to do this yourself
 */
function decodeImageString(imagestring, target, x, y, w, h) {
    var bin = atob(imagestring);
    var bytes = target.data;
    w |= 0;
    h |= 0;
    var offset = 4 * x + 4 * y * target.width;
    var target_width = target.width | 0;
    for (var a = 0; a < w; a++) {
        for (var b = 0; b < h; b++) {
            var i1 = (offset + (a * 4 | 0) + (b * target_width * 4 | 0)) | 0;
            var i2 = ((a * 4 | 0) + (b * 4 * w | 0)) | 0;
            bytes[i1 + 0 | 0] = bin.charCodeAt(i2 + 2 | 0); //fix weird red/blue swap in c#
            bytes[i1 + 1 | 0] = bin.charCodeAt(i2 + 1 | 0);
            bytes[i1 + 2 | 0] = bin.charCodeAt(i2 + 0 | 0);
            bytes[i1 + 3 | 0] = bin.charCodeAt(i2 + 3 | 0);
        }
    }
    return target;
}
exports.decodeImageString = decodeImageString;
/**
 * encodes an imagebuffer to a string
 */
function encodeImageString(buf, sx = 0, sy = 0, sw = buf.width, sh = buf.height) {
    var raw = "";
    for (var y = sy; y < sy + sh; y++) {
        for (var x = sx; x < sx + sw; x++) {
            var i = 4 * x + 4 * buf.width * y | 0;
            raw += String.fromCharCode(buf.data[i + 2 | 0]);
            raw += String.fromCharCode(buf.data[i + 1 | 0]);
            raw += String.fromCharCode(buf.data[i + 0 | 0]);
            raw += String.fromCharCode(buf.data[i + 3 | 0]);
        }
    }
    return btoa(raw);
}
exports.encodeImageString = encodeImageString;
/**
 * mixes the given color into a single int. This format is used by alt1
 */
function mixColor(r, g, b, a = 255) {
    return (b << 0) + (g << 8) + (r << 16) + (a << 24);
}
exports.mixColor = mixColor;
function unmixColor(col) {
    var r = (col >> 16) & 0xff;
    var g = (col >> 8) & 0xff;
    var b = (col >> 0) & 0xff;
    return [r, g, b];
}
exports.unmixColor = unmixColor;
function identifyApp(url) {
    if (exports.hasAlt1) {
        alt1.identifyAppUrl(url);
    }
}
exports.identifyApp = identifyApp;
function resetEnvironment() {
    exports.hasAlt1 = (typeof alt1 != "undefined");
    exports.skinName = exports.hasAlt1 ? alt1.skinName : "default";
}
exports.resetEnvironment = resetEnvironment;
function convertAlt1Version(str) {
    var a = str.match(/^(\d+)\.(\d+)\.(\d+)$/);
    if (!a) {
        throw new RangeError("Invalid version string");
    }
    return (+a[1]) * 1000 * 1000 + (+a[2]) * 1000 + (+a[3]) * 1;
}
var cachedVersionInt = -1;
/**
 * checks if alt1 is running and at least the given version. versionstr should be a string with the version eg: 1.3.2
 * @param versionstr
 */
function hasAlt1Version(versionstr) {
    if (!exports.hasAlt1) {
        return false;
    }
    if (cachedVersionInt == -1) {
        cachedVersionInt = alt1.versionint;
    }
    return cachedVersionInt >= convertAlt1Version(versionstr);
}
exports.hasAlt1Version = hasAlt1Version;
/**
 * Gets the current cursor position in the game, returns null if the rs window is not active (alt1.rsActive)
 */
function getMousePosition() {
    var pos = alt1.mousePosition;
    if (pos == -1) {
        return null;
    }
    return { x: pos >>> 16, y: pos & 0xFFFF };
}
exports.getMousePosition = getMousePosition;
/**
 * Registers a given HTML element as a frame border, when this element is dragged by the user the Alt1 frame will resize accordingly
 * Use the direction arguements to make a given direction stick to the mouse. eg. Only set left to true to make the element behave as the left border
 * Or set all to true to move the whole window. Not all combinations are permitted
 */
function addResizeElement(el, left, top, right, bot) {
    if (!exports.hasAlt1 || !alt1.userResize) {
        return;
    }
    el.addEventListener("mousedown", function (e) {
        alt1.userResize(left, top, right, bot);
        e.preventDefault();
    });
}
exports.addResizeElement = addResizeElement;
/**
 * Add an event listener
 */
function on(type, listener) {
    if (!exports.hasAlt1) {
        return;
    }
    if (!alt1.events) {
        alt1.events = {};
    }
    if (!alt1.events[type]) {
        alt1.events[type] = [];
    }
    alt1.events[type].push(listener);
}
exports.on = on;
/**
 * Removes an event listener
 */
function removeListener(type, listener) {
    var elist = exports.hasAlt1 && alt1.events && alt1.events[type];
    if (!elist) {
        return;
    }
    var i = elist.indexOf(listener);
    if (i == -1) {
        return;
    }
    elist.splice(i, 1);
}
exports.removeListener = removeListener;
/**
 * Listens for the event to fire once and then stops listening
 * @param event
 * @param cb
 */
function once(type, listener) {
    var fn = (e) => {
        removeListener(type, fn);
        listener(e);
    };
    on(type, fn);
}
exports.once = once;
;
/**
 * Used to read a set of images from a binary stream returned by the Alt1 API
 */
class ImageStreamReader {
    constructor(reader, ...args) {
        this.framebuffer = null;
        this.pos = 0;
        this.reading = false;
        this.closed = false;
        //paused state
        this.pausedindex = -1;
        this.pausedbuffer = null;
        this.streamreader = reader;
        if (args[0] instanceof imagedata_extensions_1.ImageData) {
            this.setFrameBuffer(args[0]);
        }
        else if (typeof args[0] == "number") {
            this.setFrameBuffer(new imagedata_extensions_1.ImageData(args[0], args[1]));
        }
    }
    /**
     *
     */
    setFrameBuffer(buffer) {
        if (this.reading) {
            throw new Error("can't change framebuffer while reading");
        }
        this.framebuffer = buffer;
    }
    /**
     * Closes the underlying stream and ends reading
     */
    close() {
        this.streamreader.cancel();
    }
    /**
     * Reads a single image from the stream
     */
    async nextImage() {
        if (this.reading) {
            throw new Error("already reading from this stream");
        }
        if (!this.framebuffer) {
            throw new Error("framebuffer not set");
        }
        this.reading = true;
        var synctime = -Date.now();
        var starttime = Date.now();
        var r = false;
        while (!r) {
            if (this.pausedindex != -1 && this.pausedbuffer) {
                r = this.readChunk(this.pausedindex, this.framebuffer.data, this.pausedbuffer);
            }
            else {
                synctime += Date.now();
                var res = await this.streamreader.read();
                synctime -= Date.now();
                if (res.done) {
                    throw new Error("Stream closed while reading");
                }
                var data = res.value;
                r = this.readChunk(0, this.framebuffer.data, data);
            }
        }
        synctime += Date.now();
        //console.log("Decoded async image, " + this.framebuffer.width + "x" + this.framebuffer.height + " time: " + (Date.now() - starttime) + "ms (" + synctime + "ms main thread)");
        this.reading = false;
        return this.framebuffer;
    }
    readChunk(i, framedata, buffer) {
        //very hot code, explicit int32 casting with |0 speeds it up by ~ x2
        i = i | 0;
        var framesize = framedata.length | 0;
        var pos = this.pos;
        var datalen = buffer.length | 0;
        //var data32 = new Float64Array(buffer.buffer);
        //var framedata32 = new Float64Array(framedata.buffer);
        //fix possible buffer misalignment
        //align to 16 for extra loop unrolling
        while (i < datalen) {
            //slow loop, fix alignment and other issues
            while (i < datalen && pos < framesize && (pos % 16 != 0 || !((i + 16 | 0) <= datalen && (pos + 16 | 0) <= framesize))) {
                var rel = pos;
                if (pos % 4 == 0) {
                    rel = rel + 2 | 0;
                }
                if (pos % 4 == 2) {
                    rel = rel - 2 | 0;
                }
                framedata[rel | 0] = buffer[i | 0];
                i = i + 1 | 0;
                pos = pos + 1 | 0;
            }
            //fast unrolled loop for large chunks i wish js had some sort of memcpy
            if (pos % 16 == 0) {
                while ((i + 16 | 0) <= datalen && (pos + 16 | 0) <= framesize) {
                    framedata[pos + 0 | 0] = buffer[i + 2 | 0];
                    framedata[pos + 1 | 0] = buffer[i + 1 | 0];
                    framedata[pos + 2 | 0] = buffer[i + 0 | 0];
                    framedata[pos + 3 | 0] = buffer[i + 3 | 0];
                    framedata[pos + 4 | 0] = buffer[i + 6 | 0];
                    framedata[pos + 5 | 0] = buffer[i + 5 | 0];
                    framedata[pos + 6 | 0] = buffer[i + 4 | 0];
                    framedata[pos + 7 | 0] = buffer[i + 7 | 0];
                    framedata[pos + 8 | 0] = buffer[i + 10 | 0];
                    framedata[pos + 9 | 0] = buffer[i + 9 | 0];
                    framedata[pos + 10 | 0] = buffer[i + 8 | 0];
                    framedata[pos + 11 | 0] = buffer[i + 11 | 0];
                    framedata[pos + 12 | 0] = buffer[i + 14 | 0];
                    framedata[pos + 13 | 0] = buffer[i + 13 | 0];
                    framedata[pos + 14 | 0] = buffer[i + 12 | 0];
                    framedata[pos + 15 | 0] = buffer[i + 15 | 0];
                    //could speed it up another x2 but wouldn't be able to swap r/b swap and possible alignment issues
                    //framedata32[pos / 8 + 0 | 0] = data32[i / 8 + 0 | 0];
                    //framedata32[pos / 8 + 1 | 0] = data32[i / 8 + 1 | 0];
                    //framedata32[pos / 4 + 2 | 0] = data32[i / 4 + 2 | 0];
                    //framedata32[pos / 4 + 3 | 0] = data32[i / 4 + 3 | 0];
                    pos = pos + 16 | 0;
                    i = i + 16 | 0;
                }
            }
            if (pos >= framesize) {
                this.pausedbuffer = null;
                this.pausedindex = -1;
                this.pos = 0;
                if (i != buffer.length - 1) {
                    this.pausedbuffer = buffer;
                    this.pausedindex = i;
                }
                return true;
            }
        }
        this.pos = pos;
        this.pausedbuffer = null;
        this.pausedindex = -1;
        return false;
    }
}
exports.ImageStreamReader = ImageStreamReader;
/**
 * Asynchronously captures a section of the game screen
 */
async function captureAsync(...args) {
    requireAlt1();
    var rect = rect_1.default.fromArgs(...args);
    if (alt1.captureAsync) {
        let img = await alt1.captureAsync(rect.x, rect.y, rect.width, rect.height);
        return new imagedata_extensions_1.ImageData(img, rect.width, rect.height);
    }
    if (!hasAlt1Version("1.4.6")) {
        return capture(rect.x, rect.y, rect.width, rect.height);
    }
    var url = "https://alt1api/pixel/getregion/" + encodeURIComponent(JSON.stringify(Object.assign(Object.assign({}, rect), { format: "raw", quality: 1 })));
    var res = await fetch(url);
    var imgreader = new ImageStreamReader(res.body.getReader(), rect.width, rect.height);
    return imgreader.nextImage();
}
exports.captureAsync = captureAsync;
/**
 * Asynchronously captures multple area's. This method captures the images in the same render frame if possible
 * @param areas
 */
async function captureMultiAsync(areas) {
    requireAlt1();
    var r = {};
    if (alt1.captureMultiAsync) {
        let bufs = await alt1.captureMultiAsync(areas);
        for (let a in areas) {
            if (!bufs[a]) {
                r[a] = null;
            }
            r[a] = new imagedata_extensions_1.ImageData(bufs[a], areas[a].width, areas[a].height);
        }
        return r;
    }
    var capts = [];
    var captids = [];
    for (var id in areas) {
        if (areas[id]) {
            capts.push(areas[id]);
            captids.push(id);
        }
        else {
            r[id] = null;
        }
    }
    if (capts.length == 0) {
        return r;
    }
    if (!hasAlt1Version("1.5.1")) {
        var proms = [];
        for (var a = 0; a < capts.length; a++) {
            proms.push(captureAsync(capts[a]));
        }
        var results = await Promise.all(proms);
        for (var a = 0; a < capts.length; a++) {
            r[captids[a]] = results[a];
        }
    }
    else {
        var res = await fetch("https://alt1api/pixel/getregionmulti/" + encodeURIComponent(JSON.stringify({ areas: capts, format: "raw", quality: 1 })));
        var imgreader = new ImageStreamReader(res.body.getReader());
        for (var a = 0; a < capts.length; a++) {
            var capt = capts[a];
            imgreader.setFrameBuffer(new imagedata_extensions_1.ImageData(capt.width, capt.height));
            r[captids[a]] = await imgreader.nextImage();
        }
    }
    return r;
}
exports.captureMultiAsync = captureMultiAsync;
/**
 * Starts capturing a realtime stream of the game. Make sure you keep reading the stream and close it when you're done or Alt1 WILL crash
 * @param framecb Called whenever a new frame is decoded
 * @param errorcb Called whenever an error occurs, the error is rethrown if not defined
 * @param fps Maximum fps of the stream
 */
function captureStream(x, y, width, height, fps, framecb, errorcb) {
    requireAlt1();
    if (!hasAlt1Version("1.4.6")) {
        throw new Alt1Error("This function is not supported in this version of Alt1");
    }
    var url = "https://alt1api/pixel/streamregion/" + encodeURIComponent(JSON.stringify({ x, y, width, height, fps, format: "raw" }));
    var res = fetch(url).then(async (res) => {
        var reader = new ImageStreamReader(res.body.getReader(), width, height);
        try {
            while (!reader.closed && !state.closed) {
                var img = await reader.nextImage();
                if (!state.closed) {
                    framecb(img);
                    state.framenr++;
                }
            }
        }
        catch (e) {
            if (!state.closed) {
                reader.close();
                if (errorcb) {
                    errorcb(e);
                }
                else {
                    throw e;
                }
            }
        }
        if (!reader.closed && state.closed) {
            reader.close();
        }
    });
    var state = {
        x, y, width, height,
        framenr: 0,
        close: () => { state.closed = true; },
        closed: false,
    };
    return state;
}
exports.captureStream = captureStream;


/***/ }),

/***/ "canvas":
/*!*************************!*\
  !*** external "canvas" ***!
  \*************************/
/***/ ((module) => {

if(typeof __WEBPACK_EXTERNAL_MODULE_canvas__ === 'undefined') { var e = new Error("Cannot find module 'canvas'"); e.code = 'MODULE_NOT_FOUND'; throw e; }

module.exports = __WEBPACK_EXTERNAL_MODULE_canvas__;

/***/ }),

/***/ "electron/common":
/*!**********************************!*\
  !*** external "electron/common" ***!
  \**********************************/
/***/ ((module) => {

if(typeof __WEBPACK_EXTERNAL_MODULE_electron_common__ === 'undefined') { var e = new Error("Cannot find module 'electron/common'"); e.code = 'MODULE_NOT_FOUND'; throw e; }

module.exports = __WEBPACK_EXTERNAL_MODULE_electron_common__;

/***/ }),

/***/ "sharp":
/*!************************!*\
  !*** external "sharp" ***!
  \************************/
/***/ ((module) => {

if(typeof __WEBPACK_EXTERNAL_MODULE_sharp__ === 'undefined') { var e = new Error("Cannot find module 'sharp'"); e.code = 'MODULE_NOT_FOUND'; throw e; }

module.exports = __WEBPACK_EXTERNAL_MODULE_sharp__;

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The module cache
/******/ 	var __webpack_module_cache__ = {};
/******/ 	
/******/ 	// The require function
/******/ 	function __nested_webpack_require_78005__(moduleId) {
/******/ 		// Check if module is in cache
/******/ 		var cachedModule = __webpack_module_cache__[moduleId];
/******/ 		if (cachedModule !== undefined) {
/******/ 			return cachedModule.exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = __webpack_module_cache__[moduleId] = {
/******/ 			// no module.id needed
/******/ 			// no module.loaded needed
/******/ 			exports: {}
/******/ 		};
/******/ 	
/******/ 		// Execute the module function
/******/ 		__webpack_modules__[moduleId].call(module.exports, module, module.exports, __nested_webpack_require_78005__);
/******/ 	
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/ 	
/************************************************************************/
/******/ 	/* webpack/runtime/global */
/******/ 	(() => {
/******/ 		__nested_webpack_require_78005__.g = (function() {
/******/ 			if (typeof globalThis === 'object') return globalThis;
/******/ 			try {
/******/ 				return this || new Function('return this')();
/******/ 			} catch (e) {
/******/ 				if (typeof window === 'object') return window;
/******/ 			}
/******/ 		})();
/******/ 	})();
/******/ 	
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module is referenced by other modules so it can't be inlined
/******/ 	var __nested_webpack_exports__ = __nested_webpack_require_78005__("./src/base/index.ts");
/******/ 	
/******/ 	return __nested_webpack_exports__;
/******/ })()
;
});

/***/ }),

/***/ "../node_modules/alt1/dist/buffs/index.js":
/*!************************************************!*\
  !*** ../node_modules/alt1/dist/buffs/index.js ***!
  \************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

(function webpackUniversalModuleDefinition(root, factory) {
	if(true)
		module.exports = factory(__webpack_require__(/*! alt1/base */ "../node_modules/alt1/dist/base/index.js"), __webpack_require__(/*! alt1/ocr */ "../node_modules/alt1/dist/ocr/index.js"));
	else {}
})(globalThis, (__WEBPACK_EXTERNAL_MODULE_alt1_base__, __WEBPACK_EXTERNAL_MODULE_alt1_ocr__) => {
return /******/ (() => { // webpackBootstrap
/******/ 	var __webpack_modules__ = ({

/***/ "./src/buffs/imgs/buffborder.data.png":
/*!********************************************!*\
  !*** ./src/buffs/imgs/buffborder.data.png ***!
  \********************************************/
/***/ ((module, __unused_webpack_exports, __nested_webpack_require_885__) => {

module.exports=(__nested_webpack_require_885__(/*! alt1/base */ "alt1/base").ImageDetect.imageDataFromBase64)("iVBORw0KGgoAAAANSUhEUgAAABsAAAAbCAYAAACN1PRVAAAAAW5vUEUAYtdMlAAAAARub1BFAAAAAEEgjiIAAAAJbm9QRQAAAAAAAAAAAKGKctUAAABCSURBVEhL7daxDQAgDANBwxasxmCsS4jECE8K5JdcX+s219iqKrGTXi+dfs2SjCEZQzKGZAzJGJIxJGNI/2KFj1gK6ntTCO2Nfp8AAAAASUVORK5CYII=")

/***/ }),

/***/ "./src/buffs/imgs/debuffborder.data.png":
/*!**********************************************!*\
  !*** ./src/buffs/imgs/debuffborder.data.png ***!
  \**********************************************/
/***/ ((module, __unused_webpack_exports, __nested_webpack_require_1504__) => {

module.exports=(__nested_webpack_require_1504__(/*! alt1/base */ "alt1/base").ImageDetect.imageDataFromBase64)("iVBORw0KGgoAAAANSUhEUgAAABsAAAAbCAYAAACN1PRVAAAAAW5vUEUAYtdMlAAAAARub1BFAAAAAEEgjiIAAAAJbm9QRQAAAAAAAAAAAKGKctUAAABFSURBVEhL7daxDQAgDANBm5XYfwOYyUgoI5gUyFc51bfhAoQmNzYl1v3MJjVqt0jMIjGLxCwSs0jMIjGLxCz+jTV+xMAB3/oJlYh5IBUAAAAASUVORK5CYII=")

/***/ }),

/***/ "./src/buffs/index.ts":
/*!****************************!*\
  !*** ./src/buffs/index.ts ***!
  \****************************/
/***/ (function(__unused_webpack_module, exports, __nested_webpack_require_2063__) {

"use strict";

var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.BuffInfo = exports.Buff = void 0;
const a1lib = __importStar(__nested_webpack_require_2063__(/*! alt1/base */ "alt1/base"));
const OCR = __importStar(__nested_webpack_require_2063__(/*! alt1/ocr */ "alt1/ocr"));
const base_1 = __nested_webpack_require_2063__(/*! alt1/base */ "alt1/base");
var imgs = (0, base_1.webpackImages)({
    buff: __nested_webpack_require_2063__(/*! ./imgs/buffborder.data.png */ "./src/buffs/imgs/buffborder.data.png"),
    debuff: __nested_webpack_require_2063__(/*! ./imgs/debuffborder.data.png */ "./src/buffs/imgs/debuffborder.data.png"),
});
var font = __nested_webpack_require_2063__(/*! ../fonts/pixel_8px_digits.fontmeta.json */ "./src/fonts/pixel_8px_digits.fontmeta.json");
function negmod(a, b) {
    return ((a % b) + b) % b;
}
class Buff {
    constructor(buffer, x, y, isdebuff) {
        this.buffer = buffer;
        this.bufferx = x;
        this.buffery = y;
        this.isdebuff = isdebuff;
    }
    readArg(type) {
        return BuffReader.readArg(this.buffer, this.bufferx + 2, this.buffery + 23, type);
    }
    readTime() {
        return BuffReader.readTime(this.buffer, this.bufferx + 2, this.buffery + 23);
    }
    compareBuffer(img) {
        return BuffReader.compareBuffer(this.buffer, this.bufferx + 1, this.buffery + 1, img);
    }
    countMatch(img, aggressive) {
        return BuffReader.countMatch(this.buffer, this.bufferx + 1, this.buffery + 1, img, aggressive);
    }
}
exports.Buff = Buff;
class BuffReader {
    constructor() {
        this.pos = null;
        this.debuffs = false;
    }
    find(img) {
        if (!img) {
            img = a1lib.captureHoldFullRs();
        }
        if (!img) {
            return null;
        }
        var poslist = img.findSubimage(this.debuffs ? imgs.debuff : imgs.buff);
        if (poslist.length == 0) {
            return null;
        }
        var grids = [];
        for (var a in poslist) {
            var ongrid = false;
            for (var b in grids) {
                if (negmod(grids[b].x - poslist[a].x, BuffReader.gridsize) == 0 && negmod(grids[b].x - poslist[a].x, BuffReader.gridsize) == 0) {
                    grids[b].x = Math.min(grids[b].x, poslist[a].x);
                    grids[b].y = Math.min(grids[b].y, poslist[a].y);
                    grids[b].n++;
                    ongrid = true;
                    break;
                }
            }
            if (!ongrid) {
                grids.push({ x: poslist[a].x, y: poslist[a].y, n: 1 });
            }
        }
        var max = 0;
        var above2 = 0;
        var best = null;
        for (var a in grids) {
            console.log("buff grid [" + grids[a].x + "," + grids[a].y + "], n:" + grids[a].n);
            if (grids[a].n > max) {
                max = grids[a].n;
                best = grids[a];
            }
            if (grids[a].n >= 2) {
                above2++;
            }
        }
        if (above2 > 1) {
            console.log("Warning, more than one possible buff bar location");
        }
        if (!best) {
            return null;
        }
        this.pos = { x: best.x, y: best.y, maxhor: 5, maxver: 1 };
        return true;
    }
    getCaptRect() {
        if (!this.pos) {
            return null;
        }
        return new a1lib.Rect(this.pos.x, this.pos.y, (this.pos.maxhor + 1) * BuffReader.gridsize, (this.pos.maxver + 1) * BuffReader.gridsize);
    }
    read(buffer) {
        if (!this.pos) {
            throw new Error("no pos");
        }
        var r = [];
        var rect = this.getCaptRect();
        if (!rect) {
            return null;
        }
        if (!buffer) {
            buffer = a1lib.capture(rect.x, rect.y, rect.width, rect.height);
        }
        var maxhor = 0;
        var maxver = 0;
        for (var ix = 0; ix <= this.pos.maxhor; ix++) {
            for (var iy = 0; iy <= this.pos.maxver; iy++) {
                var x = ix * BuffReader.gridsize;
                var y = iy * BuffReader.gridsize;
                //Have to require exact match here as we get transparency bs otherwise
                var match = buffer.pixelCompare((this.debuffs ? imgs.debuff : imgs.buff), x, y) == 0;
                if (!match) {
                    break;
                }
                r.push(new Buff(buffer, x, y, this.debuffs));
                maxhor = Math.max(maxhor, ix);
                maxver = Math.max(maxver, iy);
            }
        }
        this.pos.maxhor = Math.max(5, maxhor + 2);
        this.pos.maxver = Math.max(1, maxver + 1);
        return r;
    }
    static compareBuffer(buffer, ox, oy, buffimg) {
        var r = BuffReader.countMatch(buffer, ox, oy, buffimg, true);
        if (r.failed > 0) {
            return false;
        }
        if (r.tested < 50) {
            return false;
        }
        return true;
    }
    static countMatch(buffer, ox, oy, buffimg, agressive) {
        var r = { tested: 0, failed: 0, skipped: 0, passed: 0 };
        var data1 = buffer.data;
        var data2 = buffimg.data;
        //var debug = new ImageData(buffimg.width, buffimg.height);
        for (var y = 0; y < buffimg.height; y++) {
            for (var x = 0; x < buffimg.width; x++) {
                var i1 = buffer.pixelOffset(ox + x, oy + y);
                var i2 = buffimg.pixelOffset(x, y);
                //debug.data[i2] = 255; debug.data[i2 + 1] = debug.data[i2 + 2] = 0; debug.data[i2 + 3] = 255;
                if (data2[i2 + 3] != 255) {
                    r.skipped++;
                    continue;
                } //transparent buff pixel
                if (data1[i1] == 255 && data1[i1 + 1] == 255 && data1[i1 + 2] == 255) {
                    r.skipped++;
                    continue;
                } //white pixel - part of buff time text
                if (data1[i1] == 0 && data1[i1 + 1] == 0 && data1[i1 + 2] == 0) {
                    r.skipped++;
                    continue;
                } //black pixel - part of buff time text
                var d = a1lib.ImageDetect.coldif(data1[i1], data1[i1 + 1], data1[i1 + 2], data2[i2], data2[i2 + 1], data2[i2 + 2], 255);
                r.tested++;
                //debug.data[i2] = debug.data[i2 + 1] = debug.data[i2 + 2] = d * 10;
                if (d > 35) {
                    //qw(pixelschecked); debug.show();
                    r.failed++;
                    if (agressive) {
                        return r;
                    }
                }
                else {
                    r.passed++;
                }
            }
        }
        //debug.show(); qw(pixelschecked);
        return r;
    }
    static isolateBuffer(buffer, ox, oy, buffimg) {
        var count = BuffReader.countMatch(buffer, ox, oy, buffimg);
        if (count.passed < 50) {
            return;
        }
        var removed = 0;
        var data1 = buffer.data;
        var data2 = buffimg.data;
        //var debug = new ImageData(buffimg.width, buffimg.height);
        for (var y = 0; y < buffimg.height; y++) {
            for (var x = 0; x < buffimg.width; x++) {
                var i1 = buffer.pixelOffset(ox + x, oy + y);
                var i2 = buffimg.pixelOffset(x, y);
                //debug.data[i2] = 255; debug.data[i2 + 1] = debug.data[i2 + 2] = 0; debug.data[i2 + 3] = 255;
                if (data2[i2 + 3] != 255) {
                    continue;
                } //transparent buff pixel
                //==== new buffer has text on it ====
                if (data1[i1] == 255 && data1[i1 + 1] == 255 && data1[i1 + 2] == 255 || data1[i1] == 0 && data1[i1 + 1] == 0 && data1[i1 + 2] == 0) {
                    continue;
                }
                //==== old buf has text on it, use the new one ====
                if (data2[i2] == 255 && data2[i2 + 1] == 255 && data2[i2 + 2] == 255 || data2[i2] == 0 && data2[i2 + 1] == 0 && data2[i2 + 2] == 0) {
                    data2[i2 + 0] = data1[i1 + 0];
                    data2[i2 + 1] = data1[i1 + 1];
                    data2[i2 + 2] = data1[i1 + 2];
                    data2[i2 + 3] = data1[i1 + 3];
                    removed++;
                }
                var d = a1lib.ImageDetect.coldif(data1[i1], data1[i1 + 1], data1[i1 + 2], data2[i2], data2[i2 + 1], data2[i2 + 2], 255);
                //debug.data[i2] = debug.data[i2 + 1] = debug.data[i2 + 2] = d * 10;
                if (d > 5) {
                    //qw(pixelschecked); debug.show();
                    data2[i2 + 0] = data2[i2 + 1] = data2[i2 + 2] = data2[i2 + 3] = 0;
                    removed++;
                }
            }
        }
        //debug.show(); qw(pixelschecked);
        if (removed > 0) {
            console.log(removed + " pixels remove from buff template image");
        }
    }
    static readArg(buffer, ox, oy, type) {
        var lines = [];
        for (var dy = -10; dy < 10; dy += 10) { //the timer can be spread to a second line at certain times (229m)
            var result = OCR.readLine(buffer, font, [255, 255, 255], ox, oy + dy, true);
            if (result.text) {
                lines.push(result.text);
            }
        }
        var r = { time: 0, arg: "" };
        if (type == "timearg" && lines.length > 1) {
            r.arg = lines.pop();
        }
        var str = lines.join("");
        if (type == "arg") {
            r.arg = str;
        }
        else {
            var m;
            if (m = str.match(/^(\d+)hr($|\s?\()/i)) {
                r.time = +m[1] * 60 * 60;
            }
            else if (m = str.match(/^(\d+)m($|\s?\()/i)) {
                r.time = +m[1] * 60;
            }
            else if (m = str.match(/^(\d+)($|\s?\()/)) {
                r.time = +m[1];
            }
        }
        return r;
    }
    static readTime(buffer, ox, oy) {
        return this.readArg(buffer, ox, oy, "time").time;
    }
    static matchBuff(state, buffimg) {
        for (var a in state) {
            if (state[a].compareBuffer(buffimg)) {
                return state[a];
            }
        }
        return null;
    }
    static matchBuffMulti(state, buffinfo) {
        if (buffinfo.final) { //cheap way if we known exactly what we're searching for
            return BuffReader.matchBuff(state, buffinfo.imgdata);
        }
        else { //expensive way if we are not sure the template is final
            var bestindex = -1;
            var bestscore = 0;
            if (buffinfo.imgdata) {
                for (var a = 0; a < state.length; a++) {
                    var count = BuffReader.countMatch(state[a].buffer, state[a].bufferx + 1, state[a].buffery + 1, buffinfo.imgdata, false);
                    if (count.passed > bestscore) {
                        bestscore = count.passed;
                        bestindex = a;
                    }
                }
            }
            if (bestscore < 50) {
                return null;
            }
            //update the isolated buff
            if (buffinfo.canimprove) {
                BuffReader.isolateBuffer(state[bestindex].buffer, state[bestindex].bufferx + 1, state[bestindex].buffery + 1, buffinfo.imgdata);
            }
            return state[bestindex];
        }
    }
}
BuffReader.buffsize = 27;
BuffReader.gridsize = 30;
exports["default"] = BuffReader;
class BuffInfo {
    constructor(imgdata, debuff, id, canimprove) {
        this.imgdata = imgdata;
        this.isdebuff = debuff;
        this.buffid = id;
        this.final = !!id && !canimprove;
        this.canimprove = canimprove;
    }
}
exports.BuffInfo = BuffInfo;


/***/ }),

/***/ "alt1/base":
/*!**************************************************************************************************!*\
  !*** external {"root":"A1lib","commonjs2":"alt1/base","commonjs":"alt1/base","amd":"alt1/base"} ***!
  \**************************************************************************************************/
/***/ ((module) => {

"use strict";
module.exports = __WEBPACK_EXTERNAL_MODULE_alt1_base__;

/***/ }),

/***/ "alt1/ocr":
/*!*********************************************************************************************!*\
  !*** external {"root":"OCR","commonjs2":"alt1/ocr","commonjs":"alt1/ocr","amd":"alt1/ocr"} ***!
  \*********************************************************************************************/
/***/ ((module) => {

"use strict";
module.exports = __WEBPACK_EXTERNAL_MODULE_alt1_ocr__;

/***/ }),

/***/ "./src/fonts/pixel_8px_digits.fontmeta.json":
/*!**************************************************!*\
  !*** ./src/fonts/pixel_8px_digits.fontmeta.json ***!
  \**************************************************/
/***/ ((module) => {

"use strict";
module.exports = JSON.parse('{"chars":[{"width":7,"bonus":120,"chr":"0","pixels":[0,2,255,255,0,3,255,255,0,4,255,255,0,5,255,255,1,1,255,255,1,3,255,0,1,4,255,0,1,5,255,0,1,6,255,255,2,0,255,255,2,2,255,0,2,7,255,255,3,1,255,255,3,6,255,255,3,8,255,0,4,2,255,255,4,3,255,255,4,4,255,255,4,5,255,255,4,7,255,0,5,3,255,0,5,4,255,0,5,5,255,0,5,6,255,0],"secondary":false},{"width":4,"bonus":95,"chr":"1","pixels":[0,1,255,255,0,7,255,255,1,0,255,255,1,1,255,255,1,2,255,255,1,3,255,255,1,4,255,255,1,5,255,255,1,6,255,255,1,7,255,255,1,8,255,0,2,1,255,0,2,2,255,0,2,3,255,0,2,4,255,0,2,5,255,0,2,6,255,0,2,7,255,255,2,8,255,0],"secondary":false},{"width":7,"bonus":140,"chr":"2","pixels":[0,1,255,255,0,6,255,255,0,7,255,255,1,0,255,255,1,2,255,0,1,5,255,255,1,7,255,255,1,8,255,0,2,0,255,255,2,1,255,0,2,4,255,255,2,6,255,0,2,7,255,255,2,8,255,0,3,0,255,255,3,1,255,0,3,3,255,255,3,5,255,0,3,7,255,255,3,8,255,0,4,1,255,255,4,2,255,255,4,4,255,0,4,7,255,255,4,8,255,0,5,2,255,0,5,3,255,0,5,8,255,0],"secondary":false},{"width":6,"bonus":115,"chr":"3","pixels":[0,1,255,255,0,6,255,255,1,0,255,255,1,2,255,0,1,3,255,255,1,7,255,255,2,0,255,255,2,1,255,0,2,3,255,255,2,4,255,0,2,7,255,255,2,8,255,0,3,1,255,255,3,2,255,255,3,4,255,255,3,5,255,255,3,6,255,255,3,8,255,0,4,2,255,0,4,3,255,0,4,5,255,0,4,6,255,0,4,7,255,0],"secondary":false},{"width":5,"bonus":110,"chr":"4","pixels":[0,0,255,255,0,1,255,255,0,2,255,255,0,3,255,255,0,4,255,255,0,5,255,255,1,1,255,0,1,2,255,0,1,3,255,0,1,4,255,0,1,5,255,255,1,6,255,0,2,3,255,255,2,4,255,255,2,5,255,255,2,6,255,255,2,7,255,255,3,4,255,0,3,5,255,255,3,6,255,0,3,7,255,0,3,8,255,0],"secondary":false},{"width":6,"bonus":135,"chr":"5","pixels":[0,0,255,255,0,1,255,255,0,2,255,255,0,3,255,255,0,6,255,255,1,0,255,255,1,1,255,0,1,2,255,0,1,3,255,255,1,4,255,0,1,7,255,255,2,0,255,255,2,1,255,0,2,3,255,255,2,4,255,0,2,7,255,255,2,8,255,0,3,0,255,255,3,1,255,0,3,4,255,255,3,5,255,255,3,6,255,255,3,8,255,0,4,1,255,0,4,5,255,0,4,6,255,0,4,7,255,0],"secondary":false},{"width":7,"bonus":160,"chr":"6","pixels":[0,2,255,255,0,3,255,255,0,4,255,255,0,5,255,255,0,6,255,255,1,1,255,255,1,3,255,0,1,4,255,255,1,5,255,0,1,6,255,0,1,7,255,255,2,0,255,255,2,2,255,0,2,3,255,255,2,5,255,0,2,7,255,255,2,8,255,0,3,0,255,255,3,1,255,0,3,3,255,255,3,4,255,0,3,7,255,255,3,8,255,0,4,1,255,255,4,4,255,255,4,5,255,255,4,6,255,255,4,8,255,0,5,2,255,0,5,5,255,0,5,6,255,0,5,7,255,0],"secondary":false},{"width":6,"bonus":105,"chr":"7","pixels":[0,0,255,255,0,6,255,255,0,7,255,255,1,0,255,255,1,1,255,0,1,4,255,255,1,5,255,255,1,7,255,0,1,8,255,0,2,0,255,255,2,1,255,0,2,2,255,255,2,3,255,255,2,5,255,0,2,6,255,0,3,0,255,255,3,1,255,255,3,3,255,0,3,4,255,0,4,1,255,0,4,2,255,0],"secondary":false},{"width":7,"bonus":170,"chr":"8","pixels":[0,1,255,255,0,2,255,255,0,4,255,255,0,5,255,255,0,6,255,255,1,0,255,255,1,2,255,0,1,3,255,255,1,5,255,0,1,6,255,0,1,7,255,255,2,0,255,255,2,1,255,0,2,3,255,255,2,4,255,0,2,7,255,255,2,8,255,0,3,0,255,255,3,1,255,0,3,3,255,255,3,4,255,0,3,7,255,255,3,8,255,0,4,1,255,255,4,2,255,255,4,4,255,255,4,5,255,255,4,6,255,255,4,8,255,0,5,2,255,0,5,3,255,0,5,5,255,0,5,6,255,0,5,7,255,0],"secondary":false},{"width":7,"bonus":130,"chr":"9","pixels":[0,1,255,255,0,2,255,255,1,0,255,255,1,2,255,0,1,3,255,255,2,0,255,255,2,1,255,0,2,4,255,255,3,0,255,255,3,1,255,0,3,4,255,255,3,5,255,0,4,1,255,255,4,2,255,255,4,3,255,255,4,4,255,255,4,5,255,255,4,6,255,255,4,7,255,255,5,2,255,0,5,3,255,0,5,4,255,0,5,5,255,0,5,6,255,0,5,7,255,0,5,8,255,0],"secondary":false},{"width":7,"bonus":130,"chr":"m","pixels":[0,4,255,255,0,5,255,255,0,6,255,255,0,7,255,255,1,3,255,255,1,5,255,0,1,6,255,0,1,7,255,0,1,8,255,0,2,4,255,255,2,5,255,255,2,6,255,255,2,7,255,255,3,3,255,255,3,5,255,0,3,6,255,0,3,7,255,0,3,8,255,0,4,4,255,255,4,5,255,255,4,6,255,255,4,7,255,255,5,5,255,0,5,6,255,0,5,7,255,0,5,8,255,0],"secondary":false},{"width":3,"bonus":80,"chr":"(","pixels":[0,1,255,255,0,2,255,255,0,3,255,255,0,4,255,255,0,5,255,255,0,6,255,255,0,7,255,255,1,0,255,255,1,2,255,0,1,3,255,0,1,4,255,0,1,5,255,0,1,6,255,0,1,7,255,0,1,8,255,255,2,1,255,0],"secondary":false},{"width":2,"bonus":70,"chr":")","pixels":[0,1,255,255,0,2,255,255,0,3,255,255,0,4,255,255,0,5,255,255,0,6,255,255,0,7,255,255,1,2,255,0,1,3,255,0,1,4,255,0,1,5,255,0,1,6,255,0,1,7,255,0,1,8,255,0],"secondary":false},{"width":6,"bonus":135,"chr":"h","pixels":[0,0,255,255,0,1,255,255,0,2,255,255,0,3,255,255,0,4,255,255,0,5,255,255,0,6,255,255,0,7,255,255,1,1,255,0,1,2,255,0,1,3,255,255,1,4,255,0,1,5,255,0,1,6,255,0,1,7,255,0,1,8,255,0,2,3,255,255,2,4,255,0,2,5,255,0,3,4,255,255,3,5,255,255,3,6,255,255,3,7,255,255,4,5,255,0,4,6,255,0,4,7,255,0,4,8,255,0],"secondary":false},{"width":5,"bonus":65,"chr":"r","pixels":[0,3,255,255,0,4,255,255,0,5,255,255,0,6,255,255,0,7,255,255,1,4,255,255,1,5,255,0,1,6,255,0,1,7,255,0,1,8,255,0,2,3,255,255,2,5,255,0,3,4,255,0],"secondary":false}],"width":7,"spacewidth":3,"shadow":true,"height":9,"basey":7}');

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The module cache
/******/ 	var __webpack_module_cache__ = {};
/******/ 	
/******/ 	// The require function
/******/ 	function __nested_webpack_require_21006__(moduleId) {
/******/ 		// Check if module is in cache
/******/ 		var cachedModule = __webpack_module_cache__[moduleId];
/******/ 		if (cachedModule !== undefined) {
/******/ 			return cachedModule.exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = __webpack_module_cache__[moduleId] = {
/******/ 			// no module.id needed
/******/ 			// no module.loaded needed
/******/ 			exports: {}
/******/ 		};
/******/ 	
/******/ 		// Execute the module function
/******/ 		__webpack_modules__[moduleId].call(module.exports, module, module.exports, __nested_webpack_require_21006__);
/******/ 	
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/ 	
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module is referenced by other modules so it can't be inlined
/******/ 	var __nested_webpack_exports__ = __nested_webpack_require_21006__("./src/buffs/index.ts");
/******/ 	
/******/ 	return __nested_webpack_exports__;
/******/ })()
;
});

/***/ }),

/***/ "../node_modules/alt1/dist/ocr/index.js":
/*!**********************************************!*\
  !*** ../node_modules/alt1/dist/ocr/index.js ***!
  \**********************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

(function webpackUniversalModuleDefinition(root, factory) {
	if(true)
		module.exports = factory(__webpack_require__(/*! alt1/base */ "../node_modules/alt1/dist/base/index.js"));
	else {}
})(globalThis, (__WEBPACK_EXTERNAL_MODULE_alt1_base__) => {
return /******/ (() => { // webpackBootstrap
/******/ 	"use strict";
/******/ 	var __webpack_modules__ = ({

/***/ "./src/ocr/index.ts":
/*!**************************!*\
  !*** ./src/ocr/index.ts ***!
  \**************************/
/***/ ((__unused_webpack_module, exports, __nested_webpack_require_728__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.generateFont = exports.loadFontImage = exports.readChar = exports.readSmallCapsBackwards = exports.readLine = exports.getChatColor = exports.getChatColorMono = exports.findReadLine = exports.findChar = exports.decompose3col = exports.decomposeblack = exports.decompose2col = exports.canblend = exports.unblendTrans = exports.unblendKnownBg = exports.unblendBlackBackground = exports.debugFont = exports.debugout = exports.debug = void 0;
const base_1 = __nested_webpack_require_728__(/*! alt1/base */ "alt1/base");
exports.debug = {
    printcharscores: false,
    trackread: false
};
exports.debugout = {};
/**
 * draws the font definition to a buffer and displays it in the dom for debugging purposes
 * @param font
 */
function debugFont(font) {
    var spacing = font.width + 2;
    var buf = new base_1.ImageData(spacing * font.chars.length, font.height + 1);
    for (var a = 0; a < buf.data.length; a += 4) {
        buf.data[a] = buf.data[a + 1] = buf.data[a + 2] = 0;
        buf.data[a + 3] = 255;
    }
    for (var a = 0; a < font.chars.length; a++) {
        var bx = a * spacing;
        var chr = font.chars[a];
        for (var b = 0; b < chr.pixels.length; b += (font.shadow ? 4 : 3)) {
            buf.setPixel(bx + chr.pixels[b], chr.pixels[b + 1], [chr.pixels[b + 2], chr.pixels[b + 2], chr.pixels[b + 2], 255]);
            if (font.shadow) {
                buf.setPixel(bx + chr.pixels[b], chr.pixels[b + 1], [chr.pixels[b + 3], 0, 0, 255]);
            }
        }
    }
    buf.show();
}
exports.debugFont = debugFont;
function unblendBlackBackground(img, r, g, b) {
    var rimg = new base_1.ImageData(img.width, img.height);
    for (var i = 0; i < img.data.length; i += 4) {
        var col = decomposeblack(img.data[i], img.data[i + 1], img.data[i + 2], r, g, b);
        rimg.data[i + 0] = col[0] * 255;
        rimg.data[i + 1] = rimg.data[i + 0];
        rimg.data[i + 2] = rimg.data[i + 0];
        rimg.data[i + 3] = 255;
    }
    return rimg;
}
exports.unblendBlackBackground = unblendBlackBackground;
/**
 * unblends a imagebuffer into match strength with given color
 * the bgimg argument should contain a second image with pixel occluded by the font visible.
 * @param img
 * @param shadow detect black as second color
 * @param bgimg optional second image to
 */
function unblendKnownBg(img, bgimg, shadow, r, g, b) {
    if (bgimg && (img.width != bgimg.width || img.height != bgimg.height)) {
        throw "bgimg size doesn't match";
    }
    var rimg = new base_1.ImageData(img.width, img.height);
    var totalerror = 0;
    for (var i = 0; i < img.data.length; i += 4) {
        var col = decompose2col(img.data[i], img.data[i + 1], img.data[i + 2], r, g, b, bgimg.data[i + 0], bgimg.data[i + 1], bgimg.data[i + 2]);
        if (shadow) {
            if (col[2] > 0.01) {
                console.log("high error component: " + (col[2] * 100).toFixed(1) + "%");
            }
            totalerror += col[2];
            var m = 1 - col[1] - Math.abs(col[2]); //main color+black=100%-bg-error
            rimg.data[i + 0] = m * 255;
            rimg.data[i + 1] = col[0] / m * 255;
            rimg.data[i + 2] = rimg.data[i + 0];
        }
        else {
            rimg.data[i + 0] = col[0] * 255;
            rimg.data[i + 1] = rimg.data[i + 0];
            rimg.data[i + 2] = rimg.data[i + 0];
        }
        rimg.data[i + 3] = 255;
    }
    return rimg;
}
exports.unblendKnownBg = unblendKnownBg;
/**
 * Unblends a font image that is already conpletely isolated to the raw image used ingame. This is the easiest mode for pixel fonts where alpha is 0 or 255, or for extracted font files.
 * @param img
 * @param r
 * @param g
 * @param b
 * @param shadow whether the font has a black shadow
 */
function unblendTrans(img, shadow, r, g, b) {
    var rimg = new base_1.ImageData(img.width, img.height);
    var pxlum = r + g + b;
    for (var i = 0; i < img.data.length; i += 4) {
        if (shadow) {
            var lum = img.data[i + 0] + img.data[i + 1] + img.data[i + 2];
            rimg.data[i + 0] = img.data[i + 3];
            rimg.data[i + 1] = lum / pxlum * 255;
            rimg.data[i + 2] = rimg.data[i + 0];
        }
        else {
            rimg.data[i + 0] = img.data[i + 3];
            rimg.data[i + 1] = rimg.data[i + 0];
            rimg.data[i + 2] = rimg.data[i + 0];
        }
        rimg.data[i + 3] = 255;
    }
    return rimg;
}
exports.unblendTrans = unblendTrans;
/**
 * Determised wether color [rgb]m can be a result of a blend with color [rgb]1 that is p (0-1) of the mix
 * It returns the number that the second color has to lie outside of the possible color ranges
 * @param rm resulting color
 * @param r1 first color of the mix (the other color is unknown)
 * @param p the portion of the [rgb]1 in the mix (0-1)
 */
function canblend(rm, gm, bm, r1, g1, b1, p) {
    var m = Math.min(50, p / (1 - p));
    var r = rm + (rm - r1) * m;
    var g = gm + (gm - g1) * m;
    var b = bm + (bm - b1) * m;
    return Math.max(0, -r, -g, -b, r - 255, g - 255, b - 255);
}
exports.canblend = canblend;
/**
 * decomposes a color in 2 given component colors and returns the amount of each color present
 * also return a third (noise) component which is the the amount leftover orthagonal from the 2 given colors
 */
function decompose2col(rp, gp, bp, r1, g1, b1, r2, g2, b2) {
    //get the normal of the error (cross-product of both colors)
    var r3 = g1 * b2 - g2 * b1;
    var g3 = b1 * r2 - b2 * r1;
    var b3 = r1 * g2 - r2 * g1;
    //normalize to length 255
    var norm = 255 / Math.sqrt(r3 * r3 + g3 * g3 + b3 * b3);
    r3 *= norm;
    g3 *= norm;
    b3 *= norm;
    return decompose3col(rp, gp, bp, r1, g1, b1, r2, g2, b2, r3, g3, b3);
}
exports.decompose2col = decompose2col;
/**
 * decomposes a pixel in a given color component and black and returns what proportion of the second color it contains
 * this is not as formal as decompose 2/3 and only give a "good enough" number
 */
function decomposeblack(rp, gp, bp, r1, g1, b1) {
    var dr = Math.abs(rp - r1);
    var dg = Math.abs(gp - g1);
    var db = Math.abs(bp - b1);
    var maxdif = Math.max(dr, dg, db);
    return [1 - maxdif / 255];
}
exports.decomposeblack = decomposeblack;
/**
 * decomposes a color in 3 given component colors and returns the amount of each color present
 */
function decompose3col(rp, gp, bp, r1, g1, b1, r2, g2, b2, r3, g3, b3) {
    //P=x*C1+y*C2+z*C3
    //assemble as matrix 
    //M*w=p
    //get inverse of M
    //dirty written out version of cramer's rule
    var A = g2 * b3 - b2 * g3;
    var B = g3 * b1 - b3 * g1;
    var C = g1 * b2 - b1 * g2;
    var D = b2 * r3 - r2 * b3;
    var E = b3 * r1 - r3 * b1;
    var F = b1 * r2 - r1 * b2;
    var G = r2 * g3 - g2 * r3;
    var H = r3 * g1 - g3 * r1;
    var I = r1 * g2 - g1 * r2;
    var det = r1 * A + g1 * D + b1 * G;
    //M^-1*p=w
    var x = (A * rp + D * gp + G * bp) / det;
    var y = (B * rp + E * gp + H * bp) / det;
    var z = (C * rp + F * gp + I * bp) / det;
    return [x, y, z];
}
exports.decompose3col = decompose3col;
/**
 * brute force to the exact position of the text
 */
function findChar(buffer, font, col, x, y, w, h) {
    if (x < 0) {
        return null;
    }
    if (y - font.basey < 0) {
        return null;
    }
    if (x + w + font.width > buffer.width) {
        return null;
    }
    if (y + h - font.basey + font.height > buffer.height) {
        return null;
    }
    var best = 1000; //TODO finetune score constants
    var bestchar = null;
    for (var cx = x; cx < x + w; cx++) {
        for (var cy = y; cy < y + h; cy++) {
            var chr = readChar(buffer, font, col, cx, cy, false, false);
            if (chr != null && chr.sizescore < best) {
                best = chr.sizescore;
                bestchar = chr;
            }
        }
    }
    return bestchar;
}
exports.findChar = findChar;
/**
 * reads text with unknown exact coord or color. The given coord should be inside the text
 * color selection not implemented yet
 */
function findReadLine(buffer, font, cols, x, y, w = -1, h = -1) {
    if (w == -1) {
        w = font.width + font.spacewidth;
        x -= Math.ceil(w / 2);
    }
    if (h == -1) {
        h = 7;
        y -= 1;
    }
    var chr = null;
    if (cols.length > 1) {
        //TODO use getChatColor() instead for non-mono?
        var sorted = getChatColorMono(buffer, new base_1.Rect(x, y - font.basey, w, h), cols);
        //loop until we have a match (max 2 cols)
        for (var a = 0; a < 2 && a < sorted.length && chr == null; a++) {
            chr = findChar(buffer, font, sorted[a].col, x, y, w, h);
        }
    }
    else {
        chr = findChar(buffer, font, cols[0], x, y, w, h);
    }
    if (chr == null) {
        return { debugArea: { x, y, w, h }, text: "", fragments: [] };
    }
    return readLine(buffer, font, cols, chr.x, chr.y, true, true);
}
exports.findReadLine = findReadLine;
function getChatColorMono(buf, rect, colors) {
    var colormap = colors.map(c => ({ col: c, score: 0 }));
    if (rect.x < 0 || rect.y < 0 || rect.x + rect.width > buf.width || rect.y + rect.height > buf.height) {
        return colormap;
    }
    var data = buf.data;
    var maxd = 50;
    for (var colobj of colormap) {
        var score = 0;
        var col = colobj.col;
        for (var y = rect.y; y < rect.y + rect.height; y++) {
            for (var x = rect.x; x < rect.x + rect.width; x++) {
                var i = x * 4 + y * 4 * buf.width;
                var d = Math.abs(data[i] - col[0]) + Math.abs(data[i + 1] - col[1]) + Math.abs(data[i + 2] - col[2]);
                if (d < maxd) {
                    score += maxd - d;
                }
            }
        }
        colobj.score = score;
    }
    return colormap.sort((a, b) => b.score - a.score);
}
exports.getChatColorMono = getChatColorMono;
function unblend(r, g, b, R, G, B) {
    var m = Math.sqrt(r * r + g * g + b * b);
    var n = Math.sqrt(R * R + G * G + B * B);
    var x = (r * R + g * G + b * B) / n;
    var y = Math.sqrt(Math.max(0, m * m - x * x));
    var r1 = Math.max(0, (63.75 - y) * 4);
    var r2 = x / n * 255;
    if (r2 > 255) //brighter than refcol
     {
        r1 = Math.max(0, r1 - r2 + 255);
        r2 = 255;
    }
    return [r1, r2];
}
function getChatColor(buf, rect, colors) {
    var bestscore = -1.0;
    var best = null;
    var b2 = 0.0;
    var data = buf.data;
    for (let col of colors) {
        var score = 0.0;
        for (var y = rect.y; y < rect.y + rect.height; y++) {
            for (var x = rect.x; x < rect.x + rect.width; x++) {
                if (x < 0 || x + 1 >= buf.width) {
                    continue;
                }
                if (y < 0 || y + 1 >= buf.width) {
                    continue;
                }
                let i1 = buf.pixelOffset(x, y);
                let i2 = buf.pixelOffset(x + 1, y + 1);
                var pixel1 = unblend(data[i1 + 0], data[i1 + 1], data[i1 + 2], col[0], col[1], col[2]);
                var pixel2 = unblend(data[i2 + 0], data[i2 + 1], data[i2 + 2], col[0], col[1], col[2]);
                //TODO this is from c# can simplify a bit
                var s = (pixel1[0] / 255 * pixel1[1] / 255) * (pixel2[0] / 255 * (255.0 - pixel2[1]) / 255);
                score += s;
            }
        }
        if (score > bestscore) {
            b2 = bestscore;
            bestscore = score;
            best = col;
        }
        else if (score > b2) {
            b2 = score;
        }
    }
    //Console.WriteLine("color: " + bestcol + " - " + (bestscore - b2));
    //bestscore /= rect.width * rect.height;
    return best;
}
exports.getChatColor = getChatColor;
/**
 * reads a line of text with exactly known position and color. y should be the y coord of the text base line, x should be the first pixel of a new character
 */
function readLine(buffer, font, colors, x, y, forward, backward = false) {
    if (typeof colors[0] != "number" && colors.length == 1) {
        colors = colors[0];
    }
    var multicol = typeof colors[0] != "number";
    var allcolors = multicol ? colors : [colors];
    var detectcolor = function (sx, sy, backward) {
        var w = Math.floor(font.width * 1.5);
        if (backward) {
            sx -= w;
        }
        sy -= font.basey;
        return getChatColor(buffer, { x: sx, y: sy, width: w, height: font.height }, allcolors);
    };
    var fragments = [];
    var x1 = x;
    var x2 = x;
    var maxspaces = (typeof font.maxspaces == "number" ? font.maxspaces : 1);
    let fragtext = "";
    let fraghadprimary = false;
    var lastcol = null;
    let addfrag = (forward) => {
        if (!fragtext) {
            return;
        }
        let frag = {
            text: fragtext,
            color: lastcol,
            index: 0,
            xstart: x + (forward ? fragstartdx : fragenddx),
            xend: x + (forward ? fragenddx : fragstartdx)
        };
        if (forward) {
            fragments.push(frag);
        }
        else {
            fragments.unshift(frag);
        }
        fragtext = "";
        fragstartdx = dx;
        fraghadprimary = false;
    };
    for (var dirforward of [true, false]) {
        //init vars
        if (dirforward && !forward) {
            continue;
        }
        if (!dirforward && !backward) {
            continue;
        }
        var dx = 0;
        var fragstartdx = dx;
        var fragenddx = dx;
        var triedspaces = 0;
        var triedrecol = false;
        var col = multicol ? null : colors;
        while (true) {
            col = col || detectcolor(x + dx, y, !dirforward);
            var chr = (col ? readChar(buffer, font, col, x + dx, y, !dirforward, true) : null);
            if (col == null || chr == null) {
                if (triedspaces < maxspaces) {
                    dx += (dirforward ? 1 : -1) * font.spacewidth;
                    triedspaces++;
                    continue;
                }
                if (multicol && !triedrecol && fraghadprimary) {
                    dx -= (dirforward ? 1 : -1) * triedspaces * font.spacewidth;
                    triedspaces = 0;
                    col = null;
                    triedrecol = true;
                    continue;
                }
                if (dirforward) {
                    x2 = x + dx - font.spacewidth;
                }
                else {
                    x1 = x + dx + font.spacewidth;
                }
                break;
            }
            else {
                if (lastcol && (col[0] != lastcol[0] || col[1] != lastcol[1] || col[2] != lastcol[2])) {
                    addfrag(dirforward);
                }
                var spaces = "";
                for (var a = 0; a < triedspaces; a++) {
                    spaces += " ";
                }
                if (dirforward) {
                    fragtext += spaces + chr.chr;
                }
                else {
                    fragtext = chr.chr + spaces + fragtext;
                }
                if (!chr.basechar.secondary) {
                    fraghadprimary = true;
                }
                triedspaces = 0;
                triedrecol = false;
                dx += (dirforward ? 1 : -1) * chr.basechar.width;
                fragenddx = dx;
                lastcol = col;
            }
        }
        if (lastcol && fraghadprimary) {
            addfrag(dirforward);
        }
    }
    fragments.forEach((f, i) => f.index = i);
    return {
        debugArea: { x: x1, y: y - 9, w: x2 - x1, h: 10 },
        text: fragments.map(f => f.text).join(""),
        fragments
    };
}
exports.readLine = readLine;
/**
 * Reads a line of text that uses a smallcaps font, these fonts can have duplicate chars that only have a different amount of
 * empty space after the char before the next char starts.
 * The coordinates should be near the end of the string, or a rectangle with high 1 containing all points where the string can end.
 */
function readSmallCapsBackwards(buffer, font, cols, x, y, w = -1, h = -1) {
    if (w == -1) {
        w = font.width + font.spacewidth;
        x -= Math.ceil(w / 2);
    }
    if (h == -1) {
        h = 7;
        y -= 1;
    }
    var matchedchar = null;
    var sorted = (cols.length == 1 ? [{ col: cols[0], score: 1 }] : getChatColorMono(buffer, new base_1.Rect(x, y - font.basey, w, h), cols));
    //loop until we have a match (max 2 cols)
    for (var a = 0; a < 2 && a < sorted.length && matchedchar == null; a++) {
        for (var cx = x + w - 1; cx >= x; cx--) {
            var best = 1000; //TODO finetune score constants
            var bestchar = null;
            for (var cy = y; cy < y + h; cy++) {
                var chr = readChar(buffer, font, sorted[a].col, cx, cy, true, false);
                if (chr != null && chr.sizescore < best) {
                    best = chr.sizescore;
                    bestchar = chr;
                }
            }
            if (bestchar) {
                matchedchar = bestchar;
                break;
            }
        }
    }
    if (matchedchar == null) {
        return { text: "", debugArea: { x, y, w, h } };
    }
    return readLine(buffer, font, cols, matchedchar.x, matchedchar.y, false, true);
}
exports.readSmallCapsBackwards = readSmallCapsBackwards;
/**
 * Reads a single character at the exact given location
 * @param x exact x location of the start of the character domain (includes part of the spacing between characters)
 * @param y exact y location of the baseline pixel of the character
 * @param backwards read in backwards direction, the x location should be the first pixel after the character domain in that case
 */
function readChar(buffer, font, col, x, y, backwards, allowSecondary) {
    y -= font.basey;
    var shiftx = 0;
    var shifty = font.basey;
    var shadow = font.shadow;
    var debugobj = null;
    var debugimg = null;
    if (exports.debug.trackread) {
        var name = x + ";" + y + " " + JSON.stringify(col);
        if (!exports.debugout[name]) {
            exports.debugout[name] = [];
        }
        debugobj = exports.debugout[name];
    }
    //===== make sure the full domain is inside the bitmap/buffer ======
    if (y < 0 || y + font.height >= buffer.height) {
        return null;
    }
    if (!backwards) {
        if (x < 0 || x + font.width > buffer.width) {
            return null;
        }
    }
    else {
        if (x - font.width < 0 || x > buffer.width) {
            return null;
        }
    }
    //====== start reading the char ======
    var scores = [];
    for (var chr = 0; chr < font.chars.length; chr++) {
        var chrobj = font.chars[chr];
        if (chrobj.secondary && !allowSecondary) {
            continue;
        }
        scores[chr] = { score: 0, sizescore: 0, chr: chrobj };
        var chrx = (backwards ? x - chrobj.width : x);
        if (exports.debug.trackread) {
            debugimg = new base_1.ImageData(font.width, font.height);
        }
        for (var a = 0; a < chrobj.pixels.length;) {
            var i = (chrx + chrobj.pixels[a]) * 4 + (y + chrobj.pixels[a + 1]) * buffer.width * 4;
            var penalty = 0;
            if (!shadow) {
                penalty = canblend(buffer.data[i], buffer.data[i + 1], buffer.data[i + 2], col[0], col[1], col[2], chrobj.pixels[a + 2] / 255);
                a += 3;
            }
            else {
                var lum = chrobj.pixels[a + 3] / 255;
                penalty = canblend(buffer.data[i], buffer.data[i + 1], buffer.data[i + 2], col[0] * lum, col[1] * lum, col[2] * lum, chrobj.pixels[a + 2] / 255);
                a += 4;
            }
            scores[chr].score += Math.max(0, penalty);
            //TODO add compiler flag to this to remove it for performance
            if (debugimg) {
                debugimg.setPixel(chrobj.pixels[a], chrobj.pixels[a + 1], [penalty, penalty, penalty, 255]);
            }
        }
        scores[chr].sizescore = scores[chr].score - chrobj.bonus;
        if (debugobj) {
            debugobj.push({ chr: chrobj.chr, score: scores[chr].sizescore, rawscore: scores[chr].score, img: debugimg });
        }
    }
    scores.sort((a, b) => a.sizescore - b.sizescore);
    if (exports.debug.printcharscores) {
        scores.slice(0, 5).forEach(q => console.log(q.chr.chr, q.score.toFixed(3), q.sizescore.toFixed(3)));
    }
    var winchr = scores[0];
    if (!winchr || winchr.score > 400) {
        return null;
    }
    return { chr: winchr.chr.chr, basechar: winchr.chr, x: x + shiftx, y: y + shifty, score: winchr.score, sizescore: winchr.sizescore };
}
exports.readChar = readChar;
function loadFontImage(img, meta) {
    var bg = null;
    var pxheight = img.height - 1;
    if (meta.unblendmode == "removebg") {
        pxheight /= 2;
    }
    var inimg = img.clone({ x: 0, y: 0, width: img.width, height: pxheight });
    var outimg;
    if (meta.unblendmode == "removebg") {
        bg = img.clone({ x: 0, y: pxheight + 1, width: img.width, height: pxheight });
        outimg = unblendKnownBg(inimg, bg, meta.shadow, meta.color[0], meta.color[1], meta.color[2]);
    }
    else if (meta.unblendmode == "raw") {
        outimg = unblendTrans(inimg, meta.shadow, meta.color[0], meta.color[1], meta.color[2]);
    }
    else if (meta.unblendmode == "blackbg") {
        outimg = unblendBlackBackground(inimg, meta.color[0], meta.color[1], meta.color[2]);
    }
    else {
        throw new Error("no unblend mode");
    }
    var unblended = new base_1.ImageData(img.width, pxheight + 1);
    outimg.copyTo(unblended, 0, 0, outimg.width, outimg.height, 0, 0);
    img.copyTo(unblended, 0, pxheight, img.width, 1, 0, pxheight);
    return generateFont(unblended, meta.chars, meta.seconds, meta.bonus || {}, meta.basey, meta.spacewidth, meta.treshold, meta.shadow);
}
exports.loadFontImage = loadFontImage;
/**
 * Generates a font json description to use in reader functions
 * @param unblended A source image with all characters lined up. The image should be unblended into components using the unblend functions
 * The lowest pixel line of this image is used to mark the location and size of the charecters if the red component is 255 it means there is a character on that pixel column
 * @param chars A string containing all the characters of the image in the same order
 * @param seconds A string with characters that are considered unlikely and should only be detected if no other character is possible.
 * For example the period (.) character matches positive inside many other characters and should be marked as secondary
 * @param bonusses An object that contains bonus scores for certain difficult characters to make the more likely to be red.
 * @param basey The y position of the baseline pixel of the font
 * @param spacewidth the number of pixels a space takes
 * @param treshold minimal color match proportion (0-1) before a pixel is used for the font
 * @param shadow whether this font also uses the black shadow some fonts have. The "unblended" image should be unblended correspondingly
 * @returns a javascript object describing the font which is used as input for the different read functions
 */
function generateFont(unblended, chars, seconds, bonusses, basey, spacewidth, treshold, shadow) {
    //settings vars
    treshold *= 255;
    //initial vars
    var miny = unblended.height - 1;
    var maxy = 0;
    var font = { chars: [], width: 0, spacewidth: spacewidth, shadow: shadow, height: 0, basey: 0 };
    var ds = false;
    var chardata = [];
    //index all chars
    for (var dx = 0; dx < unblended.width; dx++) {
        var i = 4 * dx + 4 * unblended.width * (unblended.height - 1);
        if (unblended.data[i] == 255 && unblended.data[i + 3] == 255) {
            if (ds === false) {
                ds = dx;
            }
        }
        else {
            if (ds !== false) {
                //char found, start detection
                var de = dx;
                var char = chars[chardata.length];
                var chr = {
                    ds: ds,
                    de: de,
                    width: de - ds,
                    chr: char,
                    bonus: (bonusses && bonusses[char]) || 0,
                    secondary: seconds.indexOf(chars[chardata.length]) != -1,
                    pixels: []
                };
                chardata.push(chr);
                font.width = Math.max(font.width, chr.width);
                for (x = 0; x < de - ds; x++) {
                    for (y = 0; y < unblended.height - 1; y++) {
                        var i = (x + ds) * 4 + y * unblended.width * 4;
                        if (unblended.data[i] >= treshold) {
                            miny = Math.min(miny, y);
                            maxy = Math.max(maxy, y);
                        }
                    }
                }
                ds = false;
            }
        }
    }
    font.height = maxy + 1 - miny;
    font.basey = basey - miny;
    //detect all pixels
    for (var a in chardata) {
        var chr = chardata[a];
        for (var x = 0; x < chr.width; x++) {
            for (var y = 0; y < maxy + 1 - miny; y++) {
                var i = (x + chr.ds) * 4 + (y + miny) * unblended.width * 4;
                if (unblended.data[i] >= treshold) {
                    chr.pixels.push(x, y);
                    chr.pixels.push(unblended.data[i]);
                    if (shadow) {
                        chr.pixels.push(unblended.data[i + 1]);
                    }
                    chr.bonus += 5;
                }
            }
        }
        //prevent js from doing the thing with unnecessary output precision
        chr.bonus = +chr.bonus.toFixed(3);
        font.chars.push({ width: chr.width, bonus: chr.bonus, chr: chr.chr, pixels: chr.pixels, secondary: chr.secondary });
    }
    return font;
}
exports.generateFont = generateFont;


/***/ }),

/***/ "alt1/base":
/*!**************************************************************************************************!*\
  !*** external {"root":"A1lib","commonjs2":"alt1/base","commonjs":"alt1/base","amd":"alt1/base"} ***!
  \**************************************************************************************************/
/***/ ((module) => {

module.exports = __WEBPACK_EXTERNAL_MODULE_alt1_base__;

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The module cache
/******/ 	var __webpack_module_cache__ = {};
/******/ 	
/******/ 	// The require function
/******/ 	function __nested_webpack_require_27427__(moduleId) {
/******/ 		// Check if module is in cache
/******/ 		var cachedModule = __webpack_module_cache__[moduleId];
/******/ 		if (cachedModule !== undefined) {
/******/ 			return cachedModule.exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = __webpack_module_cache__[moduleId] = {
/******/ 			// no module.id needed
/******/ 			// no module.loaded needed
/******/ 			exports: {}
/******/ 		};
/******/ 	
/******/ 		// Execute the module function
/******/ 		__webpack_modules__[moduleId](module, module.exports, __nested_webpack_require_27427__);
/******/ 	
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/ 	
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module is referenced by other modules so it can't be inlined
/******/ 	var __nested_webpack_exports__ = __nested_webpack_require_27427__("./src/ocr/index.ts");
/******/ 	
/******/ 	return __nested_webpack_exports__;
/******/ })()
;
});

/***/ }),

/***/ "../node_modules/alt1/dist/targetmob/index.js":
/*!****************************************************!*\
  !*** ../node_modules/alt1/dist/targetmob/index.js ***!
  \****************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

(function webpackUniversalModuleDefinition(root, factory) {
	if(true)
		module.exports = factory(__webpack_require__(/*! alt1/base */ "../node_modules/alt1/dist/base/index.js"), __webpack_require__(/*! alt1/ocr */ "../node_modules/alt1/dist/ocr/index.js"));
	else {}
})(globalThis, (__WEBPACK_EXTERNAL_MODULE_alt1_base__, __WEBPACK_EXTERNAL_MODULE_alt1_ocr__) => {
return /******/ (() => { // webpackBootstrap
/******/ 	var __webpack_modules__ = ({

/***/ "./src/targetmob/imgs/detectimg.data.png":
/*!***********************************************!*\
  !*** ./src/targetmob/imgs/detectimg.data.png ***!
  \***********************************************/
/***/ ((module, __unused_webpack_exports, __nested_webpack_require_905__) => {

module.exports=(__nested_webpack_require_905__(/*! alt1/base */ "alt1/base").ImageDetect.imageDataFromBase64)("iVBORw0KGgoAAAANSUhEUgAAABoAAAARCAYAAADDjbwNAAAAAW5vUEUAYtdMlAAAAARub1BFAAAAAEEgjiIAAAAJbm9QRQAAAAAAAAAAAKGKctUAAAAYbm9QRQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAFYtZUsAAACJSURBVDhPtc09CoNAGIThZSEuG3KHLVKJCIJgfpAYxG5vkDL3v8NIAjZmCJ/CFE/zFjMOwG5VP8HHE0J9xzGVf9EBq3Pbf48Oj4xweSJ0A4rr+OPT6YDVcmRBB6xSc4MVHVCgUYFGBRoVaFSgUYFGBRoVaFSgUYFGBZdfb2yxHrByvoiw2n8ENwOqvL/qtsOgigAAAABJRU5ErkJggg==")

/***/ }),

/***/ "./src/targetmob/index.ts":
/*!********************************!*\
  !*** ./src/targetmob/index.ts ***!
  \********************************/
/***/ (function(__unused_webpack_module, exports, __nested_webpack_require_1620__) {

"use strict";

var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
const a1lib = __importStar(__nested_webpack_require_1620__(/*! alt1/base */ "alt1/base"));
const OCR = __importStar(__nested_webpack_require_1620__(/*! alt1/ocr */ "alt1/ocr"));
const base_1 = __nested_webpack_require_1620__(/*! alt1/base */ "alt1/base");
var chatfont = __nested_webpack_require_1620__(/*! ../fonts/aa_8px.fontmeta.json */ "./src/fonts/aa_8px.fontmeta.json");
var imgs = (0, base_1.webpackImages)({
    detectimg: __nested_webpack_require_1620__(/*! ./imgs/detectimg.data.png */ "./src/targetmob/imgs/detectimg.data.png")
});
class TargetMobReader {
    constructor() {
        this.state = null;
        this.lastpos = null;
    }
    read(img) {
        if (!img) {
            img = a1lib.captureHoldFullRs();
        }
        var pos = img.findSubimage(imgs.detectimg);
        if (pos.length != 0) {
            var data = img.toData(pos[0].x - 151, pos[0].y - 16, 220, 44);
            var mobname = OCR.findReadLine(data, chatfont, [[255, 255, 255]], 62, 18, 20, 1);
            var mobhp = OCR.findReadLine(data, chatfont, [[255, 203, 5]], 92, 39, 20, 1);
            this.lastpos = pos[0];
            this.state = {
                name: mobname.text,
                hp: +mobhp.text
            };
        }
        else {
            this.state = null;
        }
        return this.state;
    }
}
exports["default"] = TargetMobReader;


/***/ }),

/***/ "alt1/base":
/*!**************************************************************************************************!*\
  !*** external {"root":"A1lib","commonjs2":"alt1/base","commonjs":"alt1/base","amd":"alt1/base"} ***!
  \**************************************************************************************************/
/***/ ((module) => {

"use strict";
module.exports = __WEBPACK_EXTERNAL_MODULE_alt1_base__;

/***/ }),

/***/ "alt1/ocr":
/*!*********************************************************************************************!*\
  !*** external {"root":"OCR","commonjs2":"alt1/ocr","commonjs":"alt1/ocr","amd":"alt1/ocr"} ***!
  \*********************************************************************************************/
/***/ ((module) => {

"use strict";
module.exports = __WEBPACK_EXTERNAL_MODULE_alt1_ocr__;

/***/ }),

/***/ "./src/fonts/aa_8px.fontmeta.json":
/*!****************************************!*\
  !*** ./src/fonts/aa_8px.fontmeta.json ***!
  \****************************************/
/***/ ((module) => {

"use strict";
module.exports = JSON.parse('{"chars":[{"width":7,"bonus":140,"chr":"a","pixels":[0,7,187,255,1,3,221,255,1,6,169,255,1,7,164,132,1,8,255,255,2,3,255,255,2,4,221,0,2,5,196,243,2,7,170,0,2,8,255,255,2,9,255,0,3,3,255,255,3,4,255,0,3,5,255,255,3,6,187,0,3,8,221,255,3,9,255,0,4,4,254,239,4,5,255,255,4,6,254,204,4,7,255,255,4,8,240,253,4,9,221,0,5,5,240,36,5,6,255,34,5,7,211,41,5,8,255,34,5,9,238,0],"secondary":false},{"width":7,"bonus":175,"chr":"b","pixels":[0,1,203,255,0,2,221,255,0,3,221,255,0,4,221,255,0,5,221,255,0,6,221,255,0,7,221,255,0,8,203,255,1,2,211,41,1,3,248,209,1,4,243,178,1,5,230,75,1,6,230,75,1,7,243,178,1,8,246,194,1,9,204,0,2,3,255,255,2,4,204,0,2,5,170,0,2,8,255,255,2,9,187,0,3,3,255,255,3,4,255,0,3,8,255,255,3,9,255,0,4,3,169,255,4,4,254,171,4,7,169,255,4,9,255,0,5,4,204,128,5,5,232,205,5,6,205,233,5,8,170,0,6,6,187,0,6,7,187,0],"secondary":false},{"width":7,"bonus":95,"chr":"c","pixels":[0,5,169,255,0,6,187,255,1,4,187,255,1,6,193,90,1,7,237,201,1,8,164,185,2,3,255,255,2,5,187,0,2,8,255,255,3,3,255,255,3,4,255,0,3,8,255,255,3,9,255,0,4,3,221,255,4,4,255,34,4,8,221,255,4,9,255,0,5,4,226,39,5,9,221,0],"secondary":false},{"width":7,"bonus":180,"chr":"d","pixels":[0,5,187,255,0,6,187,255,1,4,169,255,1,6,205,85,1,7,232,187,1,8,203,213,2,3,255,255,2,5,170,0,2,8,255,255,2,9,170,0,3,3,255,255,3,4,255,0,3,8,255,255,3,9,255,0,4,3,203,255,4,4,254,171,4,7,169,255,4,8,187,255,4,9,255,0,5,1,203,255,5,2,225,251,5,3,225,251,5,4,248,227,5,5,244,231,5,6,230,245,5,7,230,245,5,8,237,219,5,9,187,0,6,2,204,0,6,3,221,0,6,4,221,0,6,5,221,0,6,6,221,0,6,7,221,0,6,8,221,0,6,9,204,0],"secondary":false},{"width":7,"bonus":135,"chr":"e","pixels":[0,5,187,255,0,6,169,255,1,4,187,255,1,5,255,255,1,6,209,104,1,7,237,219,2,3,255,255,2,5,255,255,2,6,255,0,2,8,255,255,3,3,255,255,3,4,255,0,3,5,255,255,3,6,255,0,3,8,255,255,3,9,255,0,4,3,187,255,4,4,255,119,4,5,255,255,4,6,255,0,4,8,221,255,4,9,255,0,5,4,224,155,5,5,227,229,5,6,255,0,5,9,221,0,6,6,204,0],"secondary":false},{"width":4,"bonus":90,"chr":"f","pixels":[0,3,203,255,1,2,221,255,1,3,255,255,1,4,248,227,1,5,225,251,1,6,225,251,1,7,225,251,1,8,210,247,2,1,255,255,2,3,255,255,2,4,255,0,2,5,221,0,2,6,221,0,2,7,221,0,2,8,221,0,2,9,204,0,3,2,255,0,3,4,255,0],"secondary":false},{"width":7,"bonus":200,"chr":"g","pixels":[0,5,187,255,0,6,187,255,1,3,169,255,1,4,153,255,1,5,155,112,1,6,205,85,1,7,232,187,1,8,184,189,1,11,153,255,2,3,255,255,2,4,170,0,2,5,153,0,2,8,255,255,2,11,245,247,3,3,255,255,3,4,255,0,3,8,255,255,3,9,255,0,3,11,221,255,4,3,221,255,4,4,255,136,4,7,153,255,4,8,221,255,4,9,255,85,4,10,203,255,5,3,203,255,5,4,250,226,5,5,239,236,5,6,230,245,5,7,230,245,5,8,241,234,5,9,243,178,5,11,204,0,6,4,204,0,6,5,221,0,6,6,221,0,6,7,221,0,6,8,221,0,6,9,221,0,6,10,170,0],"secondary":false},{"width":7,"bonus":165,"chr":"h","pixels":[0,1,203,255,0,2,221,255,0,3,221,255,0,4,221,255,0,5,221,255,0,6,221,255,0,7,221,255,0,8,203,255,1,2,211,41,1,3,243,178,1,4,248,209,1,5,230,75,1,6,226,39,1,7,226,39,1,8,226,39,1,9,204,0,2,3,255,255,2,4,170,0,2,5,204,0,3,3,255,255,3,4,255,0,4,3,169,255,4,4,255,221,4,5,221,255,4,6,221,255,4,7,221,255,4,8,203,255,5,4,175,25,5,5,226,39,5,6,226,39,5,7,226,39,5,8,226,39,5,9,204,0],"secondary":false},{"width":3,"bonus":70,"chr":"i","pixels":[0,1,237,255,0,3,203,255,0,4,221,255,0,5,221,255,0,6,221,255,0,7,221,255,0,8,203,255,1,2,238,0,1,4,211,41,1,5,226,39,1,6,226,39,1,7,226,39,1,8,226,39,1,9,204,0],"secondary":false},{"width":4,"bonus":90,"chr":"j","pixels":[0,11,153,255,1,11,169,255,2,1,203,255,2,3,203,255,2,4,225,251,2,5,225,251,2,6,225,251,2,7,225,251,2,8,225,251,2,9,225,251,3,2,204,0,3,4,204,0,3,5,221,0,3,6,221,0,3,7,221,0,3,8,221,0,3,9,221,0,3,10,221,0],"secondary":false},{"width":6,"bonus":130,"chr":"k","pixels":[0,1,203,255,0,2,221,255,0,3,221,255,0,4,221,255,0,5,221,255,0,6,221,255,0,7,221,255,0,8,203,255,1,2,211,41,1,3,226,39,1,4,226,39,1,5,255,255,1,6,226,39,1,7,226,39,1,8,226,39,1,9,204,0,2,4,166,235,2,5,255,255,2,6,255,221,3,3,203,255,3,5,153,0,3,6,255,51,3,7,250,226,3,8,160,217,4,4,204,0,4,8,239,145],"secondary":false},{"width":3,"bonus":75,"chr":"l","pixels":[0,1,203,255,0,2,221,255,0,3,221,255,0,4,221,255,0,5,221,255,0,6,221,255,0,7,221,255,1,2,211,41,1,3,226,39,1,4,226,39,1,5,226,39,1,6,226,39,1,7,226,39,1,8,255,255,2,9,255,0],"secondary":false},{"width":10,"bonus":210,"chr":"m","pixels":[0,3,203,255,0,4,221,255,0,5,221,255,0,6,221,255,0,7,221,255,0,8,203,255,1,4,248,227,1,5,230,75,1,6,226,39,1,7,226,39,1,8,226,39,1,9,204,0,2,3,237,255,2,5,221,0,3,3,255,255,3,4,238,0,4,3,153,255,4,4,255,255,4,5,221,255,4,6,221,255,4,7,221,255,4,8,203,255,5,4,228,209,5,5,255,68,5,6,226,39,5,7,226,39,5,8,226,39,5,9,204,0,6,3,255,255,6,5,187,0,7,3,237,255,7,4,255,85,8,4,249,174,8,5,232,243,8,6,225,251,8,7,225,251,8,8,210,247,9,5,170,0,9,6,221,0,9,7,221,0,9,8,221,0,9,9,204,0],"secondary":false},{"width":7,"bonus":140,"chr":"n","pixels":[0,3,203,255,0,4,221,255,0,5,221,255,0,6,221,255,0,7,221,255,0,8,203,255,1,4,248,227,1,5,232,93,1,6,226,39,1,7,226,39,1,8,226,39,1,9,204,0,2,3,237,255,2,5,221,0,3,3,255,255,3,4,238,0,4,3,237,255,4,4,255,85,5,4,249,174,5,5,232,243,5,6,225,251,5,7,225,251,5,8,210,247,6,5,170,0,6,6,221,0,6,7,221,0,6,8,221,0,6,9,204,0],"secondary":false},{"width":8,"bonus":120,"chr":"o","pixels":[0,5,187,255,0,6,169,255,1,4,203,255,1,6,209,104,1,7,244,231,2,3,237,255,2,5,204,0,2,8,252,241,3,3,255,255,3,4,238,0,3,8,255,255,3,9,238,0,4,3,237,255,4,4,255,0,4,8,255,255,4,9,255,0,5,4,251,207,5,7,221,255,5,9,255,0,6,5,237,183,6,6,192,225,6,8,221,0,7,6,170,0,7,7,170,0],"secondary":false},{"width":6,"bonus":170,"chr":"p","pixels":[0,3,237,255,0,4,255,255,0,5,187,255,0,6,203,255,0,7,255,255,0,8,221,255,0,9,221,255,0,10,221,255,1,3,255,255,1,4,240,36,1,5,255,0,1,6,187,0,1,7,211,41,1,8,254,239,1,9,221,0,1,10,221,0,1,11,221,0,2,3,255,255,2,4,255,0,2,8,255,255,2,9,238,0,3,3,237,255,3,4,255,34,3,8,237,255,3,9,255,0,4,4,253,240,4,5,255,255,4,6,255,255,4,7,237,255,4,9,238,0,5,5,239,18,5,6,255,17,5,7,255,0,5,8,238,0],"secondary":false},{"width":7,"bonus":165,"chr":"q","pixels":[0,5,187,255,0,6,187,255,1,3,169,255,1,4,153,255,1,5,155,112,1,6,205,85,1,7,228,171,1,8,209,207,2,3,255,255,2,4,170,0,2,5,153,0,2,8,255,255,2,9,170,0,3,3,237,255,3,4,255,17,3,8,237,255,3,9,255,0,4,3,255,255,4,4,255,255,4,5,191,250,4,6,187,255,4,7,255,255,4,8,239,254,4,9,253,223,4,10,221,255,5,4,255,34,5,5,255,34,5,6,196,45,5,7,196,45,5,8,255,34,5,9,240,36,5,10,226,39,5,11,221,0],"secondary":false},{"width":4,"bonus":85,"chr":"r","pixels":[0,3,203,255,0,4,221,255,0,5,221,255,0,6,221,255,0,7,221,255,0,8,203,255,1,3,187,255,1,4,244,213,1,5,232,93,1,6,226,39,1,7,226,39,1,8,226,39,1,9,204,0,2,3,255,255,2,4,187,0,2,5,204,0,3,4,255,0],"secondary":false},{"width":6,"bonus":100,"chr":"s","pixels":[0,4,187,255,1,3,255,255,1,5,250,243,1,8,255,255,2,3,255,255,2,4,255,0,2,5,155,196,2,6,246,123,2,8,255,255,2,9,255,0,3,3,255,255,3,4,255,0,3,6,245,247,3,7,164,132,3,8,255,255,3,9,255,0,4,4,255,17,4,7,250,191,4,9,255,0,5,8,187,0],"secondary":false},{"width":5,"bonus":80,"chr":"t","pixels":[1,2,221,255,1,3,255,255,1,4,235,240,1,5,221,255,1,6,221,255,1,7,169,255,2,3,255,255,2,4,255,34,2,5,226,39,2,6,226,39,2,7,232,93,2,8,249,243,3,4,255,0,3,8,187,209,3,9,238,0,4,9,153,0],"secondary":false},{"width":6,"bonus":135,"chr":"u","pixels":[0,3,203,255,0,4,221,255,0,5,221,255,0,6,221,255,0,7,169,255,1,4,211,41,1,5,226,39,1,6,226,39,1,7,232,93,1,8,249,243,2,8,255,255,2,9,238,0,3,8,203,255,3,9,255,0,4,3,203,255,4,4,221,255,4,5,221,255,4,6,203,255,4,7,255,255,4,8,228,247,4,9,204,0,5,4,211,41,5,5,226,39,5,6,226,39,5,7,211,41,5,8,255,34,5,9,221,0],"secondary":false},{"width":6,"bonus":95,"chr":"v","pixels":[0,3,237,255,1,4,247,141,1,5,245,247,1,6,203,255,2,6,241,54,2,7,255,255,2,8,255,255,3,5,153,255,3,6,255,255,3,7,173,226,3,8,255,51,3,9,255,0,4,3,237,255,4,4,203,255,4,6,153,0,4,7,255,0,4,8,153,0,5,4,238,0,5,5,204,0],"secondary":false},{"width":10,"bonus":170,"chr":"w","pixels":[1,3,153,255,1,4,243,249,1,5,187,255,2,4,153,0,2,5,243,71,2,6,228,171,2,7,243,249,2,8,187,255,3,6,217,239,3,7,248,244,3,8,248,157,3,9,187,0,4,3,169,255,4,4,255,255,4,7,204,0,4,8,238,0,4,9,153,0,5,4,244,231,5,5,255,221,5,6,191,159,6,5,223,19,6,6,237,128,6,7,255,255,6,8,223,253,7,6,239,254,7,7,227,229,7,8,255,119,7,9,221,0,8,3,237,255,8,4,203,255,8,7,238,0,8,8,204,0,9,4,238,0,9,5,204,0],"secondary":false},{"width":6,"bonus":95,"chr":"x","pixels":[0,8,169,255,1,3,169,255,1,4,224,232,1,7,221,255,1,9,170,0,2,4,193,90,2,5,255,255,2,6,240,253,2,8,221,0,3,4,255,255,3,5,155,196,3,6,255,187,3,7,250,191,4,3,221,255,4,5,255,0,4,7,209,104,4,8,255,255,5,4,221,0,5,9,255,0],"secondary":false},{"width":6,"bonus":110,"chr":"y","pixels":[0,3,255,255,0,4,153,255,0,11,221,255,1,4,255,85,1,5,234,222,1,6,228,247,1,11,196,243,2,6,207,21,2,7,246,194,2,8,255,255,2,9,237,255,3,6,237,255,3,7,191,250,3,8,205,85,3,9,255,0,3,10,238,0,4,3,203,255,4,4,221,255,4,7,238,0,4,8,187,0,5,4,204,0,5,5,221,0],"secondary":false},{"width":6,"bonus":130,"chr":"z","pixels":[0,3,153,255,0,8,203,255,1,3,255,255,1,4,153,0,1,7,221,255,1,8,255,255,1,9,204,0,2,3,255,255,2,4,255,0,2,6,255,255,2,8,255,255,2,9,255,0,3,3,255,255,3,4,254,171,3,5,169,255,3,7,255,0,3,8,255,255,3,9,255,0,4,3,255,255,4,4,255,119,4,5,170,0,4,6,170,0,4,8,255,255,4,9,255,0,5,4,255,0,5,9,255,0],"secondary":false},{"width":8,"bonus":155,"chr":"A","pixels":[0,8,153,255,1,6,221,255,1,7,237,255,1,9,153,0,2,3,169,255,2,4,255,255,2,5,187,255,2,6,255,255,2,7,221,0,2,8,238,0,3,1,255,255,3,2,255,255,3,4,170,0,3,5,255,0,3,6,255,255,3,7,255,0,4,2,255,255,4,3,254,239,4,4,184,189,4,6,255,255,4,7,255,0,5,3,255,34,5,4,247,141,5,5,255,255,5,6,255,255,5,7,255,102,6,6,255,85,6,7,255,187,6,8,255,255,7,8,187,0,7,9,255,0],"secondary":false},{"width":7,"bonus":225,"chr":"B","pixels":[0,1,203,255,0,2,221,255,0,3,221,255,0,4,221,255,0,5,221,255,0,6,221,255,0,7,221,255,0,8,203,255,1,1,255,255,1,2,211,41,1,3,226,39,1,4,255,255,1,5,226,39,1,6,226,39,1,7,226,39,1,8,255,255,1,9,204,0,2,1,255,255,2,2,255,0,2,4,255,255,2,5,255,0,2,8,255,255,2,9,255,0,3,1,255,255,3,2,255,0,3,4,255,255,3,5,255,0,3,8,255,255,3,9,255,0,4,1,221,255,4,2,255,85,4,4,255,255,4,5,254,171,4,8,203,255,4,9,255,0,5,2,243,178,5,3,198,219,5,5,255,102,5,6,232,205,5,7,180,217,5,9,204,0,6,3,170,0,6,4,170,0,6,7,187,0,6,8,153,0],"secondary":false},{"width":9,"bonus":155,"chr":"C","pixels":[0,4,187,255,0,5,187,255,1,2,221,255,1,3,153,255,1,4,155,112,1,5,205,85,1,6,228,171,1,7,224,232,2,1,169,255,2,3,221,0,2,4,153,0,2,7,194,135,2,8,237,183,3,1,255,255,3,2,170,0,3,8,255,255,3,9,170,0,4,1,255,255,4,2,255,0,4,8,255,255,4,9,255,0,5,1,255,255,5,2,255,0,5,8,255,255,5,9,255,0,6,1,169,255,6,2,255,102,6,8,169,255,6,9,255,0,7,2,181,48,7,9,170,0],"secondary":false},{"width":8,"bonus":200,"chr":"D","pixels":[0,1,203,255,0,2,221,255,0,3,221,255,0,4,221,255,0,5,221,255,0,6,221,255,0,7,221,255,0,8,203,255,1,1,255,255,1,2,211,41,1,3,226,39,1,4,226,39,1,5,226,39,1,6,226,39,1,7,226,39,1,8,255,255,1,9,204,0,2,1,255,255,2,2,255,0,2,8,255,255,2,9,255,0,3,1,255,255,3,2,255,0,3,8,255,255,3,9,255,0,4,1,203,255,4,2,255,68,4,8,203,255,4,9,255,0,5,2,248,227,5,3,168,207,5,7,221,255,5,9,204,0,6,3,237,128,6,4,223,214,6,5,205,233,6,6,155,196,6,8,221,0,7,5,187,0,7,6,187,0],"secondary":false},{"width":6,"bonus":180,"chr":"E","pixels":[0,1,203,255,0,2,221,255,0,3,221,255,0,4,221,255,0,5,221,255,0,6,221,255,0,7,221,255,0,8,203,255,1,1,255,255,1,2,211,41,1,3,226,39,1,4,226,39,1,5,255,255,1,6,226,39,1,7,226,39,1,8,255,255,1,9,204,0,2,1,255,255,2,2,255,0,2,5,255,255,2,6,255,0,2,8,255,255,2,9,255,0,3,1,255,255,3,2,255,0,3,5,255,255,3,6,255,0,3,8,255,255,3,9,255,0,4,1,153,255,4,2,255,0,4,6,255,0,4,8,221,255,4,9,255,0,5,2,153,0,5,9,221,0],"secondary":false},{"width":6,"bonus":135,"chr":"F","pixels":[0,1,203,255,0,2,221,255,0,3,221,255,0,4,221,255,0,5,221,255,0,6,221,255,0,7,221,255,0,8,203,255,1,1,255,255,1,2,211,41,1,3,226,39,1,4,226,39,1,5,255,255,1,6,226,39,1,7,226,39,1,8,226,39,1,9,204,0,2,1,255,255,2,2,255,0,2,5,255,255,2,6,255,0,3,1,255,255,3,2,255,0,3,5,255,255,3,6,255,0,4,2,255,0,4,6,255,0],"secondary":false},{"width":9,"bonus":200,"chr":"G","pixels":[0,4,169,255,0,5,187,255,1,2,203,255,1,3,153,255,1,5,193,90,1,6,224,155,1,7,237,238,2,1,169,255,2,3,204,0,2,4,153,0,2,7,175,124,2,8,246,194,3,1,255,255,3,2,170,0,3,8,255,255,3,9,187,0,4,1,255,255,4,2,255,0,4,8,255,255,4,9,255,0,5,1,255,255,5,2,255,0,5,8,237,255,5,9,255,0,6,1,169,255,6,2,255,85,6,5,255,255,6,7,153,255,6,8,169,255,6,9,238,0,7,2,175,25,7,5,153,255,7,6,255,221,7,7,225,251,7,8,234,222,7,9,170,0,8,6,153,0,8,7,221,0,8,8,221,0,8,9,204,0],"secondary":false},{"width":8,"bonus":200,"chr":"H","pixels":[0,1,203,255,0,2,221,255,0,3,221,255,0,4,221,255,0,5,221,255,0,6,221,255,0,7,221,255,0,8,203,255,1,2,211,41,1,3,226,39,1,4,226,39,1,5,255,255,1,6,226,39,1,7,226,39,1,8,226,39,1,9,204,0,2,5,255,255,2,6,255,0,3,5,255,255,3,6,255,0,4,5,255,255,4,6,255,0,5,5,255,255,5,6,255,34,6,1,203,255,6,2,225,251,6,3,225,251,6,4,225,251,6,5,225,251,6,6,255,221,6,7,225,251,6,8,210,247,7,2,204,0,7,3,221,0,7,4,221,0,7,5,221,0,7,6,221,0,7,7,221,0,7,8,221,0,7,9,204,0],"secondary":false},{"width":4,"bonus":110,"chr":"I","pixels":[0,1,191,255,0,8,191,255,1,1,255,255,1,2,255,255,1,3,255,255,1,4,255,255,1,5,255,255,1,6,255,255,1,7,255,255,1,8,255,255,1,9,191,0,2,1,191,255,2,2,255,0,2,3,255,0,2,4,255,0,2,5,255,0,2,6,255,0,2,7,255,0,2,8,255,191,2,9,255,0,3,2,192,0,3,9,191,0],"secondary":false},{"width":6,"bonus":130,"chr":"J","pixels":[0,6,153,255,0,7,153,255,1,7,194,135,1,8,234,222,2,1,221,255,2,8,255,255,2,9,204,0,3,1,255,255,3,2,226,39,3,8,203,255,3,9,255,0,4,1,203,255,4,2,255,221,4,3,225,251,4,4,225,251,4,5,225,251,4,6,225,251,4,7,166,235,4,9,204,0,5,2,204,0,5,3,221,0,5,4,221,0,5,5,221,0,5,6,221,0,5,7,221,0,5,8,153,0],"secondary":false},{"width":7,"bonus":155,"chr":"K","pixels":[0,1,203,255,0,2,221,255,0,3,221,255,0,4,221,255,0,5,221,255,0,6,221,255,0,7,221,255,0,8,203,255,1,2,211,41,1,3,226,39,1,4,255,255,1,5,226,39,1,6,226,39,1,7,226,39,1,8,226,39,1,9,204,0,2,4,255,255,2,5,255,102,3,3,221,255,3,5,254,171,3,6,224,232,4,1,203,255,4,2,153,255,4,4,221,0,4,6,193,90,4,7,251,242,4,8,173,226,5,2,204,0,5,3,153,0,5,8,247,141,5,9,153,0],"secondary":false},{"width":6,"bonus":115,"chr":"L","pixels":[0,1,203,255,0,2,221,255,0,3,221,255,0,4,221,255,0,5,221,255,0,6,221,255,0,7,221,255,0,8,203,255,1,2,211,41,1,3,226,39,1,4,226,39,1,5,226,39,1,6,226,39,1,7,226,39,1,8,255,255,1,9,204,0,2,8,255,255,2,9,255,0,3,8,255,255,3,9,255,0,4,8,255,255,4,9,255,0,5,9,255,0],"secondary":false},{"width":9,"bonus":240,"chr":"M","pixels":[0,1,245,255,0,2,255,255,0,3,255,255,0,4,255,255,0,5,255,255,0,6,255,255,0,7,255,255,0,8,255,255,1,2,251,173,1,3,255,225,1,4,255,85,1,5,255,0,1,6,255,0,1,7,255,0,1,8,255,0,1,9,255,0,2,3,191,83,2,4,249,212,2,5,212,229,3,5,226,119,3,6,249,237,3,7,165,227,4,6,241,245,4,7,245,155,4,8,155,32,5,4,207,255,5,5,191,254,5,7,232,0,6,2,169,255,6,3,223,255,6,5,207,0,6,6,190,0,7,1,245,255,7,2,255,255,7,3,255,255,7,4,255,255,7,5,255,255,7,6,255,255,7,7,255,255,7,8,255,255,8,2,245,0,8,3,255,0,8,4,255,0,8,5,255,0,8,6,255,0,8,7,255,0,8,8,255,0,8,9,255,0],"secondary":false},{"width":8,"bonus":200,"chr":"N","pixels":[0,1,203,255,0,2,221,255,0,3,221,255,0,4,221,255,0,5,221,255,0,6,221,255,0,7,221,255,0,8,203,255,1,2,255,255,1,3,235,111,1,4,226,39,1,5,226,39,1,6,226,39,1,7,226,39,1,8,226,39,1,9,204,0,2,3,255,221,2,4,163,160,3,4,246,194,3,5,214,223,4,5,214,122,4,6,246,229,5,6,163,160,5,7,255,255,6,1,203,255,6,2,225,251,6,3,225,251,6,4,225,251,6,5,225,251,6,6,225,251,6,7,235,240,6,8,254,204,7,2,204,0,7,3,221,0,7,4,221,0,7,5,221,0,7,6,221,0,7,7,221,0,7,8,221,0,7,9,204,0],"secondary":false},{"width":10,"bonus":200,"chr":"O","pixels":[0,4,187,255,0,5,169,255,1,2,203,255,1,3,153,255,1,5,205,85,1,6,226,192,1,7,224,232,2,1,153,255,2,3,204,0,2,4,153,0,2,7,209,145,2,8,234,167,3,1,255,255,3,2,153,0,3,8,255,255,3,9,153,0,4,1,255,255,4,2,255,0,4,8,255,255,4,9,255,0,5,1,255,255,5,2,255,0,5,8,255,255,5,9,255,0,6,1,153,255,6,2,255,102,6,8,153,255,6,9,255,0,7,2,234,222,7,3,194,201,7,6,169,255,7,7,203,255,7,9,153,0,8,3,225,116,8,4,228,209,8,5,192,225,8,7,170,0,8,8,204,0,9,5,187,0,9,6,170,0],"secondary":false},{"width":7,"bonus":165,"chr":"P","pixels":[0,1,203,255,0,2,221,255,0,3,221,255,0,4,221,255,0,5,221,255,0,6,221,255,0,7,221,255,0,8,203,255,1,1,255,255,1,2,211,41,1,3,226,39,1,4,226,39,1,5,255,255,1,6,226,39,1,7,226,39,1,8,226,39,1,9,204,0,2,1,255,255,2,2,255,0,2,5,255,255,2,6,255,0,3,1,255,255,3,2,255,0,3,5,255,255,3,6,255,0,4,1,187,255,4,2,255,136,4,5,187,255,4,6,255,0,5,2,224,155,5,3,239,236,5,6,187,0,6,4,221,0],"secondary":false},{"width":9,"bonus":185,"chr":"Q","pixels":[0,4,187,255,0,5,187,255,1,2,221,255,1,4,155,112,1,5,205,85,1,6,228,171,1,7,235,240,2,1,187,255,2,3,221,0,2,7,187,116,2,8,243,178,3,1,255,255,3,2,187,0,3,8,255,255,3,9,170,0,4,1,255,255,4,2,255,0,4,8,255,255,4,9,255,0,5,1,237,255,5,2,255,0,5,8,237,255,5,9,255,0,6,2,251,207,6,7,255,255,6,9,238,0,7,3,255,255,7,4,203,255,7,5,221,255,7,6,255,255,7,7,155,196,7,8,254,204,8,4,255,17,8,5,207,21,8,6,221,0,8,7,255,0,8,9,204,0],"secondary":false},{"width":7,"bonus":180,"chr":"R","pixels":[0,1,203,255,0,2,221,255,0,3,221,255,0,4,221,255,0,5,221,255,0,6,221,255,0,7,221,255,0,8,203,255,1,1,255,255,1,2,211,41,1,3,226,39,1,4,226,39,1,5,255,255,1,6,226,39,1,7,226,39,1,8,226,39,1,9,204,0,2,1,255,255,2,2,255,0,2,5,255,255,2,6,255,0,3,1,255,255,3,2,255,0,3,5,255,255,3,6,255,187,4,2,254,239,4,3,203,255,4,4,255,255,4,6,255,68,4,7,250,243,4,8,181,239,5,3,239,18,5,4,204,0,5,5,255,0,5,8,245,107,5,9,170,0],"secondary":false},{"width":6,"bonus":130,"chr":"S","pixels":[0,2,153,255,0,3,169,255,1,1,203,255,1,3,187,116,1,4,244,231,1,8,243,249,2,1,255,255,2,2,204,0,2,4,198,219,2,5,232,93,2,8,255,255,2,9,238,0,3,1,255,255,3,2,255,0,3,5,255,255,3,8,255,255,3,9,255,0,4,1,169,255,4,2,255,68,4,5,160,217,4,6,255,221,4,7,237,255,4,9,255,0,5,2,170,0,5,7,223,19,5,8,238,0],"secondary":false},{"width":8,"bonus":125,"chr":"T","pixels":[0,1,255,255,1,1,255,255,1,2,255,0,2,1,255,255,2,2,255,34,3,1,255,255,3,2,255,221,3,3,225,251,3,4,225,251,3,5,225,251,3,6,225,251,3,7,225,251,3,8,210,247,4,1,255,255,4,2,255,0,4,3,221,0,4,4,221,0,4,5,221,0,4,6,221,0,4,7,221,0,4,8,221,0,4,9,204,0,5,1,255,255,5,2,255,0,6,2,255,0],"secondary":false},{"width":8,"bonus":165,"chr":"U","pixels":[0,1,203,255,0,2,221,255,0,3,221,255,0,4,221,255,0,5,221,255,0,6,187,255,1,2,211,41,1,3,226,39,1,4,226,39,1,5,226,39,1,6,230,75,1,7,232,187,1,8,184,189,2,8,255,255,3,8,255,255,3,9,255,0,4,8,221,255,4,9,255,0,5,1,203,255,5,2,221,255,5,3,221,255,5,4,221,255,5,5,221,255,5,6,255,255,5,7,237,255,5,9,221,0,6,2,211,41,6,3,226,39,6,4,226,39,6,5,226,39,6,6,223,19,6,7,255,0,6,8,238,0],"secondary":false},{"width":7,"bonus":125,"chr":"V","pixels":[0,1,255,255,0,2,187,255,1,2,255,68,1,3,228,171,1,4,255,255,1,5,153,255,2,4,153,0,2,5,255,85,2,6,228,209,2,7,242,251,3,6,164,185,3,7,255,255,3,8,251,207,4,4,203,255,4,5,237,255,4,8,255,0,4,9,204,0,5,1,169,255,5,2,255,255,5,3,153,255,5,5,204,0,5,6,238,0,6,2,170,0,6,3,255,0,6,4,153,0],"secondary":false},{"width":10,"bonus":245,"chr":"W","pixels":[0,1,255,255,0,2,221,255,1,2,255,17,1,3,237,128,1,4,223,214,1,5,255,255,1,6,203,255,2,5,191,23,2,6,255,136,2,7,255,255,2,8,255,255,3,3,153,255,3,4,237,255,3,5,221,255,3,7,168,103,3,8,255,0,3,9,255,0,4,1,255,255,4,2,255,255,4,3,187,209,4,4,153,0,4,5,238,0,4,6,221,0,5,2,255,102,5,3,254,171,5,4,248,244,5,5,203,255,6,4,170,0,6,5,241,54,6,6,231,150,6,7,255,255,6,8,255,255,7,4,153,255,7,5,237,255,7,6,241,252,7,7,207,188,7,8,255,85,7,9,255,0,8,1,237,255,8,2,237,255,8,3,153,255,8,4,153,171,8,5,153,0,8,6,238,0,8,7,238,0,8,8,153,0,9,2,238,0,9,3,238,0,9,4,153,0],"secondary":false},{"width":7,"bonus":130,"chr":"X","pixels":[0,8,169,255,1,1,187,255,1,2,220,236,1,7,237,255,1,9,170,0,2,2,205,85,2,3,248,227,2,4,166,235,2,5,255,255,2,6,153,255,2,8,238,0,3,3,155,196,3,4,255,255,3,5,248,244,3,6,255,51,3,7,153,0,4,2,237,255,4,5,255,51,4,6,251,207,4,7,186,233,5,1,203,255,5,3,238,0,5,7,225,116,5,8,255,255,6,2,204,0,6,9,255,0],"secondary":false},{"width":7,"bonus":90,"chr":"Y","pixels":[0,1,169,255,1,2,249,243,2,3,248,157,2,4,255,255,3,4,241,234,3,5,254,204,3,6,232,243,3,7,225,251,3,8,210,247,4,3,255,255,4,5,221,0,4,6,204,0,4,7,221,0,4,8,221,0,4,9,204,0,5,1,237,255,5,4,255,0,6,2,238,0],"secondary":false},{"width":7,"bonus":140,"chr":"Z","pixels":[0,8,187,255,1,1,255,255,1,7,221,255,1,8,255,255,1,9,187,0,2,1,255,255,2,2,255,0,2,5,203,255,2,8,255,255,2,9,255,0,3,1,255,255,3,2,255,0,3,4,203,255,3,6,204,0,3,8,255,255,3,9,255,0,4,1,255,255,4,2,255,221,4,5,204,0,4,8,255,255,4,9,255,0,5,1,187,255,5,2,255,34,5,3,221,0,5,8,153,255,5,9,255,0,6,2,187,0,6,9,153,0],"secondary":false},{"width":7,"bonus":170,"chr":"0","pixels":[0,2,153,255,0,3,221,255,0,4,255,255,0,5,255,255,0,6,237,255,0,7,169,255,1,1,187,255,1,3,153,0,1,4,221,0,1,5,255,0,1,6,255,0,1,7,243,71,1,8,237,219,2,1,187,255,2,2,187,0,2,8,205,233,2,9,211,41,3,1,221,255,3,2,205,85,3,8,203,255,3,9,187,0,4,2,243,178,4,3,255,255,4,4,187,255,4,5,187,255,4,6,237,255,4,7,169,255,4,9,204,0,5,3,170,0,5,4,255,0,5,5,187,0,5,6,187,0,5,7,238,0,5,8,170,0],"secondary":false},{"width":7,"bonus":100,"chr":"1","pixels":[1,8,187,255,2,1,203,255,2,2,224,232,2,3,219,218,2,4,187,255,2,5,187,255,2,6,187,255,2,7,187,255,2,8,237,255,2,9,187,0,3,2,218,80,3,3,218,80,3,4,205,85,3,5,205,85,3,6,205,85,3,7,205,85,3,8,241,215,3,9,238,0,4,8,168,207,4,9,204,0],"secondary":false},{"width":7,"bonus":105,"chr":"2","pixels":[1,8,255,255,2,1,187,255,2,6,153,255,2,8,223,214,2,9,255,0,3,1,203,255,3,2,187,0,3,5,153,255,3,7,153,0,3,8,219,218,3,9,187,0,4,1,187,255,4,2,234,167,4,4,203,255,4,6,153,0,4,8,187,255,4,9,187,0,5,2,214,122,5,3,200,152,5,5,204,0,5,9,187,0],"secondary":false},{"width":7,"bonus":105,"chr":"3","pixels":[0,8,203,255,1,1,187,255,1,8,191,250,1,9,204,0,2,1,187,255,2,2,196,45,2,4,187,255,2,5,174,150,2,8,203,255,2,9,187,0,3,2,246,229,3,3,210,247,3,5,241,215,3,6,173,175,3,7,169,255,3,9,204,0,4,3,227,57,4,4,204,0,4,6,228,133,4,7,174,150,4,8,170,0],"secondary":false},{"width":7,"bonus":150,"chr":"4","pixels":[0,6,237,255,1,4,187,255,1,6,219,218,1,7,238,0,2,3,169,255,2,5,187,0,2,6,219,218,2,7,187,0,3,1,187,255,3,2,153,255,3,3,155,112,3,4,193,90,3,6,203,255,3,7,205,85,4,1,187,255,4,2,237,201,4,3,228,209,4,4,205,233,4,5,205,233,4,6,242,251,4,7,241,198,4,8,205,233,5,2,187,0,5,3,187,0,5,4,187,0,5,5,187,0,5,6,224,155,5,7,238,0,5,8,187,0,5,9,187,0],"secondary":false},{"width":7,"bonus":130,"chr":"5","pixels":[1,1,237,255,1,2,187,255,1,3,187,255,1,4,187,255,1,8,207,251,2,1,187,255,2,2,238,0,2,3,187,0,2,4,237,201,2,5,187,0,2,8,187,255,2,9,204,0,3,1,187,255,3,2,187,0,3,4,203,255,3,5,191,23,3,8,203,255,3,9,187,0,4,2,187,0,4,5,251,242,4,6,191,250,4,7,221,255,4,9,204,0,5,6,243,71,5,7,191,23,5,8,221,0],"secondary":false},{"width":7,"bonus":150,"chr":"6","pixels":[0,3,169,255,0,4,255,255,0,5,255,255,0,6,237,255,0,7,153,255,1,2,187,255,1,4,209,145,1,5,255,68,1,6,255,0,1,7,246,123,1,8,228,209,2,1,203,255,2,3,187,0,2,4,200,238,2,8,219,218,2,9,187,0,3,1,187,255,3,2,204,0,3,4,203,255,3,5,205,85,3,8,187,255,3,9,187,0,4,2,187,0,4,5,248,227,4,6,255,255,4,7,187,255,4,9,187,0,5,6,221,0,5,7,255,0,5,8,187,0],"secondary":false},{"width":7,"bonus":105,"chr":"7","pixels":[0,1,187,255,1,1,187,255,1,2,187,0,1,8,203,255,2,1,187,255,2,2,187,0,2,6,237,255,2,7,153,255,2,9,204,0,3,1,187,255,3,2,205,85,3,3,153,255,3,4,221,255,3,7,238,0,3,8,153,0,4,1,255,255,4,2,237,201,4,4,153,0,4,5,221,0,5,2,255,0,5,3,187,0],"secondary":false},{"width":7,"bonus":165,"chr":"8","pixels":[1,2,237,255,1,3,221,255,1,6,203,255,1,7,228,247,2,1,203,255,2,3,241,54,2,4,248,209,2,5,186,233,2,7,207,21,2,8,250,226,3,1,187,255,3,2,204,0,3,4,186,233,3,5,221,98,3,6,170,0,3,8,191,250,3,9,221,0,4,1,221,255,4,2,209,104,4,4,169,255,4,5,237,219,4,8,187,255,4,9,187,0,5,2,243,178,5,3,187,209,5,5,204,128,5,6,251,242,5,7,240,253,5,9,187,0,6,3,170,0,6,4,153,0,6,7,238,0,6,8,238,0],"secondary":false},{"width":7,"bonus":160,"chr":"9","pixels":[1,2,221,255,1,3,191,250,1,4,242,251,1,8,153,255,2,1,203,255,2,3,221,0,2,4,191,23,2,5,253,223,2,8,191,250,2,9,153,0,3,1,187,255,3,2,204,0,3,5,191,250,3,6,221,0,3,8,203,255,3,9,187,0,4,1,187,255,4,2,218,139,4,6,200,65,4,7,169,255,4,9,204,0,5,2,228,171,5,3,245,247,5,4,255,255,5,5,255,255,5,6,223,214,5,8,170,0,6,3,153,0,6,4,238,0,6,5,255,0,6,6,255,0,6,7,187,0],"secondary":false},{"width":8,"bonus":130,"chr":"%","pixels":[0,3,255,255,0,8,255,255,1,2,255,255,1,4,255,255,1,7,255,255,1,9,255,0,2,3,255,255,2,5,255,41,2,6,255,255,2,8,255,0,3,4,255,41,3,5,255,255,3,7,255,0,4,4,255,255,4,6,255,92,4,7,255,255,5,3,255,255,5,5,255,0,5,6,255,255,5,8,255,255,6,2,255,255,6,4,255,0,6,7,255,255,6,9,255,0,7,3,255,0,7,8,255,0],"secondary":false},{"width":4,"bonus":80,"chr":"/","pixels":[0,7,153,255,0,8,237,255,0,9,221,255,1,4,187,255,1,5,237,255,1,6,169,255,1,8,153,0,1,9,238,0,1,10,221,0,2,1,221,255,2,2,221,255,2,5,187,0,2,6,238,0,2,7,170,0,3,2,221,0,3,3,221,0],"secondary":false},{"width":7,"bonus":110,"chr":"+","pixels":[0,5,221,255,1,5,255,255,1,6,221,0,2,5,255,255,2,6,255,34,3,2,153,255,3,3,223,253,3,4,225,251,3,5,255,255,3,6,255,221,3,7,225,251,3,8,210,247,4,3,153,0,4,4,221,0,4,5,255,255,4,6,255,0,4,7,221,0,4,8,221,0,4,9,204,0,5,5,255,255,5,6,255,0,6,6,255,0],"secondary":false},{"width":5,"bonus":75,"chr":"?","pixels":[0,1,169,255,1,1,255,255,1,2,170,0,1,6,221,255,1,8,255,255,2,1,255,255,2,2,255,0,2,5,169,255,2,7,221,0,2,9,255,0,3,2,255,255,3,3,221,255,3,6,170,0,4,3,255,17,4,4,221,0],"secondary":false},{"width":2,"bonus":70,"chr":"!","pixels":[0,1,169,255,0,2,187,255,0,3,187,255,0,4,187,255,0,5,187,255,0,6,169,255,0,8,255,255,1,2,181,48,1,3,196,45,1,4,196,45,1,5,196,45,1,6,196,45,1,7,170,0,1,9,255,0],"secondary":false},{"width":8,"bonus":230,"chr":"@","pixels":[0,4,255,255,0,5,255,255,0,6,221,255,0,7,255,255,0,8,187,255,1,3,221,255,1,5,255,0,1,6,255,34,1,7,221,0,1,8,255,68,1,9,250,243,2,2,221,255,2,4,232,93,2,5,255,255,2,6,237,255,2,7,255,255,2,10,248,157,3,2,255,255,3,3,221,0,3,4,255,255,3,6,255,0,3,7,241,54,3,8,254,204,3,10,214,223,3,11,153,0,4,2,237,255,4,3,255,0,4,4,255,255,4,5,255,0,4,8,255,255,4,9,204,0,4,11,187,0,5,3,253,240,5,4,255,255,5,5,255,221,5,6,221,255,5,7,221,255,5,8,237,255,5,9,255,0,6,4,240,36,6,5,255,34,6,6,226,39,6,7,226,39,6,8,250,226,6,9,238,0,7,9,221,0],"secondary":false},{"width":8,"bonus":200,"chr":"#","pixels":[0,6,255,255,1,3,255,255,1,6,255,255,1,7,254,171,1,8,237,255,2,1,169,255,2,2,237,255,2,3,255,255,2,4,255,221,2,5,175,247,2,6,255,255,2,7,255,85,2,8,170,0,2,9,238,0,3,2,170,0,3,3,255,255,3,4,255,0,3,5,221,0,3,6,255,255,3,7,255,0,4,3,255,255,4,4,255,153,4,5,203,255,4,6,255,255,4,7,254,239,4,8,187,255,5,1,255,255,5,2,187,255,5,3,255,255,5,4,255,85,5,5,159,27,5,6,255,255,5,7,255,0,5,8,238,0,5,9,187,0,6,2,255,0,6,3,255,255,6,4,255,0,6,7,255,0,7,4,255,0],"secondary":false},{"width":6,"bonus":130,"chr":"$","pixels":[0,2,153,255,0,3,169,255,1,1,203,255,1,3,187,116,1,4,244,231,1,8,243,249,2,0,203,255,2,1,237,255,2,2,204,0,2,4,176,197,2,5,237,128,2,8,240,253,2,9,251,207,3,1,251,242,3,2,239,18,3,5,247,245,3,6,164,132,3,8,255,255,3,9,240,36,3,10,204,0,4,2,240,36,4,6,249,174,4,7,198,219,4,9,255,0,5,7,170,0,5,8,170,0],"secondary":false},{"width":6,"bonus":75,"chr":"^","pixels":[0,4,153,255,0,5,237,255,1,2,203,255,1,3,221,255,1,5,153,0,1,6,238,0,2,1,221,255,2,2,230,245,2,3,218,80,2,4,221,0,3,2,227,57,3,3,246,194,3,4,230,245,4,4,187,0,4,5,239,145],"secondary":false},{"width":6,"bonus":35,"chr":"~","pixels":[1,5,255,255,2,5,221,255,2,6,255,51,3,6,250,226,4,5,203,255,4,7,221,0,5,6,204,0],"secondary":false},{"width":7,"bonus":175,"chr":"&","pixels":[0,6,187,255,1,2,237,255,1,3,255,255,1,4,191,250,1,5,187,255,1,7,224,155,1,8,223,214,2,1,255,255,2,3,238,0,2,4,255,255,2,5,191,23,2,6,187,0,2,8,255,255,2,9,187,0,3,1,255,255,3,2,255,0,3,4,255,255,3,5,255,0,3,8,255,255,3,9,255,0,4,2,255,0,4,4,255,255,4,5,255,34,4,8,187,255,4,9,255,0,5,3,203,255,5,4,255,255,5,5,255,221,5,6,196,243,5,7,155,196,5,9,187,0,6,4,234,167,6,5,255,0,6,6,221,0,6,7,187,0],"secondary":false},{"width":6,"bonus":70,"chr":"*","pixels":[0,2,169,255,1,2,169,255,1,3,237,219,1,4,255,255,2,1,203,255,2,2,240,253,2,3,255,255,2,4,228,133,2,5,255,0,3,2,237,183,3,3,245,107,3,4,255,153,4,3,170,0,4,5,153,0],"secondary":false},{"width":4,"bonus":100,"chr":"(","pixels":[0,3,173,255,0,4,239,255,0,5,253,255,0,6,229,255,0,7,171,255,1,1,193,255,1,2,203,255,1,4,188,64,1,5,241,25,1,6,252,46,1,7,240,112,1,8,238,218,1,9,210,232,2,0,209,255,2,2,194,2,2,3,204,0,2,9,223,111,2,10,245,224,3,1,210,0,3,11,216,0],"secondary":false},{"width":4,"bonus":75,"chr":")","pixels":[1,0,211,255,1,10,215,255,2,1,244,203,2,2,222,234,2,8,203,255,2,9,191,255,2,11,216,0,3,2,213,94,3,3,238,186,3,4,246,248,3,5,253,255,3,6,231,253,3,7,186,234,3,9,203,1,3,10,191,0],"secondary":false},{"width":7,"bonus":60,"chr":"_","pixels":[0,9,153,255,1,9,255,255,1,10,153,0,2,9,255,255,2,10,255,0,3,9,255,255,3,10,255,0,4,9,255,255,4,10,255,0,5,9,255,255,5,10,255,0,6,10,255,0],"secondary":false},{"width":4,"bonus":30,"chr":"-","pixels":[0,5,255,255,1,5,255,255,1,6,255,0,2,5,255,255,2,6,255,0,3,6,255,0],"secondary":true},{"width":8,"bonus":100,"chr":"=","pixels":[0,4,255,255,0,6,255,255,1,4,255,255,1,5,255,0,1,6,255,255,1,7,255,0,2,4,255,255,2,5,255,0,2,6,255,255,2,7,255,0,3,4,255,255,3,5,255,0,3,6,255,255,3,7,255,0,4,4,255,255,4,5,255,0,4,6,255,255,4,7,255,0,5,5,255,0,5,7,255,0],"secondary":false},{"width":3,"bonus":105,"chr":"[","pixels":[0,0,203,255,0,1,221,255,0,2,221,255,0,3,221,255,0,4,221,255,0,5,221,255,0,6,221,255,0,7,221,255,0,8,203,255,1,0,237,255,1,1,211,41,1,2,226,39,1,3,226,39,1,4,226,39,1,5,226,39,1,6,226,39,1,7,226,39,1,8,252,241,1,9,204,0,2,1,238,0,2,9,238,0],"secondary":false},{"width":3,"bonus":105,"chr":"]","pixels":[0,0,237,255,0,8,237,255,1,0,203,255,1,1,253,223,1,2,225,251,1,3,225,251,1,4,225,251,1,5,225,251,1,6,225,251,1,7,225,251,1,8,210,247,1,9,238,0,2,1,204,0,2,2,221,0,2,3,221,0,2,4,221,0,2,5,221,0,2,6,221,0,2,7,221,0,2,8,221,0,2,9,204,0],"secondary":false},{"width":5,"bonus":90,"chr":"{","pixels":[0,5,153,255,1,2,169,255,1,3,221,255,1,4,221,255,1,5,203,255,1,6,255,255,1,7,221,255,1,8,169,255,2,1,237,255,2,3,181,48,2,4,223,19,2,5,221,0,2,6,207,21,2,7,255,34,2,8,232,93,2,9,249,243,3,2,238,0,3,10,238,0],"secondary":false},{"width":5,"bonus":90,"chr":"}","pixels":[1,1,237,255,1,9,237,255,2,2,249,174,2,3,232,243,2,4,225,251,2,5,207,251,2,6,255,255,2,7,223,253,2,8,181,239,2,10,238,0,3,3,170,0,3,4,221,0,3,5,241,162,3,6,204,0,3,7,255,0,3,8,221,0,3,9,170,0,4,6,153,0],"secondary":false},{"width":3,"bonus":20,"chr":":","pixels":[1,3,255,255,1,7,255,255,2,4,255,0,2,8,255,0],"secondary":true},{"width":3,"bonus":40,"chr":";","pixels":[0,9,201,255,1,3,255,255,1,7,241,255,1,8,255,255,1,10,201,0,2,4,255,0,2,8,241,0,2,9,255,0],"secondary":true},{"width":3,"bonus":30,"chr":"\\"","pixels":[0,1,255,255,0,2,255,255,1,2,255,0,1,3,255,0,2,1,255,255,2,2,255,255],"secondary":true},{"width":2,"bonus":20,"chr":"\'","pixels":[0,1,255,255,0,2,177,255,1,2,255,30,1,3,177,0],"secondary":true},{"width":7,"bonus":70,"chr":"<","pixels":[0,5,203,255,1,5,255,255,1,6,228,133,2,4,237,255,2,6,254,239,3,4,169,255,3,5,238,0,3,6,175,247,3,7,243,89,4,3,221,255,4,5,170,0,4,7,244,231,5,4,221,0,5,8,221,0],"secondary":false},{"width":7,"bonus":80,"chr":">","pixels":[0,3,203,255,0,7,203,255,1,4,228,133,1,7,187,255,1,8,204,0,2,4,247,245,2,6,255,255,2,8,187,0,3,4,175,247,3,5,248,157,3,6,203,255,3,7,255,0,4,5,255,255,4,6,173,75,4,7,204,0,5,6,255,0],"secondary":false},{"width":5,"bonus":70,"chr":"\\\\","pixels":[1,1,153,255,1,2,255,255,1,3,203,255,2,2,153,0,2,3,255,51,2,4,231,150,2,5,255,255,2,6,203,255,3,6,255,34,3,7,231,150,3,8,255,255,3,9,207,251,4,9,255,0,4,10,204,0],"secondary":false},{"width":2,"bonus":10,"chr":".","pixels":[0,8,255,255,1,9,255,0],"secondary":true},{"width":3,"bonus":30,"chr":",","pixels":[0,9,205,255,1,7,205,255,1,8,255,255,1,10,205,0,2,8,205,0,2,9,255,0],"secondary":true},{"width":3,"bonus":100,"chr":"|","pixels":[0,1,221,255,0,2,221,255,0,3,221,255,0,4,221,255,0,5,221,255,0,6,221,255,0,7,221,255,0,8,221,255,0,9,221,255,0,10,203,255,1,2,226,39,1,3,226,39,1,4,226,39,1,5,226,39,1,6,226,39,1,7,226,39,1,8,226,39,1,9,226,39,1,10,226,39,1,11,204,0],"secondary":false}],"width":10,"spacewidth":3,"shadow":true,"height":12,"basey":8}');

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The module cache
/******/ 	var __webpack_module_cache__ = {};
/******/ 	
/******/ 	// The require function
/******/ 	function __nested_webpack_require_37481__(moduleId) {
/******/ 		// Check if module is in cache
/******/ 		var cachedModule = __webpack_module_cache__[moduleId];
/******/ 		if (cachedModule !== undefined) {
/******/ 			return cachedModule.exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = __webpack_module_cache__[moduleId] = {
/******/ 			// no module.id needed
/******/ 			// no module.loaded needed
/******/ 			exports: {}
/******/ 		};
/******/ 	
/******/ 		// Execute the module function
/******/ 		__webpack_modules__[moduleId].call(module.exports, module, module.exports, __nested_webpack_require_37481__);
/******/ 	
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/ 	
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module is referenced by other modules so it can't be inlined
/******/ 	var __nested_webpack_exports__ = __nested_webpack_require_37481__("./src/targetmob/index.ts");
/******/ 	
/******/ 	return __nested_webpack_exports__;
/******/ })()
;
});

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The module cache
/******/ 	var __webpack_module_cache__ = {};
/******/ 	
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/ 		// Check if module is in cache
/******/ 		var cachedModule = __webpack_module_cache__[moduleId];
/******/ 		if (cachedModule !== undefined) {
/******/ 			return cachedModule.exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = __webpack_module_cache__[moduleId] = {
/******/ 			id: moduleId,
/******/ 			// no module.loaded needed
/******/ 			exports: {}
/******/ 		};
/******/ 	
/******/ 		// Execute the module function
/******/ 		__webpack_modules__[moduleId](module, module.exports, __webpack_require__);
/******/ 	
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/ 	
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = __webpack_modules__;
/******/ 	
/************************************************************************/
/******/ 	/* webpack/runtime/compat get default export */
/******/ 	(() => {
/******/ 		// getDefaultExport function for compatibility with non-harmony modules
/******/ 		__webpack_require__.n = (module) => {
/******/ 			var getter = module && module.__esModule ?
/******/ 				() => (module['default']) :
/******/ 				() => (module);
/******/ 			__webpack_require__.d(getter, { a: getter });
/******/ 			return getter;
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/define property getters */
/******/ 	(() => {
/******/ 		// define getter functions for harmony exports
/******/ 		__webpack_require__.d = (exports, definition) => {
/******/ 			for(var key in definition) {
/******/ 				if(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {
/******/ 					Object.defineProperty(exports, key, { enumerable: true, get: definition[key] });
/******/ 				}
/******/ 			}
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/global */
/******/ 	(() => {
/******/ 		__webpack_require__.g = (function() {
/******/ 			if (typeof globalThis === 'object') return globalThis;
/******/ 			try {
/******/ 				return this || new Function('return this')();
/******/ 			} catch (e) {
/******/ 				if (typeof window === 'object') return window;
/******/ 			}
/******/ 		})();
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/hasOwnProperty shorthand */
/******/ 	(() => {
/******/ 		__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/make namespace object */
/******/ 	(() => {
/******/ 		// define __esModule on exports
/******/ 		__webpack_require__.r = (exports) => {
/******/ 			if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 				Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 			}
/******/ 			Object.defineProperty(exports, '__esModule', { value: true });
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/publicPath */
/******/ 	(() => {
/******/ 		var scriptUrl;
/******/ 		if (__webpack_require__.g.importScripts) scriptUrl = __webpack_require__.g.location + "";
/******/ 		var document = __webpack_require__.g.document;
/******/ 		if (!scriptUrl && document) {
/******/ 			if (document.currentScript)
/******/ 				scriptUrl = document.currentScript.src;
/******/ 			if (!scriptUrl) {
/******/ 				var scripts = document.getElementsByTagName("script");
/******/ 				if(scripts.length) {
/******/ 					var i = scripts.length - 1;
/******/ 					while (i > -1 && !scriptUrl) scriptUrl = scripts[i--].src;
/******/ 				}
/******/ 			}
/******/ 		}
/******/ 		// When supporting browsers where an automatic publicPath is not supported you must specify an output.publicPath manually via configuration
/******/ 		// or pass an empty string ("") and set the __webpack_public_path__ variable from your code to use your own logic.
/******/ 		if (!scriptUrl) throw new Error("Automatic publicPath is not supported in this browser");
/******/ 		scriptUrl = scriptUrl.replace(/#.*$/, "").replace(/\?.*$/, "").replace(/\/[^\/]+$/, "/");
/******/ 		__webpack_require__.p = scriptUrl;
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/jsonp chunk loading */
/******/ 	(() => {
/******/ 		__webpack_require__.b = document.baseURI || self.location.href;
/******/ 		
/******/ 		// object to store loaded and loading chunks
/******/ 		// undefined = chunk not loaded, null = chunk preloaded/prefetched
/******/ 		// [resolve, reject, Promise] = chunk loading, 0 = chunk loaded
/******/ 		var installedChunks = {
/******/ 			"main": 0
/******/ 		};
/******/ 		
/******/ 		// no chunk on demand loading
/******/ 		
/******/ 		// no prefetching
/******/ 		
/******/ 		// no preloaded
/******/ 		
/******/ 		// no HMR
/******/ 		
/******/ 		// no HMR manifest
/******/ 		
/******/ 		// no on chunks loaded
/******/ 		
/******/ 		// no jsonp function
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/nonce */
/******/ 	(() => {
/******/ 		__webpack_require__.nc = undefined;
/******/ 	})();
/******/ 	
/************************************************************************/
var __webpack_exports__ = {};
// This entry need to be wrapped in an IIFE because it need to be in strict mode.
(() => {
"use strict";
/*!******************!*\
  !*** ./index.ts ***!
  \******************/
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   startBetterBuffsBar: () => (/* binding */ startBetterBuffsBar)
/* harmony export */ });
/* harmony import */ var alt1__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! alt1 */ "../node_modules/alt1/dist/base/index.js");
/* harmony import */ var alt1__WEBPACK_IMPORTED_MODULE_9___default = /*#__PURE__*/__webpack_require__.n(alt1__WEBPACK_IMPORTED_MODULE_9__);
/* harmony import */ var alt1_buffs__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! alt1/buffs */ "../node_modules/alt1/dist/buffs/index.js");
/* harmony import */ var alt1_buffs__WEBPACK_IMPORTED_MODULE_7___default = /*#__PURE__*/__webpack_require__.n(alt1_buffs__WEBPACK_IMPORTED_MODULE_7__);
/* harmony import */ var alt1_targetmob__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! alt1/targetmob */ "../node_modules/alt1/dist/targetmob/index.js");
/* harmony import */ var alt1_targetmob__WEBPACK_IMPORTED_MODULE_8___default = /*#__PURE__*/__webpack_require__.n(alt1_targetmob__WEBPACK_IMPORTED_MODULE_8__);
/* harmony import */ var _a1sauce__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./a1sauce */ "./a1sauce.ts");
/* harmony import */ var sortablejs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! sortablejs */ "../node_modules/sortablejs/modular/sortable.esm.js");
/* harmony import */ var html_to_image__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! html-to-image */ "../node_modules/html-to-image/es/index.js");
/* harmony import */ var _index_html__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./index.html */ "./index.html");
/* harmony import */ var _appconfig_json__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./appconfig.json */ "./appconfig.json");
/* harmony import */ var _icon_png__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./icon.png */ "./icon.png");
/* harmony import */ var _css_betterbuffsbar_css__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./css/betterbuffsbar.css */ "./css/betterbuffsbar.css");
var __awaiter = (undefined && undefined.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (undefined && undefined.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (g && (g = 0, op[0] && (_ = 0)), _) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var _a, _b, _c, _d, _e, _f, _g;
// alt1 base libs, provides all the commonly used methods for image matching and capture
// also gives your editor info about the window.alt1 api






sortablejs__WEBPACK_IMPORTED_MODULE_1__.Sortable.mount(new sortablejs__WEBPACK_IMPORTED_MODULE_1__.MultiDrag());
// tell webpack that this file relies index.html, appconfig.json and icon.png, this makes webpack
// add these files to the output directory
// this works because in /webpack.config.js we told webpack to treat all html, json and imageimports
// as assets




var buffs = new (alt1_buffs__WEBPACK_IMPORTED_MODULE_7___default())();
var debuffs = new (alt1_buffs__WEBPACK_IMPORTED_MODULE_7___default())();
debuffs.debuffs = true;
var targetDisplay = new (alt1_targetmob__WEBPACK_IMPORTED_MODULE_8___default())();
var debugMode = _a1sauce__WEBPACK_IMPORTED_MODULE_0__.getSetting('debugMode');
var betaTesting = _a1sauce__WEBPACK_IMPORTED_MODULE_0__.getSetting('beta');
var currentOverlayPosition = _a1sauce__WEBPACK_IMPORTED_MODULE_0__.getSetting('overlayPosition');
var currentOverlay2Position = _a1sauce__WEBPACK_IMPORTED_MODULE_0__.getSetting('overlay2Position');
var currentOverlay3Position = _a1sauce__WEBPACK_IMPORTED_MODULE_0__.getSetting('overlay3Position');
var buffsVisible;
function getByID(id) {
    return document.getElementById(id);
}
var config = {
    appName: 'betterBuffBar',
};
var helperItems = {
    Output: getByID('output'),
    settings: getByID('Settings'),
    BetterBuffsBar: getByID('BetterBuffsBar'),
    TrackedBuffs: getByID('Buffs'),
    TrackedBuffs2: getByID('Buffs2'),
    TrackedBuffs3: getByID('Buffs3'),
    UntrackedBuffs: getByID('UntrackedBuffs'),
    ToggleOverlayButton: getByID('ToggleOverlayButton'),
    NameOutput: getByID('NameOutput'),
};
var buffsList = {
    AnimateDeadBuff: getByID('AnimateDeadBuff'),
    BalanceByForceBuff: getByID('BalanceByForceBuff'),
    BolgStacksBuff: getByID('BolgStacksBuff'),
    DarknessBuff: getByID('DarknessBuff'),
    ElderOverloadBuff: getByID('ElderOverloadBuff'),
    FsoaSpecBuff: getByID('FsoaSpecBuff'),
    GladiatorsRageBuff: getByID('GladiatorsRageBuff'),
    NecrosisBuff: getByID('NecrosisBuff'),
    OverloadBuff: getByID('OverloadBuff'),
    SupremeOverloadBuff: getByID('SupremeOverloadBuff'),
    TimeRiftBuff: getByID('TimeRiftBuff'),
    WeaponPoisonBuff: getByID('WeaponPoisonBuff'),
    Aura: getByID('Aura'),
    BonfireBoost: getByID('BonfireBoost'),
    ErethdorsGrimoire: getByID('ErethdorsGrimoire'),
    LantadymeIncense: getByID('LantadymeIncense'),
    DwarfWeedIncense: getByID('DwarfWeedIncense'),
    FellstalkIncense: getByID('FellstalkIncense'),
    KwuarmIncense: getByID('KwuarmIncense'),
    Anticipation: getByID('Anticipation'),
    Barricade: getByID('Barricade'),
    Devotion: getByID('Devotion'),
    Divert: getByID('Divert'),
    Freedom: getByID('Freedom'),
    Immortality: getByID('Immortality'),
    Reflect: getByID('Reflect'),
    Resonance: getByID('Resonance'),
    SplitSoulBuff: getByID('SplitSoulBuff'),
    AntiFire: getByID('AntifireBuff'),
    PrayerRenewal: getByID('PrayerRenewalBuff'),
    DeathSpark: getByID('DeathSparkBuff'),
    ThreadsOfFate: getByID('ThreadsOfFateBuff'),
    ConjureSkeleton: getByID('ConjureSkeleton'),
    ConjureZombie: getByID('ConjureZombie'),
    ConjureGhost: getByID('ConjureGhost'),
};
var debuffsList = {
    AdrenalinePotionDebuff: getByID('AdrenalinePotionDebuff'),
    AncientElvenRitualShardDebuff: getByID('AncientElvenRitualShardDebuff'),
    CrystalRainDebuff: getByID('CrystalRainDebuff'),
    DeathGuardDebuff: getByID('DeathGuardDebuff'),
    EnhancedExcaliburDebuff: getByID('EnhancedExcaliburDebuff'),
    OmniGuardDebuff: getByID('OmniGuardDebuff'),
    StunnedDebuff: getByID('StunnedDebuff'),
    SignOfLifeDebuff: getByID('SignOfLifeDebuff'),
    Virus: getByID('VirusDebuff'),
    PowerburstPrevention: getByID('PowerburstPreventionDebuff'),
};
var sigilsList = {
    DemonSlayer: getByID('DemonSlayerSigil'),
    DragonSlayer: getByID('DragonSlayerSigil'),
    IngenuityOfTheHumans: getByID('IngenuityOfTheHumansSigil'),
    LimitlessSigil: getByID('LimitlessSigil'),
    UndeadSlayer: getByID('UndeadSlayerSigil'),
};
var prayersList = {
    DpsPrayer: getByID('DpsPrayer'),
    OverheadPrayer: getByID('OverheadPrayer'),
};
var ultimatesList = {
    Berserk: getByID('BerserkUltimate'),
    DeathsSwiftness: getByID('DeathsSwiftnessUltimate'),
    GreaterDeathsSwiftness: getByID('GreaterDeathsSwiftnessUltimate'),
    GreaterSunshine: getByID('GreaterSunshineUltimate'),
    LivingDeath: getByID('LivingDeathUltimate'),
    Sunshine: getByID('SunshineUltimate'),
};
// loads all images as raw pixel data async, images have to be saved as *.data.png
// this also takes care of metadata headers in the image that make browser load the image
// with slightly wrong colors
// this function is async, so you cant acccess the images instantly but generally takes <20ms
// use `await imgs.promise` if you want to use the images as soon as they are loaded
var buffImages = alt1__WEBPACK_IMPORTED_MODULE_9__.webpackImages({
    animateDead: __webpack_require__(/*! ./asset/data/Animate_Dead-noborder.data.png */ "./asset/data/Animate_Dead-noborder.data.png"),
    antipoisonActive: __webpack_require__(/*! ./asset/data/Anti-poison_Active-noborder.data.png */ "./asset/data/Anti-poison_Active-noborder.data.png"),
    chronicleAttraction: __webpack_require__(/*! ./asset/data/Chronicle_Attraction-noborder.data.png */ "./asset/data/Chronicle_Attraction-noborder.data.png"),
    darkness: __webpack_require__(/*! ./asset/data/Darkness-noborder.data.png */ "./asset/data/Darkness-noborder.data.png"),
    elderOverload: __webpack_require__(/*! ./asset/data/Elder_Overload-noborder.data.png */ "./asset/data/Elder_Overload-noborder.data.png"),
    fsoaWeaponSpec: __webpack_require__(/*! ./asset/data/fsoaSpecBuff-noborder.data.png */ "./asset/data/fsoaSpecBuff-noborder.data.png"),
    gladiatorsRage: __webpack_require__(/*! ./asset/data/Gladiators_Rage-noborder.data.png */ "./asset/data/Gladiators_Rage-noborder.data.png"),
    necrosis: __webpack_require__(/*! ./asset/data/Necrosis-noborder.data.png */ "./asset/data/Necrosis-noborder.data.png"),
    overloaded: __webpack_require__(/*! ./asset/data/Overloaded-noborder.data.png */ "./asset/data/Overloaded-noborder.data.png"),
    supreme_overloaded: __webpack_require__(/*! ./asset/data/supreme_overload.data.png */ "./asset/data/supreme_overload.data.png"),
    overloadedNoBorder: __webpack_require__(/*! ./asset/data/Overloaded-noborder.data.png */ "./asset/data/Overloaded-noborder.data.png"),
    perfectEquilibrium: __webpack_require__(/*! ./asset/data/Perfect_Equilibrium-noborder.data.png */ "./asset/data/Perfect_Equilibrium-noborder.data.png"),
    perfectEquilibriumNoBorder: __webpack_require__(/*! ./asset/data/Perfect_Equilibrium-noborder.data.png */ "./asset/data/Perfect_Equilibrium-noborder.data.png"),
    poisonous: __webpack_require__(/*! ./asset/data/Poisonous-top-noborder.data.png */ "./asset/data/Poisonous-top-noborder.data.png"),
    prayerRenewActive: __webpack_require__(/*! ./asset/data/Prayer_Renew_Active-noborder.data.png */ "./asset/data/Prayer_Renew_Active-noborder.data.png"),
    superAntifireActive: __webpack_require__(/*! ./asset/data/Super_Anti-Fire_Active-noborder.data.png */ "./asset/data/Super_Anti-Fire_Active-noborder.data.png"),
    supremeOverloadActive: __webpack_require__(/*! ./asset/data/Supreme_Overload_Potion_Active-noborder.data.png */ "./asset/data/Supreme_Overload_Potion_Active-noborder.data.png"),
    timeRift: __webpack_require__(/*! ./asset/data/Time_Rift-noborder.data.png */ "./asset/data/Time_Rift-noborder.data.png"),
    aura: __webpack_require__(/*! ./asset/data/Aura-noborder.data.png */ "./asset/data/Aura-noborder.data.png"),
    bonfireBoost: __webpack_require__(/*! ./asset/data/Bonfire_Boost-noborder.data.png */ "./asset/data/Bonfire_Boost-noborder.data.png"),
    grimoire: __webpack_require__(/*! ./asset/data/Erethdor's_grimoire-noborder.data.png */ "./asset/data/Erethdor's_grimoire-noborder.data.png"),
    Anticipation: __webpack_require__(/*! ./asset/data/Anticipation.data.png */ "./asset/data/Anticipation.data.png"),
    Barricade: __webpack_require__(/*! ./asset/data/Barricade.data.png */ "./asset/data/Barricade.data.png"),
    Devotion: __webpack_require__(/*! ./asset/data/Devotion.data.png */ "./asset/data/Devotion.data.png"),
    Divert: __webpack_require__(/*! ./asset/data/Divert.data.png */ "./asset/data/Divert.data.png"),
    Freedom: __webpack_require__(/*! ./asset/data/Freedom.data.png */ "./asset/data/Freedom.data.png"),
    Immortality: __webpack_require__(/*! ./asset/data/Immortality.data.png */ "./asset/data/Immortality.data.png"),
    Reflect: __webpack_require__(/*! ./asset/data/Reflect.data.png */ "./asset/data/Reflect.data.png"),
    Resonance: __webpack_require__(/*! ./asset/data/Resonance.data.png */ "./asset/data/Resonance.data.png"),
    SplitSoul: __webpack_require__(/*! ./asset/data/Split_Soul.data.png */ "./asset/data/Split_Soul.data.png"),
    Antifire: __webpack_require__(/*! ./asset/data/antifire_top.data.png */ "./asset/data/antifire_top.data.png"),
    PrayerRenewal: __webpack_require__(/*! ./asset/data/Prayer_Renew_Active-noborder.data.png */ "./asset/data/Prayer_Renew_Active-noborder.data.png"),
    DeathSpark: __webpack_require__(/*! ./asset/data/Death_Spark.data.png */ "./asset/data/Death_Spark.data.png"),
    ThreadsOfFate: __webpack_require__(/*! ./asset/data/Threads_Of_Fate.data.png */ "./asset/data/Threads_Of_Fate.data.png"),
    ConjureSkeleton: __webpack_require__(/*! ./asset/data/skeleton_warrior-top.data.png */ "./asset/data/skeleton_warrior-top.data.png"),
    ConjureZombie: __webpack_require__(/*! ./asset/data/putrid_zombie-top.data.png */ "./asset/data/putrid_zombie-top.data.png"),
    ConjureGhost: __webpack_require__(/*! ./asset/data/vengeful_ghost-top.data.png */ "./asset/data/vengeful_ghost-top.data.png"),
});
var incenseImages = alt1__WEBPACK_IMPORTED_MODULE_9__.webpackImages({
    lantadyme: __webpack_require__(/*! ./asset/data/Lantadyme.data.png */ "./asset/data/Lantadyme.data.png"),
    dwarfWeed: __webpack_require__(/*! ./asset/data/Dwarf_Weed.data.png */ "./asset/data/Dwarf_Weed.data.png"),
    fellstalk: __webpack_require__(/*! ./asset/data/Fellstalk.data.png */ "./asset/data/Fellstalk.data.png"),
    kwuarm: __webpack_require__(/*! ./asset/data/Kwuarm.data.png */ "./asset/data/Kwuarm.data.png"),
});
var debuffImages = alt1__WEBPACK_IMPORTED_MODULE_9__.webpackImages({
    adrenalinePotion: __webpack_require__(/*! ./asset/data/Adrenaline_Potion-noborder.data.png */ "./asset/data/Adrenaline_Potion-noborder.data.png"),
    crystalRainMinimal: __webpack_require__(/*! ./asset/data/Crystal_Rain-minimal-noborder.data.png */ "./asset/data/Crystal_Rain-minimal-noborder.data.png"),
    deathEssenceDebuff: __webpack_require__(/*! ./asset/data/Omni_Guard_Special-top-noborder.data.png */ "./asset/data/Omni_Guard_Special-top-noborder.data.png"),
    deathGraspDebuff: __webpack_require__(/*! ./asset/data/Death_Guard_Special-top-noborder.data.png */ "./asset/data/Death_Guard_Special-top-noborder.data.png"),
    elvenRitualShard: __webpack_require__(/*! ./asset/data/Ancient_Elven_Ritual_Shard-noborder.data.png */ "./asset/data/Ancient_Elven_Ritual_Shard-noborder.data.png"),
    enhancedExcaliburDebuff: __webpack_require__(/*! ./asset/data/EE_scuffed-top-noborder.data.png */ "./asset/data/EE_scuffed-top-noborder.data.png"),
    stunnedDebuff: __webpack_require__(/*! ./asset/data/Stunned.data.png */ "./asset/data/Stunned.data.png"),
    signOfLifeDebuff: __webpack_require__(/*! ./asset/data/Sign_of_Life-top.data.png */ "./asset/data/Sign_of_Life-top.data.png"),
    blackVirus: __webpack_require__(/*! ./asset/data/Black_virus.data.png */ "./asset/data/Black_virus.data.png"),
    redVirus: __webpack_require__(/*! ./asset/data/Red_virus.data.png */ "./asset/data/Red_virus.data.png"),
    blueVirus: __webpack_require__(/*! ./asset/data/Blue_virus.data.png */ "./asset/data/Blue_virus.data.png"),
    greenVirus: __webpack_require__(/*! ./asset/data/Green_virus.data.png */ "./asset/data/Green_virus.data.png"),
    powerburstPrevention: __webpack_require__(/*! ./asset/data/Powerburst_prevention.data.png */ "./asset/data/Powerburst_prevention.data.png"),
});
var ultimateImages = alt1__WEBPACK_IMPORTED_MODULE_9__.webpackImages({
    berserk: __webpack_require__(/*! ./asset/data/Berserk-noborder.data.png */ "./asset/data/Berserk-noborder.data.png"),
    deathsSwiftness: __webpack_require__(/*! ./asset/data/Deaths_Swiftness-top.data.png */ "./asset/data/Deaths_Swiftness-top.data.png"),
    greaterDeathsSwiftness: __webpack_require__(/*! ./asset/data/Greater_Death's_Swiftness-noborder.data.png */ "./asset/data/Greater_Death's_Swiftness-noborder.data.png"),
    greaterSunshine: __webpack_require__(/*! ./asset/data/Greater_Sunshine-noborder.data.png */ "./asset/data/Greater_Sunshine-noborder.data.png"),
    livingDeath: __webpack_require__(/*! ./asset/data/Living_Death-noborder.data.png */ "./asset/data/Living_Death-noborder.data.png"),
    sunshine: __webpack_require__(/*! ./asset/data/Sunshine-noborder.data.png */ "./asset/data/Sunshine-noborder.data.png"),
});
var sigilImages = alt1__WEBPACK_IMPORTED_MODULE_9__.webpackImages({
    demonSlayer: __webpack_require__(/*! ./asset/data/Demon_Slayer-noborder.data.png */ "./asset/data/Demon_Slayer-noborder.data.png"),
    dragonSlayer: __webpack_require__(/*! ./asset/data/Dragon_Slayer-noborder.data.png */ "./asset/data/Dragon_Slayer-noborder.data.png"),
    ingenuityOfTheHumans: __webpack_require__(/*! ./asset/data/Ingenuity_of_the_Humans-noborder.data.png */ "./asset/data/Ingenuity_of_the_Humans-noborder.data.png"),
    limitless: __webpack_require__(/*! ./asset/data/Limitless-noborder.data.png */ "./asset/data/Limitless-noborder.data.png"),
    undeadSlayer: __webpack_require__(/*! ./asset/data/Undead_Slayer-noborder.data.png */ "./asset/data/Undead_Slayer-noborder.data.png"),
});
var prayerImages = alt1__WEBPACK_IMPORTED_MODULE_9__.webpackImages({
    affliction: __webpack_require__(/*! ./asset/data/Affliction-noborder.data.png */ "./asset/data/Affliction-noborder.data.png"),
    anguish: __webpack_require__(/*! ./asset/data/Anguish-noborder.data.png */ "./asset/data/Anguish-noborder.data.png"),
    deflectMagic: __webpack_require__(/*! ./asset/data/Deflect_Magic-noborder.data.png */ "./asset/data/Deflect_Magic-noborder.data.png"),
    deflectMelee: __webpack_require__(/*! ./asset/data/Deflect_Melee-noborder.data.png */ "./asset/data/Deflect_Melee-noborder.data.png"),
    deflectNecromancy: __webpack_require__(/*! ./asset/data/Deflect_Necromancy-noborder.data.png */ "./asset/data/Deflect_Necromancy-noborder.data.png"),
    deflectRanged: __webpack_require__(/*! ./asset/data/Deflect_Ranged-noborder.data.png */ "./asset/data/Deflect_Ranged-noborder.data.png"),
    desolation: __webpack_require__(/*! ./asset/data/Desolation-noborder.data.png */ "./asset/data/Desolation-noborder.data.png"),
    malevolence: __webpack_require__(/*! ./asset/data/Malevolence-noborder.data.png */ "./asset/data/Malevolence-noborder.data.png"),
    prayerActive: __webpack_require__(/*! ./asset/data/Prayer_active-noborder.data.png */ "./asset/data/Prayer_active-noborder.data.png"),
    protectFromMagic: __webpack_require__(/*! ./asset/data/Protect_from_Magic-noborder.data.png */ "./asset/data/Protect_from_Magic-noborder.data.png"),
    protectFromMelee: __webpack_require__(/*! ./asset/data/Protect_from_Melee-noborder.data.png */ "./asset/data/Protect_from_Melee-noborder.data.png"),
    protectFromNecromancy: __webpack_require__(/*! ./asset/data/Protect_from_Necromancy-noborder.data.png */ "./asset/data/Protect_from_Necromancy-noborder.data.png"),
    protectFromRanged: __webpack_require__(/*! ./asset/data/Protect_from_Ranged-noborder.data.png */ "./asset/data/Protect_from_Ranged-noborder.data.png"),
    ruination: __webpack_require__(/*! ./asset/data/Ruination-noborder.data.png */ "./asset/data/Ruination-noborder.data.png"),
    sorrow: __webpack_require__(/*! ./asset/data/Sorrow-noborder.data.png */ "./asset/data/Sorrow-noborder.data.png"),
    soulSplit: __webpack_require__(/*! ./asset/data/Soul_Split-noborder.data.png */ "./asset/data/Soul_Split-noborder.data.png"),
    torment: __webpack_require__(/*! ./asset/data/Torment-noborder.data.png */ "./asset/data/Torment-noborder.data.png"),
    turmoil: __webpack_require__(/*! ./asset/data/Turmoil-noborder.data.png */ "./asset/data/Turmoil-noborder.data.png"),
});
var enemyImages = alt1__WEBPACK_IMPORTED_MODULE_9__.webpackImages({
    DeathMark: __webpack_require__(/*! ./asset/data/Death_Mark.data.png */ "./asset/data/Death_Mark.data.png"),
    Vulnerability: __webpack_require__(/*! ./asset/data/Vulnerability_bordered.data.png */ "./asset/data/Vulnerability_bordered.data.png"),
    Bloat: __webpack_require__(/*! ./asset/data/bloated.data.png */ "./asset/data/bloated.data.png"),
});
function startBetterBuffsBar() {
    if (!window.alt1) {
        helperItems.Output.insertAdjacentHTML('beforeend', "<div>You need to run this page in alt1 to capture the screen</div>");
        return;
    }
    if (!alt1.permissionPixel) {
        helperItems.Output.insertAdjacentHTML('beforeend', "<div><p>Page is not installed as app or capture permission is not enabled</p></div>");
        return;
    }
    if (!alt1.permissionOverlay) {
        helperItems.Output.insertAdjacentHTML('beforeend', "<div><p>Attempted to use Overlay but app overlay permission is not enabled. Please enable \"Show Overlay\" permission in Alt1 settinsg (wrench icon in corner).</p></div>");
        return;
    }
    watchBuffs();
    if (_a1sauce__WEBPACK_IMPORTED_MODULE_0__.getSetting('activeOverlay')) {
        startOverlay(getByID('Buffs'), '');
        if (_a1sauce__WEBPACK_IMPORTED_MODULE_0__.getSetting('beta')) {
            startOverlay(getByID('Buffs2'), '2');
            startOverlay(getByID('Buffs3'), '3');
        }
    }
    else {
        helperItems.BetterBuffsBar.classList.add('overlay-disabled');
    }
}
var inCombat = false;
var checkForCombat = true;
var updatingOverlayPosition = false;
var timeUntilHide = 2;
var checkCombatState = function () {
    if (updatingOverlayPosition) {
        inCombat = true;
        return;
    }
    var haveBuffs = buffs.read().length;
    //If we don't have a target we aren't in combat (except for target cycle bug...)
    if (targetDisplay && checkForCombat) {
        targetDisplay.read();
        if (targetDisplay.state === null) {
            timeUntilHide = 0;
            inCombat = false;
        }
        else {
            timeUntilHide = 2;
            inCombat = true;
        }
    }
    // If we aren't checking to see if we have a target - pretend we always do
    if (!checkForCombat && haveBuffs) {
        timeUntilHide = 2;
        inCombat = true;
    }
    if (!haveBuffs) {
        // We either have no buffs or they aren't visible (eg. banking) so aren't in combat
        if (timeUntilHide == 0) {
            inCombat = false;
        }
        else {
            setTimeout(function () {
                if (timeUntilHide > 0) {
                    timeUntilHide--;
                }
            }, 1000);
        }
    }
};
var maxAttempts = 0;
function watchBuffs() {
    var loopSpeed = _a1sauce__WEBPACK_IMPORTED_MODULE_0__.getSetting('loopSpeed');
    var interval = setInterval(function () {
        var buffs = getActiveBuffs();
        var debuffs = getActiveDebuffs();
        checkCombatState();
        if (_a1sauce__WEBPACK_IMPORTED_MODULE_0__.getSetting('buffsLocation')) {
            maxAttempts = 0;
            findStatus(buffs, buffImages.overloaded, buffsList.OverloadBuff, {
                threshold: 300,
                expirationPulse: true,
            });
            findStatus(buffs, buffImages.elderOverload, buffsList.ElderOverloadBuff, {
                threshold: 60,
                expirationPulse: true,
            });
            findStatus(buffs, buffImages.supremeOverloadActive, buffsList.SupremeOverloadBuff, {
                threshold: 50,
                expirationPulse: true,
            });
            findStatus(buffs, buffImages.poisonous, buffsList.WeaponPoisonBuff, {
                threshold: 300,
                expirationPulse: true,
            });
            findStatus(buffs, buffImages.darkness, buffsList.DarknessBuff, {
                threshold: 400,
                maxRange: 43260,
            });
            findStatus(buffs, buffImages.animateDead, buffsList.AnimateDeadBuff, {
                threshold: 90,
            });
            findStatus(buffs, buffImages.fsoaWeaponSpec, buffsList.FsoaSpecBuff, {
                threshold: 80,
                maxRange: 31,
            });
            findStatus(buffs, buffImages.timeRift, buffsList.TimeRiftBuff, {
                threshold: 450,
            });
            findStatus(buffs, buffImages.gladiatorsRage, buffsList.GladiatorsRageBuff, {
                threshold: 50,
                expirationPulse: false,
                minRange: 0,
                maxRange: 16,
            });
            findStatus(buffs, buffImages.necrosis, buffsList.NecrosisBuff, {
                threshold: 150,
            });
            findStatus(buffs.reverse(), buffImages.aura, buffsList.Aura, {
                threshold: 400,
            });
            findStatus(buffs, buffImages.bonfireBoost, buffsList.BonfireBoost, {
                threshold: 400,
            });
            findStatus(buffs, buffImages.grimoire, buffsList.ErethdorsGrimoire, {
                threshold: 55,
            });
            findStatus(buffs.reverse(), incenseImages.lantadyme, buffsList.LantadymeIncense, {
                threshold: 119,
            });
            findStatus(buffs.reverse(), incenseImages.dwarfWeed, buffsList.DwarfWeedIncense, {
                threshold: 150,
            });
            findStatus(buffs.reverse(), incenseImages.fellstalk, buffsList.FellstalkIncense, {
                threshold: 150,
            });
            findStatus(buffs.reverse(), incenseImages.kwuarm, buffsList.KwuarmIncense, {
                threshold: 150,
            });
            findStatus(buffs, buffImages.Antifire, buffsList.AntiFire, {
                threshold: 225,
            });
            findStatus(buffs, buffImages.prayerRenewActive, buffsList.PrayerRenewal, { threshold: 225 });
            findStatus(buffs, buffImages.DeathSpark, buffsList.DeathSpark, {
                threshold: 300,
            });
            findStatus(buffs, buffImages.Anticipation, buffsList.Anticipation, {
                threshold: 300,
                showCooldown: true,
                cooldownTimer: 12,
            });
            findStatus(buffs, buffImages.Barricade, buffsList.Barricade, {
                threshold: 300,
                showCooldown: true,
                cooldownTimer: 48,
            });
            findStatus(buffs, buffImages.Devotion, buffsList.Devotion, {
                threshold: 300,
                showCooldown: true,
                cooldownTimer: 48,
            });
            findStatus(buffs, buffImages.Divert, buffsList.Divert, {
                threshold: 300,
                showCooldown: true,
                cooldownTimer: 22,
            });
            findStatus(buffs, buffImages.Freedom, buffsList.Freedom, {
                threshold: 300,
                showCooldown: true,
                cooldownTimer: 22,
            });
            findStatus(buffs, buffImages.Immortality, buffsList.Immortality, {
                threshold: 300,
                showCooldown: true,
                cooldownTimer: 88,
            });
            findStatus(buffs, buffImages.Reflect, buffsList.Reflect, {
                threshold: 300,
                showCooldown: true,
                cooldownTimer: 18,
            });
            findStatus(buffs, buffImages.Resonance, buffsList.Resonance, {
                threshold: 300,
                showCooldown: true,
                cooldownTimer: 22,
            });
            findStatus(buffs, buffImages.SplitSoul, buffsList.SplitSoulBuff, {
                threshold: 350,
                showCooldown: true,
                cooldownTimer: 38,
            });
            findStatus(buffs.reverse(), sigilImages.limitless, sigilsList.LimitlessSigil, {
                threshold: 250,
                showCooldown: true,
                cooldownTimer: 82,
            });
            findStatus(buffs.reverse(), sigilImages.demonSlayer, sigilsList.DemonSlayer, {
                threshold: 400,
                showCooldown: true,
                cooldownTimer: 49,
            });
            findStatus(buffs.reverse(), sigilImages.dragonSlayer, sigilsList.DragonSlayer, {
                threshold: 400,
                showCooldown: true,
                cooldownTimer: 49,
            });
            findStatus(buffs.reverse(), sigilImages.undeadSlayer, sigilsList.UndeadSlayer, {
                threshold: 400,
                showCooldown: true,
                cooldownTimer: 49,
            });
            findStatus(buffs.reverse(), sigilImages.ingenuityOfTheHumans, sigilsList.IngenuityOfTheHumans, {
                threshold: 400,
                showCooldown: true,
                cooldownTimer: 82,
            });
            /* BOLG is currently still special */
            if (document.querySelectorAll('#Buffs #BolgStacksBuff').length ||
                document.querySelectorAll('#Buffs2 #BolgStacksBuff').length ||
                document.querySelectorAll('#Buffs3 #BolgStacksBuff').length) {
                findBolgStacks(buffs);
            }
            findStatus(buffs, ultimateImages.berserk, ultimatesList.Berserk, {
                threshold: 200,
                showCooldown: true,
                cooldownTimer: 39,
            });
            findStatus(buffs, ultimateImages.deathsSwiftness, ultimatesList.DeathsSwiftness, {
                threshold: 270,
                showCooldown: true,
                cooldownTimer: 29,
            });
            findStatus(buffs, ultimateImages.greaterDeathsSwiftness, ultimatesList.GreaterDeathsSwiftness, {
                threshold: 450,
                showCooldown: true,
                cooldownTimer: 22,
            });
            findStatus(buffs, ultimateImages.sunshine, ultimatesList.Sunshine, {
                threshold: 500,
                showCooldown: true,
                cooldownTimer: 29,
            });
            findStatus(buffs, ultimateImages.greaterSunshine, ultimatesList.GreaterSunshine, {
                threshold: 100,
                showCooldown: true,
                cooldownTimer: 22,
            });
            findStatus(buffs, ultimateImages.livingDeath, ultimatesList.LivingDeath, {
                threshold: 400,
                showCooldown: true,
                cooldownTimer: 58,
            });
            findStatus(buffs, buffImages.ThreadsOfFate, buffsList.ThreadsOfFate, {
                threshold: 300,
                showCooldown: true,
                cooldownTimer: 36,
            });
            findStatus(buffs, buffImages.ConjureSkeleton, buffsList.ConjureSkeleton, {
                threshold: 300,
                expirationPulse: true,
            });
            findStatus(buffs, buffImages.ConjureZombie, buffsList.ConjureZombie, {
                threshold: 300,
                expirationPulse: true,
            });
            findStatus(buffs, buffImages.ConjureGhost, buffsList.ConjureGhost, {
                threshold: 300,
                expirationPulse: true,
            });
            checkBuffsForHidingOverlay(buffs);
            if ((buffs === null || buffs === void 0 ? void 0 : buffs.length) == 0) {
                for (var _i = 0, _a = Object.entries(buffsList); _i < _a.length; _i++) {
                    var _b = _a[_i], _key = _b[0], buff = _b[1];
                    setInactive(buff);
                }
            }
        }
        else {
            noDetection(maxAttempts, interval, 'buff');
        }
        if (_a1sauce__WEBPACK_IMPORTED_MODULE_0__.getSetting('debuffsLocation')) {
            maxAttempts = 0;
            findStatus(debuffs, debuffImages.elvenRitualShard, debuffsList.AncientElvenRitualShardDebuff, {
                threshold: 90,
            });
            findStatus(debuffs, debuffImages.adrenalinePotion, debuffsList.AdrenalinePotionDebuff, { threshold: 300 });
            findStatus(debuffs, debuffImages.deathGraspDebuff, debuffsList.DeathGuardDebuff, { threshold: 90 });
            findStatus(debuffs, debuffImages.deathEssenceDebuff, debuffsList.OmniGuardDebuff, { threshold: 60 });
            findStatus(debuffs, debuffImages.enhancedExcaliburDebuff, debuffsList.EnhancedExcaliburDebuff, { threshold: 15 });
            findStatus(debuffs, debuffImages.crystalRainMinimal, debuffsList.CrystalRainDebuff, { threshold: 60 });
            findStatus(debuffs, debuffImages.stunnedDebuff, debuffsList.StunnedDebuff, { threshold: 60 });
            findStatus(debuffs, debuffImages.signOfLifeDebuff, debuffsList.SignOfLifeDebuff, { threshold: 20 });
            findStatus(debuffs, debuffImages.powerburstPrevention, debuffsList.PowerburstPrevention, { threshold: 20 });
            findVirus(debuffs);
            findPrayer(buffs.reverse(), debuffs);
            if ((debuffs === null || debuffs === void 0 ? void 0 : debuffs.length) == 0) {
                for (var _c = 0, _d = Object.entries(debuffsList); _c < _d.length; _c++) {
                    var _e = _d[_c], _key = _e[0], debuff = _e[1];
                    setInactive(debuff);
                }
            }
        }
        else {
            noDetection(maxAttempts, interval, 'debuff');
        }
        findEnemyDebuffs();
    }, loopSpeed);
    var timerWatcher = setInterval(function () {
        watchTimers();
    }, 3000);
}
function checkBuffsForHidingOverlay(buffsReader) {
    return __awaiter(this, void 0, void 0, function () {
        return __generator(this, function (_a) {
            // If we don't have an overlay visible - hide it
            if (buffsReader == undefined) {
                helperItems.BetterBuffsBar.classList.add('hide-overlay');
            }
            else if (Object.entries(buffsReader).length == 0) {
                helperItems.BetterBuffsBar.classList.add('hide-overlay');
            }
            else {
                helperItems.BetterBuffsBar.classList.remove('hide-overlay');
            }
            return [2 /*return*/];
        });
    });
}
function noDetection(maxAttempts, interval, bar) {
    return __awaiter(this, void 0, void 0, function () {
        return __generator(this, function (_a) {
            if (maxAttempts == 10) {
                helperItems.Output.insertAdjacentHTML('beforeend', "<p>Unable to find ".concat(bar, " bar location.\nPlease login to the game or make sure that Alt1 can detect your ").concat(bar, " bar then reload the app.\nRemember - the Buffs setting must be set to \"Small\" and you must have at least 1 ").concat(bar, ". \nTo reload, right click this interface and select Reload.</p>"));
                clearInterval(interval);
                return [2 /*return*/];
            }
            if (maxAttempts < 10) {
                setTimeout(function () { }, 1000 * Math.pow(maxAttempts, 2));
                maxAttempts++;
            }
            console.log("Failed to read buffs - attempting again. Attempts left: ".concat(maxAttempts, "."));
            return [2 /*return*/];
        });
    });
}
function showTooltip(msg, duration) {
    return __awaiter(this, void 0, void 0, function () {
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    alt1.setTooltip(msg);
                    return [4 /*yield*/, new Promise(function (done) { return setTimeout(done, duration); })];
                case 1:
                    _a.sent();
                    alt1.clearTooltip();
                    return [2 /*return*/];
            }
        });
    });
}
/*
 * I'm usually against argument flags and believe they should generally be a separate function
 * but of the buffs we currently check it's really only Overloads & Weapon Poison that do this.
 * If more get added in the future then we can revisit and maybe extract it out into its own function.
 *
 * "The everything function"
 * coolDownTimer should be the remaining cooldown in SECONDS after Active Duration & 1s have elapsed
 */
function findStatus(buffsReader, buffImage, element, options) {
    var _a, _b, _c, _d, _e, _f;
    return __awaiter(this, void 0, void 0, function () {
        var _g, threshold, _h, expirationPulse, _j, minRange, _k, maxRange, _l, showCooldown, _m, cooldownTimer, _o, debug, timearg, foundBuff, onCooldown, cooldownAdjustment, highlander, _i, _p, _q, _key, value, findBuffImage, _r, _s, _t, _key, value, findBuffImage, buffTimeRemaining;
        return __generator(this, function (_u) {
            switch (_u.label) {
                case 0:
                    _g = options.threshold, threshold = _g === void 0 ? (_a = options.threshold) !== null && _a !== void 0 ? _a : 100 : _g, _h = options.expirationPulse, expirationPulse = _h === void 0 ? (_b = options.expirationPulse) !== null && _b !== void 0 ? _b : false : _h, _j = options.minRange, minRange = _j === void 0 ? (_c = options.minRange) !== null && _c !== void 0 ? _c : 0 : _j, _k = options.maxRange, maxRange = _k === void 0 ? (_d = options.maxRange) !== null && _d !== void 0 ? _d : Infinity : _k, _l = options.showCooldown, showCooldown = _l === void 0 ? (_e = options.showCooldown) !== null && _e !== void 0 ? _e : false : _l, _m = options.cooldownTimer, cooldownTimer = _m === void 0 ? options.cooldownTimer : _m, _o = options.debug, debug = _o === void 0 ? (_f = options.debug) !== null && _f !== void 0 ? _f : false : _o;
                    // Exit early if our buff isn't in the Tracked Buffs list
                    if (!getByID('Buffs').contains(element) &&
                        !getByID('Buffs2').contains(element) &&
                        !getByID('Buffs3').contains(element) ||
                        !buffsReader) {
                        return [2 /*return*/];
                    }
                    foundBuff = false;
                    onCooldown = false;
                    cooldownAdjustment = parseInt(_a1sauce__WEBPACK_IMPORTED_MODULE_0__.getSetting('delayAdjustment'), 10);
                    highlander = [];
                    if (buffImage == buffImages.gladiatorsRage) {
                        for (_i = 0, _p = Object.entries(buffsReader); _i < _p.length; _i++) {
                            _q = _p[_i], _key = _q[0], value = _q[1];
                            findBuffImage = value.countMatch(buffImage, false);
                            if (findBuffImage.passed > threshold) {
                                highlander.push(foundBuff);
                            }
                        }
                    }
                    _r = 0, _s = Object.entries(buffsReader);
                    _u.label = 1;
                case 1:
                    if (!(_r < _s.length)) return [3 /*break*/, 17];
                    _t = _s[_r], _key = _t[0], value = _t[1];
                    // If the buff has been found do an early return
                    if (foundBuff) {
                        return [2 /*return*/];
                    }
                    // If Ful book is being used and there is not also a proc found set the proc to inactive
                    if (highlander.length == 1) {
                        setInactive(buffsList.GladiatorsRageBuff);
                    }
                    // Only bother scanning for proc if we have both the book and proc active
                    if (highlander.length != 2 && buffImage == buffImages.gladiatorsRage) {
                        return [2 /*return*/];
                    }
                    findBuffImage = value.countMatch(buffImage, false);
                    // Death Spark doesn't have a readarg so if it is found set it to active and stop evaluating it
                    if (findBuffImage.passed > threshold &&
                        buffImage == buffImages.DeathSpark) {
                        setActive(element);
                        return [2 /*return*/];
                    }
                    if (!(findBuffImage.passed > threshold ||
                        (findBuffImage.failed == 0 && buffImage !== buffImages.DeathSpark))) return [3 /*break*/, 14];
                    // If we find a match for the buff it will always exceed the threshold
                    // the threshold depends largely on which buff is being matched against
                    if (_a1sauce__WEBPACK_IMPORTED_MODULE_0__.getSetting('debugMode') && debug) {
                        console.log("Debugging ".concat(element.id.toString(), " | Threshold: ").concat(JSON.stringify(findBuffImage)));
                    }
                    // If a buff has exceeded the threshold or has a 0px failure rate we have a match and want to set it to active
                    foundBuff = true;
                    return [4 /*yield*/, setActive(element)];
                case 2:
                    _u.sent();
                    timearg = value.readArg('timearg');
                    // If the time remaining is 1 and the buff is supposed to show a cooldown - start the cooldown timer and stop evaluating
                    if (element.dataset.time == '0' ||
                        element.dataset.time == '1' &&
                            showCooldown &&
                            element.dataset.startedTimer == 'false') {
                        if (debugMode) {
                            console.log("Starting cooldown timer for ".concat(element.id));
                        }
                        element.dataset.startedTimer = 'true';
                        startCooldownTimer(element, cooldownTimer - cooldownAdjustment);
                        return [2 /*return*/];
                    }
                    if (!(timearg.time > 59 && timearg.time < maxRange)) return [3 /*break*/, 4];
                    element.dataset.time =
                        Math.floor(value.readArg('timearg').time / 60).toString() +
                            'm';
                    // Pause the check for a tick since we don't need to rapidly update
                    //a buff that won't have a more precise value for 1 minute
                    return [4 /*yield*/, new Promise(function (done) { return setTimeout(done, 600); })];
                case 3:
                    // Pause the check for a tick since we don't need to rapidly update
                    //a buff that won't have a more precise value for 1 minute
                    _u.sent();
                    return [3 /*break*/, 13];
                case 4:
                    if (!(expirationPulse && timearg.time == 11 && !onCooldown)) return [3 /*break*/, 8];
                    element.dataset.time = '<10s';
                    return [4 /*yield*/, setActive(element)];
                case 5:
                    _u.sent();
                    // This can be desynced from in-game 10s but it's accurate enough
                    return [4 /*yield*/, new Promise(function (done) { return setTimeout(done, 10000); })];
                case 6:
                    // This can be desynced from in-game 10s but it's accurate enough
                    _u.sent();
                    return [4 /*yield*/, setInactive(element)];
                case 7:
                    _u.sent();
                    if (_a1sauce__WEBPACK_IMPORTED_MODULE_0__.getSetting('showTooltipReminders')) {
                        showTooltip('Overload expired', 3000);
                    }
                    return [3 /*break*/, 13];
                case 8:
                    if (!(timearg.time > minRange && timearg.time < maxRange)) return [3 /*break*/, 11];
                    buffTimeRemaining = timearg.time - cooldownAdjustment;
                    // And the buff has time remaining and is not Necrosis or BOLG Stacks - display the remaining time
                    if (buffTimeRemaining > 0 &&
                        buffImage != buffImages.necrosis &&
                        element != buffsList.BolgStacksBuff) {
                        element.dataset.time = buffTimeRemaining.toString();
                    }
                    // Otherwise if the buff is Necrosis or BolgStacks display the stacks
                    else if (buffTimeRemaining > 0 &&
                        (buffImage == buffImages.necrosis ||
                            element == buffsList.BolgStacksBuff)) {
                        element.dataset.time = timearg.time;
                    }
                    if (!(timearg.time - 1 == 0 && !showCooldown)) return [3 /*break*/, 10];
                    return [4 /*yield*/, setInactive(element)];
                case 9:
                    _u.sent();
                    _u.label = 10;
                case 10: return [3 /*break*/, 13];
                case 11:
                    if (!!showCooldown) return [3 /*break*/, 13];
                    return [4 /*yield*/, setInactive(element)];
                case 12:
                    _u.sent();
                    _u.label = 13;
                case 13: return [3 /*break*/, 16];
                case 14:
                    if (!!showCooldown) return [3 /*break*/, 16];
                    return [4 /*yield*/, setInactive(element)];
                case 15:
                    _u.sent();
                    _u.label = 16;
                case 16:
                    _r++;
                    return [3 /*break*/, 1];
                case 17:
                    if (cooldownTimer > 0 && element.dataset.cooldown == '0' && !element.classList.contains('active')) {
                        setInactive(element);
                    }
                    if (!(timearg == undefined && foundBuff && !showCooldown)) return [3 /*break*/, 21];
                    if (!expirationPulse) return [3 /*break*/, 19];
                    return [4 /*yield*/, new Promise(function (done) { return setTimeout(done, 10000); })];
                case 18:
                    _u.sent();
                    _u.label = 19;
                case 19: return [4 /*yield*/, setInactive(element)];
                case 20:
                    _u.sent();
                    _u.label = 21;
                case 21: 
                // Give a very brief pause before checking again
                return [4 /*yield*/, new Promise(function (done) { return setTimeout(done, 10); })];
                case 22:
                    // Give a very brief pause before checking again
                    _u.sent();
                    return [2 /*return*/, timearg];
            }
        });
    });
}
function startCooldownTimer(element, cooldownTimer) {
    return __awaiter(this, void 0, void 0, function () {
        var timer_1;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0: 
                /*
                 * Wait the final 1s then set buff to 'cooldown' state
                 * After its cooldown has finished set it back to 'inactive' state (actually 'readyToBeUsed')
                 */
                return [4 /*yield*/, new Promise(function (done) { return setTimeout(done, 1050); })];
                case 1:
                    /*
                     * Wait the final 1s then set buff to 'cooldown' state
                     * After its cooldown has finished set it back to 'inactive' state (actually 'readyToBeUsed')
                     */
                    _a.sent();
                    return [4 /*yield*/, setCooldown(element, cooldownTimer)];
                case 2:
                    _a.sent();
                    if (element.dataset.cooldown != '0' && element.dataset.startedTimer !== 'true') {
                        element.dataset.startedTimer = 'true';
                        element.dataset.cooldown = cooldownTimer.toString();
                        timer_1 = setInterval(function () {
                            countdown(element, cooldownTimer, timer_1);
                        }, 1000);
                    }
                    return [2 /*return*/];
            }
        });
    });
}
function countdown(element, cooldownTimer, timer) {
    if (parseInt(element.dataset.cooldown, 10) > 0) {
        element.dataset.cooldown = (parseInt(element.dataset.cooldown, 10) - 1).toString();
    }
    else if (element.dataset.cooldown == '0') {
        element.dataset.startedTimer = 'false';
        element.dataset.cooldown = '';
        setInactive(element);
        clearInterval(timer);
    }
}
function findVirus(debuffs) {
    return __awaiter(this, void 0, void 0, function () {
        var virusActive, currentVirus, _i, _a, _b, _key, value, checkBlackVirus, checkBlueVirus, checkRedVirus, checkGreenVirus;
        return __generator(this, function (_c) {
            if (!debuffs) {
                return [2 /*return*/];
            }
            virusActive = 0;
            currentVirus = '';
            for (_i = 0, _a = Object.entries(debuffs); _i < _a.length; _i++) {
                _b = _a[_i], _key = _b[0], value = _b[1];
                checkBlackVirus = value.countMatch(debuffImages.blackVirus, false);
                checkBlueVirus = value.countMatch(debuffImages.blueVirus, false);
                checkRedVirus = value.countMatch(debuffImages.redVirus, false);
                checkGreenVirus = value.countMatch(debuffImages.greenVirus, false);
                if (checkBlackVirus.failed == 0 || checkBlackVirus.passed > 275) {
                    currentVirus = 'BLK';
                    virusActive++;
                }
                if (checkBlueVirus.failed == 0 || checkBlueVirus.passed > 275) {
                    currentVirus = 'BLU';
                    virusActive++;
                }
                if (checkRedVirus.failed == 0 || checkRedVirus.passed > 275) {
                    currentVirus = 'RED';
                    virusActive++;
                }
                if (checkGreenVirus.failed == 0 || checkGreenVirus.passed > 275) {
                    currentVirus = 'GRN';
                    virusActive++;
                }
            }
            if (!virusActive) {
                debuffsList.Virus.dataset.virus = '';
                debuffsList.Virus.classList.add('inactive');
            }
            else {
                debuffsList.Virus.dataset.virus = currentVirus;
                debuffsList.Virus.classList.add('active');
            }
            return [2 /*return*/];
        });
    });
}
function findEnemyDebuffs() {
    var _a;
    targetDisplay.read();
    if (!targetDisplay.read()) {
        return;
    }
    if (targetDisplay.lastpos === null) {
        setInactive(getByID('VulnerabilityDebuff'));
    }
    if (!((_a = targetDisplay.state) === null || _a === void 0 ? void 0 : _a.name)) {
        setInactive(getByID('VulnerabilityDebuff'));
    }
    if ((!getByID('Buffs').contains(getByID('DeathMarkDebuff')) &&
        !getByID('Buffs2').contains(getByID('DeathMarkDebuff')) &&
        !getByID('Buffs3').contains(getByID('DeathMarkDebuff'))) &&
        (!getByID('Buffs').contains(getByID('VulnerabilityDebuff')) &&
            !getByID('Buffs2').contains(getByID('VulnerabilityDebuff')) &&
            !getByID('Buffs3').contains(getByID('VulnerabilityDebuff'))) &&
        (!getByID('Buffs').contains(getByID('Bloat')) &&
            !getByID('Buffs2').contains(getByID('Bloat')) &&
            !getByID('Buffs3').contains(getByID('Bloat')))) {
        return;
    }
    var target_display_loc = {
        x: (targetDisplay === null || targetDisplay === void 0 ? void 0 : targetDisplay.lastpos.x) - 120,
        y: (targetDisplay === null || targetDisplay === void 0 ? void 0 : targetDisplay.lastpos.y) + 20,
        w: 150,
        h: 60,
    };
    var targetDebuffs = alt1__WEBPACK_IMPORTED_MODULE_9__.captureHold(target_display_loc.x, target_display_loc.y, target_display_loc.w, target_display_loc.h);
    var targetIsDeathMarked = targetDebuffs.findSubimage(enemyImages.DeathMark).length;
    if (targetIsDeathMarked) {
        setActive(getByID('DeathMarkDebuff'));
    }
    else if (!targetIsDeathMarked) {
        setInactive(getByID('DeathMarkDebuff'));
    }
    var targetIsBloated = targetDebuffs.findSubimage(enemyImages.Bloat).length;
    if (targetIsBloated) {
        setActive(getByID('Bloat'));
    }
    else if (!targetIsBloated) {
        setInactive(getByID('Bloat'));
    }
    var targetIsVulnerable = targetDebuffs.findSubimage(enemyImages.Vulnerability).length;
    var targetIsVulnerable = targetDebuffs.findSubimage(enemyImages.Vulnerability).length;
    if (targetIsVulnerable) {
        setActive(getByID('VulnerabilityDebuff'));
        setTimeout(function () {
            setInactive(getByID('VulnerabilityDebuff'));
        }, 60000);
    }
    else if (!targetIsBloated) {
        setInactive(getByID('Bloat'));
    }
}
function findPrayer(buffsList, debuffsList) {
    return __awaiter(this, void 0, void 0, function () {
        var prayersActive, lastActiveOverhead, lastActiveDPS, _i, _a, _b, _key, value, prayerDraining, _c, _d, _e, _key, value, _f, _g, _h, _key, value;
        return __generator(this, function (_j) {
            if (!buffsList || !debuffsList) {
                return [2 /*return*/];
            }
            prayersActive = 0;
            for (_i = 0, _a = Object.entries(debuffsList); _i < _a.length; _i++) {
                _b = _a[_i], _key = _b[0], value = _b[1];
                prayerDraining = value.countMatch(prayerImages.prayerActive, false);
                if (prayerDraining.failed == 0 || prayerDraining.passed > 44) {
                    prayersActive++;
                }
            }
            if ((prayersActive > 0 &&
                getByID('Buffs').contains(prayersList.DpsPrayer)) ||
                getByID('Buffs2').contains(prayersList.DpsPrayer) ||
                getByID('Buffs3').contains(prayersList.DpsPrayer)) {
                for (_c = 0, _d = Object.entries(buffsList); _c < _d.length; _c++) {
                    _e = _d[_c], _key = _e[0], value = _e[1];
                    lastActiveDPS = testDpsPrayers(value);
                }
            }
            else {
                prayersList.DpsPrayer.dataset.prayer = '';
                prayersList.DpsPrayer.classList.add('inactive');
            }
            if ((prayersActive > 0 &&
                getByID('Buffs').contains(prayersList.OverheadPrayer)) ||
                getByID('Buffs2').contains(prayersList.OverheadPrayer) ||
                getByID('Buffs3').contains(prayersList.OverheadPrayer)) {
                for (_f = 0, _g = Object.entries(buffsList); _f < _g.length; _f++) {
                    _h = _g[_f], _key = _h[0], value = _h[1];
                    lastActiveOverhead = testOverheadPrayers(value);
                }
            }
            else {
                prayersList.OverheadPrayer.dataset.prayer = '';
                prayersList.OverheadPrayer.classList.add('inactive');
            }
            return [2 /*return*/];
        });
    });
}
function testDpsPrayers(buff) {
    return __awaiter(this, void 0, void 0, function () {
        var affliction, anguish, desolation, malevolence, ruination, sorrow, torment, turmoil, prayerTests, _i, _a, _b, key, value;
        return __generator(this, function (_c) {
            if (getByID('Buffs').contains(prayersList.DpsPrayer) ||
                getByID('Buffs2').contains(prayersList.DpsPrayer) ||
                getByID('Buffs3').contains(prayersList.DpsPrayer)) {
                affliction = buff.countMatch(prayerImages.affliction, false);
                anguish = buff.countMatch(prayerImages.anguish, false);
                desolation = buff.countMatch(prayerImages.desolation, false);
                malevolence = buff.countMatch(prayerImages.malevolence, false);
                ruination = buff.countMatch(prayerImages.ruination, false);
                sorrow = buff.countMatch(prayerImages.sorrow, false);
                torment = buff.countMatch(prayerImages.torment, false);
                turmoil = buff.countMatch(prayerImages.turmoil, false);
                prayerTests = {
                    affliction: affliction.passed,
                    anguish: anguish.passed,
                    desolation: desolation.passed,
                    malevolence: malevolence.passed,
                    ruination: ruination.passed,
                    sorrow: sorrow.passed,
                    torment: torment.passed,
                    turmoil: turmoil.passed,
                };
                for (_i = 0, _a = Object.entries(prayerTests); _i < _a.length; _i++) {
                    _b = _a[_i], key = _b[0], value = _b[1];
                    if (value > 180) {
                        prayersList.DpsPrayer.dataset.prayer = key
                            .toString()
                            .toLowerCase();
                        prayersList.DpsPrayer.classList.remove('inactive');
                        return [2 /*return*/, prayerTests[key].toString()];
                    }
                }
            }
            return [2 /*return*/];
        });
    });
}
function testOverheadPrayers(buff) {
    return __awaiter(this, void 0, void 0, function () {
        var deflectMagic, deflectMelee, deflectNecromancy, deflectRanged, protectFromMagic, protectFromMelee, protectFromNecromancy, protectFromRanged, soulSplit, prayerTests, _i, _a, _b, key, value;
        return __generator(this, function (_c) {
            if (getByID('Buffs').contains(prayersList.OverheadPrayer) ||
                getByID('Buffs2').contains(prayersList.OverheadPrayer) ||
                getByID('Buffs3').contains(prayersList.OverheadPrayer)) {
                deflectMagic = buff.countMatch(prayerImages.deflectMagic, false);
                deflectMelee = buff.countMatch(prayerImages.deflectMelee, false);
                deflectNecromancy = buff.countMatch(prayerImages.deflectNecromancy, false);
                deflectRanged = buff.countMatch(prayerImages.deflectRanged, false);
                protectFromMagic = buff.countMatch(prayerImages.protectFromMagic, false);
                protectFromMelee = buff.countMatch(prayerImages.protectFromMelee, false);
                protectFromNecromancy = buff.countMatch(prayerImages.protectFromNecromancy, false);
                protectFromRanged = buff.countMatch(prayerImages.protectFromRanged, false);
                soulSplit = buff.countMatch(prayerImages.soulSplit, false);
                prayerTests = {
                    deflectMagic: deflectMagic.passed,
                    deflectMelee: deflectMelee.passed,
                    deflectNecromancy: deflectNecromancy.passed,
                    deflectRanged: deflectRanged.passed,
                    protectFromMagic: protectFromMagic.passed,
                    protectFromMelee: protectFromMelee.passed,
                    protectFromNecromancy: protectFromNecromancy.passed,
                    protectFromRanged: protectFromRanged.passed,
                    soulSplit: soulSplit.passed,
                };
                for (_i = 0, _a = Object.entries(prayerTests); _i < _a.length; _i++) {
                    _b = _a[_i], key = _b[0], value = _b[1];
                    if (value > 240) {
                        prayersList.OverheadPrayer.dataset.prayer = key
                            .toString()
                            .toLowerCase();
                        prayersList.OverheadPrayer.classList.remove('inactive');
                    }
                }
            }
            return [2 /*return*/];
        });
    });
}
function getMaxValueKey(obj) {
    return Object.keys(obj).reduce(function (a, b) { return (obj[a] > obj[b] ? a : b); });
}
var timersCollection = {};
function watchTimers() {
    return __awaiter(this, void 0, void 0, function () {
        var items;
        return __generator(this, function (_a) {
            items = helperItems.TrackedBuffs.querySelectorAll('li');
            items.forEach(function (item) {
                var time = '0';
                if (item.dataset.time !== undefined || item.dataset.time !== null) {
                    time = item.dataset.time;
                }
                if (timersCollection[item.dataset.name] == item.dataset.time &&
                    item.classList.contains('active') &&
                    item.dataset.startedTimer) {
                    startCooldownTimer(item, (parseInt(item.dataset.cooldownTime, 10)) + parseInt(item.dataset.time, 10) - 3);
                }
                else if (timersCollection[item.dataset.name] == item.dataset.time &&
                    parseInt(item.dataset.time, 10) < 60 &&
                    !item.dataset.time.indexOf('m') &&
                    !item.classList.contains('enemy-debuff') &&
                    !item.classList.contains('stacks') &&
                    !item.classList.contains('no-timer') &&
                    item.classList.contains('active')) {
                    setInactive(item);
                }
                else {
                    timersCollection[item.dataset.name] = time;
                }
                console.log(timersCollection);
            });
            return [2 /*return*/];
        });
    });
}
function setCooldown(element, cooldownTimer) {
    return __awaiter(this, void 0, void 0, function () {
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    element.classList.add('cooldown');
                    element.classList.remove('inactive');
                    element.classList.remove('active');
                    element.dataset.time = '';
                    element.dataset.startedTimer = 'false';
                    element.dataset.cooldown = cooldownTimer.toString();
                    return [4 /*yield*/, new Promise(function (done) { return setTimeout(done, 2000); })];
                case 1:
                    _a.sent();
                    return [2 /*return*/];
            }
        });
    });
}
function setInactive(element) {
    return __awaiter(this, void 0, void 0, function () {
        return __generator(this, function (_a) {
            if (!(element.dataset.startedTimer == 'true')) {
                element.classList.add('inactive');
                element.classList.remove('active');
                element.dataset.time = '';
            }
            else if (element.dataset.startedFimer == 'false') {
                element.classList.remove('cooldown');
                element.dataset.cooldown = '';
            }
            return [2 /*return*/];
        });
    });
}
function setActive(element) {
    return __awaiter(this, void 0, void 0, function () {
        return __generator(this, function (_a) {
            element.classList.remove('cooldown');
            element.classList.remove('inactive');
            element.classList.add('active');
            return [2 /*return*/];
        });
    });
}
var bolgSpecActive = false;
function findBolgStacks(buffs) {
    return __awaiter(this, void 0, void 0, function () {
        var bolgStacksData, bolgFound, canvas, ctx, a, buffsImage, bolgBuffImage, _i, _a, _b, _key, value, bolgStacksBuff, bolgData, bolgTime, bolgStacks;
        return __generator(this, function (_c) {
            switch (_c.label) {
                case 0:
                    bolgFound = false;
                    if (!!_a1sauce__WEBPACK_IMPORTED_MODULE_0__.getSetting('singleBOLG')) return [3 /*break*/, 1];
                    canvas = document.getElementById('bolgCanvas');
                    ctx = canvas.getContext('2d');
                    ctx.drawImage(buffImages.perfectEquilibriumNoBorder.toImage(), 0, 0, canvas.width, canvas.height);
                    for (a in buffs.reverse()) {
                        if (buffs[a].compareBuffer(buffImages.perfectEquilibriumNoBorder) &&
                            bolgFound == false) {
                            bolgFound = true;
                            buffsImage = buffs[a].buffer.toImage();
                            ctx.drawImage(buffsImage, buffs[a].bufferx, buffs[a].buffery, 27, 27, 0, 0, canvas.width, canvas.height);
                            bolgBuffImage = ctx.getImageData(0, 0, canvas.width, canvas.height);
                            setActive(buffsList.BolgStacksBuff);
                            buffsList.BolgStacksBuff.style.backgroundImage =
                                'url("data:image/png;base64,' +
                                    bolgBuffImage.toPngBase64() +
                                    '")';
                        }
                    }
                    return [3 /*break*/, 9];
                case 1:
                    if (!_a1sauce__WEBPACK_IMPORTED_MODULE_0__.getSetting('singleBOLG')) return [3 /*break*/, 9];
                    _i = 0, _a = Object.entries(buffs).reverse();
                    _c.label = 2;
                case 2:
                    if (!(_i < _a.length)) return [3 /*break*/, 6];
                    _b = _a[_i], _key = _b[0], value = _b[1];
                    bolgStacksBuff = value.countMatch(buffImages.perfectEquilibrium, false);
                    if (!(bolgStacksBuff.passed > 200)) return [3 /*break*/, 5];
                    bolgFound = true;
                    bolgStacksData = value.readArg('arg').arg;
                    return [4 /*yield*/, parseBolgBuff(bolgStacksData)];
                case 3:
                    bolgData = _c.sent();
                    console.log(bolgData);
                    bolgTime = bolgData[0];
                    bolgStacks = bolgData[1];
                    buffsList.BolgStacksBuff.dataset.time = bolgStacks;
                    buffsList.BalanceByForceBuff.dataset.time = bolgTime;
                    return [4 /*yield*/, new Promise(function (done) { return setTimeout(done, 600); })];
                case 4:
                    _c.sent();
                    _c.label = 5;
                case 5:
                    _i++;
                    return [3 /*break*/, 2];
                case 6:
                    if (!(bolgStacksData == undefined)) return [3 /*break*/, 8];
                    buffsList.BolgStacksBuff.classList.add('inactive');
                    buffsList.BalanceByForceBuff.classList.add('inactive');
                    return [4 /*yield*/, new Promise(function (done) { return setTimeout(done, 600); })];
                case 7:
                    _c.sent();
                    buffsList.BolgStacksBuff.dataset.time = '';
                    buffsList.BalanceByForceBuff.dataset.time = '';
                    return [3 /*break*/, 9];
                case 8:
                    buffsList.BolgStacksBuff.classList.remove('inactive');
                    buffsList.BalanceByForceBuff.classList.remove('inactive');
                    _c.label = 9;
                case 9: return [4 /*yield*/, new Promise(function (done) { return setTimeout(done, 10); })];
                case 10:
                    _c.sent();
                    return [2 /*return*/, bolgStacksData];
            }
        });
    });
}
function parseBolgBuff(data) {
    var _a, _b;
    return __awaiter(this, void 0, void 0, function () {
        var bolgSpecTime, bolgStacks, buffRegexp, results;
        return __generator(this, function (_c) {
            switch (_c.label) {
                case 0:
                    buffRegexp = /(?<time>\d{1,2})(.*\((?<stacks>\d)\))?/g;
                    results = Array.from(data.matchAll(buffRegexp));
                    if (!results[0]) return [3 /*break*/, 7];
                    console.log("Results: ".concat(data));
                    if (!(data.indexOf('(') > -1)) return [3 /*break*/, 1];
                    bolgSpecActive = true;
                    bolgSpecTime = results[0].groups.time;
                    bolgStacks = results[0].groups.stacks;
                    return [3 /*break*/, 7];
                case 1:
                    if (!(parseInt(data, 10) == 30)) return [3 /*break*/, 3];
                    bolgSpecActive = true;
                    bolgSpecTime = '30';
                    bolgStacks = results[0].groups.stacks;
                    return [4 /*yield*/, new Promise(function (done) { return setTimeout(done, 30000); })];
                case 2:
                    _c.sent();
                    bolgSpecActive = false;
                    return [3 /*break*/, 7];
                case 3:
                    if (!bolgSpecActive) return [3 /*break*/, 4];
                    bolgSpecTime = (_a = results[0].groups.time) !== null && _a !== void 0 ? _a : 0;
                    bolgStacks = '0';
                    return [3 /*break*/, 7];
                case 4:
                    if (!!bolgSpecActive) return [3 /*break*/, 7];
                    if (!(parseInt(results[0].groups.time, 10) > 8)) return [3 /*break*/, 6];
                    bolgSpecTime = results[0].groups.time;
                    bolgStacks = '0';
                    bolgSpecActive = true;
                    return [4 /*yield*/, new Promise(function (done) {
                            return setTimeout(done, parseInt(results[0].groups.time, 10) * 1000);
                        })];
                case 5:
                    _c.sent();
                    bolgSpecActive = false;
                    return [3 /*break*/, 7];
                case 6:
                    bolgSpecTime = '';
                    bolgStacks = (_b = results[0].groups.time) !== null && _b !== void 0 ? _b : 0;
                    _c.label = 7;
                case 7:
                    if (bolgSpecTime == undefined || bolgStacks == undefined) {
                        return [2 /*return*/, ['', '']];
                    }
                    return [2 /*return*/, [bolgSpecTime, bolgStacks]];
            }
        });
    });
}
function setOverlayPosition() {
    return __awaiter(this, void 0, void 0, function () {
        var oldPosition, bbb;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    alt1__WEBPACK_IMPORTED_MODULE_9__.once('alt1pressed', updateLocation);
                    oldPosition = _a1sauce__WEBPACK_IMPORTED_MODULE_0__.getSetting('overlayPosition');
                    _a1sauce__WEBPACK_IMPORTED_MODULE_0__.updateSetting('oldOverlayPosition', oldPosition);
                    updatingOverlayPosition = true;
                    helperItems.BetterBuffsBar.classList.toggle('positioning', updatingOverlayPosition);
                    _a.label = 1;
                case 1:
                    if (!updatingOverlayPosition) return [3 /*break*/, 3];
                    alt1.setTooltip('Press Alt+1 to save position');
                    bbb = getByID('Buffs');
                    _a1sauce__WEBPACK_IMPORTED_MODULE_0__.updateSetting('overlayPosition', {
                        x: Math.floor(alt1__WEBPACK_IMPORTED_MODULE_9__.getMousePosition().x -
                            (_a1sauce__WEBPACK_IMPORTED_MODULE_0__.getSetting('uiScale') / 100) * (bbb.offsetWidth / 2)),
                        y: Math.floor(alt1__WEBPACK_IMPORTED_MODULE_9__.getMousePosition().y -
                            (_a1sauce__WEBPACK_IMPORTED_MODULE_0__.getSetting('uiScale') / 100) * (bbb.offsetHeight / 2)),
                    });
                    currentOverlayPosition = _a1sauce__WEBPACK_IMPORTED_MODULE_0__.getSetting('overlayPosition');
                    alt1.overLayRefreshGroup('group1');
                    return [4 /*yield*/, new Promise(function (done) { return setTimeout(done, 200); })];
                case 2:
                    _a.sent();
                    return [3 /*break*/, 1];
                case 3:
                    alt1.clearTooltip();
                    return [2 /*return*/];
            }
        });
    });
}
function setOverlayPosition2() {
    return __awaiter(this, void 0, void 0, function () {
        var oldPosition, bbb;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    alt1__WEBPACK_IMPORTED_MODULE_9__.once('alt1pressed', updateLocation2);
                    oldPosition = _a1sauce__WEBPACK_IMPORTED_MODULE_0__.getSetting('overlay2Position');
                    _a1sauce__WEBPACK_IMPORTED_MODULE_0__.updateSetting('oldOverlay2Position', oldPosition);
                    updatingOverlayPosition = true;
                    helperItems.BetterBuffsBar.classList.toggle('positioning', updatingOverlayPosition);
                    _a.label = 1;
                case 1:
                    if (!updatingOverlayPosition) return [3 /*break*/, 3];
                    alt1.setTooltip('Press Alt+1 to save position');
                    bbb = getByID('Buffs2');
                    _a1sauce__WEBPACK_IMPORTED_MODULE_0__.updateSetting('overlay2Position', {
                        x: Math.floor(alt1__WEBPACK_IMPORTED_MODULE_9__.getMousePosition().x -
                            (_a1sauce__WEBPACK_IMPORTED_MODULE_0__.getSetting('uiScale') / 100) * (bbb.offsetWidth / 2)),
                        y: Math.floor(alt1__WEBPACK_IMPORTED_MODULE_9__.getMousePosition().y -
                            (_a1sauce__WEBPACK_IMPORTED_MODULE_0__.getSetting('uiScale') / 100) * (bbb.offsetHeight / 2)),
                    });
                    currentOverlay2Position = _a1sauce__WEBPACK_IMPORTED_MODULE_0__.getSetting('overlay2Position');
                    alt1.overLayRefreshGroup('group2');
                    return [4 /*yield*/, new Promise(function (done) { return setTimeout(done, 200); })];
                case 2:
                    _a.sent();
                    return [3 /*break*/, 1];
                case 3:
                    alt1.clearTooltip();
                    return [2 /*return*/];
            }
        });
    });
}
function setOverlayPosition3() {
    return __awaiter(this, void 0, void 0, function () {
        var oldPosition, bbb;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    alt1__WEBPACK_IMPORTED_MODULE_9__.once('alt1pressed', updateLocation3);
                    oldPosition = _a1sauce__WEBPACK_IMPORTED_MODULE_0__.getSetting('overlay3Position');
                    _a1sauce__WEBPACK_IMPORTED_MODULE_0__.updateSetting('oldOverlay3Position', oldPosition);
                    updatingOverlayPosition = true;
                    helperItems.BetterBuffsBar.classList.toggle('positioning', updatingOverlayPosition);
                    _a.label = 1;
                case 1:
                    if (!updatingOverlayPosition) return [3 /*break*/, 3];
                    alt1.setTooltip('Press Alt+1 to save position');
                    bbb = getByID('Buffs3');
                    _a1sauce__WEBPACK_IMPORTED_MODULE_0__.updateSetting('overlay3Position', {
                        x: Math.floor(alt1__WEBPACK_IMPORTED_MODULE_9__.getMousePosition().x -
                            (_a1sauce__WEBPACK_IMPORTED_MODULE_0__.getSetting('uiScale') / 100) * (bbb.offsetWidth / 2)),
                        y: Math.floor(alt1__WEBPACK_IMPORTED_MODULE_9__.getMousePosition().y -
                            (_a1sauce__WEBPACK_IMPORTED_MODULE_0__.getSetting('uiScale') / 100) * (bbb.offsetHeight / 2)),
                    });
                    currentOverlay3Position = _a1sauce__WEBPACK_IMPORTED_MODULE_0__.getSetting('overlay3Position');
                    alt1.overLayRefreshGroup('group3');
                    return [4 /*yield*/, new Promise(function (done) { return setTimeout(done, 200); })];
                case 2:
                    _a.sent();
                    return [3 /*break*/, 1];
                case 3:
                    alt1.clearTooltip();
                    return [2 /*return*/];
            }
        });
    });
}
function updateLocation(e) {
    var bbb = getByID('Buffs');
    _a1sauce__WEBPACK_IMPORTED_MODULE_0__.updateSetting('overlayPosition', {
        x: Math.floor(e.x - (_a1sauce__WEBPACK_IMPORTED_MODULE_0__.getSetting('uiScale') / 100) * (bbb.offsetWidth / 2)),
        y: Math.floor(e.y - (_a1sauce__WEBPACK_IMPORTED_MODULE_0__.getSetting('uiScale') / 100) * (bbb.offsetHeight / 2)),
    });
    updatingOverlayPosition = false;
    helperItems.BetterBuffsBar.classList.toggle('positioning', updatingOverlayPosition);
}
function updateLocation2(e) {
    var bbb = getByID('Buffs2');
    _a1sauce__WEBPACK_IMPORTED_MODULE_0__.updateSetting('overlay2Position', {
        x: Math.floor(e.x - (_a1sauce__WEBPACK_IMPORTED_MODULE_0__.getSetting('uiScale') / 100) * (bbb.offsetWidth / 2)),
        y: Math.floor(e.y - (_a1sauce__WEBPACK_IMPORTED_MODULE_0__.getSetting('uiScale') / 100) * (bbb.offsetHeight / 2)),
    });
    updatingOverlayPosition = false;
    helperItems.BetterBuffsBar.classList.toggle('positioning', updatingOverlayPosition);
}
function updateLocation3(e) {
    var bbb = getByID('Buffs3');
    _a1sauce__WEBPACK_IMPORTED_MODULE_0__.updateSetting('overlay3Position', {
        x: Math.floor(e.x - (_a1sauce__WEBPACK_IMPORTED_MODULE_0__.getSetting('uiScale') / 100) * (bbb.offsetWidth / 2)),
        y: Math.floor(e.y - (_a1sauce__WEBPACK_IMPORTED_MODULE_0__.getSetting('uiScale') / 100) * (bbb.offsetHeight / 2)),
    });
    updatingOverlayPosition = false;
    helperItems.BetterBuffsBar.classList.toggle('positioning', updatingOverlayPosition);
}
function startOverlay(element, region) {
    return __awaiter(this, void 0, void 0, function () {
        var overlay, styles, totalTrackeDItems, buffsPerRow, refreshRate, overlayPosition, uiScale;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    overlay = element;
                    styles = getComputedStyle(overlay);
                    totalTrackeDItems = _a1sauce__WEBPACK_IMPORTED_MODULE_0__.getSetting('totalTrackedItems');
                    buffsPerRow = _a1sauce__WEBPACK_IMPORTED_MODULE_0__.getSetting('buffsPerrow');
                    refreshRate = parseInt(_a1sauce__WEBPACK_IMPORTED_MODULE_0__.getSetting('overlayRefreshRate'), 10);
                    return [4 /*yield*/, new Promise(function (done) { return setTimeout(done, 1000); })];
                case 1:
                    _a.sent();
                    _a.label = 2;
                case 2:
                    if (false) {}
                    uiScale = _a1sauce__WEBPACK_IMPORTED_MODULE_0__.getSetting('uiScale' + region);
                    if (region == '') {
                        overlayPosition = currentOverlayPosition;
                    }
                    else if (region == '2') {
                        overlayPosition = currentOverlay2Position;
                    }
                    else if (region == '3') {
                        overlayPosition = currentOverlay3Position;
                    }
                    html_to_image__WEBPACK_IMPORTED_MODULE_2__.toCanvas(overlay, {
                        backgroundColor: 'transparent',
                        width: parseInt(styles.minWidth, 10),
                        height: parseInt(styles.minHeight, 10) +
                            Math.floor(totalTrackeDItems / buffsPerRow + 1) *
                                27 *
                                (uiScale / 100),
                        quality: 1,
                        pixelRatio: uiScale / 100 - 0.00999999999999999999,
                        skipAutoScale: true,
                    })
                        .then(function (dataUrl) {
                        if (inCombat || element == getByID('Buffs')) {
                            var base64ImageString = dataUrl
                                .getContext('2d')
                                .getImageData(0, 0, dataUrl.width, dataUrl.height);
                            alt1.overLaySetGroup('region' + region);
                            alt1.overLayFreezeGroup('region' + region);
                            alt1.overLayClearGroup('region' + region);
                            alt1.overLayImage(overlayPosition.x, overlayPosition.y, alt1__WEBPACK_IMPORTED_MODULE_9__.encodeImageString(base64ImageString), base64ImageString.width, refreshRate);
                            alt1.overLayRefreshGroup('region' + region);
                        }
                        else {
                            alt1.overLayClearGroup('region' + region);
                            alt1.overLayRefreshGroup('region' + region);
                        }
                    })
                        .catch(function (e) {
                        console.error("html-to-image failed to capture", e);
                    });
                    return [4 /*yield*/, new Promise(function (done) { return setTimeout(done, refreshRate); })];
                case 3:
                    _a.sent();
                    return [3 /*break*/, 2];
                case 4: return [2 /*return*/];
            }
        });
    });
}
function initSettings() {
    if (!localStorage[config.appName]) {
        setDefaultSettings();
    }
    if (_a1sauce__WEBPACK_IMPORTED_MODULE_0__.getSetting('betaUpgrade' == undefined)) {
        _a1sauce__WEBPACK_IMPORTED_MODULE_0__.updateSetting('betaUpgrade', 'upgraded to 2.0.0');
        _a1sauce__WEBPACK_IMPORTED_MODULE_0__.updateSetting('delayAdjustment', 1);
    }
    if (_a1sauce__WEBPACK_IMPORTED_MODULE_0__.getSetting('beta') == true) {
        helperItems.BetterBuffsBar.classList.add('beta-tester');
        document.querySelector('html').classList.add('beta');
    }
    loadSettings();
}
function deleteLocalStorage() {
    localStorage.removeItem(config.appName);
    localStorage.removeItem('Buffs');
    localStorage.removeItem('Buffs2');
    localStorage.removeItem('Buffs3');
    localStorage.removeItem('UntrackedBuffs');
    location.reload();
}
function setDefaultSettings() {
    localStorage.setItem(config.appName, JSON.stringify({
        activeOverlay: true,
        bigHeadMode: false,
        bigHeadPosition: 'start',
        buffsLocation: findPlayerBuffs,
        buffsPerRow: 10,
        delayAdjustment: 1,
        debuffsLocation: findPlayerDebuffs,
        fadeInactiveBuffs: true,
        loopSpeed: 150,
        singleBOLG: false,
        showMaintainableBlinking: true,
        showTooltipReminders: true,
        overlayPosition: { x: 100, y: 100 },
        overlay2Position: { x: 300, y: 100 },
        overlay3Position: { x: 500, y: 100 },
        uiScale: 100,
        updatingOverlayPosition: false,
    }));
}
function loadSettings() {
    getByID('Buffs').style.setProperty('--maxcount', _a1sauce__WEBPACK_IMPORTED_MODULE_0__.getSetting('buffsPerRow'));
    getByID('Buffs').style.setProperty('--totalitems', helperItems.TrackedBuffs.children.length.toString());
    getByID('Buffs2').style.setProperty('--maxcount', _a1sauce__WEBPACK_IMPORTED_MODULE_0__.getSetting('buffsPerRow'));
    getByID('Buffs2').style.setProperty('--totalitems', helperItems.TrackedBuffs.children.length.toString());
    getByID('Buffs3').style.setProperty('--maxcount', _a1sauce__WEBPACK_IMPORTED_MODULE_0__.getSetting('buffsPerRow'));
    getByID('Buffs3').style.setProperty('--totalitems', helperItems.TrackedBuffs.children.length.toString());
    getByID('Buffs').style.setProperty('--scale', _a1sauce__WEBPACK_IMPORTED_MODULE_0__.getSetting('uiScale'));
    getByID('Buffs2').style.setProperty('--scale', _a1sauce__WEBPACK_IMPORTED_MODULE_0__.getSetting('uiScale'));
    getByID('Buffs3').style.setProperty('--scale', _a1sauce__WEBPACK_IMPORTED_MODULE_0__.getSetting('uiScale'));
    helperItems.BetterBuffsBar.classList.toggle('fade', _a1sauce__WEBPACK_IMPORTED_MODULE_0__.getSetting('fadeInactiveBuffs'));
    helperItems.BetterBuffsBar.classList.toggle('big-head-mode', _a1sauce__WEBPACK_IMPORTED_MODULE_0__.getSetting('bigHeadMode'));
    helperItems.BetterBuffsBar.classList.toggle('blink-maintainables', _a1sauce__WEBPACK_IMPORTED_MODULE_0__.getSetting('showMaintainableBlinking'));
    if (parseInt(settingsObject.UIScale.querySelector('input').value, 10) < 100) {
        helperItems.TrackedBuffs.classList.add('scaled');
    }
    setBuffsPerRow();
    setBigHeadMode();
    setSortables();
    findPlayerBuffs();
    findPlayerDebuffs();
    setGridSize();
    setBigHeadGrid();
    disableNameSetting();
}
function setSortables() {
    var sortables = ['Buffs', 'Buffs2', 'Buffs3', 'UntrackedBuffs'];
    // Create the sortables
    sortables.forEach(function (sortable) {
        var el = getByID(sortable);
        sortablejs__WEBPACK_IMPORTED_MODULE_1__.Sortable.create(el, {
            group: 'trackedBuffs',
            multiDrag: true,
            dataIdAttr: 'id',
            swapThreshold: 0.85,
            store: {
                set: function (sortable) {
                    var order = sortable.toArray();
                    localStorage.setItem(sortable.el.id, order.join('|'));
                },
            },
            onSort: function (evt) {
                var currentSortable = evt.to[Object.keys(evt.to)[0]];
                var order = currentSortable.toArray();
                localStorage[currentSortable.el.id] = order.join('|');
            },
        });
    });
    // Re-sort into their saved areas on load
    sortables.forEach(function (sortable) {
        var parent = getByID(sortable);
        var itemOrder = localStorage.getItem(sortable);
        var itemOrderArr = itemOrder ? itemOrder.split('|') : [];
        var prevItem;
        itemOrderArr.forEach(function (item) {
            var child = getByID(item);
            if (!prevItem) {
                parent.insertBefore(child, parent.firstChild);
            }
            else {
                var prevChild = getByID(prevItem);
                prevChild.parentNode.insertBefore(child, prevChild.nextSibling);
            }
            prevItem = item;
        });
    });
    var allItems = helperItems.BetterBuffsBar.querySelectorAll('[data-name]');
    allItems.forEach(function (item) {
        item.addEventListener('mouseenter', function (e) {
            var name = item.dataset.name;
            helperItems.NameOutput.innerHTML = name;
        });
        item.addEventListener('mouseleave', function (e) {
            helperItems.NameOutput.innerHTML = '';
        });
    });
}
function setBuffsPerRow() {
    getByID('Buffs').style.setProperty('--maxcount', _a1sauce__WEBPACK_IMPORTED_MODULE_0__.getSetting('buffsPerRow'));
    getByID('Buffs2').style.setProperty('--maxcount', _a1sauce__WEBPACK_IMPORTED_MODULE_0__.getSetting('buffsPerRow'));
    getByID('Buffs3').style.setProperty('--maxcount', _a1sauce__WEBPACK_IMPORTED_MODULE_0__.getSetting('buffsPerRow'));
    setGridSize();
    helperItems.TrackedBuffs.addEventListener('change', function () {
        getByID('Buffs').style.setProperty('--totalitems', helperItems.TrackedBuffs.children.length.toString());
        getByID('Buffs2').style.setProperty('--totalitems', helperItems.TrackedBuffs.children.length.toString());
        getByID('Buffs3').style.setProperty('--totalitems', helperItems.TrackedBuffs.children.length.toString());
        _a1sauce__WEBPACK_IMPORTED_MODULE_0__.updateSetting('totalTrackedItems', helperItems.TrackedBuffs.children.length.toString);
    });
}
function setGridSize() {
    var buffsCount = helperItems.TrackedBuffs.querySelectorAll('li').length;
    var maxLength = parseInt(helperItems.TrackedBuffs.style.getPropertyValue('--maxcount'), 10);
    var rowsToGenerate = parseInt(roundedToFixed(buffsCount / maxLength, 1) + 1, 10);
    helperItems.TrackedBuffs.style.gridTemplateAreas = "\"".concat('. '.repeat(_a1sauce__WEBPACK_IMPORTED_MODULE_0__.getSetting('buffsPerRow')), "\"").repeat(rowsToGenerate);
    helperItems.TrackedBuffs.style.gridTemplateRows = "repeat(".concat(rowsToGenerate + 1, ", calc(30px * clamp(1, (var(--scale) / 100) / 2, 2)))");
    helperItems.TrackedBuffs2.style.gridTemplateAreas = "\"".concat('. '.repeat(_a1sauce__WEBPACK_IMPORTED_MODULE_0__.getSetting('buffsPerRow')), "\"").repeat(rowsToGenerate);
    helperItems.TrackedBuffs2.style.gridTemplateRows = "repeat(".concat(rowsToGenerate + 1, ", calc(30px * clamp(1, (var(--scale) / 100) / 2, 2)))");
    helperItems.TrackedBuffs3.style.gridTemplateAreas = "\"".concat('. '.repeat(_a1sauce__WEBPACK_IMPORTED_MODULE_0__.getSetting('buffsPerRow')), "\"").repeat(rowsToGenerate);
    helperItems.TrackedBuffs3.style.gridTemplateRows = "repeat(".concat(rowsToGenerate + 1, ", calc(30px * clamp(1, (var(--scale) / 100) / 2, 2)))");
}
function setBigHeadMode() {
    var bigHeadMode = _a1sauce__WEBPACK_IMPORTED_MODULE_0__.getSetting('bigHeadMode');
    helperItems.TrackedBuffs.classList.toggle('scaled', bigHeadMode);
    helperItems.BetterBuffsBar.classList.toggle('big-head-mode', bigHeadMode);
    setBigHeadGrid();
}
function setBigHeadGrid() {
    var bigHeadModeActive = _a1sauce__WEBPACK_IMPORTED_MODULE_0__.getSetting('bigHeadMode');
    var bigHeadPosition = _a1sauce__WEBPACK_IMPORTED_MODULE_0__.getSetting('bigHeadPosition');
    var buffsPerRow = _a1sauce__WEBPACK_IMPORTED_MODULE_0__.getSetting('buffsPerRow');
    if (bigHeadModeActive && bigHeadPosition == 'start') {
        helperItems.TrackedBuffs.style.gridTemplateAreas = "\n\t\t\"first first ".concat('. '.repeat(buffsPerRow), "\"\n\t\t\"first first ").concat('. '.repeat(buffsPerRow), "\"\n\t\t\". . ").concat('. '.repeat(buffsPerRow), "\"\n\t\t\". . ").concat('. '.repeat(buffsPerRow), "\"\n\t\t\". . ").concat('. '.repeat(buffsPerRow), "\"\n\t\t");
    }
    if (bigHeadModeActive && bigHeadPosition == 'end') {
        helperItems.TrackedBuffs.style.gridTemplateAreas = "\n\t\t\"".concat('. '.repeat(buffsPerRow), "first first\"\n\t\t\"").concat('. '.repeat(buffsPerRow), "first first\"\n\t\t\". . ").concat('. '.repeat(buffsPerRow), "\"\n\t\t\". . ").concat('. '.repeat(buffsPerRow), "\"\n\t\t\". . ").concat('. '.repeat(buffsPerRow), "\"\n\t\t");
    }
    if (!bigHeadModeActive) {
        helperItems.TrackedBuffs.style.gridTemplateAreas = "\n\t\t\"".concat('. '.repeat(buffsPerRow), "\"\n\t\t\"").concat('. '.repeat(buffsPerRow), "\"\n\t\t\"").concat('. '.repeat(buffsPerRow), "\"\n\t\t\"").concat('. '.repeat(buffsPerRow), "\"\n\t\t\"").concat('. '.repeat(buffsPerRow), "\"\n\t\t");
    }
    if (bigHeadModeActive && bigHeadPosition == 'start') {
        helperItems.TrackedBuffs2.style.gridTemplateAreas = "\n\t\t\"first first ".concat('. '.repeat(buffsPerRow), "\"\n\t\t\"first first ").concat('. '.repeat(buffsPerRow), "\"\n\t\t\". . ").concat('. '.repeat(buffsPerRow), "\"\n\t\t\". . ").concat('. '.repeat(buffsPerRow), "\"\n\t\t\". . ").concat('. '.repeat(buffsPerRow), "\"\n\t\t");
    }
    if (bigHeadModeActive && bigHeadPosition == 'end') {
        helperItems.TrackedBuffs2.style.gridTemplateAreas = "\n\t\t\"".concat('. '.repeat(buffsPerRow), "first first\"\n\t\t\"").concat('. '.repeat(buffsPerRow), "first first\"\n\t\t\". . ").concat('. '.repeat(buffsPerRow), "\"\n\t\t\". . ").concat('. '.repeat(buffsPerRow), "\"\n\t\t\". . ").concat('. '.repeat(buffsPerRow), "\"\n\t\t");
    }
    if (!bigHeadModeActive) {
        helperItems.TrackedBuffs2.style.gridTemplateAreas = "\n\t\t\"".concat('. '.repeat(buffsPerRow), "\"\n\t\t\"").concat('. '.repeat(buffsPerRow), "\"\n\t\t\"").concat('. '.repeat(buffsPerRow), "\"\n\t\t\"").concat('. '.repeat(buffsPerRow), "\"\n\t\t\"").concat('. '.repeat(buffsPerRow), "\"\n\t\t");
    }
    if (bigHeadModeActive && bigHeadPosition == 'start') {
        helperItems.TrackedBuffs3.style.gridTemplateAreas = "\n\t\t\"first first ".concat('. '.repeat(buffsPerRow), "\"\n\t\t\"first first ").concat('. '.repeat(buffsPerRow), "\"\n\t\t\". . ").concat('. '.repeat(buffsPerRow), "\"\n\t\t\". . ").concat('. '.repeat(buffsPerRow), "\"\n\t\t\". . ").concat('. '.repeat(buffsPerRow), "\"\n\t\t");
    }
    if (bigHeadModeActive && bigHeadPosition == 'end') {
        helperItems.TrackedBuffs3.style.gridTemplateAreas = "\n\t\t\"".concat('. '.repeat(buffsPerRow), "first first\"\n\t\t\"").concat('. '.repeat(buffsPerRow), "first first\"\n\t\t\". . ").concat('. '.repeat(buffsPerRow), "\"\n\t\t\". . ").concat('. '.repeat(buffsPerRow), "\"\n\t\t\". . ").concat('. '.repeat(buffsPerRow), "\"\n\t\t");
    }
    if (!bigHeadModeActive) {
        helperItems.TrackedBuffs3.style.gridTemplateAreas = "\n\t\t\"".concat('. '.repeat(buffsPerRow), "\"\n\t\t\"").concat('. '.repeat(buffsPerRow), "\"\n\t\t\"").concat('. '.repeat(buffsPerRow), "\"\n\t\t\"").concat('. '.repeat(buffsPerRow), "\"\n\t\t\"").concat('. '.repeat(buffsPerRow), "\"\n\t\t");
    }
}
function disableNameSetting() {
    if (_a1sauce__WEBPACK_IMPORTED_MODULE_0__.getSetting('showBuffNames')) {
        _a1sauce__WEBPACK_IMPORTED_MODULE_0__.updateSetting('showBuffNames', false);
    }
}
var foundBuffs = false;
function getActiveBuffs() {
    if (foundBuffs && _a1sauce__WEBPACK_IMPORTED_MODULE_0__.getSetting('buffsLocation')) {
        return buffs.read();
    }
    else {
        findPlayerBuffs();
    }
}
function findPlayerBuffs() {
    if (buffs.find()) {
        foundBuffs = true;
        setTimeout(function () {
            alt1.overLaySetGroup('buffsArea');
            alt1.overLayRect(alt1__WEBPACK_IMPORTED_MODULE_9__.mixColor(120, 255, 120), buffs.getCaptRect().x, buffs.getCaptRect().y, buffs.getCaptRect().width, buffs.getCaptRect().height, 3000, 1);
        }, 1000);
        setTimeout(function () {
            alt1.overLayClearGroup('buffsArea');
        }, 4000);
        return _a1sauce__WEBPACK_IMPORTED_MODULE_0__.updateSetting('buffsLocation', [buffs.pos.x, buffs.pos.y]);
    }
}
var foundDebuffs = false;
function getActiveDebuffs() {
    if (foundDebuffs && _a1sauce__WEBPACK_IMPORTED_MODULE_0__.getSetting('debuffsLocation')) {
        return debuffs.read();
    }
    else {
        findPlayerDebuffs();
    }
}
function findPlayerDebuffs() {
    if (debuffs.find()) {
        foundDebuffs = true;
        return _a1sauce__WEBPACK_IMPORTED_MODULE_0__.updateSetting('debuffsLocation', [
            debuffs.pos.x,
            debuffs.pos.y,
        ]);
    }
}
function roundedToFixed(input, digits) {
    var rounder = Math.pow(10, digits);
    return (Math.round(input * rounder) / rounder).toFixed(digits);
}
/* Settings */
var currentVersion = "2.0.5";
var settingsObject = {
    settingsHeader: _a1sauce__WEBPACK_IMPORTED_MODULE_0__.createHeading('h2', 'Better Buffs Bar - v' + currentVersion),
    settingDiscord: _a1sauce__WEBPACK_IMPORTED_MODULE_0__.createText("Please <a href=\"https://discord.gg/KJ2SgWyJFF\" target=\"_blank\" rel=\"nofollow\">join the Discord</a> for any suggestions or support"),
    beginGeneral: _a1sauce__WEBPACK_IMPORTED_MODULE_0__.createHeading('h2', 'Settings'),
    BuffsPerRow: _a1sauce__WEBPACK_IMPORTED_MODULE_0__.createNumberSetting('buffsPerRow', 'Number of buffs displayed per row', { defaultValue: 10, min: 1, max: 20 }),
    FadeInactiveBuffs: _a1sauce__WEBPACK_IMPORTED_MODULE_0__.createCheckboxSetting('fadeInactiveBuffs', '<u>Explicitly Inactive</u> Instead of hiding inactive buffs - displays them darker and desaturated', (_a = _a1sauce__WEBPACK_IMPORTED_MODULE_0__.getSetting('fadeInactiveBuffs')) !== null && _a !== void 0 ? _a : true),
    Brightness: _a1sauce__WEBPACK_IMPORTED_MODULE_0__.createRangeSetting('brightness', '<u>Light Level</u> Control how dark inactive buffs should be - lower number being darker', { defaultValue: '75', min: 5, max: 100, unit: '%' }),
    BigHeadMode: _a1sauce__WEBPACK_IMPORTED_MODULE_0__.createCheckboxSetting('bigHeadMode', '<u>Big Head Mode</u> The first buff tracked  is made x4 larger.', (_b = _a1sauce__WEBPACK_IMPORTED_MODULE_0__.getSetting('bigHeadMode')) !== null && _b !== void 0 ? _b : false),
    BigHeadPosition: _a1sauce__WEBPACK_IMPORTED_MODULE_0__.createDropdownSetting('bigHeadPosition', '<u>Big Head Position</u> Set display position to Left or Right side', 'start', [
        { value: 'start', name: 'Left Side' },
        { value: 'end', name: 'Right Side' },
    ]),
    OverloadReminder: _a1sauce__WEBPACK_IMPORTED_MODULE_0__.createCheckboxSetting('overloadReminder', '<u>Overload Reminder</u> Display a tooltip after Overloads expires which lasts 3 seconds', (_c = _a1sauce__WEBPACK_IMPORTED_MODULE_0__.getSetting('overloadReminder')) !== null && _c !== void 0 ? _c : true),
    BlinkExpiredBuffs: _a1sauce__WEBPACK_IMPORTED_MODULE_0__.createCheckboxSetting('showMaintainableBlinking', '<u>100% Uptime</u> Adds a blinking "!!" effect for inactive buffs that can and should be maintained with 100% uptime', (_d = _a1sauce__WEBPACK_IMPORTED_MODULE_0__.getSetting('showMaintainableBlinking')) !== null && _d !== void 0 ? _d : true),
    SingleBOLG: _a1sauce__WEBPACK_IMPORTED_MODULE_0__.createCheckboxSetting('singleBOLG', '<u>Split BOLG Weapon Special / Stacks</u> Tracks Balance by Force and Perfect Equlibrium stacks as separate buffs', (_e = _a1sauce__WEBPACK_IMPORTED_MODULE_0__.getSetting('singleBOLG')) !== null && _e !== void 0 ? _e : false),
    endGeneral: _a1sauce__WEBPACK_IMPORTED_MODULE_0__.createSeperator(),
    OverlayHeader: _a1sauce__WEBPACK_IMPORTED_MODULE_0__.createHeading('h2', 'Overlay'),
    OverlayActive: _a1sauce__WEBPACK_IMPORTED_MODULE_0__.createCheckboxSetting('activeOverlay', "<u>Enable Overlay</u> When the overlay is toggled off - the app will hide the entire UI unless your mouse is over the app. This is for users who don't mind having a background and want to avoid the delay the overlay has", (_f = _a1sauce__WEBPACK_IMPORTED_MODULE_0__.getSetting('activeOverlay')) !== null && _f !== void 0 ? _f : false),
    OverlaySmallText: _a1sauce__WEBPACK_IMPORTED_MODULE_0__.createSmallText("If the overlay does not show - check the \"Show overlay\" permission is enabled for this plugin in Alt1's settings or try setting the position using the button below."),
    OverlayPositionButton: _a1sauce__WEBPACK_IMPORTED_MODULE_0__.createButton('Set Overlay Position', setOverlayPosition, { classes: ['nisbutton'] }),
    Overlay2PositionButton: _a1sauce__WEBPACK_IMPORTED_MODULE_0__.createButton('Set Overlay 2 Position', setOverlayPosition2, { classes: ['nisbutton', 'beta-only'] }),
    Overlay3PositionButton: _a1sauce__WEBPACK_IMPORTED_MODULE_0__.createButton('Set Overlay 3 Position', setOverlayPosition3, { classes: ['nisbutton', 'beta-only'] }),
    ScaleHeader: _a1sauce__WEBPACK_IMPORTED_MODULE_0__.createHeading('h3', 'Scale'),
    UIScale: _a1sauce__WEBPACK_IMPORTED_MODULE_0__.createRangeSetting('uiScale', 'Adjusts the size of the Overlay', {
        defaultValue: '100',
        min: 50,
        max: 200,
    }),
    UIScale2: _a1sauce__WEBPACK_IMPORTED_MODULE_0__.createRangeSetting('uiScale2', 'Adjusts the size of the second Overlay', {
        classes: ['beta-only'],
        defaultValue: '100',
        min: 50,
        max: 200,
    }),
    UIScale3: _a1sauce__WEBPACK_IMPORTED_MODULE_0__.createRangeSetting('uiScale3', 'Adjusts the size of the third Overlay', {
        classes: ['beta-only'],
        defaultValue: '100',
        min: 50,
        max: 200,
    }),
    delayHeader: _a1sauce__WEBPACK_IMPORTED_MODULE_0__.createHeading('h3', 'Delay Compensation'),
    DelayAdjustment: _a1sauce__WEBPACK_IMPORTED_MODULE_0__.createRangeSetting('delayAdjustment', "Subtracts time from visible countdowns to adjust for overlay delay", {
        defaultValue: (_g = _a1sauce__WEBPACK_IMPORTED_MODULE_0__.getSetting('delayAdjustment')) !== null && _g !== void 0 ? _g : '1',
        min: 0,
        max: 5,
        unit: 's',
    }),
    OverlayRefreshHeader: _a1sauce__WEBPACK_IMPORTED_MODULE_0__.createHeading('h3', 'Refresh Rate'),
    OverlayRefreshRate: _a1sauce__WEBPACK_IMPORTED_MODULE_0__.createRangeSetting('overlayRefreshRate', 'The rate that the overlay should refresh - in milliseconds. Requires reloading to take effect.', { defaultValue: '50', min: 20, max: 500, unit: 'ms' }),
    endOverlay: _a1sauce__WEBPACK_IMPORTED_MODULE_0__.createSeperator(),
    SearchHeader: _a1sauce__WEBPACK_IMPORTED_MODULE_0__.createHeading('h3', 'Interface Search Speed'),
    SearchSpeed: _a1sauce__WEBPACK_IMPORTED_MODULE_0__.createRangeSetting('loopSpeed', 'Lower value will detect changes faster but may cause hits to overall performance. Adjust at your own risk - the default value should generally be fine. Requires reloading to take effect.', {
        defaultValue: '150',
        min: 50,
        max: 300,
        unit: 'ms',
    }),
    endSearch: _a1sauce__WEBPACK_IMPORTED_MODULE_0__.createSeperator(),
    ProfileManager: _a1sauce__WEBPACK_IMPORTED_MODULE_0__.createProfileManager(),
    ResetHeader: _a1sauce__WEBPACK_IMPORTED_MODULE_0__.createHeading('h3', 'Reset Config'),
    ResetText: _a1sauce__WEBPACK_IMPORTED_MODULE_0__.createText("This will reset your configuration and reload the plugin in an attempt to solve any problems caused by missing or bad values"),
    resetButton: _a1sauce__WEBPACK_IMPORTED_MODULE_0__.createButton('Reset All Settings', deleteLocalStorage, { classes: ['nisbutton'] }),
    endreset: _a1sauce__WEBPACK_IMPORTED_MODULE_0__.createSeperator(),
    troubleshootingHeader: _a1sauce__WEBPACK_IMPORTED_MODULE_0__.createHeading('h3', 'Here is trouble (Make it double!)'),
    debugMode: _a1sauce__WEBPACK_IMPORTED_MODULE_0__.createCheckboxSetting('debugMode', 'Debug mode', false),
    beta: _a1sauce__WEBPACK_IMPORTED_MODULE_0__.createCheckboxSetting('beta', 'Beta Testing', false),
};
settingsObject.BuffsPerRow.addEventListener('click', function () {
    getByID('Buffs').style.setProperty('--maxcount', _a1sauce__WEBPACK_IMPORTED_MODULE_0__.getSetting('buffsPerRow'));
    setGridSize();
    setBigHeadGrid();
});
settingsObject.FadeInactiveBuffs.addEventListener('change', function () {
    helperItems.BetterBuffsBar.classList.toggle('fade', settingsObject.FadeInactiveBuffs.querySelector('input').checked);
});
settingsObject.BigHeadMode.addEventListener('change', function () {
    helperItems.BetterBuffsBar.classList.toggle('big-head-mode', settingsObject.BigHeadMode.querySelector('input').checked);
    setBigHeadMode();
    setBigHeadGrid();
});
settingsObject.BigHeadPosition.addEventListener('change', function () {
    setBigHeadMode();
    setBigHeadGrid();
});
settingsObject.BlinkExpiredBuffs.addEventListener('change', function () {
    helperItems.BetterBuffsBar.classList.toggle('blink-maintainables', settingsObject.BlinkExpiredBuffs.querySelector('input').checked);
});
settingsObject.UIScale.addEventListener('change', function () {
    getByID('Buffs').style.setProperty('--scale', _a1sauce__WEBPACK_IMPORTED_MODULE_0__.getSetting('uiScale'));
    if (parseInt(settingsObject.UIScale.querySelector('input').value, 10) < 100) {
        helperItems.TrackedBuffs.classList.add('scaled');
    }
});
settingsObject.ProfileManager.querySelector('.profile-list').addEventListener('change', function () {
    var name = settingsObject.ProfileManager.querySelector('.profile-name');
    var dropdown = settingsObject.ProfileManager.querySelector('.profile-list select');
    name.value = dropdown.value;
});
settingsObject.ProfileManager.querySelector('.load-btn').addEventListener('click', function () {
    setTimeout(function () { }, 100);
    location.reload();
});
settingsObject.OverlayActive.querySelector('input').addEventListener('click', function () {
    setTimeout(function () { }, 100);
    location.reload();
});
settingsObject.Brightness.querySelector('input').addEventListener('change', function (e) {
    document.documentElement.style.setProperty('--brightness', (parseInt(settingsObject.Brightness.querySelector('input').value, 10) / 100).toString());
});
settingsObject.debugMode
    .querySelector('input')
    .addEventListener('change', function () {
    setTimeout(function () { }, 100);
    location.reload();
});
settingsObject.beta.querySelector('input').addEventListener('change', function () {
    setTimeout(function () { }, 100);
    location.reload();
});
window.onload = function () {
    //check if we are running inside alt1 by checking if the alt1 global exists
    if (window.alt1) {
        //tell alt1 about the app
        //this makes alt1 show the add app button when running inside the embedded browser
        //also updates app settings if they are changed
        alt1.identifyAppUrl('./appconfig.json');
        initSettings();
        var settings_1 = document.querySelector('#Settings .container');
        Object.values(settingsObject).forEach(function (val) {
            settings_1.before(val);
        });
        startBetterBuffsBar();
        document.documentElement.style.setProperty('--brightness', (parseInt(settingsObject.Brightness.querySelector('input').value, 10) / 100).toString());
        var mutationConfig = { attributes: false, childList: true, subtree: false };
        var callback = function (mutationList, observer) {
            for (var _i = 0, mutationList_1 = mutationList; _i < mutationList_1.length; _i++) {
                var mutation = mutationList_1[_i];
                if (mutation.type === 'childList') {
                    document.documentElement.style.setProperty('--brightness', (parseInt(settingsObject.Brightness.querySelector('input').value, 10) / 100).toString());
                }
            }
        };
        var observer = new MutationObserver(callback);
        observer.observe(helperItems.TrackedBuffs, mutationConfig);
        observer.observe(helperItems.UntrackedBuffs, mutationConfig);
    }
    else {
        var addappurl = "alt1://addapp/".concat(new URL('./appconfig.json', document.location.href).href);
        helperItems.Output.insertAdjacentHTML('beforeend', "\n\t\t\tAlt1 not detected, click <a href='".concat(addappurl, "'>here</a> to add this app to Alt1\n\t\t"));
    }
};

})();

/******/ 	return __webpack_exports__;
/******/ })()
;
});